
FIRM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001349c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08013630  08013630  00014630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d0c  08013d0c  000152c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013d0c  08013d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d14  08013d14  000152c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d14  08013d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013d18  08013d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08013d1c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000152c8  2**0
                  CONTENTS
 10 .bss          000080b4  200002c8  200002c8  000152c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000837c  2000837c  000152c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000152c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f679  00000000  00000000  000152f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000555c  00000000  00000000  00034971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a30  00000000  00000000  00039ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c4  00000000  00000000  0003b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f4f  00000000  00000000  0003ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027303  00000000  00000000  00063c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7748  00000000  00000000  0008af16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015265e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c74  00000000  00000000  001526a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0015a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013614 	.word	0x08013614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	08013614 	.word	0x08013614

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <bmp_init>:
const uint8_t bmp581_reg_int_config = 0x14;
const uint8_t bmp581_reg_int_source = 0x15;
const uint8_t bmp581_reg_ord_config = 0x37;
const uint8_t bmp581_reg_temp_data_xlsb = 0x1D;

int bmp_init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(4); // from data sheet: startup time from power-on to configuration change
 8000f82:	2004      	movs	r0, #4
 8000f84:	f001 ff7a 	bl	8002e7c <HAL_Delay>

    uint8_t result = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75bb      	strb	r3, [r7, #22]
    spi_read(hspi, cs_channel, cs_pin, bmp581_reg_chip_id, &result, 1); // dummy read, discard info
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	88fa      	ldrh	r2, [r7, #6]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 0316 	add.w	r3, r7, #22
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f001 fa8c 	bl	80024bc <spi_read>
    spi_write(hspi, cs_channel, cs_pin, bmp581_reg_cmd,
 8000fa4:	217e      	movs	r1, #126	@ 0x7e
 8000fa6:	88fa      	ldrh	r2, [r7, #6]
 8000fa8:	23b6      	movs	r3, #182	@ 0xb6
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	460b      	mov	r3, r1
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f001 fab0 	bl	8002516 <spi_write>
              0b10110110); // do a soft-reset of the sensor's settings
    HAL_Delay(3);          // from data sheet: delay needed after soft reset
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f001 ff60 	bl	8002e7c <HAL_Delay>

    // do another dummy read
    result = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	75bb      	strb	r3, [r7, #22]
    spi_read(hspi, cs_channel, cs_pin, bmp581_reg_chip_id, &result, 1);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	88fa      	ldrh	r2, [r7, #6]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	f107 0316 	add.w	r3, r7, #22
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f001 fa72 	bl	80024bc <spi_read>
    // verify chip ID read works
    result = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	75bb      	strb	r3, [r7, #22]
    spi_read(hspi, cs_channel, cs_pin, bmp581_reg_chip_id, &result, 1);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 0316 	add.w	r3, r7, #22
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	460b      	mov	r3, r1
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f001 fa64 	bl	80024bc <spi_read>
    if (result != 0x50) {
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	2b50      	cmp	r3, #80	@ 0x50
 8000ff8:	d004      	beq.n	8001004 <bmp_init+0x90>
        serialPrintStr("BMP581 chip ID failed to read");
 8000ffa:	483a      	ldr	r0, [pc, #232]	@ (80010e4 <bmp_init+0x170>)
 8000ffc:	f001 fe84 	bl	8002d08 <serialPrintStr>
        return 1;
 8001000:	2301      	movs	r3, #1
 8001002:	e06b      	b.n	80010dc <bmp_init+0x168>
    }

    // verify device is ready to be configured
    result = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	75bb      	strb	r3, [r7, #22]
    spi_read(hspi, cs_channel, cs_pin, bmp581_reg_status, &result, 1);
 8001008:	2128      	movs	r1, #40	@ 0x28
 800100a:	88fa      	ldrh	r2, [r7, #6]
 800100c:	2301      	movs	r3, #1
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	f107 0316 	add.w	r3, r7, #22
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	460b      	mov	r3, r1
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f001 fa4e 	bl	80024bc <spi_read>
    if (result != 0x02) {
 8001020:	7dbb      	ldrb	r3, [r7, #22]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d004      	beq.n	8001030 <bmp_init+0xbc>
        serialPrintStr("BMP581 not ready to be configured");
 8001026:	4830      	ldr	r0, [pc, #192]	@ (80010e8 <bmp_init+0x174>)
 8001028:	f001 fe6e 	bl	8002d08 <serialPrintStr>
        return 1;
 800102c:	2301      	movs	r3, #1
 800102e:	e055      	b.n	80010dc <bmp_init+0x168>
    }

    // verify software reset is recognized as complete by the interrupt status register
    result = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	75bb      	strb	r3, [r7, #22]
    spi_read(hspi, cs_channel, cs_pin, bmp581_reg_int_status, &result, 1);
 8001034:	2127      	movs	r1, #39	@ 0x27
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	2301      	movs	r3, #1
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	f107 0316 	add.w	r3, r7, #22
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	460b      	mov	r3, r1
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f001 fa38 	bl	80024bc <spi_read>
    if ((result & 0x10) == 0) { // check that bit 4 (POR) is 1
 800104c:	7dbb      	ldrb	r3, [r7, #22]
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	2b00      	cmp	r3, #0
 8001054:	d104      	bne.n	8001060 <bmp_init+0xec>
        serialPrintStr("BMP581 software reset failed");
 8001056:	4825      	ldr	r0, [pc, #148]	@ (80010ec <bmp_init+0x178>)
 8001058:	f001 fe56 	bl	8002d08 <serialPrintStr>
        return 1;
 800105c:	2301      	movs	r3, #1
 800105e:	e03d      	b.n	80010dc <bmp_init+0x168>
    }

    // enable pressure measurements, sets 1x over-sampling (no OSR) for pressure and temperature.
    spi_write(hspi, cs_channel, cs_pin, bmp581_reg_osr_config, 0b01000000);
 8001060:	2136      	movs	r1, #54	@ 0x36
 8001062:	88fa      	ldrh	r2, [r7, #6]
 8001064:	2340      	movs	r3, #64	@ 0x40
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	460b      	mov	r3, r1
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f001 fa52 	bl	8002516 <spi_write>
    // enable interrupt pin, set to active-low, open-drain, latched mode
    spi_write(hspi, cs_channel, cs_pin, bmp581_reg_int_config, 0b00111001);
 8001072:	2114      	movs	r1, #20
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	2339      	movs	r3, #57	@ 0x39
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	460b      	mov	r3, r1
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f001 fa49 	bl	8002516 <spi_write>
    // set the source of the interrupt signal to be on data-ready
    spi_write(hspi, cs_channel, cs_pin, bmp581_reg_int_source, 0b00000001);
 8001084:	2115      	movs	r1, #21
 8001086:	88fa      	ldrh	r2, [r7, #6]
 8001088:	2301      	movs	r3, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	460b      	mov	r3, r1
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f001 fa40 	bl	8002516 <spi_write>
    // disable deep-sleep, set to max ODR, set to continuous mode
    uint8_t intended_ord_config_setting = 0b10000011;
 8001096:	2383      	movs	r3, #131	@ 0x83
 8001098:	75fb      	strb	r3, [r7, #23]
    spi_write(hspi, cs_channel, cs_pin, bmp581_reg_ord_config, intended_ord_config_setting);
 800109a:	2137      	movs	r1, #55	@ 0x37
 800109c:	88fa      	ldrh	r2, [r7, #6]
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	460b      	mov	r3, r1
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f001 fa35 	bl	8002516 <spi_write>
    // continuous mode actually ignores the ODR bits that were set, and uses the OSR to determine
    // the ODR (498hz with 1x OSR)

    // verify one of the writes works, error otherwise
    result = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	75bb      	strb	r3, [r7, #22]
    spi_read(hspi, cs_channel, cs_pin, bmp581_reg_ord_config, &result, 1);
 80010b0:	2137      	movs	r1, #55	@ 0x37
 80010b2:	88fa      	ldrh	r2, [r7, #6]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 0316 	add.w	r3, r7, #22
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 f9fa 	bl	80024bc <spi_read>
    if (result != intended_ord_config_setting) {
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	7dfa      	ldrb	r2, [r7, #23]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d004      	beq.n	80010da <bmp_init+0x166>
        serialPrintStr("BMP581 configuration write failed");
 80010d0:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <bmp_init+0x17c>)
 80010d2:	f001 fe19 	bl	8002d08 <serialPrintStr>
        return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <bmp_init+0x168>
    }
    return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	08013630 	.word	0x08013630
 80010e8:	08013650 	.word	0x08013650
 80010ec:	08013674 	.word	0x08013674
 80010f0:	08013694 	.word	0x08013694

080010f4 <bmp_read>:

int bmp_read(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin,
             BMPPacket_t* packet) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	80fb      	strh	r3, [r7, #6]
    // clear interrupt (pulls interrupt back up high) and verify new data is ready
    uint8_t data_ready = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
    spi_read(hspi, cs_channel, cs_pin, bmp581_reg_int_status, &data_ready, 1);
 8001108:	2127      	movs	r1, #39	@ 0x27
 800110a:	88fa      	ldrh	r2, [r7, #6]
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	f107 0317 	add.w	r3, r7, #23
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	460b      	mov	r3, r1
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f001 f9ce 	bl	80024bc <spi_read>
    if (data_ready & 0x01) { // bit 0 (LSB) will be 1 if new data is ready
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d035      	beq.n	8001196 <bmp_read+0xa2>
        // temperature and pressure are both 24 bit values, with the data in 3 registers each
        // burst read 6 registers starting from XLSB of temp, to MSB of pressure (0x1D -> 0x22)
        uint8_t raw_data[6];
        spi_read(hspi, cs_channel, cs_pin, bmp581_reg_temp_data_xlsb, raw_data, 6);
 800112a:	211d      	movs	r1, #29
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	2306      	movs	r3, #6
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	460b      	mov	r3, r1
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f001 f9bd 	bl	80024bc <spi_read>
        // bit shift the raw data, MSB shifts 16 bits left, LSB 8 bits left, and XLSB rightmost
        int32_t raw_temp = ((int32_t)raw_data[2] << 16) | ((int32_t)raw_data[1] << 8) | raw_data[0];
 8001142:	7cbb      	ldrb	r3, [r7, #18]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	7c7b      	ldrb	r3, [r7, #17]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	4313      	orrs	r3, r2
 800114c:	7c3a      	ldrb	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
        uint32_t raw_pres =
            ((uint32_t)raw_data[5] << 16) | ((uint32_t)raw_data[4] << 8) | raw_data[3];
 8001152:	7d7b      	ldrb	r3, [r7, #21]
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	7d3b      	ldrb	r3, [r7, #20]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	4313      	orrs	r3, r2
 800115c:	7cfa      	ldrb	r2, [r7, #19]
        uint32_t raw_pres =
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        // datasheet instructs to divide raw temperature by 2^16 to get value in celcius, and
        // divide raw pressure by 2^6 to get value in Pascals
        packet->temperature = raw_temp / 65536.0f;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80011a0 <bmp_read+0xac>
 8001170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	edc3 7a00 	vstr	s15, [r3]
        packet->pressure = raw_pres / 64.0f;
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001184:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80011a4 <bmp_read+0xb0>
 8001188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	edc3 7a01 	vstr	s15, [r3, #4]
        // serialPrintFloat(temp);
        // serialPrintFloat(pres);
        return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <bmp_read+0xa4>
    }
    return 1;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	47800000 	.word	0x47800000
 80011a4:	42800000 	.word	0x42800000

080011a8 <sign_extend_20bit>:

#include "firm_utils.h"

int16_t twos_complement_16(uint8_t msb, uint8_t lsb) { return (int16_t)((msb << 8) | lsb); }

int32_t sign_extend_20bit(uint32_t val) { return (int32_t)(val << 12) >> 12; }
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	031b      	lsls	r3, r3, #12
 80011b4:	131b      	asrs	r3, r3, #12
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <i2c_read>:
 *      Author: Wlsan
 */
#include "i2c_utils.h"

int i2c_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t reg_addr, uint8_t* buffer,
             uint8_t len) {
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b088      	sub	sp, #32
 80011c6:	af04      	add	r7, sp, #16
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
 80011d0:	4613      	mov	r3, r2
 80011d2:	72bb      	strb	r3, [r7, #10]
    // Write the register address, then read the data
    return HAL_I2C_Mem_Read(hi2c, (uint16_t)(dev_addr << 1), (uint16_t)reg_addr,
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	b299      	uxth	r1, r3
 80011dc:	7abb      	ldrb	r3, [r7, #10]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	7e3b      	ldrb	r3, [r7, #24]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2064      	movs	r0, #100	@ 0x64
 80011e6:	9002      	str	r0, [sp, #8]
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f002 ff63 	bl	80040bc <HAL_I2C_Mem_Read>
 80011f6:	4603      	mov	r3, r0
                            I2C_MEMADD_SIZE_8BIT, buffer, len, 100);
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <i2c_write>:

int i2c_write(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t reg_addr, uint8_t data) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	460b      	mov	r3, r1
 8001214:	70bb      	strb	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	707b      	strb	r3, [r7, #1]
    return HAL_I2C_Mem_Write(hi2c, (uint16_t)(dev_addr << 1), (uint16_t)reg_addr,
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	b29b      	uxth	r3, r3
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	b299      	uxth	r1, r3
 8001222:	78bb      	ldrb	r3, [r7, #2]
 8001224:	b29a      	uxth	r2, r3
 8001226:	2364      	movs	r3, #100	@ 0x64
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2301      	movs	r3, #1
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	1c7b      	adds	r3, r7, #1
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f002 fe47 	bl	8003ec8 <HAL_I2C_Mem_Write>
 800123a:	4603      	mov	r3, r0
                             I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <imu_init>:
const uint8_t reg_misc2 = 0x7F;
const uint8_t sreg_ctrl = 0x67;          // IPREG_TOP1 register
const uint8_t ipreg_sys1_reg_166 = 0xA6; // IPREG_SYS1 register
const uint8_t ipreg_sys2_reg_123 = 0x7B; // IPREG_SYS2 register

int imu_init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af02      	add	r7, sp, #8
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]

    HAL_Delay(2); // 3ms delay to allow device to power on
 8001252:	2002      	movs	r0, #2
 8001254:	f001 fe12 	bl	8002e7c <HAL_Delay>

    // Do a dummy read
    uint8_t result = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]
    spi_read(hspi, cs_channel, cs_pin, who_am_i, &result, 1);
 800125c:	2172      	movs	r1, #114	@ 0x72
 800125e:	88fa      	ldrh	r2, [r7, #6]
 8001260:	2301      	movs	r3, #1
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	f107 0317 	add.w	r3, r7, #23
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	460b      	mov	r3, r1
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f001 f924 	bl	80024bc <spi_read>
    result = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	75fb      	strb	r3, [r7, #23]
    // Verify chip ID is 0xE9
    spi_read(hspi, cs_channel, cs_pin, who_am_i, &result, 1);
 8001278:	2172      	movs	r1, #114	@ 0x72
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	2301      	movs	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	f107 0317 	add.w	r3, r7, #23
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f001 f916 	bl	80024bc <spi_read>
    if (result != 0xE9) {
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2be9      	cmp	r3, #233	@ 0xe9
 8001294:	d004      	beq.n	80012a0 <imu_init+0x5c>
        serialPrintStr("icm45686 chip ID failed to read");
 8001296:	487a      	ldr	r0, [pc, #488]	@ (8001480 <imu_init+0x23c>)
 8001298:	f001 fd36 	bl	8002d08 <serialPrintStr>
        return 1;
 800129c:	2301      	movs	r3, #1
 800129e:	e0eb      	b.n	8001478 <imu_init+0x234>
    }

    // issues a soft reset
    spi_write(hspi, cs_channel, cs_pin, reg_misc2, 0b00000010);
 80012a0:	217f      	movs	r1, #127	@ 0x7f
 80012a2:	88fa      	ldrh	r2, [r7, #6]
 80012a4:	2302      	movs	r3, #2
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	460b      	mov	r3, r1
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f001 f932 	bl	8002516 <spi_write>
    HAL_Delay(2); // 3ms delay to allow device to finish reset
 80012b2:	2002      	movs	r0, #2
 80012b4:	f001 fde2 	bl	8002e7c <HAL_Delay>
    result = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	75fb      	strb	r3, [r7, #23]

    // Do another dummy read
    spi_read(hspi, cs_channel, cs_pin, who_am_i, &result, 1);
 80012bc:	2172      	movs	r1, #114	@ 0x72
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	2301      	movs	r3, #1
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	f107 0317 	add.w	r3, r7, #23
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	460b      	mov	r3, r1
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f001 f8f4 	bl	80024bc <spi_read>
    // Verify chip ID is 0xE9
    spi_read(hspi, cs_channel, cs_pin, who_am_i, &result, 1);
 80012d4:	2172      	movs	r1, #114	@ 0x72
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	2301      	movs	r3, #1
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f107 0317 	add.w	r3, r7, #23
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	460b      	mov	r3, r1
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f001 f8e8 	bl	80024bc <spi_read>
    if (result != 0xE9) {
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2be9      	cmp	r3, #233	@ 0xe9
 80012f0:	d004      	beq.n	80012fc <imu_init+0xb8>
        serialPrintStr("icm45686 chip ID failed to read");
 80012f2:	4863      	ldr	r0, [pc, #396]	@ (8001480 <imu_init+0x23c>)
 80012f4:	f001 fd08 	bl	8002d08 <serialPrintStr>
        return 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0bd      	b.n	8001478 <imu_init+0x234>
    }

    // Check bit 1 (soft reset bit) is set back to 0
    spi_read(hspi, cs_channel, cs_pin, reg_misc2, &result, 1);
 80012fc:	217f      	movs	r1, #127	@ 0x7f
 80012fe:	88fa      	ldrh	r2, [r7, #6]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 0317 	add.w	r3, r7, #23
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	460b      	mov	r3, r1
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f001 f8d4 	bl	80024bc <spi_read>
    if ((result & 0x02) != 0) {
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <imu_init+0xe4>
        serialPrintStr("icm45686 software reset failed");
 800131e:	4859      	ldr	r0, [pc, #356]	@ (8001484 <imu_init+0x240>)
 8001320:	f001 fcf2 	bl	8002d08 <serialPrintStr>
        return 1;
 8001324:	2301      	movs	r3, #1
 8001326:	e0a7      	b.n	8001478 <imu_init+0x234>
    }

    // sets accel range to +/- 32g, and ODR to 800hz
    spi_write(hspi, cs_channel, cs_pin, accel_config0, 0b00000110);
 8001328:	211b      	movs	r1, #27
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	2306      	movs	r3, #6
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	460b      	mov	r3, r1
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f001 f8ee 	bl	8002516 <spi_write>
    // sets gyro range to 4000dps, and ODR to 800hz
    spi_write(hspi, cs_channel, cs_pin, gyro_config0, 0b00000110);
 800133a:	211c      	movs	r1, #28
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	2306      	movs	r3, #6
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	460b      	mov	r3, r1
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f001 f8e5 	bl	8002516 <spi_write>
    // fifo set to stream mode, and 2k byte size
    spi_write(hspi, cs_channel, cs_pin, fifo_config0, 0b01000111);
 800134c:	211d      	movs	r1, #29
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	2347      	movs	r3, #71	@ 0x47
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f001 f8dc 	bl	8002516 <spi_write>
    // enable fifo for acceleration and gyroscope
    spi_write(hspi, cs_channel, cs_pin, fifo_config3, 0b00001111);
 800135e:	2121      	movs	r1, #33	@ 0x21
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	230f      	movs	r3, #15
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	460b      	mov	r3, r1
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f001 f8d3 	bl	8002516 <spi_write>
    // disables all interrupts, to allow interrupt settings to be configured
    spi_write(hspi, cs_channel, cs_pin, int1_config0, 0b00000000);
 8001370:	2116      	movs	r1, #22
 8001372:	88fa      	ldrh	r2, [r7, #6]
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	460b      	mov	r3, r1
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f001 f8ca 	bl	8002516 <spi_write>
    // sets interrupt pin to push-pull, latching, and active low
    spi_write(hspi, cs_channel, cs_pin, int1_config2, 0b00000010);
 8001382:	2118      	movs	r1, #24
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	2302      	movs	r3, #2
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	460b      	mov	r3, r1
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f001 f8c1 	bl	8002516 <spi_write>
    // sets interrupt pin to only trigger when data is ready or reset is complete
    spi_write(hspi, cs_channel, cs_pin, int1_config0, 0b10000100);
 8001394:	2116      	movs	r1, #22
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	2384      	movs	r3, #132	@ 0x84
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	460b      	mov	r3, r1
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f001 f8b8 	bl	8002516 <spi_write>

    // big endian mode
    spi_ireg_write(hspi, cs_channel, cs_pin, IPREG_TOP1, (uint16_t)sreg_ctrl, 0b00000010);
 80013a6:	2367      	movs	r3, #103	@ 0x67
 80013a8:	4619      	mov	r1, r3
 80013aa:	88fa      	ldrh	r2, [r7, #6]
 80013ac:	2302      	movs	r3, #2
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	9100      	str	r1, [sp, #0]
 80013b2:	2304      	movs	r3, #4
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f9c2 	bl	8001740 <spi_ireg_write>
    // turn interpolator and FIR filter off for gyro
    spi_ireg_write(hspi, cs_channel, cs_pin, IPREG_SYS1, (uint16_t)ipreg_sys1_reg_166, 0b00001011);
 80013bc:	23a6      	movs	r3, #166	@ 0xa6
 80013be:	4619      	mov	r1, r3
 80013c0:	88fa      	ldrh	r2, [r7, #6]
 80013c2:	230b      	movs	r3, #11
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	9100      	str	r1, [sp, #0]
 80013c8:	2302      	movs	r3, #2
 80013ca:	68b9      	ldr	r1, [r7, #8]
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f9b7 	bl	8001740 <spi_ireg_write>
    // turn interpolator and FIR filter off for acceleration
    spi_ireg_write(hspi, cs_channel, cs_pin, IPREG_SYS2, (uint16_t)ipreg_sys2_reg_123, 0b00010100);
 80013d2:	237b      	movs	r3, #123	@ 0x7b
 80013d4:	4619      	mov	r1, r3
 80013d6:	88fa      	ldrh	r2, [r7, #6]
 80013d8:	2314      	movs	r3, #20
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9100      	str	r1, [sp, #0]
 80013de:	2303      	movs	r3, #3
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f9ac 	bl	8001740 <spi_ireg_write>
    spi_ireg_read(hspi, cs_channel, cs_pin, IPREG_SYS2, (uint16_t)ipreg_sys2_reg_123, &result);
 80013e8:	237b      	movs	r3, #123	@ 0x7b
 80013ea:	4619      	mov	r1, r3
 80013ec:	88fa      	ldrh	r2, [r7, #6]
 80013ee:	f107 0317 	add.w	r3, r7, #23
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	9100      	str	r1, [sp, #0]
 80013f6:	2303      	movs	r3, #3
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f938 	bl	8001670 <spi_ireg_read>
    if (result != 0b00010100) {
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b14      	cmp	r3, #20
 8001404:	d004      	beq.n	8001410 <imu_init+0x1cc>
        serialPrintStr("icm45686 failed to write");
 8001406:	4820      	ldr	r0, [pc, #128]	@ (8001488 <imu_init+0x244>)
 8001408:	f001 fc7e 	bl	8002d08 <serialPrintStr>
        return 1;
 800140c:	2301      	movs	r3, #1
 800140e:	e033      	b.n	8001478 <imu_init+0x234>
    }
    // place both accel and gyro in low noise mode
    spi_write(hspi, cs_channel, cs_pin, pwr_mgmt0, 0b00001111);
 8001410:	2110      	movs	r1, #16
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	230f      	movs	r3, #15
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	460b      	mov	r3, r1
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f001 f87a 	bl	8002516 <spi_write>
    // read to clear any interrupts
    spi_read(hspi, cs_channel, cs_pin, int1_status0, &result, 1);
 8001422:	2119      	movs	r1, #25
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	2301      	movs	r3, #1
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	f107 0317 	add.w	r3, r7, #23
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	460b      	mov	r3, r1
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f001 f841 	bl	80024bc <spi_read>
    spi_read(hspi, cs_channel, cs_pin, int1_status1, &result, 1);
 800143a:	211a      	movs	r1, #26
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f107 0317 	add.w	r3, r7, #23
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	460b      	mov	r3, r1
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f001 f835 	bl	80024bc <spi_read>
    // delay for gyro to get ready
    HAL_Delay(74);
 8001452:	204a      	movs	r0, #74	@ 0x4a
 8001454:	f001 fd12 	bl	8002e7c <HAL_Delay>
    spi_read(hspi, cs_channel, cs_pin, int1_status0, &result, 1);
 8001458:	2119      	movs	r1, #25
 800145a:	88fa      	ldrh	r2, [r7, #6]
 800145c:	2301      	movs	r3, #1
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	f107 0317 	add.w	r3, r7, #23
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	460b      	mov	r3, r1
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f001 f826 	bl	80024bc <spi_read>
    serialPrintStr("ICM45686 setup complete");
 8001470:	4806      	ldr	r0, [pc, #24]	@ (800148c <imu_init+0x248>)
 8001472:	f001 fc49 	bl	8002d08 <serialPrintStr>
    return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	080136b8 	.word	0x080136b8
 8001484:	080136d8 	.word	0x080136d8
 8001488:	080136f8 	.word	0x080136f8
 800148c:	08013714 	.word	0x08013714

08001490 <imu_read>:

int imu_read(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin,
             IMUPacket_t* packet) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	@ 0x50
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	80fb      	strh	r3, [r7, #6]
    uint8_t data_ready = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    // checking (and resetting) interrupt status
    spi_read(hspi, cs_channel, cs_pin, int1_status0, &data_ready, 1);
 80014a6:	2119      	movs	r1, #25
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	460b      	mov	r3, r1
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 ffff 	bl	80024bc <spi_read>
    if (data_ready & 0x04) { // bit 2 is data_ready flag for UI channel
 80014be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80c6 	beq.w	8001658 <imu_read+0x1c8>
        // each packet from the fifo is 20 bytes
        uint8_t raw_data[20];
        spi_read(hspi, cs_channel, cs_pin, fifo_data, raw_data, 20);
 80014cc:	2114      	movs	r1, #20
 80014ce:	88fa      	ldrh	r2, [r7, #6]
 80014d0:	2314      	movs	r3, #20
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	460b      	mov	r3, r1
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 ffec 	bl	80024bc <spi_read>

        // refer to the datasheet section 6.1 "packet structure" for information on the packet
        // structure to see which bytes of the FIFO packet go to which data points.
        // Accel X
        uint32_t temp =
            ((uint32_t)raw_data[1] << 12) | ((uint32_t)raw_data[2] << 4) | (raw_data[17] >> 4);
 80014e4:	7d7b      	ldrb	r3, [r7, #21]
 80014e6:	031a      	lsls	r2, r3, #12
 80014e8:	7dbb      	ldrb	r3, [r7, #22]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4313      	orrs	r3, r2
 80014ee:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80014f2:	0912      	lsrs	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
        uint32_t temp =
 80014f6:	4313      	orrs	r3, r2
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
        int32_t ax = sign_extend_20bit(temp);
 80014fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014fc:	f7ff fe54 	bl	80011a8 <sign_extend_20bit>
 8001500:	6438      	str	r0, [r7, #64]	@ 0x40
        // Accel Y
        temp = ((uint32_t)raw_data[3] << 12) | ((uint32_t)raw_data[4] << 4) | (raw_data[18] >> 4);
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	031a      	lsls	r2, r3, #12
 8001506:	7e3b      	ldrb	r3, [r7, #24]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4313      	orrs	r3, r2
 800150c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001510:	0912      	lsrs	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	4313      	orrs	r3, r2
 8001516:	647b      	str	r3, [r7, #68]	@ 0x44
        int32_t ay = sign_extend_20bit(temp);
 8001518:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800151a:	f7ff fe45 	bl	80011a8 <sign_extend_20bit>
 800151e:	63f8      	str	r0, [r7, #60]	@ 0x3c

        // Accel Z
        temp = ((uint32_t)raw_data[5] << 12) | ((uint32_t)raw_data[6] << 4) | (raw_data[19] >> 4);
 8001520:	7e7b      	ldrb	r3, [r7, #25]
 8001522:	031a      	lsls	r2, r3, #12
 8001524:	7ebb      	ldrb	r3, [r7, #26]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4313      	orrs	r3, r2
 800152a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800152e:	0912      	lsrs	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	4313      	orrs	r3, r2
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
        int32_t az = sign_extend_20bit(temp);
 8001536:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001538:	f7ff fe36 	bl	80011a8 <sign_extend_20bit>
 800153c:	63b8      	str	r0, [r7, #56]	@ 0x38

        // Gyro X
        temp = ((uint32_t)raw_data[7] << 12) | ((uint32_t)raw_data[8] << 4) | (raw_data[17] & 0x0F);
 800153e:	7efb      	ldrb	r3, [r7, #27]
 8001540:	031a      	lsls	r2, r3, #12
 8001542:	7f3b      	ldrb	r3, [r7, #28]
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	431a      	orrs	r2, r3
 8001548:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4313      	orrs	r3, r2
 8001552:	647b      	str	r3, [r7, #68]	@ 0x44
        int32_t gx = sign_extend_20bit(temp);
 8001554:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001556:	f7ff fe27 	bl	80011a8 <sign_extend_20bit>
 800155a:	6378      	str	r0, [r7, #52]	@ 0x34

        // Gyro Y
        temp =
            ((uint32_t)raw_data[9] << 12) | ((uint32_t)raw_data[10] << 4) | (raw_data[18] & 0x0F);
 800155c:	7f7b      	ldrb	r3, [r7, #29]
 800155e:	031a      	lsls	r2, r3, #12
 8001560:	7fbb      	ldrb	r3, [r7, #30]
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	431a      	orrs	r2, r3
 8001566:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800156a:	f003 030f 	and.w	r3, r3, #15
        temp =
 800156e:	4313      	orrs	r3, r2
 8001570:	647b      	str	r3, [r7, #68]	@ 0x44
        int32_t gy = sign_extend_20bit(temp);
 8001572:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001574:	f7ff fe18 	bl	80011a8 <sign_extend_20bit>
 8001578:	6338      	str	r0, [r7, #48]	@ 0x30

        // Gyro Z
        temp =
            ((uint32_t)raw_data[11] << 12) | ((uint32_t)raw_data[12] << 4) | (raw_data[19] & 0x0F);
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	031a      	lsls	r2, r3, #12
 800157e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	431a      	orrs	r2, r3
 8001586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800158a:	f003 030f 	and.w	r3, r3, #15
        temp =
 800158e:	4313      	orrs	r3, r2
 8001590:	647b      	str	r3, [r7, #68]	@ 0x44
        int32_t gz = sign_extend_20bit(temp);
 8001592:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001594:	f7ff fe08 	bl	80011a8 <sign_extend_20bit>
 8001598:	62f8      	str	r0, [r7, #44]	@ 0x2c

        // TODO: determine whether the data should be logged before or after the scale factor
        // is applied.

        // datasheet lists the scale factor for accelerometer to be 16,384 LSB/g when in FIFO mode
        packet->acc_x = (float)ax / 16384.0f;
 800159a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a4:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001664 <imu_read+0x1d4>
 80015a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	edc3 7a00 	vstr	s15, [r3]
        packet->acc_y = (float)ay / 16384.0f;
 80015b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015bc:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001664 <imu_read+0x1d4>
 80015c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	edc3 7a01 	vstr	s15, [r3, #4]
        packet->acc_z = (float)az / 16384.0f;
 80015ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001664 <imu_read+0x1d4>
 80015d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	edc3 7a02 	vstr	s15, [r3, #8]
        // datasheet lists gyroscope scale factor as 131.072 LSB/(deg/s). We will also convert to
        // radians, coming out to 23592.96 / PI
        packet->gyro_x = (float)gx / (23592.96f / pi);
 80015e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ec:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001668 <imu_read+0x1d8>
 80015f0:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 800166c <imu_read+0x1dc>
 80015f4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80015f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	edc3 7a03 	vstr	s15, [r3, #12]
        packet->gyro_y = (float)gy / (23592.96f / pi);
 8001602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800160c:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8001668 <imu_read+0x1d8>
 8001610:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800166c <imu_read+0x1dc>
 8001614:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	edc3 7a04 	vstr	s15, [r3, #16]
        packet->gyro_z = (float)gz / (23592.96f / pi);
 8001622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800162c:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8001668 <imu_read+0x1d8>
 8001630:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 800166c <imu_read+0x1dc>
 8001634:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edc3 7a05 	vstr	s15, [r3, #20]

        // flush the fifo
        spi_write(hspi, cs_channel, cs_pin, fifo_config2, 0b10100000);
 8001642:	2120      	movs	r1, #32
 8001644:	88fa      	ldrh	r2, [r7, #6]
 8001646:	23a0      	movs	r3, #160	@ 0xa0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	460b      	mov	r3, r1
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 ff61 	bl	8002516 <spi_write>
        return 0;
 8001654:	2300      	movs	r3, #0
 8001656:	e000      	b.n	800165a <imu_read+0x1ca>
    }
    return 1; // data was not ready, return error
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	3748      	adds	r7, #72	@ 0x48
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	46800000 	.word	0x46800000
 8001668:	40490fdb 	.word	0x40490fdb
 800166c:	46b851ec 	.word	0x46b851ec

08001670 <spi_ireg_read>:

void spi_ireg_read(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin,
                   IREGMap_t register_map, uint16_t ireg_addr, uint8_t* result) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	460b      	mov	r3, r1
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	4613      	mov	r3, r2
 8001684:	717b      	strb	r3, [r7, #5]
    switch (register_map) {
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d855      	bhi.n	8001738 <spi_ireg_read+0xc8>
 800168c:	a201      	add	r2, pc, #4	@ (adr r2, 8001694 <spi_ireg_read+0x24>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016f1 	.word	0x080016f1
 8001698:	080016a9 	.word	0x080016a9
 800169c:	080016bb 	.word	0x080016bb
 80016a0:	080016cd 	.word	0x080016cd
 80016a4:	080016df 	.word	0x080016df
    case IMEM_SRAM:
        ireg_addr |= 0x0000;
        break;
    case IPREG_BAR:
        ireg_addr |= 0xA000;
 80016a8:	8c3b      	ldrh	r3, [r7, #32]
 80016aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016b2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80016b6:	843b      	strh	r3, [r7, #32]
        break;
 80016b8:	e01b      	b.n	80016f2 <spi_ireg_read+0x82>
    case IPREG_SYS1:
        ireg_addr |= 0xA400;
 80016ba:	8c3b      	ldrh	r3, [r7, #32]
 80016bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016c4:	f443 4324 	orr.w	r3, r3, #41984	@ 0xa400
 80016c8:	843b      	strh	r3, [r7, #32]
        break;
 80016ca:	e012      	b.n	80016f2 <spi_ireg_read+0x82>
    case IPREG_SYS2:
        ireg_addr |= 0xA500;
 80016cc:	8c3b      	ldrh	r3, [r7, #32]
 80016ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016d6:	f443 4325 	orr.w	r3, r3, #42240	@ 0xa500
 80016da:	843b      	strh	r3, [r7, #32]
        break;
 80016dc:	e009      	b.n	80016f2 <spi_ireg_read+0x82>
    case IPREG_TOP1:
        ireg_addr |= 0xA200;
 80016de:	8c3b      	ldrh	r3, [r7, #32]
 80016e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016e8:	f443 4322 	orr.w	r3, r3, #41472	@ 0xa200
 80016ec:	843b      	strh	r3, [r7, #32]
        break;
 80016ee:	e000      	b.n	80016f2 <spi_ireg_read+0x82>
        break;
 80016f0:	bf00      	nop
    default:
        return;
    }
    uint8_t ireg_regs[2];
    ireg_regs[0] = (uint8_t)(ireg_addr >> 8);
 80016f2:	8c3b      	ldrh	r3, [r7, #32]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	753b      	strb	r3, [r7, #20]
    ireg_regs[1] = (uint8_t)(ireg_addr & 0x00FF);
 80016fc:	8c3b      	ldrh	r3, [r7, #32]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	757b      	strb	r3, [r7, #21]

    // Starting the burst write from IREG_ADDR_15_8 means that IREG_ADDR_7_0 will also be
    // written to, since it is auto-incremented (that's what a SPI burst write does).
    // So here, sending 2 bytes means 2 addresses (IREG_ADDR_15_8 and IREG_ADDR_7_0) are
    // configured at once.
    spi_burst_write(hspi, cs_channel, cs_pin, ireg_addr_15_8, ireg_regs, sizeof(ireg_regs));
 8001702:	217c      	movs	r1, #124	@ 0x7c
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	2302      	movs	r3, #2
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	460b      	mov	r3, r1
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 ff25 	bl	8002564 <spi_burst_write>

    // After the write is over and the CS pin is pulled high, result of the the read
    // will be stored in the IREG_DATA register. The `result` pointer will have the value:
    // NOTE: We must wait for a minimum of 4us before reading IREG_DATA:

    HAL_Delay(0); // can only do millisecond delays, so 1ms is enough
 800171a:	2000      	movs	r0, #0
 800171c:	f001 fbae 	bl	8002e7c <HAL_Delay>

    spi_read(hspi, cs_channel, cs_pin, ireg_data, result, 1);
 8001720:	217e      	movs	r1, #126	@ 0x7e
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	460b      	mov	r3, r1
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 fec3 	bl	80024bc <spi_read>
 8001736:	e000      	b.n	800173a <spi_ireg_read+0xca>
        return;
 8001738:	bf00      	nop
}
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <spi_ireg_write>:

void spi_ireg_write(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin,
                    IREGMap_t register_map, uint16_t ireg_addr, uint8_t data) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af02      	add	r7, sp, #8
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	460b      	mov	r3, r1
 8001750:	80fb      	strh	r3, [r7, #6]
 8001752:	4613      	mov	r3, r2
 8001754:	717b      	strb	r3, [r7, #5]
    // combine page with address in as 16 bits
    switch (register_map) {
 8001756:	797b      	ldrb	r3, [r7, #5]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d84d      	bhi.n	80017f8 <spi_ireg_write+0xb8>
 800175c:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <spi_ireg_write+0x24>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	080017c1 	.word	0x080017c1
 8001768:	08001779 	.word	0x08001779
 800176c:	0800178b 	.word	0x0800178b
 8001770:	0800179d 	.word	0x0800179d
 8001774:	080017af 	.word	0x080017af
    case IMEM_SRAM:
        ireg_addr |= 0x0000;
        break;
    case IPREG_BAR:
        ireg_addr |= 0xA000;
 8001778:	8c3b      	ldrh	r3, [r7, #32]
 800177a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800177e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001782:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8001786:	843b      	strh	r3, [r7, #32]
        break;
 8001788:	e01b      	b.n	80017c2 <spi_ireg_write+0x82>
    case IPREG_SYS1:
        ireg_addr |= 0xA400;
 800178a:	8c3b      	ldrh	r3, [r7, #32]
 800178c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001794:	f443 4324 	orr.w	r3, r3, #41984	@ 0xa400
 8001798:	843b      	strh	r3, [r7, #32]
        break;
 800179a:	e012      	b.n	80017c2 <spi_ireg_write+0x82>
    case IPREG_SYS2:
        ireg_addr |= 0xA500;
 800179c:	8c3b      	ldrh	r3, [r7, #32]
 800179e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017a6:	f443 4325 	orr.w	r3, r3, #42240	@ 0xa500
 80017aa:	843b      	strh	r3, [r7, #32]
        break;
 80017ac:	e009      	b.n	80017c2 <spi_ireg_write+0x82>
    case IPREG_TOP1:
        ireg_addr |= 0xA200;
 80017ae:	8c3b      	ldrh	r3, [r7, #32]
 80017b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017b8:	f443 4322 	orr.w	r3, r3, #41472	@ 0xa200
 80017bc:	843b      	strh	r3, [r7, #32]
        break;
 80017be:	e000      	b.n	80017c2 <spi_ireg_write+0x82>
        break;
 80017c0:	bf00      	nop
        return;
    }

    // save the page, register, and data into an array
    uint8_t ireg_regs[3];
    ireg_regs[0] = (uint8_t)(ireg_addr >> 8);
 80017c2:	8c3b      	ldrh	r3, [r7, #32]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	753b      	strb	r3, [r7, #20]
    ireg_regs[1] = (uint8_t)(ireg_addr & 0x00FF);
 80017cc:	8c3b      	ldrh	r3, [r7, #32]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	757b      	strb	r3, [r7, #21]
    ireg_regs[2] = data;
 80017d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017d6:	75bb      	strb	r3, [r7, #22]

    // burst write page,register, and data starting at ireg_addr_15_8
    spi_burst_write(hspi, cs_channel, cs_pin, ireg_addr_15_8, ireg_regs, 3);
 80017d8:	217c      	movs	r1, #124	@ 0x7c
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	2303      	movs	r3, #3
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	460b      	mov	r3, r1
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 feba 	bl	8002564 <spi_burst_write>
    // must wait before next ireg operation
    HAL_Delay(0);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f001 fb43 	bl	8002e7c <HAL_Delay>
 80017f6:	e000      	b.n	80017fa <spi_ireg_write+0xba>
        return;
 80017f8:	bf00      	nop
}
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <logger_write>:

extern DMA_HandleTypeDef hdma_sdio_tx; // Link to the DMA handler to check if busy

TCHAR file_name[32] = {'\0'};

FRESULT logger_write() {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
    if (HAL_DMA_GetState(&hdma_sdio_tx) != HAL_DMA_STATE_READY) {
 8001806:	481f      	ldr	r0, [pc, #124]	@ (8001884 <logger_write+0x84>)
 8001808:	f001 ff20 	bl	800364c <HAL_DMA_GetState>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d004      	beq.n	800181c <logger_write+0x1c>
        serialPrintStr("Full");
 8001812:	481d      	ldr	r0, [pc, #116]	@ (8001888 <logger_write+0x88>)
 8001814:	f001 fa78 	bl	8002d08 <serialPrintStr>
        return FR_DISK_ERR;
 8001818:	2301      	movs	r3, #1
 800181a:	e02e      	b.n	800187a <logger_write+0x7a>
    }

    // Pad the buffer
    for (int i = current_offset; i < BUFFER_SIZE; i++) {
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <logger_write+0x8c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e008      	b.n	8001836 <logger_write+0x36>
        current_buffer[i] = 0;
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <logger_write+0x90>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    for (int i = current_offset; i < BUFFER_SIZE; i++) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800183c:	dbf2      	blt.n	8001824 <logger_write+0x24>
    }

    UINT bytes_written = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]

    // Set fast write so that it doesn't block on the dma request
    // See SD_write for fast implementation
    // We need to set it back because some of the internal SD card functions (like f_expand and
    // f_sync) need the old behavior
    sd_FastWriteFlag = 1;
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <logger_write+0x94>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]
    // We need to log exactly BUFFER_SIZE = sector size in order for this to work in future writes.
    FRESULT fr = f_write(&log_file, current_buffer, BUFFER_SIZE, &bytes_written);
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <logger_write+0x90>)
 800184a:	6819      	ldr	r1, [r3, #0]
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001852:	4811      	ldr	r0, [pc, #68]	@ (8001898 <logger_write+0x98>)
 8001854:	f00d fe0a 	bl	800f46c <f_write>
 8001858:	4603      	mov	r3, r0
 800185a:	72fb      	strb	r3, [r7, #11]
    sd_FastWriteFlag = 0;
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <logger_write+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

    if (fr != FR_OK) {
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <logger_write+0x72>
        serialPrintStr("ERR logger_write");
 8001868:	480c      	ldr	r0, [pc, #48]	@ (800189c <logger_write+0x9c>)
 800186a:	f001 fa4d 	bl	8002d08 <serialPrintStr>
        return fr;
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	e003      	b.n	800187a <logger_write+0x7a>
    } else {
        serialPrintStr(file_name);
 8001872:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <logger_write+0xa0>)
 8001874:	f001 fa48 	bl	8002d08 <serialPrintStr>
    }

    return fr;
 8001878:	7afb      	ldrb	r3, [r7, #11]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200064f8 	.word	0x200064f8
 8001888:	0801372c 	.word	0x0801372c
 800188c:	200042e4 	.word	0x200042e4
 8001890:	20000000 	.word	0x20000000
 8001894:	2000661c 	.word	0x2000661c
 8001898:	200042e8 	.word	0x200042e8
 800189c:	08013734 	.word	0x08013734
 80018a0:	2000634c 	.word	0x2000634c

080018a4 <logger_swap_buffers>:

void logger_swap_buffers() {
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
    if (current_buffer == buffer0) {
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <logger_swap_buffers+0x2c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a09      	ldr	r2, [pc, #36]	@ (80018d4 <logger_swap_buffers+0x30>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d103      	bne.n	80018ba <logger_swap_buffers+0x16>
        current_buffer = buffer1;
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <logger_swap_buffers+0x2c>)
 80018b4:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <logger_swap_buffers+0x34>)
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e002      	b.n	80018c0 <logger_swap_buffers+0x1c>
    } else {
        current_buffer = buffer0;
 80018ba:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <logger_swap_buffers+0x2c>)
 80018bc:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <logger_swap_buffers+0x30>)
 80018be:	601a      	str	r2, [r3, #0]
    }

    current_offset = 0;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <logger_swap_buffers+0x38>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000000 	.word	0x20000000
 80018d4:	200002e4 	.word	0x200002e4
 80018d8:	200022e4 	.word	0x200022e4
 80018dc:	200042e4 	.word	0x200042e4

080018e0 <logger_write_header>:

// Writes the header to the log file
void logger_write_header() {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
    // The length needs to be 4 byte aligned because the struts we are logging are 4 byte aligned
    // (they have floats).
    const char* header = "FIRM LOG v0.1\n";
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <logger_write_header+0x70>)
 80018e8:	60bb      	str	r3, [r7, #8]
    size_t len = strlen(header);
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f7fe fcc0 	bl	8000270 <strlen>
 80018f0:	6078      	str	r0, [r7, #4]
    int padded_len = ((len + 3) / 4) * 4;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3303      	adds	r3, #3
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	603b      	str	r3, [r7, #0]

    logger_ensure_capacity(padded_len);
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f000 f8d1 	bl	8001aa4 <logger_ensure_capacity>

    strcpy(current_buffer + current_offset, header);
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <logger_write_header+0x74>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <logger_write_header+0x78>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	4618      	mov	r0, r3
 8001910:	f00f fe29 	bl	8011566 <strcpy>

    // Fill the remaining space with zeros
    for (int i = len; i < padded_len; i++) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e00b      	b.n	8001932 <logger_write_header+0x52>
        current_buffer[current_offset + i] = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <logger_write_header+0x74>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <logger_write_header+0x78>)
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	440b      	add	r3, r1
 8001926:	4413      	add	r3, r2
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
    for (int i = len; i < padded_len; i++) {
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	dbef      	blt.n	800191a <logger_write_header+0x3a>
    }

    current_offset += padded_len;
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <logger_write_header+0x78>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <logger_write_header+0x78>)
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	08013748 	.word	0x08013748
 8001954:	20000000 	.word	0x20000000
 8001958:	200042e4 	.word	0x200042e4

0800195c <logger_init>:

FRESULT logger_init() {
 800195c:	b580      	push	{r7, lr}
 800195e:	b094      	sub	sp, #80	@ 0x50
 8001960:	af00      	add	r7, sp, #0
    // Re-initialize SD
    if (BSP_SD_Init() != MSD_OK) {
 8001962:	f009 fa07 	bl	800ad74 <BSP_SD_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <logger_init+0x14>
        return FR_NOT_READY;
 800196c:	2303      	movs	r3, #3
 800196e:	e085      	b.n	8001a7c <logger_init+0x120>
    }

    // Re-initialize FATFS
    if (FATFS_UnLinkDriver(SDPath) != 0) {
 8001970:	4844      	ldr	r0, [pc, #272]	@ (8001a84 <logger_init+0x128>)
 8001972:	f00e fa9d 	bl	800feb0 <FATFS_UnLinkDriver>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <logger_init+0x24>
        return FR_NOT_READY;
 800197c:	2303      	movs	r3, #3
 800197e:	e07d      	b.n	8001a7c <logger_init+0x120>
    }
    if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) {
 8001980:	4940      	ldr	r1, [pc, #256]	@ (8001a84 <logger_init+0x128>)
 8001982:	4841      	ldr	r0, [pc, #260]	@ (8001a88 <logger_init+0x12c>)
 8001984:	f00e fa4c 	bl	800fe20 <FATFS_LinkDriver>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <logger_init+0x36>
        return FR_NOT_READY;
 800198e:	2303      	movs	r3, #3
 8001990:	e074      	b.n	8001a7c <logger_init+0x120>
    }

    // Mount file system
    FRESULT fr = f_mount(&fs, SDPath, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	493b      	ldr	r1, [pc, #236]	@ (8001a84 <logger_init+0x128>)
 8001996:	483d      	ldr	r0, [pc, #244]	@ (8001a8c <logger_init+0x130>)
 8001998:	f00d fb5a 	bl	800f050 <f_mount>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    if (fr != FR_OK) {
 80019a2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <logger_init+0x5e>
        f_mount(NULL, SDPath, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	4935      	ldr	r1, [pc, #212]	@ (8001a84 <logger_init+0x128>)
 80019ae:	2000      	movs	r0, #0
 80019b0:	f00d fb4e 	bl	800f050 <f_mount>
        return fr;
 80019b4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80019b8:	e060      	b.n	8001a7c <logger_init+0x120>
    }

    uint8_t file_index = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    DIR dj;
    FILINFO fno;

    // Find the next available log file
    do {
        file_index++;
 80019c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019c4:	3301      	adds	r3, #1
 80019c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        sprintf(file_name, "log%i.txt", file_index);
 80019ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019ce:	461a      	mov	r2, r3
 80019d0:	492f      	ldr	r1, [pc, #188]	@ (8001a90 <logger_init+0x134>)
 80019d2:	4830      	ldr	r0, [pc, #192]	@ (8001a94 <logger_init+0x138>)
 80019d4:	f00f fce2 	bl	801139c <siprintf>
        fr = f_findfirst(&dj, &fno, "/", file_name);
 80019d8:	4639      	mov	r1, r7
 80019da:	f107 0018 	add.w	r0, r7, #24
 80019de:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <logger_init+0x138>)
 80019e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a98 <logger_init+0x13c>)
 80019e2:	f00e f82d 	bl	800fa40 <f_findfirst>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    } while (fr == FR_OK && fno.fname[0]);
 80019ec:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <logger_init+0x9e>
 80019f4:	7a7b      	ldrb	r3, [r7, #9]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1e2      	bne.n	80019c0 <logger_init+0x64>

    if (fr != FR_OK) {
 80019fa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <logger_init+0xac>
        return fr;
 8001a02:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a06:	e039      	b.n	8001a7c <logger_init+0x120>
    }

    // Open the file
    fr = f_open(&log_file, file_name, FA_CREATE_NEW | FA_WRITE);
 8001a08:	2206      	movs	r2, #6
 8001a0a:	4922      	ldr	r1, [pc, #136]	@ (8001a94 <logger_init+0x138>)
 8001a0c:	4823      	ldr	r0, [pc, #140]	@ (8001a9c <logger_init+0x140>)
 8001a0e:	f00d fb65 	bl	800f0dc <f_open>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    if (fr != FR_OK) {
 8001a18:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <logger_init+0xd4>
        f_mount(0, SDPath, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	4918      	ldr	r1, [pc, #96]	@ (8001a84 <logger_init+0x128>)
 8001a24:	2000      	movs	r0, #0
 8001a26:	f00d fb13 	bl	800f050 <f_mount>
        return fr;
 8001a2a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a2e:	e025      	b.n	8001a7c <logger_init+0x120>
    }

    // Allocate a contiguous area to the file
    // We need to do this to avoid f_sync (slow!)
    {
        fr = f_truncate(&log_file);
 8001a30:	481a      	ldr	r0, [pc, #104]	@ (8001a9c <logger_init+0x140>)
 8001a32:	f00e f823 	bl	800fa7c <f_truncate>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        HAL_Delay(10);
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	f001 fa1d 	bl	8002e7c <HAL_Delay>
        if (fr != FR_OK) {
 8001a42:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <logger_init+0xf4>
            return fr;
 8001a4a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a4e:	e015      	b.n	8001a7c <logger_init+0x120>
        }

        // 2e8 bytes = (1 hour * ((8192 bytes * 4.4hz) * 1.5))
        fr = f_expand(&log_file, 2e8, 1);
 8001a50:	2201      	movs	r2, #1
 8001a52:	4913      	ldr	r1, [pc, #76]	@ (8001aa0 <logger_init+0x144>)
 8001a54:	4811      	ldr	r0, [pc, #68]	@ (8001a9c <logger_init+0x140>)
 8001a56:	f00e f8a5 	bl	800fba4 <f_expand>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        if (fr != FR_OK) {
 8001a60:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <logger_init+0x112>
            return fr;
 8001a68:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a6c:	e006      	b.n	8001a7c <logger_init+0x120>
        }
    }
    f_sync(&log_file);
 8001a6e:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <logger_init+0x140>)
 8001a70:	f00d fe90 	bl	800f794 <f_sync>

    logger_write_header();
 8001a74:	f7ff ff34 	bl	80018e0 <logger_write_header>

    return fr;
 8001a78:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3750      	adds	r7, #80	@ 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20006618 	.word	0x20006618
 8001a88:	08013900 	.word	0x08013900
 8001a8c:	20005318 	.word	0x20005318
 8001a90:	08013758 	.word	0x08013758
 8001a94:	2000634c 	.word	0x2000634c
 8001a98:	08013764 	.word	0x08013764
 8001a9c:	200042e8 	.word	0x200042e8
 8001aa0:	0bebc200 	.word	0x0bebc200

08001aa4 <logger_ensure_capacity>:

FRESULT logger_ensure_capacity(int capacity) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    if (current_offset + capacity > BUFFER_SIZE) {
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <logger_ensure_capacity+0x28>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ab8:	d903      	bls.n	8001ac2 <logger_ensure_capacity+0x1e>
        logger_write();
 8001aba:	f7ff fea1 	bl	8001800 <logger_write>

        logger_swap_buffers();
 8001abe:	f7ff fef1 	bl	80018a4 <logger_swap_buffers>
    }

    // TODO error handling
    return FR_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200042e4 	.word	0x200042e4

08001ad0 <logger_log_type_timestamp>:

void logger_log_type_timestamp(char type) {
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
    // This should advance by TYPE_TIMESTAMP_SIZE
    current_buffer[current_offset++] = type;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <logger_log_type_timestamp+0x74>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	1c59      	adds	r1, r3, #1
 8001ae4:	4818      	ldr	r0, [pc, #96]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001ae6:	6001      	str	r1, [r0, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	701a      	strb	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 8001aee:	f001 f9b9 	bl	8002e64 <HAL_GetTick>
 8001af2:	60f8      	str	r0, [r7, #12]
    current_buffer[current_offset++] = (current_time >> 16) & 0xFF;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	0c1c      	lsrs	r4, r3, #16
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <logger_log_type_timestamp+0x74>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c59      	adds	r1, r3, #1
 8001b02:	4811      	ldr	r0, [pc, #68]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001b04:	6001      	str	r1, [r0, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	b2e2      	uxtb	r2, r4
 8001b0a:	701a      	strb	r2, [r3, #0]
    current_buffer[current_offset++] = (current_time >> 8) & 0xFF;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	0a1c      	lsrs	r4, r3, #8
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <logger_log_type_timestamp+0x74>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1c59      	adds	r1, r3, #1
 8001b1a:	480b      	ldr	r0, [pc, #44]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001b1c:	6001      	str	r1, [r0, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2e2      	uxtb	r2, r4
 8001b22:	701a      	strb	r2, [r3, #0]
    current_buffer[current_offset++] = current_time & 0xFF;
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <logger_log_type_timestamp+0x74>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	1c59      	adds	r1, r3, #1
 8001b2e:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <logger_log_type_timestamp+0x78>)
 8001b30:	6001      	str	r1, [r0, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	200042e4 	.word	0x200042e4

08001b4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001b52:	f001 f921 	bl	8002d98 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001b56:	f000 f8cd 	bl	8001cf4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001b5a:	f000 fa45 	bl	8001fe8 <MX_GPIO_Init>
    MX_DMA_Init();
 8001b5e:	f000 fa1b 	bl	8001f98 <MX_DMA_Init>
    MX_I2C1_Init();
 8001b62:	f000 f931 	bl	8001dc8 <MX_I2C1_Init>
    MX_I2C2_Init();
 8001b66:	f000 f95d 	bl	8001e24 <MX_I2C2_Init>
    MX_SDIO_SD_Init();
 8001b6a:	f000 f989 	bl	8001e80 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8001b6e:	f009 f8e7 	bl	800ad40 <MX_FATFS_Init>
    MX_SPI2_Init();
 8001b72:	f000 f9a5 	bl	8001ec0 <MX_SPI2_Init>
    MX_SPI3_Init();
 8001b76:	f000 f9d9 	bl	8001f2c <MX_SPI3_Init>
    MX_USB_DEVICE_Init();
 8001b7a:	f00e f9a7 	bl	800fecc <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */

    // Setup the SD card
    FRESULT res = logger_init();
 8001b7e:	f7ff feed 	bl	800195c <logger_init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]
    if (res) {
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <main+0x4a>
        serialPrintStr("Failed to initialized the logger (SD card)");
 8001b8c:	484f      	ldr	r0, [pc, #316]	@ (8001ccc <main+0x180>)
 8001b8e:	f001 f8bb 	bl	8002d08 <serialPrintStr>
        Error_Handler();
 8001b92:	f000 fb09 	bl	80021a8 <Error_Handler>
    }

    // drive chip select pins high
    // Note: We can't have these in the bmp581/imu init functions, because those somehow mess up
    // with the initialization.
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // bmp581 pin
 8001b96:	2201      	movs	r2, #1
 8001b98:	2104      	movs	r1, #4
 8001b9a:	484d      	ldr	r0, [pc, #308]	@ (8001cd0 <main+0x184>)
 8001b9c:	f002 f804 	bl	8003ba8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // imu pin
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ba6:	484b      	ldr	r0, [pc, #300]	@ (8001cd4 <main+0x188>)
 8001ba8:	f001 fffe 	bl	8003ba8 <HAL_GPIO_WritePin>
    HAL_Delay(500); // purely for debug purposes, allows time to connect to USB serial terminal
 8001bac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bb0:	f001 f964 	bl	8002e7c <HAL_Delay>

    if (imu_init(&hspi2, GPIOB, GPIO_PIN_9)) {
 8001bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bb8:	4946      	ldr	r1, [pc, #280]	@ (8001cd4 <main+0x188>)
 8001bba:	4847      	ldr	r0, [pc, #284]	@ (8001cd8 <main+0x18c>)
 8001bbc:	f7ff fb42 	bl	8001244 <imu_init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <main+0x7e>
        Error_Handler();
 8001bc6:	f000 faef 	bl	80021a8 <Error_Handler>
    }
    if (bmp_init(&hspi2, GPIOC, GPIO_PIN_2)) {
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4940      	ldr	r1, [pc, #256]	@ (8001cd0 <main+0x184>)
 8001bce:	4842      	ldr	r0, [pc, #264]	@ (8001cd8 <main+0x18c>)
 8001bd0:	f7ff f9d0 	bl	8000f74 <bmp_init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <main+0x92>
        Error_Handler();
 8001bda:	f000 fae5 	bl	80021a8 <Error_Handler>
    }
    if (mag_init(&hi2c1)) {
 8001bde:	483f      	ldr	r0, [pc, #252]	@ (8001cdc <main+0x190>)
 8001be0:	f000 fae8 	bl	80021b4 <mag_init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <main+0xa2>
        Error_Handler();
 8001bea:	f000 fadd 	bl	80021a8 <Error_Handler>
    }

    // incrementing value for magnetometer calibration
    uint8_t mag_flip = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	71fb      	strb	r3, [r7, #7]

    // Toggle LED:
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4836      	ldr	r0, [pc, #216]	@ (8001cd0 <main+0x184>)
 8001bf6:	f001 fff0 	bl	8003bda <HAL_GPIO_TogglePin>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        if (bmp_ready) {
 8001bfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ce0 <main+0x194>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <main+0xf2>
            logger_ensure_capacity(sizeof(BMPPacket_t) + TYPE_TIMESTAMP_SIZE);
 8001c02:	200c      	movs	r0, #12
 8001c04:	f7ff ff4e 	bl	8001aa4 <logger_ensure_capacity>
            BMPPacket_t* bmp_packet =
                (BMPPacket_t*)&current_buffer[current_offset + TYPE_TIMESTAMP_SIZE];
 8001c08:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <main+0x198>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <main+0x19c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3304      	adds	r3, #4
            BMPPacket_t* bmp_packet =
 8001c12:	4413      	add	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
            if (bmp_read(&hspi2, GPIOC, GPIO_PIN_2, bmp_packet) == 0) {
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	492d      	ldr	r1, [pc, #180]	@ (8001cd0 <main+0x184>)
 8001c1c:	482e      	ldr	r0, [pc, #184]	@ (8001cd8 <main+0x18c>)
 8001c1e:	f7ff fa69 	bl	80010f4 <bmp_read>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <main+0xf2>
                // only reset flag if the new data was collected
                bmp_ready = false;
 8001c28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce0 <main+0x194>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
                logger_log_type_timestamp('B');
 8001c2e:	2042      	movs	r0, #66	@ 0x42
 8001c30:	f7ff ff4e 	bl	8001ad0 <logger_log_type_timestamp>
                current_offset += sizeof(BMPPacket_t);
 8001c34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce8 <main+0x19c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3308      	adds	r3, #8
 8001c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce8 <main+0x19c>)
 8001c3c:	6013      	str	r3, [r2, #0]
            }
        }
        if (imu_ready) {
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cec <main+0x1a0>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01e      	beq.n	8001c84 <main+0x138>
            logger_ensure_capacity(sizeof(IMUPacket_t) + TYPE_TIMESTAMP_SIZE);
 8001c46:	201c      	movs	r0, #28
 8001c48:	f7ff ff2c 	bl	8001aa4 <logger_ensure_capacity>
            IMUPacket_t* imu_packet =
                (IMUPacket_t*)&current_buffer[current_offset + TYPE_TIMESTAMP_SIZE];
 8001c4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <main+0x198>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <main+0x19c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3304      	adds	r3, #4
            IMUPacket_t* imu_packet =
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
            if (imu_read(&hspi2, GPIOB, GPIO_PIN_9, imu_packet) == 0) {
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c60:	491c      	ldr	r1, [pc, #112]	@ (8001cd4 <main+0x188>)
 8001c62:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <main+0x18c>)
 8001c64:	f7ff fc14 	bl	8001490 <imu_read>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <main+0x138>
                // only reset flag if the new data was collected
                imu_ready = false;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <main+0x1a0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
                logger_log_type_timestamp('I');
 8001c74:	2049      	movs	r0, #73	@ 0x49
 8001c76:	f7ff ff2b 	bl	8001ad0 <logger_log_type_timestamp>
                current_offset += sizeof(IMUPacket_t);
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <main+0x19c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3318      	adds	r3, #24
 8001c80:	4a19      	ldr	r2, [pc, #100]	@ (8001ce8 <main+0x19c>)
 8001c82:	6013      	str	r3, [r2, #0]
            }
        }
        if (mag_ready) {
 8001c84:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <main+0x1a4>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0b6      	beq.n	8001bfa <main+0xae>
            logger_ensure_capacity(sizeof(MMCPacket_t) + TYPE_TIMESTAMP_SIZE);
 8001c8c:	2010      	movs	r0, #16
 8001c8e:	f7ff ff09 	bl	8001aa4 <logger_ensure_capacity>
            MMCPacket_t* mmc_packet =
                (MMCPacket_t*)&current_buffer[current_offset + TYPE_TIMESTAMP_SIZE];
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <main+0x198>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <main+0x19c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3304      	adds	r3, #4
            MMCPacket_t* mmc_packet =
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
            if (mag_read(&hi2c1, mmc_packet, &mag_flip) == 0) {
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <main+0x190>)
 8001ca8:	f000 fb0c 	bl	80022c4 <mag_read>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1a3      	bne.n	8001bfa <main+0xae>
                // only reset flag if the new data was collected
                mag_ready = false;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <main+0x1a4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
                logger_log_type_timestamp('M');
 8001cb8:	204d      	movs	r0, #77	@ 0x4d
 8001cba:	f7ff ff09 	bl	8001ad0 <logger_log_type_timestamp>
                current_offset += sizeof(MMCPacket_t);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <main+0x19c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <main+0x19c>)
 8001cc6:	6013      	str	r3, [r2, #0]
        if (bmp_ready) {
 8001cc8:	e797      	b.n	8001bfa <main+0xae>
 8001cca:	bf00      	nop
 8001ccc:	08013768 	.word	0x08013768
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	20006558 	.word	0x20006558
 8001cdc:	2000636c 	.word	0x2000636c
 8001ce0:	20006608 	.word	0x20006608
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	200042e4 	.word	0x200042e4
 8001cec:	20006609 	.word	0x20006609
 8001cf0:	2000660a 	.word	0x2000660a

08001cf4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	@ 0x50
 8001cf8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	2230      	movs	r2, #48	@ 0x30
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00f fbaf 	bl	8011466 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <SystemClock_Config+0xcc>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <SystemClock_Config+0xcc>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d28:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <SystemClock_Config+0xcc>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <SystemClock_Config+0xd0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <SystemClock_Config+0xd0>)
 8001d3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <SystemClock_Config+0xd0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 6;
 8001d64:	2306      	movs	r3, #6
 8001d66:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8001d68:	23a8      	movs	r3, #168	@ 0xa8
 8001d6a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d70:	2307      	movs	r3, #7
 8001d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 f9d7 	bl	800612c <HAL_RCC_OscConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0x94>
        Error_Handler();
 8001d84:	f000 fa10 	bl	80021a8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8001d88:	230f      	movs	r3, #15
 8001d8a:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d98:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	2105      	movs	r1, #5
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 fc38 	bl	800661c <HAL_RCC_ClockConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <SystemClock_Config+0xc2>
        Error_Handler();
 8001db2:	f000 f9f9 	bl	80021a8 <Error_Handler>
    }
}
 8001db6:	bf00      	nop
 8001db8:	3750      	adds	r7, #80	@ 0x50
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000

08001dc8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001dce:	4a13      	ldr	r2, [pc, #76]	@ (8001e1c <MX_I2C1_Init+0x54>)
 8001dd0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001dd4:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <MX_I2C1_Init+0x58>)
 8001dd6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001de6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dea:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df8:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <MX_I2C1_Init+0x50>)
 8001e06:	f001 ff1b 	bl	8003c40 <HAL_I2C_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001e10:	f000 f9ca 	bl	80021a8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000636c 	.word	0x2000636c
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	00061a80 	.word	0x00061a80

08001e24 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e2a:	4a13      	ldr	r2, [pc, #76]	@ (8001e78 <MX_I2C2_Init+0x54>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e30:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <MX_I2C2_Init+0x58>)
 8001e32:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e46:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001e60:	4804      	ldr	r0, [pc, #16]	@ (8001e74 <MX_I2C2_Init+0x50>)
 8001e62:	f001 feed 	bl	8003c40 <HAL_I2C_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_I2C2_Init+0x4c>
        Error_Handler();
 8001e6c:	f000 f99c 	bl	80021a8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200063c0 	.word	0x200063c0
 8001e78:	40005800 	.word	0x40005800
 8001e7c:	000186a0 	.word	0x000186a0

08001e80 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <MX_SDIO_SD_Init+0x38>)
 8001e86:	4a0d      	ldr	r2, [pc, #52]	@ (8001ebc <MX_SDIO_SD_Init+0x3c>)
 8001e88:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <MX_SDIO_SD_Init+0x38>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <MX_SDIO_SD_Init+0x38>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <MX_SDIO_SD_Init+0x38>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <MX_SDIO_SD_Init+0x38>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <MX_SDIO_SD_Init+0x38>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <MX_SDIO_SD_Init+0x38>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	20006414 	.word	0x20006414
 8001ebc:	40012c00 	.word	0x40012c00

08001ec0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001ec6:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <MX_SPI2_Init+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001ecc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ed0:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ede:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef0:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi2.Init.CRCPolynomial = 10;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001f0c:	220a      	movs	r2, #10
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001f10:	4804      	ldr	r0, [pc, #16]	@ (8001f24 <MX_SPI2_Init+0x64>)
 8001f12:	f006 f881 	bl	8008018 <HAL_SPI_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_SPI2_Init+0x60>
        Error_Handler();
 8001f1c:	f000 f944 	bl	80021a8 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20006558 	.word	0x20006558
 8001f28:	40003800 	.word	0x40003800

08001f2c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI3_Init 1 */

    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration*/
    hspi3.Instance = SPI3;
 8001f30:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <MX_SPI3_Init+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f36:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f3c:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f5c:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f70:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi3.Init.CRCPolynomial = 10;
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f78:	220a      	movs	r2, #10
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001f7c:	4804      	ldr	r0, [pc, #16]	@ (8001f90 <MX_SPI3_Init+0x64>)
 8001f7e:	f006 f84b 	bl	8008018 <HAL_SPI_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_SPI3_Init+0x60>
        Error_Handler();
 8001f88:	f000 f90e 	bl	80021a8 <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */

    /* USER CODE END SPI3_Init 2 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200065b0 	.word	0x200065b0
 8001f94:	40003c00 	.word	0x40003c00

08001f98 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <MX_DMA_Init+0x4c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <MX_DMA_Init+0x4c>)
 8001fa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <MX_DMA_Init+0x4c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	203b      	movs	r0, #59	@ 0x3b
 8001fc0:	f001 f85b 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001fc4:	203b      	movs	r0, #59	@ 0x3b
 8001fc6:	f001 f874 	bl	80030b2 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2045      	movs	r0, #69	@ 0x45
 8001fd0:	f001 f853 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001fd4:	2045      	movs	r0, #69	@ 0x45
 8001fd6:	f001 f86c 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b54      	ldr	r3, [pc, #336]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a53      	ldr	r2, [pc, #332]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b51      	ldr	r3, [pc, #324]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b4d      	ldr	r3, [pc, #308]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a4c      	ldr	r2, [pc, #304]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <MX_GPIO_Init+0x16c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	4b46      	ldr	r3, [pc, #280]	@ (8002154 <MX_GPIO_Init+0x16c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a45      	ldr	r2, [pc, #276]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b43      	ldr	r3, [pc, #268]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b3f      	ldr	r3, [pc, #252]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a3e      	ldr	r2, [pc, #248]	@ (8002154 <MX_GPIO_Init+0x16c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b3c      	ldr	r3, [pc, #240]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4b38      	ldr	r3, [pc, #224]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a37      	ldr	r2, [pc, #220]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <MX_GPIO_Init+0x16c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | BMP581_CS_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2107      	movs	r1, #7
 800208e:	4832      	ldr	r0, [pc, #200]	@ (8002158 <MX_GPIO_Init+0x170>)
 8002090:	f001 fd8a 	bl	8003ba8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800209a:	4830      	ldr	r0, [pc, #192]	@ (800215c <MX_GPIO_Init+0x174>)
 800209c:	f001 fd84 	bl	8003ba8 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PC0 PC1 BMP581_CS_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | BMP581_CS_Pin;
 80020a0:	2307      	movs	r3, #7
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4828      	ldr	r0, [pc, #160]	@ (8002158 <MX_GPIO_Init+0x170>)
 80020b8:	f001 fbc2 	bl	8003840 <HAL_GPIO_Init>

    /*Configure GPIO pins : BMP581_Interrupt_Pin IMU_Interrupt_Pin */
    GPIO_InitStruct.Pin = BMP581_Interrupt_Pin | IMU_Interrupt_Pin;
 80020bc:	2348      	movs	r3, #72	@ 0x48
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4821      	ldr	r0, [pc, #132]	@ (8002158 <MX_GPIO_Init+0x170>)
 80020d2:	f001 fbb5 	bl	8003840 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB12 */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	481c      	ldr	r0, [pc, #112]	@ (800215c <MX_GPIO_Init+0x174>)
 80020ec:	f001 fba8 	bl	8003840 <HAL_GPIO_Init>

    /*Configure GPIO pin : Mag_Interrupt_Pin */
    GPIO_InitStruct.Pin = Mag_Interrupt_Pin;
 80020f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Mag_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4815      	ldr	r0, [pc, #84]	@ (800215c <MX_GPIO_Init+0x174>)
 8002108:	f001 fb9a 	bl	8003840 <HAL_GPIO_Init>

    /*Configure GPIO pin : IMU_CS_Pin */
    GPIO_InitStruct.Pin = IMU_CS_Pin;
 800210c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_GPIO_Init+0x174>)
 8002126:	f001 fb8b 	bl	8003840 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2009      	movs	r0, #9
 8002130:	f000 ffa3 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002134:	2009      	movs	r0, #9
 8002136:	f000 ffbc 	bl	80030b2 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2017      	movs	r0, #23
 8002140:	f000 ff9b 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002144:	2017      	movs	r0, #23
 8002146:	f000 ffb4 	bl	80030b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	@ 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40020800 	.word	0x40020800
 800215c:	40020400 	.word	0x40020400

08002160 <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for interrupt pins
 * @note all ISR signals use this function, must check which pin before setting data ready flags
 * @param GPIO_Pin the EXTI pin that triggered the interrupt signal
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BMP581_Interrupt_Pin) {
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d102      	bne.n	8002176 <HAL_GPIO_EXTI_Callback+0x16>
        bmp_ready = true;
 8002170:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == IMU_Interrupt_Pin) {
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b40      	cmp	r3, #64	@ 0x40
 800217a:	d102      	bne.n	8002182 <HAL_GPIO_EXTI_Callback+0x22>
        imu_ready = true;
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == Mag_Interrupt_Pin) {
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002188:	d102      	bne.n	8002190 <HAL_GPIO_EXTI_Callback+0x30>
        mag_ready = true;
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_GPIO_EXTI_Callback+0x44>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
    }
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	20006608 	.word	0x20006608
 80021a0:	20006609 	.word	0x20006609
 80021a4:	2000660a 	.word	0x2000660a

080021a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ac:	b672      	cpsid	i
}
 80021ae:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <Error_Handler+0x8>

080021b4 <mag_init>:
const uint8_t product_id_val = 0x30; // expected value for the product ID register
// value to divide shifted mag value by to get result in microtesla (SI Units)
const float scaling_factor = 131072.0 / 800.0;
const int flip_interval = 10; // number of regular packets between a flipped-sign packet

int mag_init(I2C_HandleTypeDef* hi2c) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	6078      	str	r0, [r7, #4]
    HAL_Delay(14); // 15ms power-on time
 80021bc:	200e      	movs	r0, #14
 80021be:	f000 fe5d 	bl	8002e7c <HAL_Delay>
    uint8_t result = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
    // dummy read, ignore result
    if (i2c_read(hi2c, dev_i2c_addr, product_id1, &result, 1) == HAL_ERROR) {
 80021c6:	2130      	movs	r1, #48	@ 0x30
 80021c8:	202f      	movs	r0, #47	@ 0x2f
 80021ca:	f107 030f 	add.w	r3, r7, #15
 80021ce:	2201      	movs	r2, #1
 80021d0:	9200      	str	r2, [sp, #0]
 80021d2:	4602      	mov	r2, r0
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe fff4 	bl	80011c2 <i2c_read>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d104      	bne.n	80021ea <mag_init+0x36>
        serialPrintStr("I2C read failed HAL ERROR");
 80021e0:	4834      	ldr	r0, [pc, #208]	@ (80022b4 <mag_init+0x100>)
 80021e2:	f000 fd91 	bl	8002d08 <serialPrintStr>
        return 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e060      	b.n	80022ac <mag_init+0xf8>
    }
    // read product ID, check that result is the expected Product ID byte
    result = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
    i2c_read(hi2c, dev_i2c_addr, product_id1, &result, 1);
 80021ee:	2130      	movs	r1, #48	@ 0x30
 80021f0:	202f      	movs	r0, #47	@ 0x2f
 80021f2:	f107 030f 	add.w	r3, r7, #15
 80021f6:	2201      	movs	r2, #1
 80021f8:	9200      	str	r2, [sp, #0]
 80021fa:	4602      	mov	r2, r0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7fe ffe0 	bl	80011c2 <i2c_read>
    if (result != product_id_val) {
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2230      	movs	r2, #48	@ 0x30
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <mag_init+0x60>
        serialPrintStr("MMC5983MA could not read Product ID");
 800220a:	482b      	ldr	r0, [pc, #172]	@ (80022b8 <mag_init+0x104>)
 800220c:	f000 fd7c 	bl	8002d08 <serialPrintStr>
        return 1;
 8002210:	2301      	movs	r3, #1
 8002212:	e04b      	b.n	80022ac <mag_init+0xf8>
    }
    // initiating a software reset
    i2c_write(hi2c, dev_i2c_addr, internal_control1, 0b10000000);
 8002214:	2130      	movs	r1, #48	@ 0x30
 8002216:	220a      	movs	r2, #10
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe fff0 	bl	8001200 <i2c_write>
    HAL_Delay(14); // 15ms power-on time
 8002220:	200e      	movs	r0, #14
 8002222:	f000 fe2b 	bl	8002e7c <HAL_Delay>
    // do dummy read after reset
    i2c_read(hi2c, dev_i2c_addr, product_id1, &result, 1);
 8002226:	2130      	movs	r1, #48	@ 0x30
 8002228:	202f      	movs	r0, #47	@ 0x2f
 800222a:	f107 030f 	add.w	r3, r7, #15
 800222e:	2201      	movs	r2, #1
 8002230:	9200      	str	r2, [sp, #0]
 8002232:	4602      	mov	r2, r0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7fe ffc4 	bl	80011c2 <i2c_read>
    // read product ID, check that result is the expected Product ID byte
    i2c_read(hi2c, dev_i2c_addr, product_id1, &result, 1);
 800223a:	2130      	movs	r1, #48	@ 0x30
 800223c:	202f      	movs	r0, #47	@ 0x2f
 800223e:	f107 030f 	add.w	r3, r7, #15
 8002242:	2201      	movs	r2, #1
 8002244:	9200      	str	r2, [sp, #0]
 8002246:	4602      	mov	r2, r0
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7fe ffba 	bl	80011c2 <i2c_read>
    if (result != product_id_val) {
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2230      	movs	r2, #48	@ 0x30
 8002252:	4293      	cmp	r3, r2
 8002254:	d004      	beq.n	8002260 <mag_init+0xac>
        serialPrintStr("MMC5983MA could not read Product ID after reset");
 8002256:	4819      	ldr	r0, [pc, #100]	@ (80022bc <mag_init+0x108>)
 8002258:	f000 fd56 	bl	8002d08 <serialPrintStr>
        return 1;
 800225c:	2301      	movs	r3, #1
 800225e:	e025      	b.n	80022ac <mag_init+0xf8>
    }

    // check that bit 7 (sw_rst) is back to 0
    i2c_read(hi2c, dev_i2c_addr, internal_control1, &result, 1);
 8002260:	2130      	movs	r1, #48	@ 0x30
 8002262:	200a      	movs	r0, #10
 8002264:	f107 030f 	add.w	r3, r7, #15
 8002268:	2201      	movs	r2, #1
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	4602      	mov	r2, r0
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe ffa7 	bl	80011c2 <i2c_read>
    if (result & 0x80) {
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	b25b      	sxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	da04      	bge.n	8002286 <mag_init+0xd2>
        serialPrintStr("MMC5983MA could not complete software reset");
 800227c:	4810      	ldr	r0, [pc, #64]	@ (80022c0 <mag_init+0x10c>)
 800227e:	f000 fd43 	bl	8002d08 <serialPrintStr>
        return 1;
 8002282:	2301      	movs	r3, #1
 8002284:	e012      	b.n	80022ac <mag_init+0xf8>
    }
    // enable interrupt pin
    i2c_write(hi2c, dev_i2c_addr, internal_control0, 0b00000100);
 8002286:	2130      	movs	r1, #48	@ 0x30
 8002288:	2209      	movs	r2, #9
 800228a:	2304      	movs	r3, #4
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7fe ffb7 	bl	8001200 <i2c_write>
    // set bandwidth to 200hz (4ms measurement time)
    i2c_write(hi2c, dev_i2c_addr, internal_control1, 0b00000001);
 8002292:	2130      	movs	r1, #48	@ 0x30
 8002294:	220a      	movs	r2, #10
 8002296:	2301      	movs	r3, #1
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7fe ffb1 	bl	8001200 <i2c_write>
    // enable continuous measurement mode at 200hz
    i2c_write(hi2c, dev_i2c_addr, internal_control2, 0b00001110);
 800229e:	2130      	movs	r1, #48	@ 0x30
 80022a0:	220b      	movs	r2, #11
 80022a2:	230e      	movs	r3, #14
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7fe ffab 	bl	8001200 <i2c_write>
    return 0;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	08013794 	.word	0x08013794
 80022b8:	080137b0 	.word	0x080137b0
 80022bc:	080137d4 	.word	0x080137d4
 80022c0:	08013804 	.word	0x08013804

080022c4 <mag_read>:

int mag_read(I2C_HandleTypeDef* hi2c, MMCPacket_t* packet, uint8_t* flip) {
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b08e      	sub	sp, #56	@ 0x38
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
    uint8_t data_ready = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    // read status register to make sure data is ready
    i2c_read(hi2c, dev_i2c_addr, status, &data_ready, 1);
 80022d6:	2130      	movs	r1, #48	@ 0x30
 80022d8:	2008      	movs	r0, #8
 80022da:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80022de:	2201      	movs	r2, #1
 80022e0:	9200      	str	r2, [sp, #0]
 80022e2:	4602      	mov	r2, r0
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7fe ff6c 	bl	80011c2 <i2c_read>
    if (data_ready & 0x01) { // data ready bit is 0x01
 80022ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80db 	beq.w	80024ae <mag_read+0x1ea>
        // manually clear the interrupt signal
        i2c_write(hi2c, dev_i2c_addr, status, 0b00000001);
 80022f8:	2130      	movs	r1, #48	@ 0x30
 80022fa:	2208      	movs	r2, #8
 80022fc:	2301      	movs	r3, #1
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7fe ff7e 	bl	8001200 <i2c_write>
        uint8_t raw_data[7];
        uint32_t mag_data_binary[3];
        float mag_data[3];
        // every flip_interval read cycles, flip the polarity of the magnetometer values
        // to calibrate the sensor properly
        if (*flip % flip_interval == 0) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	230a      	movs	r3, #10
 800230c:	fb92 f1f3 	sdiv	r1, r2, r3
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <mag_read+0x62>
            i2c_write(hi2c, dev_i2c_addr, internal_control0, 0b00010100);
 800231a:	2130      	movs	r1, #48	@ 0x30
 800231c:	2209      	movs	r2, #9
 800231e:	2314      	movs	r3, #20
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7fe ff6d 	bl	8001200 <i2c_write>
        }
        if ((*flip - 1) % flip_interval == 0) {
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	3b01      	subs	r3, #1
 800232c:	220a      	movs	r2, #10
 800232e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002332:	fb01 f202 	mul.w	r2, r1, r2
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <mag_read+0x84>
            i2c_write(hi2c, dev_i2c_addr, internal_control0, 0b00001100);
 800233c:	2130      	movs	r1, #48	@ 0x30
 800233e:	2209      	movs	r2, #9
 8002340:	230c      	movs	r3, #12
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7fe ff5c 	bl	8001200 <i2c_write>
        }

        i2c_read(hi2c, dev_i2c_addr, x_out0, raw_data, 7);
 8002348:	2130      	movs	r1, #48	@ 0x30
 800234a:	2000      	movs	r0, #0
 800234c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002350:	2207      	movs	r2, #7
 8002352:	9200      	str	r2, [sp, #0]
 8002354:	4602      	mov	r2, r0
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7fe ff33 	bl	80011c2 <i2c_read>
        mag_data_binary[0] =
            (uint32_t)(raw_data[0] << 10 | raw_data[1] << 2 | (raw_data[6] & 0xC0) >> 6);
 800235c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002360:	029a      	lsls	r2, r3, #10
 8002362:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4313      	orrs	r3, r2
 800236a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800236e:	0992      	lsrs	r2, r2, #6
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	4313      	orrs	r3, r2
        mag_data_binary[0] =
 8002374:	61fb      	str	r3, [r7, #28]
        mag_data_binary[1] =
            (uint32_t)(raw_data[2] << 10 | raw_data[3] << 2 | (raw_data[6] & 0x30) >> 4);
 8002376:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800237a:	029a      	lsls	r2, r3, #10
 800237c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	431a      	orrs	r2, r3
 8002384:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002388:	111b      	asrs	r3, r3, #4
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	4313      	orrs	r3, r2
        mag_data_binary[1] =
 8002390:	623b      	str	r3, [r7, #32]
        mag_data_binary[2] =
            (uint32_t)(raw_data[4] << 10 | raw_data[5] << 2 | (raw_data[6] & 0x0C) >> 2);
 8002392:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002396:	029a      	lsls	r2, r3, #10
 8002398:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	431a      	orrs	r2, r3
 80023a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023a4:	109b      	asrs	r3, r3, #2
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	4313      	orrs	r3, r2
        mag_data_binary[2] =
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
        mag_data[0] = (((float)mag_data_binary[0]) - 131072.0) / scaling_factor;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b8:	ee17 0a90 	vmov	r0, s15
 80023bc:	f7fe f8c4 	bl	8000548 <__aeabi_f2d>
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80023c8:	f7fd ff5e 	bl	8000288 <__aeabi_dsub>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	461d      	mov	r5, r3
 80023d4:	4b38      	ldr	r3, [pc, #224]	@ (80024b8 <mag_read+0x1f4>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f8b6 	bl	8000548 <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fe fa32 	bl	800084c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f7fe fbda 	bl	8000ba8 <__aeabi_d2f>
 80023f4:	4603      	mov	r3, r0
 80023f6:	613b      	str	r3, [r7, #16]
        mag_data[1] = (((float)mag_data_binary[1]) - 131072.0) / scaling_factor;
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002402:	ee17 0a90 	vmov	r0, s15
 8002406:	f7fe f89f 	bl	8000548 <__aeabi_f2d>
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002412:	f7fd ff39 	bl	8000288 <__aeabi_dsub>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <mag_read+0x1f4>)
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f891 	bl	8000548 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4620      	mov	r0, r4
 800242c:	4629      	mov	r1, r5
 800242e:	f7fe fa0d 	bl	800084c <__aeabi_ddiv>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fbb5 	bl	8000ba8 <__aeabi_d2f>
 800243e:	4603      	mov	r3, r0
 8002440:	617b      	str	r3, [r7, #20]
        mag_data[2] = (((float)mag_data_binary[2]) - 131072.0) / scaling_factor;
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244c:	ee17 0a90 	vmov	r0, s15
 8002450:	f7fe f87a 	bl	8000548 <__aeabi_f2d>
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800245c:	f7fd ff14 	bl	8000288 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4614      	mov	r4, r2
 8002466:	461d      	mov	r5, r3
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <mag_read+0x1f4>)
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f86c 	bl	8000548 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fe f9e8 	bl	800084c <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fb90 	bl	8000ba8 <__aeabi_d2f>
 8002488:	4603      	mov	r3, r0
 800248a:	61bb      	str	r3, [r7, #24]
        packet->mag_x = mag_data[0];
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	601a      	str	r2, [r3, #0]
        packet->mag_y = mag_data[1];
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	605a      	str	r2, [r3, #4]
        packet->mag_z = mag_data[2];
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	609a      	str	r2, [r3, #8]
        (*flip)++; // incrememt the flip counter
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	701a      	strb	r2, [r3, #0]
        return 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <mag_read+0x1ec>
    }
    return 1;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3730      	adds	r7, #48	@ 0x30
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	4323d70a 	.word	0x4323d70a

080024bc <spi_read>:
 *      Author: Wlsan
 */
#include "spi_utils.h"

void spi_read(SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t addr,
              uint8_t* buffer, uint8_t len) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	460b      	mov	r3, r1
 80024cc:	80fb      	strh	r3, [r7, #6]
 80024ce:	4613      	mov	r3, r2
 80024d0:	717b      	strb	r3, [r7, #5]
    addr |= 0x80;
 80024d2:	797b      	ldrb	r3, [r7, #5]
 80024d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET); // pull CS pin low
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	2200      	movs	r2, #0
 80024e0:	4619      	mov	r1, r3
 80024e2:	68b8      	ldr	r0, [r7, #8]
 80024e4:	f001 fb60 	bl	8003ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &addr, 1, 100);              // send the address that you want data from
 80024e8:	1d79      	adds	r1, r7, #5
 80024ea:	2364      	movs	r3, #100	@ 0x64
 80024ec:	2201      	movs	r2, #1
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f005 fe1b 	bl	800812a <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, len, 100);            // read data and store into buffer
 80024f4:	7f3b      	ldrb	r3, [r7, #28]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	2364      	movs	r3, #100	@ 0x64
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f005 ff58 	bl	80083b2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	2201      	movs	r2, #1
 8002506:	4619      	mov	r1, r3
 8002508:	68b8      	ldr	r0, [r7, #8]
 800250a:	f001 fb4d 	bl	8003ba8 <HAL_GPIO_WritePin>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <spi_write>:

void spi_write(SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t addr,
               uint8_t data) {
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	4611      	mov	r1, r2
 8002522:	461a      	mov	r2, r3
 8002524:	460b      	mov	r3, r1
 8002526:	80fb      	strh	r3, [r7, #6]
 8002528:	4613      	mov	r3, r2
 800252a:	717b      	strb	r3, [r7, #5]
    uint8_t tx_buffer[2] = {addr, data};
 800252c:	797b      	ldrb	r3, [r7, #5]
 800252e:	753b      	strb	r3, [r7, #20]
 8002530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002534:	757b      	strb	r3, [r7, #21]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	68b8      	ldr	r0, [r7, #8]
 800253e:	f001 fb33 	bl	8003ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, tx_buffer, 2, 100);
 8002542:	f107 0114 	add.w	r1, r7, #20
 8002546:	2364      	movs	r3, #100	@ 0x64
 8002548:	2202      	movs	r2, #2
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f005 fded 	bl	800812a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	2201      	movs	r2, #1
 8002554:	4619      	mov	r1, r3
 8002556:	68b8      	ldr	r0, [r7, #8]
 8002558:	f001 fb26 	bl	8003ba8 <HAL_GPIO_WritePin>
}
 800255c:	bf00      	nop
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <spi_burst_write>:

void spi_burst_write(SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t addr,
                     uint8_t* data, uint8_t len) {
 8002564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002568:	b087      	sub	sp, #28
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	4611      	mov	r1, r2
 8002572:	461a      	mov	r2, r3
 8002574:	460b      	mov	r3, r1
 8002576:	80fb      	strh	r3, [r7, #6]
 8002578:	4613      	mov	r3, r2
 800257a:	717b      	strb	r3, [r7, #5]
 800257c:	466b      	mov	r3, sp
 800257e:	461e      	mov	r6, r3
    uint8_t tx_buffer[len + 1];
 8002580:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	1e4b      	subs	r3, r1, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	460a      	mov	r2, r1
 800258c:	2300      	movs	r3, #0
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800259e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025a6:	460a      	mov	r2, r1
 80025a8:	2300      	movs	r3, #0
 80025aa:	4614      	mov	r4, r2
 80025ac:	461d      	mov	r5, r3
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	00eb      	lsls	r3, r5, #3
 80025b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025bc:	00e2      	lsls	r2, r4, #3
 80025be:	460b      	mov	r3, r1
 80025c0:	3307      	adds	r3, #7
 80025c2:	08db      	lsrs	r3, r3, #3
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	ebad 0d03 	sub.w	sp, sp, r3
 80025ca:	466b      	mov	r3, sp
 80025cc:	3300      	adds	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
    tx_buffer[0] = addr;              // first byte is register address
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	797a      	ldrb	r2, [r7, #5]
 80025d4:	701a      	strb	r2, [r3, #0]
    memcpy(&tx_buffer[1], data, len); // copy data bytes into buffer
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	3301      	adds	r3, #1
 80025da:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80025de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00e ffc8 	bl	8011576 <memcpy>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	68b8      	ldr	r0, [r7, #8]
 80025ee:	f001 fadb 	bl	8003ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, tx_buffer, len + 1, 100);
 80025f2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	2364      	movs	r3, #100	@ 0x64
 80025fe:	6939      	ldr	r1, [r7, #16]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f005 fd92 	bl	800812a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	2201      	movs	r2, #1
 800260a:	4619      	mov	r1, r3
 800260c:	68b8      	ldr	r0, [r7, #8]
 800260e:	f001 facb 	bl	8003ba8 <HAL_GPIO_WritePin>
 8002612:	46b5      	mov	sp, r6
}
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002620 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <HAL_MspInit+0x4c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	4a0f      	ldr	r2, [pc, #60]	@ (800266c <HAL_MspInit+0x4c>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002634:	6453      	str	r3, [r2, #68]	@ 0x44
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <HAL_MspInit+0x4c>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_MspInit+0x4c>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	4a08      	ldr	r2, [pc, #32]	@ (800266c <HAL_MspInit+0x4c>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002650:	6413      	str	r3, [r2, #64]	@ 0x40
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_MspInit+0x4c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	@ 0x30
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 031c 	add.w	r3, r7, #28
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a32      	ldr	r2, [pc, #200]	@ (8002758 <HAL_I2C_MspInit+0xe8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d12c      	bne.n	80026ec <HAL_I2C_MspInit+0x7c>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	4b31      	ldr	r3, [pc, #196]	@ (800275c <HAL_I2C_MspInit+0xec>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a30      	ldr	r2, [pc, #192]	@ (800275c <HAL_I2C_MspInit+0xec>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b2e      	ldr	r3, [pc, #184]	@ (800275c <HAL_I2C_MspInit+0xec>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69bb      	ldr	r3, [r7, #24]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80026ae:	23c0      	movs	r3, #192	@ 0xc0
 80026b0:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b2:	2312      	movs	r3, #18
 80026b4:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026be:	2304      	movs	r3, #4
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	4619      	mov	r1, r3
 80026c8:	4825      	ldr	r0, [pc, #148]	@ (8002760 <HAL_I2C_MspInit+0xf0>)
 80026ca:	f001 f8b9 	bl	8003840 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	4b22      	ldr	r3, [pc, #136]	@ (800275c <HAL_I2C_MspInit+0xec>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a21      	ldr	r2, [pc, #132]	@ (800275c <HAL_I2C_MspInit+0xec>)
 80026d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <HAL_I2C_MspInit+0xec>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_I2C2_CLK_ENABLE();
        /* USER CODE BEGIN I2C2_MspInit 1 */

        /* USER CODE END I2C2_MspInit 1 */
    }
}
 80026ea:	e031      	b.n	8002750 <HAL_I2C_MspInit+0xe0>
    } else if (hi2c->Instance == I2C2) {
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <HAL_I2C_MspInit+0xf4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d12c      	bne.n	8002750 <HAL_I2C_MspInit+0xe0>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <HAL_I2C_MspInit+0xec>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a17      	ldr	r2, [pc, #92]	@ (800275c <HAL_I2C_MspInit+0xec>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_I2C_MspInit+0xec>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
        GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8002712:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002716:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002718:	2312      	movs	r3, #18
 800271a:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002724:	2304      	movs	r3, #4
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	4619      	mov	r1, r3
 800272e:	480c      	ldr	r0, [pc, #48]	@ (8002760 <HAL_I2C_MspInit+0xf0>)
 8002730:	f001 f886 	bl	8003840 <HAL_GPIO_Init>
        __HAL_RCC_I2C2_CLK_ENABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <HAL_I2C_MspInit+0xec>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	4a07      	ldr	r2, [pc, #28]	@ (800275c <HAL_I2C_MspInit+0xec>)
 800273e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002742:	6413      	str	r3, [r2, #64]	@ 0x40
 8002744:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_I2C_MspInit+0xec>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	bf00      	nop
 8002752:	3730      	adds	r7, #48	@ 0x30
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40005400 	.word	0x40005400
 800275c:	40023800 	.word	0x40023800
 8002760:	40020400 	.word	0x40020400
 8002764:	40005800 	.word	0x40005800

08002768 <HAL_SD_MspInit>:
 * @brief SD MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hsd: SD handle pointer
 * @retval None
 */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
    if (hsd->Instance == SDIO) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a70      	ldr	r2, [pc, #448]	@ (8002948 <HAL_SD_MspInit+0x1e0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f040 80da 	bne.w	8002940 <HAL_SD_MspInit+0x1d8>
        /* USER CODE BEGIN SDIO_MspInit 0 */

        /* USER CODE END SDIO_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SDIO_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	4a6d      	ldr	r2, [pc, #436]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 8002796:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800279a:	6453      	str	r3, [r2, #68]	@ 0x44
 800279c:	4b6b      	ldr	r3, [pc, #428]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	4b67      	ldr	r3, [pc, #412]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	4a66      	ldr	r2, [pc, #408]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b8:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	4b60      	ldr	r3, [pc, #384]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	4a5f      	ldr	r2, [pc, #380]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 80027ce:	f043 0308 	orr.w	r3, r3, #8
 80027d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d4:	4b5d      	ldr	r3, [pc, #372]	@ (800294c <HAL_SD_MspInit+0x1e4>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
        PC10     ------> SDIO_D2
        PC11     ------> SDIO_D3
        PC12     ------> SDIO_CK
        PD2     ------> SDIO_CMD
        */
        GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 80027e0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80027e4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80027f2:	230c      	movs	r3, #12
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4854      	ldr	r0, [pc, #336]	@ (8002950 <HAL_SD_MspInit+0x1e8>)
 80027fe:	f001 f81f 	bl	8003840 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8002802:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002806:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002814:	230c      	movs	r3, #12
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	484c      	ldr	r0, [pc, #304]	@ (8002950 <HAL_SD_MspInit+0x1e8>)
 8002820:	f001 f80e 	bl	8003840 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002824:	2304      	movs	r3, #4
 8002826:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282c:	2301      	movs	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002834:	230c      	movs	r3, #12
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4845      	ldr	r0, [pc, #276]	@ (8002954 <HAL_SD_MspInit+0x1ec>)
 8002840:	f000 fffe 	bl	8003840 <HAL_GPIO_Init>

        /* SDIO DMA Init */
        /* SDIO_RX Init */
        hdma_sdio_rx.Instance = DMA2_Stream3;
 8002844:	4b44      	ldr	r3, [pc, #272]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002846:	4a45      	ldr	r2, [pc, #276]	@ (800295c <HAL_SD_MspInit+0x1f4>)
 8002848:	601a      	str	r2, [r3, #0]
        hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800284a:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 800284c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002850:	605a      	str	r2, [r3, #4]
        hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002852:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
        hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002858:	4b3f      	ldr	r3, [pc, #252]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
        hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800285e:	4b3e      	ldr	r3, [pc, #248]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002864:	611a      	str	r2, [r3, #16]
        hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002866:	4b3c      	ldr	r3, [pc, #240]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800286c:	615a      	str	r2, [r3, #20]
        hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800286e:	4b3a      	ldr	r3, [pc, #232]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002874:	619a      	str	r2, [r3, #24]
        hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002876:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002878:	2220      	movs	r2, #32
 800287a:	61da      	str	r2, [r3, #28]
        hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800287c:	4b36      	ldr	r3, [pc, #216]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
        hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002882:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002884:	2204      	movs	r2, #4
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24
        hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002888:	4b33      	ldr	r3, [pc, #204]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 800288a:	2203      	movs	r2, #3
 800288c:	629a      	str	r2, [r3, #40]	@ 0x28
        hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800288e:	4b32      	ldr	r3, [pc, #200]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002890:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002894:	62da      	str	r2, [r3, #44]	@ 0x2c
        hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002896:	4b30      	ldr	r3, [pc, #192]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 8002898:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30
        if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK) {
 800289e:	482e      	ldr	r0, [pc, #184]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 80028a0:	f000 fc22 	bl	80030e8 <HAL_DMA_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_SD_MspInit+0x146>
            Error_Handler();
 80028aa:	f7ff fc7d 	bl	80021a8 <Error_Handler>
        }

        __HAL_LINKDMA(hsd, hdmarx, hdma_sdio_rx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a29      	ldr	r2, [pc, #164]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80028b4:	4a28      	ldr	r2, [pc, #160]	@ (8002958 <HAL_SD_MspInit+0x1f0>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* SDIO_TX Init */
        hdma_sdio_tx.Instance = DMA2_Stream6;
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028bc:	4a29      	ldr	r2, [pc, #164]	@ (8002964 <HAL_SD_MspInit+0x1fc>)
 80028be:	601a      	str	r2, [r3, #0]
        hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80028c0:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028c6:	605a      	str	r2, [r3, #4]
        hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	609a      	str	r2, [r3, #8]
        hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ce:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
        hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d4:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028da:	611a      	str	r2, [r3, #16]
        hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028dc:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028e2:	615a      	str	r2, [r3, #20]
        hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028ea:	619a      	str	r2, [r3, #24]
        hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028ee:	2220      	movs	r2, #32
 80028f0:	61da      	str	r2, [r3, #28]
        hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	621a      	str	r2, [r3, #32]
        hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028f8:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 80028fa:	2204      	movs	r2, #4
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24
        hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028fe:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 8002900:	2203      	movs	r2, #3
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28
        hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002904:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 8002906:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800290c:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 800290e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
        if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK) {
 8002914:	4812      	ldr	r0, [pc, #72]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 8002916:	f000 fbe7 	bl	80030e8 <HAL_DMA_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_SD_MspInit+0x1bc>
            Error_Handler();
 8002920:	f7ff fc42 	bl	80021a8 <Error_Handler>
        }

        __HAL_LINKDMA(hsd, hdmatx, hdma_sdio_tx);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a0e      	ldr	r2, [pc, #56]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 8002928:	63da      	str	r2, [r3, #60]	@ 0x3c
 800292a:	4a0d      	ldr	r2, [pc, #52]	@ (8002960 <HAL_SD_MspInit+0x1f8>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* SDIO interrupt Init */
        HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	2031      	movs	r0, #49	@ 0x31
 8002936:	f000 fba0 	bl	800307a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800293a:	2031      	movs	r0, #49	@ 0x31
 800293c:	f000 fbb9 	bl	80030b2 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN SDIO_MspInit 1 */

        /* USER CODE END SDIO_MspInit 1 */
    }
}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	@ 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40023800 	.word	0x40023800
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	20006498 	.word	0x20006498
 800295c:	40026458 	.word	0x40026458
 8002960:	200064f8 	.word	0x200064f8
 8002964:	400264a0 	.word	0x400264a0

08002968 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	@ 0x30
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 031c 	add.w	r3, r7, #28
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
    if (hspi->Instance == SPI2) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3b      	ldr	r2, [pc, #236]	@ (8002a74 <HAL_SPI_MspInit+0x10c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d13e      	bne.n	8002a08 <HAL_SPI_MspInit+0xa0>
        /* USER CODE BEGIN SPI2_MspInit 0 */

        /* USER CODE END SPI2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SPI2_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a39      	ldr	r2, [pc, #228]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	4b33      	ldr	r3, [pc, #204]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a32      	ldr	r2, [pc, #200]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	697b      	ldr	r3, [r7, #20]
        /**SPI2 GPIO Configuration
        PB13     ------> SPI2_SCK
        PB14     ------> SPI2_MISO
        PB15     ------> SPI2_MOSI
        */
        GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 80029c2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80029c6:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029cc:	2302      	movs	r3, #2
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d0:	2303      	movs	r3, #3
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029d4:	2305      	movs	r3, #5
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	4619      	mov	r1, r3
 80029de:	4827      	ldr	r0, [pc, #156]	@ (8002a7c <HAL_SPI_MspInit+0x114>)
 80029e0:	f000 ff2e 	bl	8003840 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029e8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029f6:	2305      	movs	r3, #5
 80029f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	481e      	ldr	r0, [pc, #120]	@ (8002a7c <HAL_SPI_MspInit+0x114>)
 8002a02:	f000 ff1d 	bl	8003840 <HAL_GPIO_Init>

        /* USER CODE BEGIN SPI3_MspInit 1 */

        /* USER CODE END SPI3_MspInit 1 */
    }
}
 8002a06:	e030      	b.n	8002a6a <HAL_SPI_MspInit+0x102>
    } else if (hspi->Instance == SPI3) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a80 <HAL_SPI_MspInit+0x118>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d12b      	bne.n	8002a6a <HAL_SPI_MspInit+0x102>
        __HAL_RCC_SPI3_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a17      	ldr	r2, [pc, #92]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	4a10      	ldr	r2, [pc, #64]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <HAL_SPI_MspInit+0x110>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8002a4a:	2338      	movs	r3, #56	@ 0x38
 8002a4c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5e:	f107 031c 	add.w	r3, r7, #28
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <HAL_SPI_MspInit+0x114>)
 8002a66:	f000 feeb 	bl	8003840 <HAL_GPIO_Init>
}
 8002a6a:	bf00      	nop
 8002a6c:	3730      	adds	r7, #48	@ 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40003800 	.word	0x40003800
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40003c00 	.word	0x40003c00

08002a84 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <NMI_Handler+0x4>

08002a8c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <HardFault_Handler+0x4>

08002a94 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <MemManage_Handler+0x4>

08002a9c <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <BusFault_Handler+0x4>

08002aa4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <UsageFault_Handler+0x4>

08002aac <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002ada:	f000 f9af 	bl	8002e3c <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <EXTI3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(BMP581_Interrupt_Pin);
 8002ae6:	2008      	movs	r0, #8
 8002ae8:	f001 f892 	bl	8003c10 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI3_IRQn 1 */

    /* USER CODE END EXTI3_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI9_5_IRQn 0 */

    /* USER CODE END EXTI9_5_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(IMU_Interrupt_Pin);
 8002af4:	2040      	movs	r0, #64	@ 0x40
 8002af6:	f001 f88b 	bl	8003c10 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(Mag_Interrupt_Pin);
 8002afa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002afe:	f001 f887 	bl	8003c10 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI9_5_IRQn 1 */

    /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <SDIO_IRQHandler>:

/**
 * @brief This function handles SDIO global interrupt.
 */
void SDIO_IRQHandler(void) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SDIO_IRQn 0 */

    /* USER CODE END SDIO_IRQn 0 */
    HAL_SD_IRQHandler(&hsd);
 8002b0c:	4802      	ldr	r0, [pc, #8]	@ (8002b18 <SDIO_IRQHandler+0x10>)
 8002b0e:	f004 f9c1 	bl	8006e94 <HAL_SD_IRQHandler>
    /* USER CODE BEGIN SDIO_IRQn 1 */

    /* USER CODE END SDIO_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20006414 	.word	0x20006414

08002b1c <DMA2_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA2 stream3 global interrupt.
 */
void DMA2_Stream3_IRQHandler(void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

    /* USER CODE END DMA2_Stream3_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002b20:	4802      	ldr	r0, [pc, #8]	@ (8002b2c <DMA2_Stream3_IRQHandler+0x10>)
 8002b22:	f000 fc09 	bl	8003338 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

    /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20006498 	.word	0x20006498

08002b30 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b34:	4802      	ldr	r0, [pc, #8]	@ (8002b40 <OTG_FS_IRQHandler+0x10>)
 8002b36:	f002 f9eb 	bl	8004f10 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20007b2c 	.word	0x20007b2c

08002b44 <DMA2_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA2 stream6 global interrupt.
 */
void DMA2_Stream6_IRQHandler(void) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

    /* USER CODE END DMA2_Stream6_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002b48:	4802      	ldr	r0, [pc, #8]	@ (8002b54 <DMA2_Stream6_IRQHandler+0x10>)
 8002b4a:	f000 fbf5 	bl	8003338 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

    /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200064f8 	.word	0x200064f8

08002b58 <_getpid>:
char** environ = __env;

/* Functions */
void initialise_monitor_handles() {}

int _getpid(void) { return 1; }
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_kill>:

int _kill(int pid, int sig) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002b72:	f00e fccb 	bl	801150c <__errno>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2216      	movs	r2, #22
 8002b7a:	601a      	str	r2, [r3, #0]
    return -1;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_exit>:

void _exit(int status) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ffe7 	bl	8002b68 <_kill>
    while (1) {
 8002b9a:	bf00      	nop
 8002b9c:	e7fd      	b.n	8002b9a <_exit+0x12>

08002b9e <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char* ptr, int len) {
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e00a      	b.n	8002bc6 <_read+0x28>
        *ptr++ = __io_getchar();
 8002bb0:	f3af 8000 	nop.w
 8002bb4:	4601      	mov	r1, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	60ba      	str	r2, [r7, #8]
 8002bbc:	b2ca      	uxtb	r2, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	dbf0      	blt.n	8002bb0 <_read+0x12>
    }

    return len;
 8002bce:	687b      	ldr	r3, [r7, #4]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_write>:

__attribute__((weak)) int _write(int file, char* ptr, int len) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e009      	b.n	8002bfe <_write+0x26>
        __io_putchar(*ptr++);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	60ba      	str	r2, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	dbf1      	blt.n	8002bea <_write+0x12>
    }
    return len;
 8002c06:	687b      	ldr	r3, [r7, #4]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_close>:

int _close(int file) {
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <_fstat>:

int _fstat(int file, struct stat* st) {
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c38:	605a      	str	r2, [r3, #4]
    return 0;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_isatty>:

int _isatty(int file) {
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002c50:	2301      	movs	r3, #1
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c80:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <_sbrk+0x5c>)
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <_sbrk+0x60>)
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
    const uint8_t* max_heap = (uint8_t*)stack_limit;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
    uint8_t* prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002c8c:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <_sbrk+0x64>)
 8002c96:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <_sbrk+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <_sbrk+0x40>
        errno = ENOMEM;
 8002ca8:	f00e fc30 	bl	801150c <__errno>
 8002cac:	4603      	mov	r3, r0
 8002cae:	220c      	movs	r2, #12
 8002cb0:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e009      	b.n	8002ccc <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <_sbrk+0x64>)
 8002cc8:	6013      	str	r3, [r2, #0]

    return (void*)prev_heap_end;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20020000 	.word	0x20020000
 8002cd8:	00000400 	.word	0x00000400
 8002cdc:	2000660c 	.word	0x2000660c
 8002ce0:	20008380 	.word	0x20008380

08002ce4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <SystemInit+0x20>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cee:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <SystemInit+0x20>)
 8002cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <serialPrintStr>:
 *  Created on: Aug 21, 2025
 *      Author: Wlsan
 */
#include "usb_print_debug.h"

void serialPrintStr(const char* s) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b0a2      	sub	sp, #136	@ 0x88
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%s\r\n", s);
 8002d10:	f107 0008 	add.w	r0, r7, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <serialPrintStr+0x38>)
 8002d18:	2180      	movs	r1, #128	@ 0x80
 8002d1a:	f00e fb09 	bl	8011330 <sniprintf>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002d1e:	f107 0308 	add.w	r3, r7, #8
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd faa4 	bl	8000270 <strlen>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f00d f988 	bl	8010048 <CDC_Transmit_FS>
}
 8002d38:	bf00      	nop
 8002d3a:	3788      	adds	r7, #136	@ 0x88
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	08013830 	.word	0x08013830

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d48:	f7ff ffcc 	bl	8002ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d4c:	480c      	ldr	r0, [pc, #48]	@ (8002d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d4e:	490d      	ldr	r1, [pc, #52]	@ (8002d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d50:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d64:	4c0a      	ldr	r4, [pc, #40]	@ (8002d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f00e fbd1 	bl	8011518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7fe fee9 	bl	8001b4c <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8002d88:	08013d1c 	.word	0x08013d1c
  ldr r2, =_sbss
 8002d8c:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002d90:	2000837c 	.word	0x2000837c

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <HAL_Init+0x40>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_Init+0x40>)
 8002dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a07      	ldr	r2, [pc, #28]	@ (8002dd8 <HAL_Init+0x40>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 f94f 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc6:	200f      	movs	r0, #15
 8002dc8:	f000 f808 	bl	8002ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dcc:	f7ff fc28 	bl	8002620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00

08002ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x54>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_InitTick+0x58>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f967 	bl	80030ce <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00e      	b.n	8002e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0f      	cmp	r3, #15
 8002e0e:	d80a      	bhi.n	8002e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e10:	2200      	movs	r2, #0
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	f000 f92f 	bl	800307a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e1c:	4a06      	ldr	r2, [pc, #24]	@ (8002e38 <HAL_InitTick+0x5c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000004 	.word	0x20000004
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	20000008 	.word	0x20000008

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	20006610 	.word	0x20006610

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20006610 	.word	0x20006610

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4907      	ldr	r1, [pc, #28]	@ (8002f60 <__NVIC_EnableIRQ+0x38>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db0a      	blt.n	8002f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <__NVIC_SetPriority+0x4c>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	440b      	add	r3, r1
 8002f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f8c:	e00a      	b.n	8002fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4908      	ldr	r1, [pc, #32]	@ (8002fb4 <__NVIC_SetPriority+0x50>)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	761a      	strb	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	bf28      	it	cs
 8002fd6:	2304      	movcs	r3, #4
 8002fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d902      	bls.n	8002fe8 <NVIC_EncodePriority+0x30>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b03      	subs	r3, #3
 8002fe6:	e000      	b.n	8002fea <NVIC_EncodePriority+0x32>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003000:	f04f 31ff 	mov.w	r1, #4294967295
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43d9      	mvns	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	4313      	orrs	r3, r2
         );
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	@ 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	f7ff ff8e 	bl	8002f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff29 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff3e 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff8e 	bl	8002fb8 <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5d 	bl	8002f64 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff31 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa2 	bl	8003020 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff feb6 	bl	8002e64 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e099      	b.n	8003238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003124:	e00f      	b.n	8003146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003126:	f7ff fe9d 	bl	8002e64 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b05      	cmp	r3, #5
 8003132:	d908      	bls.n	8003146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e078      	b.n	8003238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e8      	bne.n	8003126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <HAL_DMA_Init+0x158>)
 8003160:	4013      	ands	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	2b04      	cmp	r3, #4
 800319e:	d107      	bne.n	80031b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	4313      	orrs	r3, r2
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0307 	bic.w	r3, r3, #7
 80031c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d117      	bne.n	800320a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 faab 	bl	8003748 <DMA_CheckFifoParam>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2240      	movs	r2, #64	@ 0x40
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003206:	2301      	movs	r3, #1
 8003208:	e016      	b.n	8003238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa62 	bl	80036dc <DMA_CalcBaseAndBitshift>
 8003218:	4603      	mov	r3, r0
 800321a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	223f      	movs	r2, #63	@ 0x3f
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	f010803f 	.word	0xf010803f

08003244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_DMA_Start_IT+0x26>
 8003266:	2302      	movs	r3, #2
 8003268:	e040      	b.n	80032ec <HAL_DMA_Start_IT+0xa8>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d12f      	bne.n	80032de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f9f4 	bl	8003680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329c:	223f      	movs	r2, #63	@ 0x3f
 800329e:	409a      	lsls	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0216 	orr.w	r2, r2, #22
 80032b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0208 	orr.w	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e005      	b.n	80032ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2280      	movs	r2, #128	@ 0x80
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00c      	b.n	800332c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2205      	movs	r2, #5
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003344:	4b8e      	ldr	r3, [pc, #568]	@ (8003580 <HAL_DMA_IRQHandler+0x248>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a8e      	ldr	r2, [pc, #568]	@ (8003584 <HAL_DMA_IRQHandler+0x24c>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	2208      	movs	r2, #8
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	2208      	movs	r2, #8
 8003392:	409a      	lsls	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	2204      	movs	r2, #4
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d012      	beq.n	8003410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	2204      	movs	r2, #4
 80033fe:	409a      	lsls	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	2210      	movs	r2, #16
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d043      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	2210      	movs	r2, #16
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d018      	beq.n	800347a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d024      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
 8003466:	e01f      	b.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e016      	b.n	80034a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0208 	bic.w	r2, r2, #8
 8003496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	2220      	movs	r2, #32
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 808f 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8087 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	2220      	movs	r2, #32
 80034d0:	409a      	lsls	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d136      	bne.n	8003550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0216 	bic.w	r2, r2, #22
 80034f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_DMA_IRQHandler+0x1da>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0208 	bic.w	r2, r2, #8
 8003520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003526:	223f      	movs	r2, #63	@ 0x3f
 8003528:	409a      	lsls	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003542:	2b00      	cmp	r3, #0
 8003544:	d07e      	beq.n	8003644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
        }
        return;
 800354e:	e079      	b.n	8003644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01d      	beq.n	800359a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	2b00      	cmp	r3, #0
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e02c      	b.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
 800357e:	bf00      	nop
 8003580:	20000004 	.word	0x20000004
 8003584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	e01e      	b.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0210 	bic.w	r2, r2, #16
 80035b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d032      	beq.n	8003646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d022      	beq.n	8003632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2205      	movs	r2, #5
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3301      	adds	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	d307      	bcc.n	8003620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f2      	bne.n	8003604 <HAL_DMA_IRQHandler+0x2cc>
 800361e:	e000      	b.n	8003622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
 8003642:	e000      	b.n	8003646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003644:	bf00      	nop
    }
  }
}
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800365a:	b2db      	uxtb	r3, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800369c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b40      	cmp	r3, #64	@ 0x40
 80036ac:	d108      	bne.n	80036c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036be:	e007      	b.n	80036d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3b10      	subs	r3, #16
 80036ec:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <DMA_CalcBaseAndBitshift+0x64>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f6:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <DMA_CalcBaseAndBitshift+0x68>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d909      	bls.n	800371e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	659a      	str	r2, [r3, #88]	@ 0x58
 800371c:	e007      	b.n	800372e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	aaaaaaab 	.word	0xaaaaaaab
 8003744:	080138f8 	.word	0x080138f8

08003748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11f      	bne.n	80037a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d856      	bhi.n	8003816 <DMA_CheckFifoParam+0xce>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <DMA_CheckFifoParam+0x28>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	08003793 	.word	0x08003793
 8003778:	08003781 	.word	0x08003781
 800377c:	08003817 	.word	0x08003817
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d046      	beq.n	800381a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e043      	b.n	800381a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800379a:	d140      	bne.n	800381e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a0:	e03d      	b.n	800381e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037aa:	d121      	bne.n	80037f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d837      	bhi.n	8003822 <DMA_CheckFifoParam+0xda>
 80037b2:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <DMA_CheckFifoParam+0x70>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037cf 	.word	0x080037cf
 80037c0:	080037c9 	.word	0x080037c9
 80037c4:	080037e1 	.word	0x080037e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e030      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d025      	beq.n	8003826 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037de:	e022      	b.n	8003826 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037e8:	d11f      	bne.n	800382a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ee:	e01c      	b.n	800382a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d903      	bls.n	80037fe <DMA_CheckFifoParam+0xb6>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d003      	beq.n	8003804 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037fc:	e018      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      break;
 8003802:	e015      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e00b      	b.n	800382e <DMA_CheckFifoParam+0xe6>
      break;
 8003816:	bf00      	nop
 8003818:	e00a      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e008      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e006      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;   
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
    }
  } 
  
  return status; 
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e16b      	b.n	8003b34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 815a 	bne.w	8003b2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d005      	beq.n	8003892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	2b02      	cmp	r3, #2
 8003890:	d130      	bne.n	80038f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0201 	and.w	r2, r3, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d017      	beq.n	8003930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80b4 	beq.w	8003b2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b60      	ldr	r3, [pc, #384]	@ (8003b4c <HAL_GPIO_Init+0x30c>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003b4c <HAL_GPIO_Init+0x30c>)
 80039d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039d6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <HAL_GPIO_Init+0x30c>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b50 <HAL_GPIO_Init+0x310>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a52      	ldr	r2, [pc, #328]	@ (8003b54 <HAL_GPIO_Init+0x314>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02b      	beq.n	8003a66 <HAL_GPIO_Init+0x226>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a51      	ldr	r2, [pc, #324]	@ (8003b58 <HAL_GPIO_Init+0x318>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d025      	beq.n	8003a62 <HAL_GPIO_Init+0x222>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a50      	ldr	r2, [pc, #320]	@ (8003b5c <HAL_GPIO_Init+0x31c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01f      	beq.n	8003a5e <HAL_GPIO_Init+0x21e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4f      	ldr	r2, [pc, #316]	@ (8003b60 <HAL_GPIO_Init+0x320>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_GPIO_Init+0x21a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4e      	ldr	r2, [pc, #312]	@ (8003b64 <HAL_GPIO_Init+0x324>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0x216>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4d      	ldr	r2, [pc, #308]	@ (8003b68 <HAL_GPIO_Init+0x328>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_GPIO_Init+0x212>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4c      	ldr	r2, [pc, #304]	@ (8003b6c <HAL_GPIO_Init+0x32c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <HAL_GPIO_Init+0x20e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_GPIO_Init+0x20a>
 8003a46:	2307      	movs	r3, #7
 8003a48:	e00e      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	e00c      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a4e:	2306      	movs	r3, #6
 8003a50:	e00a      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a52:	2305      	movs	r3, #5
 8003a54:	e008      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a56:	2304      	movs	r3, #4
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a66:	2300      	movs	r3, #0
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f002 0203 	and.w	r2, r2, #3
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a78:	4935      	ldr	r1, [pc, #212]	@ (8003b50 <HAL_GPIO_Init+0x310>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aaa:	4a32      	ldr	r2, [pc, #200]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab0:	4b30      	ldr	r3, [pc, #192]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad4:	4a27      	ldr	r2, [pc, #156]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ada:	4b26      	ldr	r3, [pc, #152]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afe:	4a1d      	ldr	r2, [pc, #116]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b04:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b28:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	f67f ae90 	bls.w	800385c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3724      	adds	r7, #36	@ 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40021400 	.word	0x40021400
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	40021c00 	.word	0x40021c00
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e001      	b.n	8003b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb8:	787b      	ldrb	r3, [r7, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc4:	e003      	b.n	8003bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	619a      	str	r2, [r3, #24]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bec:	887a      	ldrh	r2, [r7, #2]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	041a      	lsls	r2, r3, #16
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43d9      	mvns	r1, r3
 8003bf8:	887b      	ldrh	r3, [r7, #2]
 8003bfa:	400b      	ands	r3, r1
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	619a      	str	r2, [r3, #24]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c1a:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c26:	4a05      	ldr	r2, [pc, #20]	@ (8003c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fa96 	bl	8002160 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40013c00 	.word	0x40013c00

08003c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e12b      	b.n	8003eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fe fd02 	bl	8002670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	@ 0x24
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f002 fe72 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4a81      	ldr	r2, [pc, #516]	@ (8003eb4 <HAL_I2C_Init+0x274>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d807      	bhi.n	8003cc4 <HAL_I2C_Init+0x84>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a80      	ldr	r2, [pc, #512]	@ (8003eb8 <HAL_I2C_Init+0x278>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	bf94      	ite	ls
 8003cbc:	2301      	movls	r3, #1
 8003cbe:	2300      	movhi	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e006      	b.n	8003cd2 <HAL_I2C_Init+0x92>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a7d      	ldr	r2, [pc, #500]	@ (8003ebc <HAL_I2C_Init+0x27c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	bf94      	ite	ls
 8003ccc:	2301      	movls	r3, #1
 8003cce:	2300      	movhi	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0e7      	b.n	8003eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a78      	ldr	r2, [pc, #480]	@ (8003ec0 <HAL_I2C_Init+0x280>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0c9b      	lsrs	r3, r3, #18
 8003ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a6a      	ldr	r2, [pc, #424]	@ (8003eb4 <HAL_I2C_Init+0x274>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d802      	bhi.n	8003d14 <HAL_I2C_Init+0xd4>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3301      	adds	r3, #1
 8003d12:	e009      	b.n	8003d28 <HAL_I2C_Init+0xe8>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	4a69      	ldr	r2, [pc, #420]	@ (8003ec4 <HAL_I2C_Init+0x284>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	3301      	adds	r3, #1
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	495c      	ldr	r1, [pc, #368]	@ (8003eb4 <HAL_I2C_Init+0x274>)
 8003d44:	428b      	cmp	r3, r1
 8003d46:	d819      	bhi.n	8003d7c <HAL_I2C_Init+0x13c>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e59      	subs	r1, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d56:	1c59      	adds	r1, r3, #1
 8003d58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_I2C_Init+0x138>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1e59      	subs	r1, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d70:	3301      	adds	r3, #1
 8003d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d76:	e051      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e04f      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d111      	bne.n	8003da8 <HAL_I2C_Init+0x168>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	440b      	add	r3, r1
 8003d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e012      	b.n	8003dce <HAL_I2C_Init+0x18e>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e58      	subs	r0, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	0099      	lsls	r1, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_Init+0x196>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e022      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10e      	bne.n	8003dfc <HAL_I2C_Init+0x1bc>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1e58      	subs	r0, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	440b      	add	r3, r1
 8003dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dfa:	e00f      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1e58      	subs	r0, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	0099      	lsls	r1, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	6809      	ldr	r1, [r1, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6911      	ldr	r1, [r2, #16]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68d2      	ldr	r2, [r2, #12]
 8003e56:	4311      	orrs	r1, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	000186a0 	.word	0x000186a0
 8003eb8:	001e847f 	.word	0x001e847f
 8003ebc:	003d08ff 	.word	0x003d08ff
 8003ec0:	431bde83 	.word	0x431bde83
 8003ec4:	10624dd3 	.word	0x10624dd3

08003ec8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	817b      	strh	r3, [r7, #10]
 8003eda:	460b      	mov	r3, r1
 8003edc:	813b      	strh	r3, [r7, #8]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ee2:	f7fe ffbf 	bl	8002e64 <HAL_GetTick>
 8003ee6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	f040 80d9 	bne.w	80040a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2319      	movs	r3, #25
 8003efc:	2201      	movs	r2, #1
 8003efe:	496d      	ldr	r1, [pc, #436]	@ (80040b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fc8b 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0cc      	b.n	80040aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_I2C_Mem_Write+0x56>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e0c5      	b.n	80040aa <HAL_I2C_Mem_Write+0x1e2>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d007      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2221      	movs	r2, #33	@ 0x21
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a3a      	ldr	r2, [r7, #32]
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a4d      	ldr	r2, [pc, #308]	@ (80040b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003f84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f86:	88f8      	ldrh	r0, [r7, #6]
 8003f88:	893a      	ldrh	r2, [r7, #8]
 8003f8a:	8979      	ldrh	r1, [r7, #10]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4603      	mov	r3, r0
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fac2 	bl	8004520 <I2C_RequestMemoryWrite>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d052      	beq.n	8004048 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e081      	b.n	80040aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fd50 	bl	8004a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d107      	bne.n	8003fce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06b      	b.n	80040aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <HAL_I2C_Mem_Write+0x180>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1aa      	bne.n	8003fa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fd43 	bl	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	2b04      	cmp	r3, #4
 8004066:	d107      	bne.n	8004078 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004076:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e016      	b.n	80040aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	00100002 	.word	0x00100002
 80040b8:	ffff0000 	.word	0xffff0000

080040bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	@ 0x30
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d6:	f7fe fec5 	bl	8002e64 <HAL_GetTick>
 80040da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	f040 8214 	bne.w	8004512 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2319      	movs	r3, #25
 80040f0:	2201      	movs	r2, #1
 80040f2:	497b      	ldr	r1, [pc, #492]	@ (80042e0 <HAL_I2C_Mem_Read+0x224>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fb91 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
 8004102:	e207      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Mem_Read+0x56>
 800410e:	2302      	movs	r3, #2
 8004110:	e200      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d007      	beq.n	8004138 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2222      	movs	r2, #34	@ 0x22
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2240      	movs	r2, #64	@ 0x40
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a5b      	ldr	r2, [pc, #364]	@ (80042e4 <HAL_I2C_Mem_Read+0x228>)
 8004178:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800417a:	88f8      	ldrh	r0, [r7, #6]
 800417c:	893a      	ldrh	r2, [r7, #8]
 800417e:	8979      	ldrh	r1, [r7, #10]
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4603      	mov	r3, r0
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa5e 	bl	800464c <I2C_RequestMemoryRead>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e1bc      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a2:	2300      	movs	r3, #0
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	623b      	str	r3, [r7, #32]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	623b      	str	r3, [r7, #32]
 80041b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e190      	b.n	80044ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d11b      	bne.n	800420a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e170      	b.n	80044ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	2b02      	cmp	r3, #2
 8004210:	d11b      	bne.n	800424a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004220:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	e150      	b.n	80044ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004260:	e144      	b.n	80044ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004266:	2b03      	cmp	r3, #3
 8004268:	f200 80f1 	bhi.w	800444e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004270:	2b01      	cmp	r3, #1
 8004272:	d123      	bne.n	80042bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004276:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fc79 	bl	8004b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e145      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042ba:	e117      	b.n	80044ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d14e      	bne.n	8004362 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ca:	2200      	movs	r2, #0
 80042cc:	4906      	ldr	r1, [pc, #24]	@ (80042e8 <HAL_I2C_Mem_Read+0x22c>)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 faa4 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e11a      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
 80042de:	bf00      	nop
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000
 80042e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004360:	e0c4      	b.n	80044ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	2200      	movs	r2, #0
 800436a:	496c      	ldr	r1, [pc, #432]	@ (800451c <HAL_I2C_Mem_Read+0x460>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa55 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0cb      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c4:	2200      	movs	r2, #0
 80043c6:	4955      	ldr	r1, [pc, #340]	@ (800451c <HAL_I2C_Mem_Read+0x460>)
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fa27 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e09d      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800444c:	e04e      	b.n	80044ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004450:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fb8c 	bl	8004b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e058      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d124      	bne.n	80044ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f47f aeb6 	bne.w	8004262 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3728      	adds	r7, #40	@ 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	00010004 	.word	0x00010004

08004520 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4603      	mov	r3, r0
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	460b      	mov	r3, r1
 8004534:	813b      	strh	r3, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	2200      	movs	r2, #0
 8004552:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f960 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004570:	d103      	bne.n	800457a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e05f      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800458c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	492d      	ldr	r1, [pc, #180]	@ (8004648 <I2C_RequestMemoryWrite+0x128>)
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f9bb 	bl	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e04c      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fa46 	bl	8004a50 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e02b      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ec:	893b      	ldrh	r3, [r7, #8]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	e021      	b.n	800463c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004608:	6a39      	ldr	r1, [r7, #32]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fa20 	bl	8004a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b04      	cmp	r3, #4
 800461c:	d107      	bne.n	800462e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e005      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	00010002 	.word	0x00010002

0800464c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	4608      	mov	r0, r1
 8004656:	4611      	mov	r1, r2
 8004658:	461a      	mov	r2, r3
 800465a:	4603      	mov	r3, r0
 800465c:	817b      	strh	r3, [r7, #10]
 800465e:	460b      	mov	r3, r1
 8004660:	813b      	strh	r3, [r7, #8]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004674:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004684:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	2200      	movs	r2, #0
 800468e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f8c2 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ac:	d103      	bne.n	80046b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0aa      	b.n	8004810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ba:	897b      	ldrh	r3, [r7, #10]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	4952      	ldr	r1, [pc, #328]	@ (8004818 <I2C_RequestMemoryRead+0x1cc>)
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f91d 	bl	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e097      	b.n	8004810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f8:	6a39      	ldr	r1, [r7, #32]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f9a8 	bl	8004a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	2b04      	cmp	r3, #4
 800470c:	d107      	bne.n	800471e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e076      	b.n	8004810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004728:	893b      	ldrh	r3, [r7, #8]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	611a      	str	r2, [r3, #16]
 8004732:	e021      	b.n	8004778 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	b29b      	uxth	r3, r3
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004744:	6a39      	ldr	r1, [r7, #32]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f982 	bl	8004a50 <I2C_WaitOnTXEFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	2b04      	cmp	r3, #4
 8004758:	d107      	bne.n	800476a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004768:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e050      	b.n	8004810 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800476e:	893b      	ldrh	r3, [r7, #8]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477a:	6a39      	ldr	r1, [r7, #32]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f967 	bl	8004a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	2b04      	cmp	r3, #4
 800478e:	d107      	bne.n	80047a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800479e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e035      	b.n	8004810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f82b 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00d      	beq.n	80047e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047da:	d103      	bne.n	80047e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e013      	b.n	8004810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047e8:	897b      	ldrh	r3, [r7, #10]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	4906      	ldr	r1, [pc, #24]	@ (8004818 <I2C_RequestMemoryRead+0x1cc>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f886 	bl	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	00010002 	.word	0x00010002

0800481c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800482c:	e048      	b.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d044      	beq.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe fb15 	bl	8002e64 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d139      	bne.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d10d      	bne.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	43da      	mvns	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	e00c      	b.n	800488c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	429a      	cmp	r2, r3
 8004890:	d116      	bne.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e023      	b.n	8004908 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10d      	bne.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	e00c      	b.n	8004900 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	43da      	mvns	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	429a      	cmp	r2, r3
 8004904:	d093      	beq.n	800482e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800491e:	e071      	b.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492e:	d123      	bne.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800493e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e067      	b.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d041      	beq.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004980:	f7fe fa70 	bl	8002e64 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d136      	bne.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10c      	bne.n	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	43da      	mvns	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e00b      	b.n	80049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	43da      	mvns	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4013      	ands	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e021      	b.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	0c1b      	lsrs	r3, r3, #16
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10c      	bne.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	43da      	mvns	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e00b      	b.n	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f af6d 	bne.w	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a5c:	e034      	b.n	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f8e3 	bl	8004c2a <I2C_IsAcknowledgeFailed>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e034      	b.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d028      	beq.n	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a76:	f7fe f9f5 	bl	8002e64 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d302      	bcc.n	8004a8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d11d      	bne.n	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	2b80      	cmp	r3, #128	@ 0x80
 8004a98:	d016      	beq.n	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	f043 0220 	orr.w	r2, r3, #32
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e007      	b.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad2:	2b80      	cmp	r3, #128	@ 0x80
 8004ad4:	d1c3      	bne.n	8004a5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aec:	e034      	b.n	8004b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f89b 	bl	8004c2a <I2C_IsAcknowledgeFailed>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e034      	b.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d028      	beq.n	8004b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b06:	f7fe f9ad 	bl	8002e64 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11d      	bne.n	8004b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d016      	beq.n	8004b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	f043 0220 	orr.w	r2, r3, #32
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e007      	b.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d1c3      	bne.n	8004aee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b7c:	e049      	b.n	8004c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d119      	bne.n	8004bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0210 	mvn.w	r2, #16
 8004b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e030      	b.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7fe f950 	bl	8002e64 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11d      	bne.n	8004c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be0:	2b40      	cmp	r3, #64	@ 0x40
 8004be2:	d016      	beq.n	8004c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f043 0220 	orr.w	r2, r3, #32
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e007      	b.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b40      	cmp	r3, #64	@ 0x40
 8004c1e:	d1ae      	bne.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c40:	d11b      	bne.n	8004c7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	f043 0204 	orr.w	r2, r3, #4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e101      	b.n	8004e9e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f00b fb0f 	bl	80102d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc8:	d102      	bne.n	8004cd0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f004 fdfc 	bl	80098d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7c1a      	ldrb	r2, [r3, #16]
 8004ce2:	f88d 2000 	strb.w	r2, [sp]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cea:	f004 fcdb 	bl	80096a4 <USB_CoreInit>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0ce      	b.n	8004e9e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f004 fdf4 	bl	80098f4 <USB_SetCurrentMode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0bf      	b.n	8004e9e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
 8004d22:	e04a      	b.n	8004dba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d24:	7bfa      	ldrb	r2, [r7, #15]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3315      	adds	r3, #21
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3314      	adds	r3, #20
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	b298      	uxth	r0, r3
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	332e      	adds	r3, #46	@ 0x2e
 8004d60:	4602      	mov	r2, r0
 8004d62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d64:	7bfa      	ldrb	r2, [r7, #15]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3318      	adds	r3, #24
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d78:	7bfa      	ldrb	r2, [r7, #15]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	331c      	adds	r3, #28
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d8c:	7bfa      	ldrb	r2, [r7, #15]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	3320      	adds	r3, #32
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004da0:	7bfa      	ldrb	r2, [r7, #15]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	3324      	adds	r3, #36	@ 0x24
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	3301      	adds	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	791b      	ldrb	r3, [r3, #4]
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d3af      	bcc.n	8004d24 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e044      	b.n	8004e54 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004df2:	7bfa      	ldrb	r2, [r7, #15]
 8004df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e38:	7bfa      	ldrb	r2, [r7, #15]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	3301      	adds	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	791b      	ldrb	r3, [r3, #4]
 8004e58:	7bfa      	ldrb	r2, [r7, #15]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d3b5      	bcc.n	8004dca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7c1a      	ldrb	r2, [r3, #16]
 8004e66:	f88d 2000 	strb.w	r2, [sp]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e6e:	f004 fd8d 	bl	800998c <USB_DevInit>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e00c      	b.n	8004e9e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f005 fdd7 	bl	800aa4a <USB_DevDisconnect>

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_PCD_Start+0x1c>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e022      	b.n	8004f08 <HAL_PCD_Start+0x62>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f004 fcde 	bl	80098b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f005 fd85 	bl	800aa08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b08d      	sub	sp, #52	@ 0x34
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f005 fe43 	bl	800abb2 <USB_GetMode>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 848c 	bne.w	800584c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f005 fda7 	bl	800aa8c <USB_ReadInterrupts>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8482 	beq.w	800584a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f005 fd94 	bl	800aa8c <USB_ReadInterrupts>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d107      	bne.n	8004f7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f002 0202 	and.w	r2, r2, #2
 8004f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f005 fd82 	bl	800aa8c <USB_ReadInterrupts>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d161      	bne.n	8005056 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0210 	bic.w	r2, r2, #16
 8004fa0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 020f 	and.w	r2, r3, #15
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004fc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fcc:	d124      	bne.n	8005018 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d035      	beq.n	8005046 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	6a38      	ldr	r0, [r7, #32]
 8004fee:	f005 fbb9 	bl	800a764 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ffe:	441a      	add	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005010:	441a      	add	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	615a      	str	r2, [r3, #20]
 8005016:	e016      	b.n	8005046 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800501e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005022:	d110      	bne.n	8005046 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800502a:	2208      	movs	r2, #8
 800502c:	4619      	mov	r1, r3
 800502e:	6a38      	ldr	r0, [r7, #32]
 8005030:	f005 fb98 	bl	800a764 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005040:	441a      	add	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699a      	ldr	r2, [r3, #24]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0210 	orr.w	r2, r2, #16
 8005054:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f005 fd16 	bl	800aa8c <USB_ReadInterrupts>
 8005060:	4603      	mov	r3, r0
 8005062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005066:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800506a:	f040 80a7 	bne.w	80051bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f005 fd1b 	bl	800aab2 <USB_ReadDevAllOutEpInterrupt>
 800507c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800507e:	e099      	b.n	80051b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 808e 	beq.w	80051a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	4611      	mov	r1, r2
 8005096:	4618      	mov	r0, r3
 8005098:	f005 fd3f 	bl	800ab1a <USB_ReadDevOutEPInterrupt>
 800509c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00c      	beq.n	80050c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b4:	461a      	mov	r2, r3
 80050b6:	2301      	movs	r3, #1
 80050b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fea3 	bl	8005e08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00c      	beq.n	80050e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	461a      	mov	r2, r3
 80050da:	2308      	movs	r3, #8
 80050dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 ff79 	bl	8005fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2310      	movs	r3, #16
 8005100:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d030      	beq.n	800516e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005114:	2b80      	cmp	r3, #128	@ 0x80
 8005116:	d109      	bne.n	800512c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800512a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800512c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	3304      	adds	r3, #4
 8005140:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	78db      	ldrb	r3, [r3, #3]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d108      	bne.n	800515c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	b2db      	uxtb	r3, r3
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f00b f9c4 	bl	80104e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005168:	461a      	mov	r2, r3
 800516a:	2302      	movs	r3, #2
 800516c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005184:	461a      	mov	r2, r3
 8005186:	2320      	movs	r3, #32
 8005188:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a0:	461a      	mov	r2, r3
 80051a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	3301      	adds	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80051b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f47f af62 	bne.w	8005080 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f005 fc63 	bl	800aa8c <USB_ReadInterrupts>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051d0:	f040 80db 	bne.w	800538a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f005 fc84 	bl	800aae6 <USB_ReadDevAllInEpInterrupt>
 80051de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80051e4:	e0cd      	b.n	8005382 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80051e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80c2 	beq.w	8005376 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f005 fcaa 	bl	800ab56 <USB_ReadDevInEPInterrupt>
 8005202:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d057      	beq.n	80052be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	2201      	movs	r2, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	43db      	mvns	r3, r3
 8005228:	69f9      	ldr	r1, [r7, #28]
 800522a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800522e:	4013      	ands	r3, r2
 8005230:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523e:	461a      	mov	r2, r3
 8005240:	2301      	movs	r3, #1
 8005242:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	799b      	ldrb	r3, [r3, #6]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d132      	bne.n	80052b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005250:	4613      	mov	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	3320      	adds	r3, #32
 800525c:	6819      	ldr	r1, [r3, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4403      	add	r3, r0
 800526c:	331c      	adds	r3, #28
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4419      	add	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4403      	add	r3, r0
 8005280:	3320      	adds	r3, #32
 8005282:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d113      	bne.n	80052b2 <HAL_PCD_IRQHandler+0x3a2>
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3324      	adds	r3, #36	@ 0x24
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d108      	bne.n	80052b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052aa:	461a      	mov	r2, r3
 80052ac:	2101      	movs	r1, #1
 80052ae:	f005 fcb1 	bl	800ac14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f00b f88e 	bl	80103da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d4:	461a      	mov	r2, r3
 80052d6:	2308      	movs	r3, #8
 80052d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f0:	461a      	mov	r2, r3
 80052f2:	2310      	movs	r3, #16
 80052f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530c:	461a      	mov	r2, r3
 800530e:	2340      	movs	r3, #64	@ 0x40
 8005310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d023      	beq.n	8005364 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800531c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800531e:	6a38      	ldr	r0, [r7, #32]
 8005320:	f004 fc98 	bl	8009c54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	3310      	adds	r3, #16
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	3304      	adds	r3, #4
 8005336:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	78db      	ldrb	r3, [r3, #3]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d108      	bne.n	8005352 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2200      	movs	r2, #0
 8005344:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	b2db      	uxtb	r3, r3
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f00b f8db 	bl	8010508 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535e:	461a      	mov	r2, r3
 8005360:	2302      	movs	r3, #2
 8005362:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800536e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fcbd 	bl	8005cf0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	3301      	adds	r3, #1
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	2b00      	cmp	r3, #0
 8005386:	f47f af2e 	bne.w	80051e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f005 fb7c 	bl	800aa8c <USB_ReadInterrupts>
 8005394:	4603      	mov	r3, r0
 8005396:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800539a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800539e:	d122      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d108      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053c6:	2100      	movs	r1, #0
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fea3 	bl	8006114 <HAL_PCDEx_LPM_Callback>
 80053ce:	e002      	b.n	80053d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f00b f879 	bl	80104c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80053e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f005 fb4e 	bl	800aa8c <USB_ReadInterrupts>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fa:	d112      	bne.n	8005422 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d102      	bne.n	8005412 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f00b f835 	bl	801047c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005420:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f005 fb30 	bl	800aa8c <USB_ReadInterrupts>
 800542c:	4603      	mov	r3, r0
 800542e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005436:	f040 80b7 	bne.w	80055a8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2110      	movs	r1, #16
 8005454:	4618      	mov	r0, r3
 8005456:	f004 fbfd 	bl	8009c54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545a:	2300      	movs	r3, #0
 800545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800545e:	e046      	b.n	80054ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005472:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800548e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005492:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a0:	461a      	mov	r2, r3
 80054a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	3301      	adds	r3, #1
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	791b      	ldrb	r3, [r3, #4]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d3b2      	bcc.n	8005460 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005508:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800550c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7bdb      	ldrb	r3, [r3, #15]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005526:	f043 030b 	orr.w	r3, r3, #11
 800552a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800553c:	f043 030b 	orr.w	r3, r3, #11
 8005540:	6453      	str	r3, [r2, #68]	@ 0x44
 8005542:	e015      	b.n	8005570 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005552:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005556:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800555a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800556a:	f043 030b 	orr.w	r3, r3, #11
 800556e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800557e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005582:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005592:	461a      	mov	r2, r3
 8005594:	f005 fb3e 	bl	800ac14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80055a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f005 fa6d 	bl	800aa8c <USB_ReadInterrupts>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055bc:	d123      	bne.n	8005606 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f005 fb03 	bl	800abce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f004 fbba 	bl	8009d46 <USB_GetDevSpeed>
 80055d2:	4603      	mov	r3, r0
 80055d4:	461a      	mov	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681c      	ldr	r4, [r3, #0]
 80055de:	f001 f9c9 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 80055e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055e8:	461a      	mov	r2, r3
 80055ea:	4620      	mov	r0, r4
 80055ec:	f004 f8be 	bl	800976c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f00a ff1a 	bl	801042a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005604:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f005 fa3e 	bl	800aa8c <USB_ReadInterrupts>
 8005610:	4603      	mov	r3, r0
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b08      	cmp	r3, #8
 8005618:	d10a      	bne.n	8005630 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f00a fef7 	bl	801040e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f002 0208 	and.w	r2, r2, #8
 800562e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f005 fa29 	bl	800aa8c <USB_ReadInterrupts>
 800563a:	4603      	mov	r3, r0
 800563c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005640:	2b80      	cmp	r3, #128	@ 0x80
 8005642:	d123      	bne.n	800568c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005650:	2301      	movs	r3, #1
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24
 8005654:	e014      	b.n	8005680 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	b2db      	uxtb	r3, r3
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb0a 	bl	8005c8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	3301      	adds	r3, #1
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	791b      	ldrb	r3, [r3, #4]
 8005684:	461a      	mov	r2, r3
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	4293      	cmp	r3, r2
 800568a:	d3e4      	bcc.n	8005656 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f005 f9fb 	bl	800aa8c <USB_ReadInterrupts>
 8005696:	4603      	mov	r3, r0
 8005698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800569c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056a0:	d13c      	bne.n	800571c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056a2:	2301      	movs	r3, #1
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a6:	e02b      	b.n	8005700 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	3318      	adds	r3, #24
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d115      	bne.n	80056fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80056ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da12      	bge.n	80056fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	3317      	adds	r3, #23
 80056e4:	2201      	movs	r2, #1
 80056e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 faca 	bl	8005c8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	3301      	adds	r3, #1
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	791b      	ldrb	r3, [r3, #4]
 8005704:	461a      	mov	r2, r3
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	4293      	cmp	r3, r2
 800570a:	d3cd      	bcc.n	80056a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800571a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f005 f9b3 	bl	800aa8c <USB_ReadInterrupts>
 8005726:	4603      	mov	r3, r0
 8005728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800572c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005730:	d156      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005732:	2301      	movs	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
 8005736:	e045      	b.n	80057c4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d12e      	bne.n	80057be <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005760:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005762:	2b00      	cmp	r3, #0
 8005764:	da2b      	bge.n	80057be <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	0c1a      	lsrs	r2, r3, #16
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005770:	4053      	eors	r3, r2
 8005772:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005776:	2b00      	cmp	r3, #0
 8005778:	d121      	bne.n	80057be <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057ba:	6053      	str	r3, [r2, #4]
            break;
 80057bc:	e008      	b.n	80057d0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	3301      	adds	r3, #1
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	791b      	ldrb	r3, [r3, #4]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d3b3      	bcc.n	8005738 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80057de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f005 f951 	bl	800aa8c <USB_ReadInterrupts>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f4:	d10a      	bne.n	800580c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f00a fe98 	bl	801052c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800580a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f005 f93b 	bl	800aa8c <USB_ReadInterrupts>
 8005816:	4603      	mov	r3, r0
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b04      	cmp	r3, #4
 800581e:	d115      	bne.n	800584c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f00a fe88 	bl	8010548 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
 8005848:	e000      	b.n	800584c <HAL_PCD_IRQHandler+0x93c>
      return;
 800584a:	bf00      	nop
    }
  }
}
 800584c:	3734      	adds	r7, #52	@ 0x34
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}

08005852 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_PCD_SetAddress+0x1a>
 8005868:	2302      	movs	r3, #2
 800586a:	e012      	b.n	8005892 <HAL_PCD_SetAddress+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f005 f89a 	bl	800a9bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	4608      	mov	r0, r1
 80058a4:	4611      	mov	r1, r2
 80058a6:	461a      	mov	r2, r3
 80058a8:	4603      	mov	r3, r0
 80058aa:	70fb      	strb	r3, [r7, #3]
 80058ac:	460b      	mov	r3, r1
 80058ae:	803b      	strh	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da0f      	bge.n	80058e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 020f 	and.w	r2, r3, #15
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	3310      	adds	r3, #16
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	3304      	adds	r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	705a      	strb	r2, [r3, #1]
 80058de:	e00f      	b.n	8005900 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	f003 020f 	and.w	r2, r3, #15
 80058e6:	4613      	mov	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	3304      	adds	r3, #4
 80058f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800590c:	883b      	ldrh	r3, [r7, #0]
 800590e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	78ba      	ldrb	r2, [r7, #2]
 800591a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800592e:	78bb      	ldrb	r3, [r7, #2]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d102      	bne.n	800593a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_PCD_EP_Open+0xae>
 8005944:	2302      	movs	r3, #2
 8005946:	e00e      	b.n	8005966 <HAL_PCD_EP_Open+0xcc>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68f9      	ldr	r1, [r7, #12]
 8005956:	4618      	mov	r0, r3
 8005958:	f004 fa1a 	bl	8009d90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005964:	7afb      	ldrb	r3, [r7, #11]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800597a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800597e:	2b00      	cmp	r3, #0
 8005980:	da0f      	bge.n	80059a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	3310      	adds	r3, #16
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	3304      	adds	r3, #4
 8005998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	705a      	strb	r2, [r3, #1]
 80059a0:	e00f      	b.n	80059c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f003 020f 	and.w	r2, r3, #15
 80059a8:	4613      	mov	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4413      	add	r3, r2
 80059b8:	3304      	adds	r3, #4
 80059ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_PCD_EP_Close+0x6e>
 80059d8:	2302      	movs	r3, #2
 80059da:	e00e      	b.n	80059fa <HAL_PCD_EP_Close+0x8c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f004 fa58 	bl	8009ea0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	7afb      	ldrb	r3, [r7, #11]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2200      	movs	r2, #0
 8005a42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a44:	7afb      	ldrb	r3, [r7, #11]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	799b      	ldrb	r3, [r3, #6]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d102      	bne.n	8005a5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	799b      	ldrb	r3, [r3, #6]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6979      	ldr	r1, [r7, #20]
 8005a6a:	f004 faf5 	bl	800a058 <USB_EPStartXfer>

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005a9a:	681b      	ldr	r3, [r3, #0]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ab8:	7afb      	ldrb	r3, [r7, #11]
 8005aba:	f003 020f 	and.w	r2, r3, #15
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	3310      	adds	r3, #16
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	3304      	adds	r3, #4
 8005ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	799b      	ldrb	r3, [r3, #6]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d102      	bne.n	8005b02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	799b      	ldrb	r3, [r3, #6]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6979      	ldr	r1, [r7, #20]
 8005b0e:	f004 faa3 	bl	800a058 <USB_EPStartXfer>

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	7912      	ldrb	r2, [r2, #4]
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e04f      	b.n	8005bda <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da0f      	bge.n	8005b62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	3310      	adds	r3, #16
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	3304      	adds	r3, #4
 8005b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	705a      	strb	r2, [r3, #1]
 8005b60:	e00d      	b.n	8005b7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	4413      	add	r3, r2
 8005b74:	3304      	adds	r3, #4
 8005b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_PCD_EP_SetStall+0x82>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e01d      	b.n	8005bda <HAL_PCD_EP_SetStall+0xbe>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f004 fe31 	bl	800a814 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	7999      	ldrb	r1, [r3, #6]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f005 f822 	bl	800ac14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	7912      	ldrb	r2, [r2, #4]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e042      	b.n	8005c86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	da0f      	bge.n	8005c28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f003 020f 	and.w	r2, r3, #15
 8005c0e:	4613      	mov	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	3310      	adds	r3, #16
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	705a      	strb	r2, [r3, #1]
 8005c26:	e00f      	b.n	8005c48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	f003 020f 	and.w	r2, r3, #15
 8005c2e:	4613      	mov	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3304      	adds	r3, #4
 8005c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_PCD_EP_ClrStall+0x86>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e00e      	b.n	8005c86 <HAL_PCD_EP_ClrStall+0xa4>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f004 fe3a 	bl	800a8f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da0c      	bge.n	8005cbc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	f003 020f 	and.w	r2, r3, #15
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	3310      	adds	r3, #16
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	e00c      	b.n	8005cd6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68f9      	ldr	r1, [r7, #12]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f004 fc59 	bl	800a594 <USB_EPStopXfer>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08a      	sub	sp, #40	@ 0x28
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	3310      	adds	r3, #16
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4413      	add	r3, r2
 8005d14:	3304      	adds	r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d901      	bls.n	8005d28 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e06b      	b.n	8005e00 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d902      	bls.n	8005d44 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3303      	adds	r3, #3
 8005d48:	089b      	lsrs	r3, r3, #2
 8005d4a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d4c:	e02a      	b.n	8005da4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d902      	bls.n	8005d6a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3303      	adds	r3, #3
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68d9      	ldr	r1, [r3, #12]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4603      	mov	r3, r0
 8005d86:	6978      	ldr	r0, [r7, #20]
 8005d88:	f004 fcae 	bl	800a6e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	441a      	add	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	441a      	add	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d809      	bhi.n	8005dce <PCD_WriteEmptyTxFifo+0xde>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d203      	bcs.n	8005dce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1bf      	bne.n	8005d4e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d811      	bhi.n	8005dfe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	2201      	movs	r2, #1
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	6939      	ldr	r1, [r7, #16]
 8005df6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3720      	adds	r7, #32
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	333c      	adds	r3, #60	@ 0x3c
 8005e20:	3304      	adds	r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	799b      	ldrb	r3, [r3, #6]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d17b      	bne.n	8005f36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d015      	beq.n	8005e74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4a61      	ldr	r2, [pc, #388]	@ (8005fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	f240 80b9 	bls.w	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 80b3 	beq.w	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e70:	6093      	str	r3, [r2, #8]
 8005e72:	e0a7      	b.n	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	6093      	str	r3, [r2, #8]
 8005e90:	e098      	b.n	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 8093 	bne.w	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8005fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d90f      	bls.n	8005ec6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ec2:	6093      	str	r3, [r2, #8]
 8005ec4:	e07e      	b.n	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3304      	adds	r3, #4
 8005eda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	0159      	lsls	r1, r3, #5
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	440b      	add	r3, r1
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d114      	bne.n	8005f28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f10:	461a      	mov	r2, r3
 8005f12:	2101      	movs	r1, #1
 8005f14:	f004 fe7e 	bl	800ac14 <USB_EP0_OutStart>
 8005f18:	e006      	b.n	8005f28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	441a      	add	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f00a fa38 	bl	80103a4 <HAL_PCD_DataOutStageCallback>
 8005f34:	e046      	b.n	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4a26      	ldr	r2, [pc, #152]	@ (8005fd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d124      	bne.n	8005f88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5a:	6093      	str	r3, [r2, #8]
 8005f5c:	e032      	b.n	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f74:	461a      	mov	r2, r3
 8005f76:	2320      	movs	r3, #32
 8005f78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f00a fa0f 	bl	80103a4 <HAL_PCD_DataOutStageCallback>
 8005f86:	e01d      	b.n	8005fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d114      	bne.n	8005fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f004 fe2e 	bl	800ac14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f00a f9f0 	bl	80103a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	4f54300a 	.word	0x4f54300a
 8005fd4:	4f54310a 	.word	0x4f54310a

08005fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	333c      	adds	r3, #60	@ 0x3c
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <PCD_EP_OutSetupPacket_int+0x88>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d90e      	bls.n	800602c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006024:	461a      	mov	r2, r3
 8006026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800602a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f00a f9a7 	bl	8010380 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a0a      	ldr	r2, [pc, #40]	@ (8006060 <PCD_EP_OutSetupPacket_int+0x88>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d90c      	bls.n	8006054 <PCD_EP_OutSetupPacket_int+0x7c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	799b      	ldrb	r3, [r3, #6]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d108      	bne.n	8006054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800604c:	461a      	mov	r2, r3
 800604e:	2101      	movs	r1, #1
 8006050:	f004 fde0 	bl	800ac14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	4f54300a 	.word	0x4f54300a

08006064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
 8006070:	4613      	mov	r3, r2
 8006072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006082:	883b      	ldrh	r3, [r7, #0]
 8006084:	0419      	lsls	r1, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	430a      	orrs	r2, r1
 800608e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006090:	e028      	b.n	80060e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	0c1b      	lsrs	r3, r3, #16
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	73fb      	strb	r3, [r7, #15]
 80060a4:	e00d      	b.n	80060c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	3340      	adds	r3, #64	@ 0x40
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	0c1b      	lsrs	r3, r3, #16
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	4413      	add	r3, r2
 80060ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	3301      	adds	r3, #1
 80060c0:	73fb      	strb	r3, [r7, #15]
 80060c2:	7bfa      	ldrb	r2, [r7, #15]
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3ec      	bcc.n	80060a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80060cc:	883b      	ldrh	r3, [r7, #0]
 80060ce:	0418      	lsls	r0, r3, #16
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6819      	ldr	r1, [r3, #0]
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4302      	orrs	r2, r0
 80060dc:	3340      	adds	r3, #64	@ 0x40
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	887a      	ldrh	r2, [r7, #2]
 8006104:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e267      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d075      	beq.n	8006236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800614a:	4b88      	ldr	r3, [pc, #544]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
 8006152:	2b04      	cmp	r3, #4
 8006154:	d00c      	beq.n	8006170 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006156:	4b85      	ldr	r3, [pc, #532]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800615e:	2b08      	cmp	r3, #8
 8006160:	d112      	bne.n	8006188 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006162:	4b82      	ldr	r3, [pc, #520]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800616a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800616e:	d10b      	bne.n	8006188 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006170:	4b7e      	ldr	r3, [pc, #504]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d05b      	beq.n	8006234 <HAL_RCC_OscConfig+0x108>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d157      	bne.n	8006234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e242      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006190:	d106      	bne.n	80061a0 <HAL_RCC_OscConfig+0x74>
 8006192:	4b76      	ldr	r3, [pc, #472]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a75      	ldr	r2, [pc, #468]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e01d      	b.n	80061dc <HAL_RCC_OscConfig+0xb0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCC_OscConfig+0x98>
 80061aa:	4b70      	ldr	r3, [pc, #448]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a6f      	ldr	r2, [pc, #444]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b6d      	ldr	r3, [pc, #436]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a6c      	ldr	r2, [pc, #432]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e00b      	b.n	80061dc <HAL_RCC_OscConfig+0xb0>
 80061c4:	4b69      	ldr	r3, [pc, #420]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a68      	ldr	r2, [pc, #416]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4b66      	ldr	r3, [pc, #408]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a65      	ldr	r2, [pc, #404]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80061d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d013      	beq.n	800620c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fc fe3e 	bl	8002e64 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ec:	f7fc fe3a 	bl	8002e64 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	@ 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e207      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fe:	4b5b      	ldr	r3, [pc, #364]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0xc0>
 800620a:	e014      	b.n	8006236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620c:	f7fc fe2a 	bl	8002e64 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006214:	f7fc fe26 	bl	8002e64 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b64      	cmp	r3, #100	@ 0x64
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e1f3      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006226:	4b51      	ldr	r3, [pc, #324]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0xe8>
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d063      	beq.n	800630a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006242:	4b4a      	ldr	r3, [pc, #296]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800624e:	4b47      	ldr	r3, [pc, #284]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006256:	2b08      	cmp	r3, #8
 8006258:	d11c      	bne.n	8006294 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800625a:	4b44      	ldr	r3, [pc, #272]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d116      	bne.n	8006294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006266:	4b41      	ldr	r3, [pc, #260]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_RCC_OscConfig+0x152>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d001      	beq.n	800627e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e1c7      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800627e:	4b3b      	ldr	r3, [pc, #236]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4937      	ldr	r1, [pc, #220]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006292:	e03a      	b.n	800630a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d020      	beq.n	80062de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800629c:	4b34      	ldr	r3, [pc, #208]	@ (8006370 <HAL_RCC_OscConfig+0x244>)
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a2:	f7fc fddf 	bl	8002e64 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062aa:	f7fc fddb 	bl	8002e64 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e1a8      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062bc:	4b2b      	ldr	r3, [pc, #172]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c8:	4b28      	ldr	r3, [pc, #160]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	4925      	ldr	r1, [pc, #148]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]
 80062dc:	e015      	b.n	800630a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062de:	4b24      	ldr	r3, [pc, #144]	@ (8006370 <HAL_RCC_OscConfig+0x244>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fc fdbe 	bl	8002e64 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ec:	f7fc fdba 	bl	8002e64 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e187      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062fe:	4b1b      	ldr	r3, [pc, #108]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f0      	bne.n	80062ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d036      	beq.n	8006384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800631e:	4b15      	ldr	r3, [pc, #84]	@ (8006374 <HAL_RCC_OscConfig+0x248>)
 8006320:	2201      	movs	r2, #1
 8006322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006324:	f7fc fd9e 	bl	8002e64 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800632c:	f7fc fd9a 	bl	8002e64 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e167      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800633e:	4b0b      	ldr	r3, [pc, #44]	@ (800636c <HAL_RCC_OscConfig+0x240>)
 8006340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0x200>
 800634a:	e01b      	b.n	8006384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800634c:	4b09      	ldr	r3, [pc, #36]	@ (8006374 <HAL_RCC_OscConfig+0x248>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006352:	f7fc fd87 	bl	8002e64 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006358:	e00e      	b.n	8006378 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800635a:	f7fc fd83 	bl	8002e64 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d907      	bls.n	8006378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e150      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
 800636c:	40023800 	.word	0x40023800
 8006370:	42470000 	.word	0x42470000
 8006374:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006378:	4b88      	ldr	r3, [pc, #544]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 800637a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ea      	bne.n	800635a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8097 	beq.w	80064c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006396:	4b81      	ldr	r3, [pc, #516]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10f      	bne.n	80063c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	4b7d      	ldr	r3, [pc, #500]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	4a7c      	ldr	r2, [pc, #496]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 80063ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80063b2:	4b7a      	ldr	r3, [pc, #488]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c2:	4b77      	ldr	r3, [pc, #476]	@ (80065a0 <HAL_RCC_OscConfig+0x474>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d118      	bne.n	8006400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063ce:	4b74      	ldr	r3, [pc, #464]	@ (80065a0 <HAL_RCC_OscConfig+0x474>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a73      	ldr	r2, [pc, #460]	@ (80065a0 <HAL_RCC_OscConfig+0x474>)
 80063d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063da:	f7fc fd43 	bl	8002e64 <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e2:	f7fc fd3f 	bl	8002e64 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e10c      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f4:	4b6a      	ldr	r3, [pc, #424]	@ (80065a0 <HAL_RCC_OscConfig+0x474>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0f0      	beq.n	80063e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d106      	bne.n	8006416 <HAL_RCC_OscConfig+0x2ea>
 8006408:	4b64      	ldr	r3, [pc, #400]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 800640a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640c:	4a63      	ldr	r2, [pc, #396]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	6713      	str	r3, [r2, #112]	@ 0x70
 8006414:	e01c      	b.n	8006450 <HAL_RCC_OscConfig+0x324>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b05      	cmp	r3, #5
 800641c:	d10c      	bne.n	8006438 <HAL_RCC_OscConfig+0x30c>
 800641e:	4b5f      	ldr	r3, [pc, #380]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006422:	4a5e      	ldr	r2, [pc, #376]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006424:	f043 0304 	orr.w	r3, r3, #4
 8006428:	6713      	str	r3, [r2, #112]	@ 0x70
 800642a:	4b5c      	ldr	r3, [pc, #368]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	4a5b      	ldr	r2, [pc, #364]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	6713      	str	r3, [r2, #112]	@ 0x70
 8006436:	e00b      	b.n	8006450 <HAL_RCC_OscConfig+0x324>
 8006438:	4b58      	ldr	r3, [pc, #352]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643c:	4a57      	ldr	r2, [pc, #348]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	6713      	str	r3, [r2, #112]	@ 0x70
 8006444:	4b55      	ldr	r3, [pc, #340]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006448:	4a54      	ldr	r2, [pc, #336]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 800644a:	f023 0304 	bic.w	r3, r3, #4
 800644e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d015      	beq.n	8006484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006458:	f7fc fd04 	bl	8002e64 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645e:	e00a      	b.n	8006476 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006460:	f7fc fd00 	bl	8002e64 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e0cb      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006476:	4b49      	ldr	r3, [pc, #292]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0ee      	beq.n	8006460 <HAL_RCC_OscConfig+0x334>
 8006482:	e014      	b.n	80064ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006484:	f7fc fcee 	bl	8002e64 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800648a:	e00a      	b.n	80064a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648c:	f7fc fcea 	bl	8002e64 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e0b5      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a2:	4b3e      	ldr	r3, [pc, #248]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1ee      	bne.n	800648c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d105      	bne.n	80064c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064b4:	4b39      	ldr	r3, [pc, #228]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 80064b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b8:	4a38      	ldr	r2, [pc, #224]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 80064ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80a1 	beq.w	800660c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064ca:	4b34      	ldr	r3, [pc, #208]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d05c      	beq.n	8006590 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d141      	bne.n	8006562 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064de:	4b31      	ldr	r3, [pc, #196]	@ (80065a4 <HAL_RCC_OscConfig+0x478>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e4:	f7fc fcbe 	bl	8002e64 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ec:	f7fc fcba 	bl	8002e64 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e087      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064fe:	4b27      	ldr	r3, [pc, #156]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	019b      	lsls	r3, r3, #6
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	3b01      	subs	r3, #1
 8006524:	041b      	lsls	r3, r3, #16
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	061b      	lsls	r3, r3, #24
 800652e:	491b      	ldr	r1, [pc, #108]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006530:	4313      	orrs	r3, r2
 8006532:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006534:	4b1b      	ldr	r3, [pc, #108]	@ (80065a4 <HAL_RCC_OscConfig+0x478>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653a:	f7fc fc93 	bl	8002e64 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006542:	f7fc fc8f 	bl	8002e64 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e05c      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006554:	4b11      	ldr	r3, [pc, #68]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0x416>
 8006560:	e054      	b.n	800660c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006562:	4b10      	ldr	r3, [pc, #64]	@ (80065a4 <HAL_RCC_OscConfig+0x478>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006568:	f7fc fc7c 	bl	8002e64 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006570:	f7fc fc78 	bl	8002e64 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e045      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006582:	4b06      	ldr	r3, [pc, #24]	@ (800659c <HAL_RCC_OscConfig+0x470>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f0      	bne.n	8006570 <HAL_RCC_OscConfig+0x444>
 800658e:	e03d      	b.n	800660c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e038      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
 800659c:	40023800 	.word	0x40023800
 80065a0:	40007000 	.word	0x40007000
 80065a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006618 <HAL_RCC_OscConfig+0x4ec>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d028      	beq.n	8006608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d121      	bne.n	8006608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d11a      	bne.n	8006608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80065d8:	4013      	ands	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d111      	bne.n	8006608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	3b01      	subs	r3, #1
 80065f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d107      	bne.n	8006608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d001      	beq.n	800660c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023800 	.word	0x40023800

0800661c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e0cc      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006630:	4b68      	ldr	r3, [pc, #416]	@ (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d90c      	bls.n	8006658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663e:	4b65      	ldr	r3, [pc, #404]	@ (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b63      	ldr	r3, [pc, #396]	@ (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0b8      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d020      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006670:	4b59      	ldr	r3, [pc, #356]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4a58      	ldr	r2, [pc, #352]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800667a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006688:	4b53      	ldr	r3, [pc, #332]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4a52      	ldr	r2, [pc, #328]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006694:	4b50      	ldr	r3, [pc, #320]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	494d      	ldr	r1, [pc, #308]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d044      	beq.n	800673c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d107      	bne.n	80066ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ba:	4b47      	ldr	r3, [pc, #284]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d119      	bne.n	80066fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e07f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d003      	beq.n	80066da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d107      	bne.n	80066ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066da:	4b3f      	ldr	r3, [pc, #252]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e06f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ea:	4b3b      	ldr	r3, [pc, #236]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e067      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066fa:	4b37      	ldr	r3, [pc, #220]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f023 0203 	bic.w	r2, r3, #3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	4934      	ldr	r1, [pc, #208]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006708:	4313      	orrs	r3, r2
 800670a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800670c:	f7fc fbaa 	bl	8002e64 <HAL_GetTick>
 8006710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006712:	e00a      	b.n	800672a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006714:	f7fc fba6 	bl	8002e64 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006722:	4293      	cmp	r3, r2
 8006724:	d901      	bls.n	800672a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e04f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672a:	4b2b      	ldr	r3, [pc, #172]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 020c 	and.w	r2, r3, #12
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	429a      	cmp	r2, r3
 800673a:	d1eb      	bne.n	8006714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800673c:	4b25      	ldr	r3, [pc, #148]	@ (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d20c      	bcs.n	8006764 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674a:	4b22      	ldr	r3, [pc, #136]	@ (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b20      	ldr	r3, [pc, #128]	@ (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d001      	beq.n	8006764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e032      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006770:	4b19      	ldr	r3, [pc, #100]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4916      	ldr	r1, [pc, #88]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	4313      	orrs	r3, r2
 8006780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800678e:	4b12      	ldr	r3, [pc, #72]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	490e      	ldr	r1, [pc, #56]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067a2:	f000 f821 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b0b      	ldr	r3, [pc, #44]	@ (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	490a      	ldr	r1, [pc, #40]	@ (80067dc <HAL_RCC_ClockConfig+0x1c0>)
 80067b4:	5ccb      	ldrb	r3, [r1, r3]
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	4a09      	ldr	r2, [pc, #36]	@ (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 80067bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80067be:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fc fb0a 	bl	8002ddc <HAL_InitTick>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023c00 	.word	0x40023c00
 80067d8:	40023800 	.word	0x40023800
 80067dc:	080138e0 	.word	0x080138e0
 80067e0:	20000004 	.word	0x20000004
 80067e4:	20000008 	.word	0x20000008

080067e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067ec:	b090      	sub	sp, #64	@ 0x40
 80067ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006800:	4b59      	ldr	r3, [pc, #356]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x180>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 030c 	and.w	r3, r3, #12
 8006808:	2b08      	cmp	r3, #8
 800680a:	d00d      	beq.n	8006828 <HAL_RCC_GetSysClockFreq+0x40>
 800680c:	2b08      	cmp	r3, #8
 800680e:	f200 80a1 	bhi.w	8006954 <HAL_RCC_GetSysClockFreq+0x16c>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <HAL_RCC_GetSysClockFreq+0x34>
 8006816:	2b04      	cmp	r3, #4
 8006818:	d003      	beq.n	8006822 <HAL_RCC_GetSysClockFreq+0x3a>
 800681a:	e09b      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800681c:	4b53      	ldr	r3, [pc, #332]	@ (800696c <HAL_RCC_GetSysClockFreq+0x184>)
 800681e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006820:	e09b      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006822:	4b53      	ldr	r3, [pc, #332]	@ (8006970 <HAL_RCC_GetSysClockFreq+0x188>)
 8006824:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006826:	e098      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006828:	4b4f      	ldr	r3, [pc, #316]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x180>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006830:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006832:	4b4d      	ldr	r3, [pc, #308]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x180>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d028      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800683e:	4b4a      	ldr	r3, [pc, #296]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x180>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	099b      	lsrs	r3, r3, #6
 8006844:	2200      	movs	r2, #0
 8006846:	623b      	str	r3, [r7, #32]
 8006848:	627a      	str	r2, [r7, #36]	@ 0x24
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006850:	2100      	movs	r1, #0
 8006852:	4b47      	ldr	r3, [pc, #284]	@ (8006970 <HAL_RCC_GetSysClockFreq+0x188>)
 8006854:	fb03 f201 	mul.w	r2, r3, r1
 8006858:	2300      	movs	r3, #0
 800685a:	fb00 f303 	mul.w	r3, r0, r3
 800685e:	4413      	add	r3, r2
 8006860:	4a43      	ldr	r2, [pc, #268]	@ (8006970 <HAL_RCC_GetSysClockFreq+0x188>)
 8006862:	fba0 1202 	umull	r1, r2, r0, r2
 8006866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006868:	460a      	mov	r2, r1
 800686a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800686c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800686e:	4413      	add	r3, r2
 8006870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006874:	2200      	movs	r2, #0
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	61fa      	str	r2, [r7, #28]
 800687a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800687e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006882:	f7fa f9e1 	bl	8000c48 <__aeabi_uldivmod>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4613      	mov	r3, r2
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800688e:	e053      	b.n	8006938 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006890:	4b35      	ldr	r3, [pc, #212]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x180>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	2200      	movs	r2, #0
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	617a      	str	r2, [r7, #20]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068a2:	f04f 0b00 	mov.w	fp, #0
 80068a6:	4652      	mov	r2, sl
 80068a8:	465b      	mov	r3, fp
 80068aa:	f04f 0000 	mov.w	r0, #0
 80068ae:	f04f 0100 	mov.w	r1, #0
 80068b2:	0159      	lsls	r1, r3, #5
 80068b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068b8:	0150      	lsls	r0, r2, #5
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	ebb2 080a 	subs.w	r8, r2, sl
 80068c2:	eb63 090b 	sbc.w	r9, r3, fp
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80068d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80068da:	ebb2 0408 	subs.w	r4, r2, r8
 80068de:	eb63 0509 	sbc.w	r5, r3, r9
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	00eb      	lsls	r3, r5, #3
 80068ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068f0:	00e2      	lsls	r2, r4, #3
 80068f2:	4614      	mov	r4, r2
 80068f4:	461d      	mov	r5, r3
 80068f6:	eb14 030a 	adds.w	r3, r4, sl
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	eb45 030b 	adc.w	r3, r5, fp
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	f04f 0200 	mov.w	r2, #0
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800690e:	4629      	mov	r1, r5
 8006910:	028b      	lsls	r3, r1, #10
 8006912:	4621      	mov	r1, r4
 8006914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006918:	4621      	mov	r1, r4
 800691a:	028a      	lsls	r2, r1, #10
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006922:	2200      	movs	r2, #0
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	60fa      	str	r2, [r7, #12]
 8006928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800692c:	f7fa f98c 	bl	8000c48 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4613      	mov	r3, r2
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006938:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x180>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	3301      	adds	r3, #1
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006948:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006950:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006952:	e002      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006954:	4b05      	ldr	r3, [pc, #20]	@ (800696c <HAL_RCC_GetSysClockFreq+0x184>)
 8006956:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800695c:	4618      	mov	r0, r3
 800695e:	3740      	adds	r7, #64	@ 0x40
 8006960:	46bd      	mov	sp, r7
 8006962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	00f42400 	.word	0x00f42400
 8006970:	00b71b00 	.word	0x00b71b00

08006974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006978:	4b03      	ldr	r3, [pc, #12]	@ (8006988 <HAL_RCC_GetHCLKFreq+0x14>)
 800697a:	681b      	ldr	r3, [r3, #0]
}
 800697c:	4618      	mov	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	20000004 	.word	0x20000004

0800698c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006990:	f7ff fff0 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	0a9b      	lsrs	r3, r3, #10
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4903      	ldr	r1, [pc, #12]	@ (80069b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40023800 	.word	0x40023800
 80069b0:	080138f0 	.word	0x080138f0

080069b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e022      	b.n	8006a0c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fb fec5 	bl	8002768 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2203      	movs	r2, #3
 80069e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f814 	bl	8006a14 <HAL_SD_InitCard>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e00a      	b.n	8006a0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a14:	b5b0      	push	{r4, r5, r7, lr}
 8006a16:	b08e      	sub	sp, #56	@ 0x38
 8006a18:	af04      	add	r7, sp, #16
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006a30:	2376      	movs	r3, #118	@ 0x76
 8006a32:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681d      	ldr	r5, [r3, #0]
 8006a38:	466c      	mov	r4, sp
 8006a3a:	f107 0318 	add.w	r3, r7, #24
 8006a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a46:	f107 030c 	add.w	r3, r7, #12
 8006a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f002 f8b5 	bl	8008bbc <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006a52:	4b2a      	ldr	r3, [pc, #168]	@ (8006afc <HAL_SD_InitCard+0xe8>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f002 f8f6 	bl	8008c4e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006a62:	4b26      	ldr	r3, [pc, #152]	@ (8006afc <HAL_SD_InitCard+0xe8>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006a68:	2002      	movs	r0, #2
 8006a6a:	f7fc fa07 	bl	8002e7c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 f806 	bl	8007a80 <SD_PowerON>
 8006a74:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e02e      	b.n	8006af2 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 ff25 	bl	80078e4 <SD_InitCard>
 8006a9a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e01b      	b.n	8006af2 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 f955 	bl	8008d72 <SDMMC_CmdBlockLength>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00f      	beq.n	8006af0 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8006b00 <HAL_SD_InitCard+0xec>)
 8006ad6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3728      	adds	r7, #40	@ 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bdb0      	pop	{r4, r5, r7, pc}
 8006afa:	bf00      	nop
 8006afc:	422580a0 	.word	0x422580a0
 8006b00:	004005ff 	.word	0x004005ff

08006b04 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	@ 0x30
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0c0      	b.n	8006cae <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	f040 80b9 	bne.w	8006cac <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	441a      	add	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d907      	bls.n	8006b5e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e0a7      	b.n	8006cae <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2203      	movs	r2, #3
 8006b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006b7c:	f043 0302 	orr.w	r3, r3, #2
 8006b80:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	4a4c      	ldr	r2, [pc, #304]	@ (8006cb8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	4a4b      	ldr	r2, [pc, #300]	@ (8006cbc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006b90:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b96:	2200      	movs	r2, #0
 8006b98:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3380      	adds	r3, #128	@ 0x80
 8006bc8:	4619      	mov	r1, r3
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	025b      	lsls	r3, r3, #9
 8006bd0:	089b      	lsrs	r3, r3, #2
 8006bd2:	f7fc fb37 	bl	8003244 <HAL_DMA_Start_IT>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d017      	beq.n	8006c0c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8006bea:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a33      	ldr	r2, [pc, #204]	@ (8006cc0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006bf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e050      	b.n	8006cae <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8006cc4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d002      	beq.n	8006c20 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1c:	025b      	lsls	r3, r3, #9
 8006c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c20:	f04f 33ff 	mov.w	r3, #4294967295
 8006c24:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	025b      	lsls	r3, r3, #9
 8006c2a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c2c:	2390      	movs	r3, #144	@ 0x90
 8006c2e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006c30:	2302      	movs	r3, #2
 8006c32:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f107 0210 	add.w	r2, r7, #16
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f002 f867 	bl	8008d1a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d90a      	bls.n	8006c68 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2282      	movs	r2, #130	@ 0x82
 8006c56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f002 f8cb 	bl	8008dfa <SDMMC_CmdReadMultiBlock>
 8006c64:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006c66:	e009      	b.n	8006c7c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2281      	movs	r2, #129	@ 0x81
 8006c6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c74:	4618      	mov	r0, r3
 8006c76:	f002 f89e 	bl	8008db6 <SDMMC_CmdReadSingleBlock>
 8006c7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d012      	beq.n	8006ca8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a0e      	ldr	r2, [pc, #56]	@ (8006cc0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e002      	b.n	8006cae <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e000      	b.n	8006cae <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006cac:	2302      	movs	r3, #2
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3730      	adds	r7, #48	@ 0x30
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	080076f3 	.word	0x080076f3
 8006cbc:	08007765 	.word	0x08007765
 8006cc0:	004005ff 	.word	0x004005ff
 8006cc4:	4225858c 	.word	0x4225858c

08006cc8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08c      	sub	sp, #48	@ 0x30
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d107      	bne.n	8006cf0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0c5      	b.n	8006e7c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	f040 80be 	bne.w	8006e7a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	441a      	add	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d907      	bls.n	8006d22 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d16:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e0ac      	b.n	8006e7c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2203      	movs	r2, #3
 8006d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8006d40:	f043 0302 	orr.w	r3, r3, #2
 8006d44:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4a:	4a4e      	ldr	r2, [pc, #312]	@ (8006e84 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d52:	4a4d      	ldr	r2, [pc, #308]	@ (8006e88 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006d54:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d002      	beq.n	8006d6c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	025b      	lsls	r3, r3, #9
 8006d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d90a      	bls.n	8006d88 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22a0      	movs	r2, #160	@ 0xa0
 8006d76:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f002 f87f 	bl	8008e82 <SDMMC_CmdWriteMultiBlock>
 8006d84:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006d86:	e009      	b.n	8006d9c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2290      	movs	r2, #144	@ 0x90
 8006d8c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d94:	4618      	mov	r0, r3
 8006d96:	f002 f852 	bl	8008e3e <SDMMC_CmdWriteSingleBlock>
 8006d9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d012      	beq.n	8006dc8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a39      	ldr	r2, [pc, #228]	@ (8006e8c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006da8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db0:	431a      	orrs	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e059      	b.n	8006e7c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006dc8:	4b31      	ldr	r3, [pc, #196]	@ (8006e90 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd2:	2240      	movs	r2, #64	@ 0x40
 8006dd4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3380      	adds	r3, #128	@ 0x80
 8006dfe:	461a      	mov	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	025b      	lsls	r3, r3, #9
 8006e04:	089b      	lsrs	r3, r3, #2
 8006e06:	f7fc fa1d 	bl	8003244 <HAL_DMA_Start_IT>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01c      	beq.n	8006e4a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8006e1e:	f023 0302 	bic.w	r3, r3, #2
 8006e22:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a18      	ldr	r2, [pc, #96]	@ (8006e8c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006e2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e018      	b.n	8006e7c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	025b      	lsls	r3, r3, #9
 8006e54:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e56:	2390      	movs	r3, #144	@ 0x90
 8006e58:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006e62:	2301      	movs	r3, #1
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f107 0210 	add.w	r2, r7, #16
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 ff52 	bl	8008d1a <SDIO_ConfigData>

      return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3730      	adds	r7, #48	@ 0x30
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	080076c9 	.word	0x080076c9
 8006e88:	08007765 	.word	0x08007765
 8006e8c:	004005ff 	.word	0x004005ff
 8006e90:	4225858c 	.word	0x4225858c

08006e94 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <HAL_SD_IRQHandler+0x2e>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 f806 	bl	8007ecc <SD_Read_IT>
 8006ec0:	e165      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 808f 	beq.w	8006ff0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006eda:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006eea:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006eee:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d039      	beq.n	8006f7e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_SD_IRQHandler+0x8a>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d011      	beq.n	8006f42 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 ffd0 	bl	8008ec8 <SDMMC_CmdStopTransfer>
 8006f28:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f92f 	bl	80071a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006f4a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <HAL_SD_IRQHandler+0xda>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f003 ff8c 	bl	800ae8c <HAL_SD_RxCpltCallback>
 8006f74:	e10b      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f003 ff7e 	bl	800ae78 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f7c:	e107      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8102 	beq.w	800718e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d011      	beq.n	8006fb8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 ff95 	bl	8008ec8 <SDMMC_CmdStopTransfer>
 8006f9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8f4 	bl	80071a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f040 80e5 	bne.w	800718e <HAL_SD_IRQHandler+0x2fa>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f040 80df 	bne.w	800718e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0208 	bic.w	r2, r2, #8
 8006fde:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f003 ff45 	bl	800ae78 <HAL_SD_TxCpltCallback>
}
 8006fee:	e0ce      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d008      	beq.n	8007010 <HAL_SD_IRQHandler+0x17c>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 ffb0 	bl	8007f6e <SD_Write_IT>
 800700e:	e0be      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007016:	f240 233a 	movw	r3, #570	@ 0x23a
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80b6 	beq.w	800718e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	f043 0202 	orr.w	r2, r3, #2
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704e:	f043 0208 	orr.w	r2, r3, #8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	f043 0210 	orr.w	r2, r3, #16
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	f043 0208 	orr.w	r2, r3, #8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f240 723a 	movw	r2, #1850	@ 0x73a
 80070ac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80070bc:	f023 0302 	bic.w	r3, r3, #2
 80070c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fefe 	bl	8008ec8 <SDMMC_CmdStopTransfer>
 80070cc:	4602      	mov	r2, r0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f855 	bl	80071a0 <HAL_SD_ErrorCallback>
}
 80070f6:	e04a      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d045      	beq.n	800718e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <HAL_SD_IRQHandler+0x282>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d011      	beq.n	800713a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711a:	4a1f      	ldr	r2, [pc, #124]	@ (8007198 <HAL_SD_IRQHandler+0x304>)
 800711c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	4618      	mov	r0, r3
 8007124:	f7fc f8e6 	bl	80032f4 <HAL_DMA_Abort_IT>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d02f      	beq.n	800718e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fb68 	bl	8007808 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007138:	e029      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_SD_IRQHandler+0x2ba>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d011      	beq.n	8007172 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	4a12      	ldr	r2, [pc, #72]	@ (800719c <HAL_SD_IRQHandler+0x308>)
 8007154:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715a:	4618      	mov	r0, r3
 800715c:	f7fc f8ca 	bl	80032f4 <HAL_DMA_Abort_IT>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d013      	beq.n	800718e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fb83 	bl	8007876 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007170:	e00d      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f003 fe6c 	bl	800ae64 <HAL_SD_AbortCallback>
}
 800718c:	e7ff      	b.n	800718e <HAL_SD_IRQHandler+0x2fa>
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	08007809 	.word	0x08007809
 800719c:	08007877 	.word	0x08007877

080071a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c2:	0f9b      	lsrs	r3, r3, #30
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ce:	0e9b      	lsrs	r3, r3, #26
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e0:	0e1b      	lsrs	r3, r3, #24
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f2:	0c1b      	lsrs	r3, r3, #16
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071fe:	0a1b      	lsrs	r3, r3, #8
 8007200:	b2da      	uxtb	r2, r3
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800720a:	b2da      	uxtb	r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007214:	0d1b      	lsrs	r3, r3, #20
 8007216:	b29a      	uxth	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	b2da      	uxtb	r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007232:	0bdb      	lsrs	r3, r3, #15
 8007234:	b2db      	uxtb	r3, r3
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	b2da      	uxtb	r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007244:	0b9b      	lsrs	r3, r3, #14
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	b2da      	uxtb	r2, r3
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007256:	0b5b      	lsrs	r3, r3, #13
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007268:	0b1b      	lsrs	r3, r3, #12
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	b2da      	uxtb	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007280:	2b00      	cmp	r3, #0
 8007282:	d163      	bne.n	800734c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007288:	009a      	lsls	r2, r3, #2
 800728a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800728e:	4013      	ands	r3, r2
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007294:	0f92      	lsrs	r2, r2, #30
 8007296:	431a      	orrs	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072a0:	0edb      	lsrs	r3, r3, #27
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072b2:	0e1b      	lsrs	r3, r3, #24
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c4:	0d5b      	lsrs	r3, r3, #21
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072d6:	0c9b      	lsrs	r3, r3, #18
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072e8:	0bdb      	lsrs	r3, r3, #15
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	7e1b      	ldrb	r3, [r3, #24]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	3302      	adds	r3, #2
 800730c:	2201      	movs	r2, #1
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007316:	fb03 f202 	mul.w	r2, r3, r2
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	7a1b      	ldrb	r3, [r3, #8]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	2201      	movs	r2, #1
 800732a:	409a      	lsls	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007338:	0a52      	lsrs	r2, r2, #9
 800733a:	fb03 f202 	mul.w	r2, r3, r2
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007348:	661a      	str	r2, [r3, #96]	@ 0x60
 800734a:	e031      	b.n	80073b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007350:	2b01      	cmp	r3, #1
 8007352:	d11d      	bne.n	8007390 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	431a      	orrs	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	3301      	adds	r3, #1
 8007370:	029a      	lsls	r2, r3, #10
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007384:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	661a      	str	r2, [r3, #96]	@ 0x60
 800738e:	e00f      	b.n	80073b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a58      	ldr	r2, [pc, #352]	@ (80074f8 <HAL_SD_GetCardCSD+0x344>)
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e09d      	b.n	80074ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b4:	0b9b      	lsrs	r3, r3, #14
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c6:	09db      	lsrs	r3, r3, #7
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e8:	0fdb      	lsrs	r3, r3, #31
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f4:	0f5b      	lsrs	r3, r3, #29
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007406:	0e9b      	lsrs	r3, r3, #26
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f003 0307 	and.w	r3, r3, #7
 800740e:	b2da      	uxtb	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007418:	0d9b      	lsrs	r3, r3, #22
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	b2da      	uxtb	r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742a:	0d5b      	lsrs	r3, r3, #21
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	b2da      	uxtb	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745a:	0bdb      	lsrs	r3, r3, #15
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	0b9b      	lsrs	r3, r3, #14
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007482:	0b5b      	lsrs	r3, r3, #13
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	b2da      	uxtb	r2, r3
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007496:	0b1b      	lsrs	r3, r3, #12
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074aa:	0a9b      	lsrs	r3, r3, #10
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	004005ff 	.word	0x004005ff

080074fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007554:	b5b0      	push	{r4, r5, r7, lr}
 8007556:	b08e      	sub	sp, #56	@ 0x38
 8007558:	af04      	add	r7, sp, #16
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2203      	movs	r2, #3
 8007568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007570:	2b03      	cmp	r3, #3
 8007572:	d02e      	beq.n	80075d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800757a:	d106      	bne.n	800758a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007580:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	@ 0x38
 8007588:	e029      	b.n	80075de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007590:	d10a      	bne.n	80075a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fb2a 	bl	8007bec <SD_WideBus_Enable>
 8007598:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80075a6:	e01a      	b.n	80075de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fb67 	bl	8007c82 <SD_WideBus_Disable>
 80075b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80075c2:	e00c      	b.n	80075de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80075d0:	e005      	b.n	80075de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a26      	ldr	r2, [pc, #152]	@ (8007684 <HAL_SD_ConfigWideBusOperation+0x130>)
 80075ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80075fc:	e01f      	b.n	800763e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681d      	ldr	r5, [r3, #0]
 8007624:	466c      	mov	r4, sp
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800762e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007632:	f107 0308 	add.w	r3, r7, #8
 8007636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007638:	4628      	mov	r0, r5
 800763a:	f001 fabf 	bl	8008bbc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007646:	4618      	mov	r0, r3
 8007648:	f001 fb93 	bl	8008d72 <SDMMC_CmdBlockLength>
 800764c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a0a      	ldr	r2, [pc, #40]	@ (8007684 <HAL_SD_ConfigWideBusOperation+0x130>)
 800765a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800767a:	4618      	mov	r0, r3
 800767c:	3728      	adds	r7, #40	@ 0x28
 800767e:	46bd      	mov	sp, r7
 8007680:	bdb0      	pop	{r4, r5, r7, pc}
 8007682:	bf00      	nop
 8007684:	004005ff 	.word	0x004005ff

08007688 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007694:	f107 030c 	add.w	r3, r7, #12
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa7e 	bl	8007b9c <SD_SendStatus>
 80076a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	0a5b      	lsrs	r3, r3, #9
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80076be:	693b      	ldr	r3, [r7, #16]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80076e6:	bf00      	nop
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007704:	2b82      	cmp	r3, #130	@ 0x82
 8007706:	d111      	bne.n	800772c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fbdb 	bl	8008ec8 <SDMMC_CmdStopTransfer>
 8007712:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	431a      	orrs	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff fd3a 	bl	80071a0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0208 	bic.w	r2, r2, #8
 800773a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007744:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f003 fb99 	bl	800ae8c <HAL_SD_RxCpltCallback>
#endif
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007770:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fb ff78 	bl	8003668 <HAL_DMA_GetError>
 8007778:	4603      	mov	r3, r0
 800777a:	2b02      	cmp	r3, #2
 800777c:	d03e      	beq.n	80077fc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007784:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d002      	beq.n	800779a <SD_DMAError+0x36>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d12d      	bne.n	80077f6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a19      	ldr	r2, [pc, #100]	@ (8007804 <SD_DMAError+0xa0>)
 80077a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80077b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80077be:	6978      	ldr	r0, [r7, #20]
 80077c0:	f7ff ff62 	bl	8007688 <HAL_SD_GetCardState>
 80077c4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b06      	cmp	r3, #6
 80077ca:	d002      	beq.n	80077d2 <SD_DMAError+0x6e>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d10a      	bne.n	80077e8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 fb76 	bl	8008ec8 <SDMMC_CmdStopTransfer>
 80077dc:	4602      	mov	r2, r0
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e2:	431a      	orrs	r2, r3
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80077f6:	6978      	ldr	r0, [r7, #20]
 80077f8:	f7ff fcd2 	bl	80071a0 <HAL_SD_ErrorCallback>
#endif
  }
}
 80077fc:	bf00      	nop
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	004005ff 	.word	0x004005ff

08007808 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007814:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800781e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7ff ff31 	bl	8007688 <HAL_SD_GetCardState>
 8007826:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b06      	cmp	r3, #6
 800783a:	d002      	beq.n	8007842 <SD_DMATxAbort+0x3a>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b05      	cmp	r3, #5
 8007840:	d10a      	bne.n	8007858 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f001 fb3e 	bl	8008ec8 <SDMMC_CmdStopTransfer>
 800784c:	4602      	mov	r2, r0
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	431a      	orrs	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f003 faff 	bl	800ae64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007866:	e002      	b.n	800786e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff fc99 	bl	80071a0 <HAL_SD_ErrorCallback>
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007882:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f240 523a 	movw	r2, #1338	@ 0x53a
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff fefa 	bl	8007688 <HAL_SD_GetCardState>
 8007894:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b06      	cmp	r3, #6
 80078a8:	d002      	beq.n	80078b0 <SD_DMARxAbort+0x3a>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	d10a      	bne.n	80078c6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fb07 	bl	8008ec8 <SDMMC_CmdStopTransfer>
 80078ba:	4602      	mov	r2, r0
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	431a      	orrs	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f003 fac8 	bl	800ae64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80078d4:	e002      	b.n	80078dc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f7ff fc62 	bl	80071a0 <HAL_SD_ErrorCallback>
}
 80078dc:	bf00      	nop
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078e4:	b5b0      	push	{r4, r5, r7, lr}
 80078e6:	b094      	sub	sp, #80	@ 0x50
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80078ec:	2301      	movs	r3, #1
 80078ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f9b8 	bl	8008c6a <SDIO_GetPowerState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007900:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007904:	e0b8      	b.n	8007a78 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	2b03      	cmp	r3, #3
 800790c:	d02f      	beq.n	800796e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f001 fbe2 	bl	80090dc <SDMMC_CmdSendCID>
 8007918:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800791a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <SD_InitCard+0x40>
    {
      return errorstate;
 8007920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007922:	e0a9      	b.n	8007a78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 f9e2 	bl	8008cf4 <SDIO_GetResponse>
 8007930:	4602      	mov	r2, r0
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2104      	movs	r1, #4
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f9d9 	bl	8008cf4 <SDIO_GetResponse>
 8007942:	4602      	mov	r2, r0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2108      	movs	r1, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f001 f9d0 	bl	8008cf4 <SDIO_GetResponse>
 8007954:	4602      	mov	r2, r0
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	210c      	movs	r1, #12
 8007960:	4618      	mov	r0, r3
 8007962:	f001 f9c7 	bl	8008cf4 <SDIO_GetResponse>
 8007966:	4602      	mov	r2, r0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007972:	2b03      	cmp	r3, #3
 8007974:	d00d      	beq.n	8007992 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f107 020e 	add.w	r2, r7, #14
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f001 fbe8 	bl	8009156 <SDMMC_CmdSetRelAdd>
 8007986:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <SD_InitCard+0xae>
    {
      return errorstate;
 800798e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007990:	e072      	b.n	8007a78 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007996:	2b03      	cmp	r3, #3
 8007998:	d036      	beq.n	8007a08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800799a:	89fb      	ldrh	r3, [r7, #14]
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f001 fbb2 	bl	8009118 <SDMMC_CmdSendCSD>
 80079b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80079b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80079bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079be:	e05b      	b.n	8007a78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 f994 	bl	8008cf4 <SDIO_GetResponse>
 80079cc:	4602      	mov	r2, r0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2104      	movs	r1, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 f98b 	bl	8008cf4 <SDIO_GetResponse>
 80079de:	4602      	mov	r2, r0
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2108      	movs	r1, #8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 f982 	bl	8008cf4 <SDIO_GetResponse>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	210c      	movs	r1, #12
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 f979 	bl	8008cf4 <SDIO_GetResponse>
 8007a02:	4602      	mov	r2, r0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2104      	movs	r1, #4
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 f970 	bl	8008cf4 <SDIO_GetResponse>
 8007a14:	4603      	mov	r3, r0
 8007a16:	0d1a      	lsrs	r2, r3, #20
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff fbc6 	bl	80071b4 <HAL_SD_GetCardCSD>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007a32:	e021      	b.n	8007a78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6819      	ldr	r1, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3c:	041b      	lsls	r3, r3, #16
 8007a3e:	2200      	movs	r2, #0
 8007a40:	461c      	mov	r4, r3
 8007a42:	4615      	mov	r5, r2
 8007a44:	4622      	mov	r2, r4
 8007a46:	462b      	mov	r3, r5
 8007a48:	4608      	mov	r0, r1
 8007a4a:	f001 fa5f 	bl	8008f0c <SDMMC_CmdSelDesel>
 8007a4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <SD_InitCard+0x176>
  {
    return errorstate;
 8007a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a58:	e00e      	b.n	8007a78 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681d      	ldr	r5, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	466c      	mov	r4, sp
 8007a62:	f103 0210 	add.w	r2, r3, #16
 8007a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a70:	4628      	mov	r0, r5
 8007a72:	f001 f8a3 	bl	8008bbc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3740      	adds	r7, #64	@ 0x40
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bdb0      	pop	{r4, r5, r7, pc}

08007a80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 fa5a 	bl	8008f52 <SDMMC_CmdGoIdleState>
 8007a9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <SD_PowerON+0x2a>
  {
    return errorstate;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	e072      	b.n	8007b90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 fa6d 	bl	8008f8e <SDMMC_CmdOperCond>
 8007ab4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00d      	beq.n	8007ad8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fa43 	bl	8008f52 <SDMMC_CmdGoIdleState>
 8007acc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <SD_PowerON+0x5e>
    {
      return errorstate;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	e05b      	b.n	8007b90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d137      	bne.n	8007b56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 fa6d 	bl	8008fcc <SDMMC_CmdAppCommand>
 8007af2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02d      	beq.n	8007b56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007afa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007afe:	e047      	b.n	8007b90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 fa60 	bl	8008fcc <SDMMC_CmdAppCommand>
 8007b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <SD_PowerON+0x98>
    {
      return errorstate;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	e03b      	b.n	8007b90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	491e      	ldr	r1, [pc, #120]	@ (8007b98 <SD_PowerON+0x118>)
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 fa76 	bl	8009010 <SDMMC_CmdAppOperCommand>
 8007b24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007b30:	e02e      	b.n	8007b90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f8db 	bl	8008cf4 <SDIO_GetResponse>
 8007b3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	0fdb      	lsrs	r3, r3, #31
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <SD_PowerON+0xcc>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e000      	b.n	8007b4e <SD_PowerON+0xce>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]

    count++;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d802      	bhi.n	8007b66 <SD_PowerON+0xe6>
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0cc      	beq.n	8007b00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d902      	bls.n	8007b76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007b70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b74:	e00c      	b.n	8007b90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	645a      	str	r2, [r3, #68]	@ 0x44
 8007b86:	e002      	b.n	8007b8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	c1100000 	.word	0xc1100000

08007b9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d102      	bne.n	8007bb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007bac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bb0:	e018      	b.n	8007be4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f001 faea 	bl	8009198 <SDMMC_CmdSendStatus>
 8007bc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	e009      	b.n	8007be4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 f88c 	bl	8008cf4 <SDIO_GetResponse>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 f876 	bl	8008cf4 <SDIO_GetResponse>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c12:	d102      	bne.n	8007c1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c18:	e02f      	b.n	8007c7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c1a:	f107 030c 	add.w	r3, r7, #12
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f879 	bl	8007d18 <SD_FindSCR>
 8007c26:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	e023      	b.n	8007c7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01c      	beq.n	8007c76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c44:	041b      	lsls	r3, r3, #16
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f001 f9bf 	bl	8008fcc <SDMMC_CmdAppCommand>
 8007c4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	e00f      	b.n	8007c7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2102      	movs	r1, #2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 f9f8 	bl	8009056 <SDMMC_CmdBusWidth>
 8007c66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	e003      	b.n	8007c7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e001      	b.n	8007c7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c76:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b086      	sub	sp, #24
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f82b 	bl	8008cf4 <SDIO_GetResponse>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ca8:	d102      	bne.n	8007cb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007caa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007cae:	e02f      	b.n	8007d10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f82e 	bl	8007d18 <SD_FindSCR>
 8007cbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	e023      	b.n	8007d10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01c      	beq.n	8007d0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f001 f974 	bl	8008fcc <SDMMC_CmdAppCommand>
 8007ce4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	e00f      	b.n	8007d10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 f9ad 	bl	8009056 <SDMMC_CmdBusWidth>
 8007cfc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	e003      	b.n	8007d10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e001      	b.n	8007d10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d0c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b08f      	sub	sp, #60	@ 0x3c
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d22:	f7fb f89f 	bl	8002e64 <HAL_GetTick>
 8007d26:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2108      	movs	r1, #8
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 f817 	bl	8008d72 <SDMMC_CmdBlockLength>
 8007d44:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4e:	e0b9      	b.n	8007ec4 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d58:	041b      	lsls	r3, r3, #16
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f001 f935 	bl	8008fcc <SDMMC_CmdAppCommand>
 8007d62:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <SD_FindSCR+0x56>
  {
    return errorstate;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	e0aa      	b.n	8007ec4 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007d74:	2308      	movs	r3, #8
 8007d76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007d78:	2330      	movs	r3, #48	@ 0x30
 8007d7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f107 0210 	add.w	r2, r7, #16
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 ffc1 	bl	8008d1a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 f97c 	bl	800909a <SDMMC_CmdSendSCR>
 8007da2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d02a      	beq.n	8007e00 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dac:	e08a      	b.n	8007ec4 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00f      	beq.n	8007ddc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6819      	ldr	r1, [r3, #0]
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	f107 0208 	add.w	r2, r7, #8
 8007dc8:	18d4      	adds	r4, r2, r3
 8007dca:	4608      	mov	r0, r1
 8007dcc:	f000 ff21 	bl	8008c12 <SDIO_ReadFIFO>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	6023      	str	r3, [r4, #0]
      index++;
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dda:	e006      	b.n	8007dea <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d012      	beq.n	8007e10 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007dea:	f7fb f83b 	bl	8002e64 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d102      	bne.n	8007e00 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007dfa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007dfe:	e061      	b.n	8007ec4 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e06:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0cf      	beq.n	8007dae <SD_FindSCR+0x96>
 8007e0e:	e000      	b.n	8007e12 <SD_FindSCR+0xfa>
      break;
 8007e10:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	f003 0308 	and.w	r3, r3, #8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <SD_FindSCR+0x116>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2208      	movs	r2, #8
 8007e34:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e36:	2308      	movs	r3, #8
 8007e38:	e044      	b.n	8007ec4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e50:	2302      	movs	r3, #2
 8007e52:	e037      	b.n	8007ec4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2220      	movs	r2, #32
 8007e68:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007e6a:	2320      	movs	r3, #32
 8007e6c:	e02a      	b.n	8007ec4 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007e76:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	061a      	lsls	r2, r3, #24
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	0e1b      	lsrs	r3, r3, #24
 8007e94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	601a      	str	r2, [r3, #0]
    scr++;
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	061a      	lsls	r2, r3, #24
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007eac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007eb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	0e1b      	lsrs	r3, r3, #24
 8007ebc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	373c      	adds	r7, #60	@ 0x3c
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd90      	pop	{r4, r7, pc}

08007ecc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d03f      	beq.n	8007f66 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e033      	b.n	8007f54 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fe8e 	bl	8008c12 <SDIO_ReadFIFO>
 8007ef6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	0c1b      	lsrs	r3, r3, #16
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	3301      	adds	r3, #1
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2b07      	cmp	r3, #7
 8007f58:	d9c8      	bls.n	8007eec <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8007f66:	bf00      	nop
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d043      	beq.n	8008010 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e037      	b.n	8007ffe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	021a      	lsls	r2, r3, #8
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	041a      	lsls	r2, r3, #16
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	061a      	lsls	r2, r3, #24
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f107 0208 	add.w	r2, r7, #8
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fe1a 	bl	8008c2c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b07      	cmp	r3, #7
 8008002:	d9c4      	bls.n	8007f8e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008010:	bf00      	nop
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e07b      	b.n	8008122 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d108      	bne.n	8008044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800803a:	d009      	beq.n	8008050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	61da      	str	r2, [r3, #28]
 8008042:	e005      	b.n	8008050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fa fc7c 	bl	8002968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	431a      	orrs	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d4:	ea42 0103 	orr.w	r1, r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	0c1b      	lsrs	r3, r3, #16
 80080ee:	f003 0104 	and.w	r1, r3, #4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f6:	f003 0210 	and.w	r2, r3, #16
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69da      	ldr	r2, [r3, #28]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b088      	sub	sp, #32
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800813a:	f7fa fe93 	bl	8002e64 <HAL_GetTick>
 800813e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	d001      	beq.n	8008154 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
 8008152:	e12a      	b.n	80083aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <HAL_SPI_Transmit+0x36>
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e122      	b.n	80083aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_SPI_Transmit+0x48>
 800816e:	2302      	movs	r3, #2
 8008170:	e11b      	b.n	80083aa <HAL_SPI_Transmit+0x280>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2203      	movs	r2, #3
 800817e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	88fa      	ldrh	r2, [r7, #6]
 8008192:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081c0:	d10f      	bne.n	80081e2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	d007      	beq.n	8008200 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008208:	d152      	bne.n	80082b0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <HAL_SPI_Transmit+0xee>
 8008212:	8b7b      	ldrh	r3, [r7, #26]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d145      	bne.n	80082a4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821c:	881a      	ldrh	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	1c9a      	adds	r2, r3, #2
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008232:	b29b      	uxth	r3, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800823c:	e032      	b.n	80082a4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b02      	cmp	r3, #2
 800824a:	d112      	bne.n	8008272 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008250:	881a      	ldrh	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	1c9a      	adds	r2, r3, #2
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008266:	b29b      	uxth	r3, r3
 8008268:	3b01      	subs	r3, #1
 800826a:	b29a      	uxth	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008270:	e018      	b.n	80082a4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008272:	f7fa fdf7 	bl	8002e64 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	429a      	cmp	r2, r3
 8008280:	d803      	bhi.n	800828a <HAL_SPI_Transmit+0x160>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d102      	bne.n	8008290 <HAL_SPI_Transmit+0x166>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e082      	b.n	80083aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1c7      	bne.n	800823e <HAL_SPI_Transmit+0x114>
 80082ae:	e053      	b.n	8008358 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <HAL_SPI_Transmit+0x194>
 80082b8:	8b7b      	ldrh	r3, [r7, #26]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d147      	bne.n	800834e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	330c      	adds	r3, #12
 80082c8:	7812      	ldrb	r2, [r2, #0]
 80082ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b01      	subs	r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80082e4:	e033      	b.n	800834e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d113      	bne.n	800831c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	7812      	ldrb	r2, [r2, #0]
 8008300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008310:	b29b      	uxth	r3, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	b29a      	uxth	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	86da      	strh	r2, [r3, #54]	@ 0x36
 800831a:	e018      	b.n	800834e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800831c:	f7fa fda2 	bl	8002e64 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d803      	bhi.n	8008334 <HAL_SPI_Transmit+0x20a>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d102      	bne.n	800833a <HAL_SPI_Transmit+0x210>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e02d      	b.n	80083aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1c6      	bne.n	80082e6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fbd9 	bl	8008b14 <SPI_EndRxTxTransaction>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80083a8:	2300      	movs	r3, #0
  }
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3720      	adds	r7, #32
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b088      	sub	sp, #32
 80083b6:	af02      	add	r7, sp, #8
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	603b      	str	r3, [r7, #0]
 80083be:	4613      	mov	r3, r2
 80083c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d001      	beq.n	80083d2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80083ce:	2302      	movs	r3, #2
 80083d0:	e104      	b.n	80085dc <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <HAL_SPI_Receive+0x2c>
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e0fc      	b.n	80085dc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083ea:	d112      	bne.n	8008412 <HAL_SPI_Receive+0x60>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10e      	bne.n	8008412 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2204      	movs	r2, #4
 80083f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80083fc:	88fa      	ldrh	r2, [r7, #6]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4613      	mov	r3, r2
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f8eb 	bl	80085e4 <HAL_SPI_TransmitReceive>
 800840e:	4603      	mov	r3, r0
 8008410:	e0e4      	b.n	80085dc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008412:	f7fa fd27 	bl	8002e64 <HAL_GetTick>
 8008416:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_SPI_Receive+0x74>
 8008422:	2302      	movs	r3, #2
 8008424:	e0da      	b.n	80085dc <HAL_SPI_Receive+0x22a>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2204      	movs	r2, #4
 8008432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008474:	d10f      	bne.n	8008496 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008494:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a0:	2b40      	cmp	r3, #64	@ 0x40
 80084a2:	d007      	beq.n	80084b4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d170      	bne.n	800859e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80084bc:	e035      	b.n	800852a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d115      	bne.n	80084f8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f103 020c 	add.w	r2, r3, #12
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d8:	7812      	ldrb	r2, [r2, #0]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084f6:	e018      	b.n	800852a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f8:	f7fa fcb4 	bl	8002e64 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d803      	bhi.n	8008510 <HAL_SPI_Receive+0x15e>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d102      	bne.n	8008516 <HAL_SPI_Receive+0x164>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e058      	b.n	80085dc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800852e:	b29b      	uxth	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1c4      	bne.n	80084be <HAL_SPI_Receive+0x10c>
 8008534:	e038      	b.n	80085a8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b01      	cmp	r3, #1
 8008542:	d113      	bne.n	800856c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	b292      	uxth	r2, r2
 8008550:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008556:	1c9a      	adds	r2, r3, #2
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008560:	b29b      	uxth	r3, r3
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800856a:	e018      	b.n	800859e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800856c:	f7fa fc7a 	bl	8002e64 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d803      	bhi.n	8008584 <HAL_SPI_Receive+0x1d2>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008582:	d102      	bne.n	800858a <HAL_SPI_Receive+0x1d8>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e01e      	b.n	80085dc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1c6      	bne.n	8008536 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 fa4b 	bl	8008a48 <SPI_EndRxTransaction>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2220      	movs	r2, #32
 80085bc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80085da:	2300      	movs	r3, #0
  }
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	@ 0x28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085f2:	2301      	movs	r3, #1
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085f6:	f7fa fc35 	bl	8002e64 <HAL_GetTick>
 80085fa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008602:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800860a:	887b      	ldrh	r3, [r7, #2]
 800860c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800860e:	7ffb      	ldrb	r3, [r7, #31]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d00c      	beq.n	800862e <HAL_SPI_TransmitReceive+0x4a>
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800861a:	d106      	bne.n	800862a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <HAL_SPI_TransmitReceive+0x46>
 8008624:	7ffb      	ldrb	r3, [r7, #31]
 8008626:	2b04      	cmp	r3, #4
 8008628:	d001      	beq.n	800862e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800862a:	2302      	movs	r3, #2
 800862c:	e17f      	b.n	800892e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <HAL_SPI_TransmitReceive+0x5c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_SPI_TransmitReceive+0x5c>
 800863a:	887b      	ldrh	r3, [r7, #2]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e174      	b.n	800892e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x6e>
 800864e:	2302      	movs	r3, #2
 8008650:	e16d      	b.n	800892e <HAL_SPI_TransmitReceive+0x34a>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b04      	cmp	r3, #4
 8008664:	d003      	beq.n	800866e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2205      	movs	r2, #5
 800866a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	887a      	ldrh	r2, [r7, #2]
 800867e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	887a      	ldrh	r2, [r7, #2]
 8008684:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	887a      	ldrh	r2, [r7, #2]
 8008690:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	887a      	ldrh	r2, [r7, #2]
 8008696:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ae:	2b40      	cmp	r3, #64	@ 0x40
 80086b0:	d007      	beq.n	80086c2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086ca:	d17e      	bne.n	80087ca <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <HAL_SPI_TransmitReceive+0xf6>
 80086d4:	8afb      	ldrh	r3, [r7, #22]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d16c      	bne.n	80087b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086de:	881a      	ldrh	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ea:	1c9a      	adds	r2, r3, #2
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086fe:	e059      	b.n	80087b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b02      	cmp	r3, #2
 800870c:	d11b      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x162>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008712:	b29b      	uxth	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d016      	beq.n	8008746 <HAL_SPI_TransmitReceive+0x162>
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	2b01      	cmp	r3, #1
 800871c:	d113      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	881a      	ldrh	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872e:	1c9a      	adds	r2, r3, #2
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b01      	cmp	r3, #1
 8008752:	d119      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x1a4>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d014      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008768:	b292      	uxth	r2, r2
 800876a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	1c9a      	adds	r2, r3, #2
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008784:	2301      	movs	r3, #1
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008788:	f7fa fb6c 	bl	8002e64 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008794:	429a      	cmp	r2, r3
 8008796:	d80d      	bhi.n	80087b4 <HAL_SPI_TransmitReceive+0x1d0>
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d009      	beq.n	80087b4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0bc      	b.n	800892e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1a0      	bne.n	8008700 <HAL_SPI_TransmitReceive+0x11c>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d19b      	bne.n	8008700 <HAL_SPI_TransmitReceive+0x11c>
 80087c8:	e082      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_SPI_TransmitReceive+0x1f4>
 80087d2:	8afb      	ldrh	r3, [r7, #22]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d171      	bne.n	80088bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	330c      	adds	r3, #12
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087fe:	e05d      	b.n	80088bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b02      	cmp	r3, #2
 800880c:	d11c      	bne.n	8008848 <HAL_SPI_TransmitReceive+0x264>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d017      	beq.n	8008848 <HAL_SPI_TransmitReceive+0x264>
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	2b01      	cmp	r3, #1
 800881c:	d114      	bne.n	8008848 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	330c      	adds	r3, #12
 8008828:	7812      	ldrb	r2, [r2, #0]
 800882a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800883a:	b29b      	uxth	r3, r3
 800883c:	3b01      	subs	r3, #1
 800883e:	b29a      	uxth	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b01      	cmp	r3, #1
 8008854:	d119      	bne.n	800888a <HAL_SPI_TransmitReceive+0x2a6>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d014      	beq.n	800888a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008886:	2301      	movs	r3, #1
 8008888:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800888a:	f7fa faeb 	bl	8002e64 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008896:	429a      	cmp	r2, r3
 8008898:	d803      	bhi.n	80088a2 <HAL_SPI_TransmitReceive+0x2be>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d102      	bne.n	80088a8 <HAL_SPI_TransmitReceive+0x2c4>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d109      	bne.n	80088bc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e038      	b.n	800892e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d19c      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x21c>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d197      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088d0:	6a3a      	ldr	r2, [r7, #32]
 80088d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f91d 	bl	8008b14 <SPI_EndRxTxTransaction>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d008      	beq.n	80088f2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2220      	movs	r2, #32
 80088e4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e01d      	b.n	800892e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	613b      	str	r3, [r7, #16]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	613b      	str	r3, [r7, #16]
 800890e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e000      	b.n	800892e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800892c:	2300      	movs	r3, #0
  }
}
 800892e:	4618      	mov	r0, r3
 8008930:	3728      	adds	r7, #40	@ 0x28
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008948:	f7fa fa8c 	bl	8002e64 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	4413      	add	r3, r2
 8008956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008958:	f7fa fa84 	bl	8002e64 <HAL_GetTick>
 800895c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800895e:	4b39      	ldr	r3, [pc, #228]	@ (8008a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	015b      	lsls	r3, r3, #5
 8008964:	0d1b      	lsrs	r3, r3, #20
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800896e:	e055      	b.n	8008a1c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d051      	beq.n	8008a1c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008978:	f7fa fa74 	bl	8002e64 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	429a      	cmp	r2, r3
 8008986:	d902      	bls.n	800898e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d13d      	bne.n	8008a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800899c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089a6:	d111      	bne.n	80089cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089b0:	d004      	beq.n	80089bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ba:	d107      	bne.n	80089cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d4:	d10f      	bne.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e018      	b.n	8008a3c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d102      	bne.n	8008a16 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]
 8008a14:	e002      	b.n	8008a1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	4013      	ands	r3, r2
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	bf0c      	ite	eq
 8008a2c:	2301      	moveq	r3, #1
 8008a2e:	2300      	movne	r3, #0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	461a      	mov	r2, r3
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d19a      	bne.n	8008970 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20000004 	.word	0x20000004

08008a48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a5c:	d111      	bne.n	8008a82 <SPI_EndRxTransaction+0x3a>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a66:	d004      	beq.n	8008a72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a70:	d107      	bne.n	8008a82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a8a:	d12a      	bne.n	8008ae2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a94:	d012      	beq.n	8008abc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2180      	movs	r1, #128	@ 0x80
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff ff49 	bl	8008938 <SPI_WaitFlagStateUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d02d      	beq.n	8008b08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab0:	f043 0220 	orr.w	r2, r3, #32
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e026      	b.n	8008b0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f7ff ff36 	bl	8008938 <SPI_WaitFlagStateUntilTimeout>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01a      	beq.n	8008b08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad6:	f043 0220 	orr.w	r2, r3, #32
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e013      	b.n	8008b0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2101      	movs	r1, #1
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff ff23 	bl	8008938 <SPI_WaitFlagStateUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d007      	beq.n	8008b08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008afc:	f043 0220 	orr.w	r2, r3, #32
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e000      	b.n	8008b0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2201      	movs	r2, #1
 8008b28:	2102      	movs	r1, #2
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f7ff ff04 	bl	8008938 <SPI_WaitFlagStateUntilTimeout>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3a:	f043 0220 	orr.w	r2, r3, #32
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e032      	b.n	8008bac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b46:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb4 <SPI_EndRxTxTransaction+0xa0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bb8 <SPI_EndRxTxTransaction+0xa4>)
 8008b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b50:	0d5b      	lsrs	r3, r3, #21
 8008b52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b56:	fb02 f303 	mul.w	r3, r2, r3
 8008b5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b64:	d112      	bne.n	8008b8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2180      	movs	r1, #128	@ 0x80
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7ff fee1 	bl	8008938 <SPI_WaitFlagStateUntilTimeout>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d016      	beq.n	8008baa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b80:	f043 0220 	orr.w	r2, r3, #32
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e00f      	b.n	8008bac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ba2:	2b80      	cmp	r3, #128	@ 0x80
 8008ba4:	d0f2      	beq.n	8008b8c <SPI_EndRxTxTransaction+0x78>
 8008ba6:	e000      	b.n	8008baa <SPI_EndRxTxTransaction+0x96>
        break;
 8008ba8:	bf00      	nop
  }

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	20000004 	.word	0x20000004
 8008bb8:	165e9f81 	.word	0x165e9f81

08008bbc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	f107 001c 	add.w	r0, r7, #28
 8008bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008bd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008bd6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008bda:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008bde:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008be2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008be6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008bf6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	b004      	add	sp, #16
 8008c10:	4770      	bx	lr

08008c12 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0303 	and.w	r3, r3, #3
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b085      	sub	sp, #20
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ca4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008caa:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008cb0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008cc0:	f023 030f 	bic.w	r3, r3, #15
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	b2db      	uxtb	r3, r3
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3314      	adds	r3, #20
 8008d02:	461a      	mov	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	4413      	add	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
}  
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d40:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d46:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d4c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d58:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0

}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b088      	sub	sp, #32
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d80:	2310      	movs	r3, #16
 8008d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d84:	2340      	movs	r3, #64	@ 0x40
 8008d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff ff74 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da2:	2110      	movs	r1, #16
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fa19 	bl	80091dc <SDMMC_GetCmdResp1>
 8008daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dac:	69fb      	ldr	r3, [r7, #28]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b088      	sub	sp, #32
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008dc4:	2311      	movs	r3, #17
 8008dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dc8:	2340      	movs	r3, #64	@ 0x40
 8008dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dd6:	f107 0308 	add.w	r3, r7, #8
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ff52 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008de6:	2111      	movs	r1, #17
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9f7 	bl	80091dc <SDMMC_GetCmdResp1>
 8008dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df0:	69fb      	ldr	r3, [r7, #28]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3720      	adds	r7, #32
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b088      	sub	sp, #32
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e08:	2312      	movs	r3, #18
 8008e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e0c:	2340      	movs	r3, #64	@ 0x40
 8008e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff ff30 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e2a:	2112      	movs	r1, #18
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f9d5 	bl	80091dc <SDMMC_GetCmdResp1>
 8008e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e34:	69fb      	ldr	r3, [r7, #28]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b088      	sub	sp, #32
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e4c:	2318      	movs	r3, #24
 8008e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e50:	2340      	movs	r3, #64	@ 0x40
 8008e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff0e 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e6e:	2118      	movs	r1, #24
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f9b3 	bl	80091dc <SDMMC_GetCmdResp1>
 8008e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e78:	69fb      	ldr	r3, [r7, #28]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e90:	2319      	movs	r3, #25
 8008e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e94:	2340      	movs	r3, #64	@ 0x40
 8008e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ea2:	f107 0308 	add.w	r3, r7, #8
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff feec 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eb2:	2119      	movs	r1, #25
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f991 	bl	80091dc <SDMMC_GetCmdResp1>
 8008eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ed8:	2340      	movs	r3, #64	@ 0x40
 8008eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ee4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff feca 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008ef2:	4a05      	ldr	r2, [pc, #20]	@ (8008f08 <SDMMC_CmdStopTransfer+0x40>)
 8008ef4:	210c      	movs	r1, #12
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f970 	bl	80091dc <SDMMC_GetCmdResp1>
 8008efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008efe:	69fb      	ldr	r3, [r7, #28]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	05f5e100 	.word	0x05f5e100

08008f0c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	@ 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f1c:	2307      	movs	r3, #7
 8008f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f20:	2340      	movs	r3, #64	@ 0x40
 8008f22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f24:	2300      	movs	r3, #0
 8008f26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f2c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f2e:	f107 0310 	add.w	r3, r7, #16
 8008f32:	4619      	mov	r1, r3
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fea6 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f3e:	2107      	movs	r1, #7
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 f94b 	bl	80091dc <SDMMC_GetCmdResp1>
 8008f46:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3728      	adds	r7, #40	@ 0x28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b088      	sub	sp, #32
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008f62:	2300      	movs	r3, #0
 8008f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f70:	f107 0308 	add.w	r3, r7, #8
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff fe85 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fb65 	bl	800964c <SDMMC_GetCmdError>
 8008f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f84:	69fb      	ldr	r3, [r7, #28]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f96:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f9c:	2308      	movs	r3, #8
 8008f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fa0:	2340      	movs	r3, #64	@ 0x40
 8008fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fae:	f107 0308 	add.w	r3, r7, #8
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff fe66 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 faf8 	bl	80095b0 <SDMMC_GetCmdResp7>
 8008fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3720      	adds	r7, #32
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b088      	sub	sp, #32
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fda:	2337      	movs	r3, #55	@ 0x37
 8008fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fde:	2340      	movs	r3, #64	@ 0x40
 8008fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fec:	f107 0308 	add.w	r3, r7, #8
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff fe47 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ffc:	2137      	movs	r1, #55	@ 0x37
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8ec 	bl	80091dc <SDMMC_GetCmdResp1>
 8009004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009006:	69fb      	ldr	r3, [r7, #28]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3720      	adds	r7, #32
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009020:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009026:	2329      	movs	r3, #41	@ 0x29
 8009028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800902a:	2340      	movs	r3, #64	@ 0x40
 800902c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009036:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009038:	f107 0308 	add.w	r3, r7, #8
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fe21 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f9ff 	bl	8009448 <SDMMC_GetCmdResp3>
 800904a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800904c:	69fb      	ldr	r3, [r7, #28]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3720      	adds	r7, #32
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b088      	sub	sp, #32
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009064:	2306      	movs	r3, #6
 8009066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009068:	2340      	movs	r3, #64	@ 0x40
 800906a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009074:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009076:	f107 0308 	add.w	r3, r7, #8
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff fe02 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009086:	2106      	movs	r1, #6
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8a7 	bl	80091dc <SDMMC_GetCmdResp1>
 800908e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009090:	69fb      	ldr	r3, [r7, #28]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3720      	adds	r7, #32
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b088      	sub	sp, #32
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090a6:	2333      	movs	r3, #51	@ 0x33
 80090a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090aa:	2340      	movs	r3, #64	@ 0x40
 80090ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ae:	2300      	movs	r3, #0
 80090b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090b8:	f107 0308 	add.w	r3, r7, #8
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff fde1 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80090c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090c8:	2133      	movs	r1, #51	@ 0x33
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f886 	bl	80091dc <SDMMC_GetCmdResp1>
 80090d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d2:	69fb      	ldr	r3, [r7, #28]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3720      	adds	r7, #32
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090e8:	2302      	movs	r3, #2
 80090ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80090ec:	23c0      	movs	r3, #192	@ 0xc0
 80090ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff fdc0 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f956 	bl	80093b8 <SDMMC_GetCmdResp2>
 800910c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910e:	69fb      	ldr	r3, [r7, #28]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009126:	2309      	movs	r3, #9
 8009128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800912a:	23c0      	movs	r3, #192	@ 0xc0
 800912c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fda1 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f937 	bl	80093b8 <SDMMC_GetCmdResp2>
 800914a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800914c:	69fb      	ldr	r3, [r7, #28]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b088      	sub	sp, #32
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009164:	2303      	movs	r3, #3
 8009166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009168:	2340      	movs	r3, #64	@ 0x40
 800916a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009176:	f107 0308 	add.w	r3, r7, #8
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff fd82 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	2103      	movs	r1, #3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f99c 	bl	80094c4 <SDMMC_GetCmdResp6>
 800918c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800918e:	69fb      	ldr	r3, [r7, #28]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3720      	adds	r7, #32
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091a6:	230d      	movs	r3, #13
 80091a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091aa:	2340      	movs	r3, #64	@ 0x40
 80091ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091b8:	f107 0308 	add.w	r3, r7, #8
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7ff fd61 	bl	8008c86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80091c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091c8:	210d      	movs	r1, #13
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f806 	bl	80091dc <SDMMC_GetCmdResp1>
 80091d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d2:	69fb      	ldr	r3, [r7, #28]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	460b      	mov	r3, r1
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80091ea:	4b70      	ldr	r3, [pc, #448]	@ (80093ac <SDMMC_GetCmdResp1+0x1d0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a70      	ldr	r2, [pc, #448]	@ (80093b0 <SDMMC_GetCmdResp1+0x1d4>)
 80091f0:	fba2 2303 	umull	r2, r3, r2, r3
 80091f4:	0a5a      	lsrs	r2, r3, #9
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	fb02 f303 	mul.w	r3, r2, r3
 80091fc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	1e5a      	subs	r2, r3, #1
 8009202:	61fa      	str	r2, [r7, #28]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009208:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800920c:	e0c9      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009212:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0ef      	beq.n	80091fe <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1ea      	bne.n	80091fe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d004      	beq.n	800923e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2204      	movs	r2, #4
 8009238:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800923a:	2304      	movs	r3, #4
 800923c:	e0b1      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b00      	cmp	r3, #0
 8009248:	d004      	beq.n	8009254 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009250:	2301      	movs	r3, #1
 8009252:	e0a6      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	22c5      	movs	r2, #197	@ 0xc5
 8009258:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f7ff fd3d 	bl	8008cda <SDIO_GetCommandResponse>
 8009260:	4603      	mov	r3, r0
 8009262:	461a      	mov	r2, r3
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	4293      	cmp	r3, r2
 8009268:	d001      	beq.n	800926e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800926a:	2301      	movs	r3, #1
 800926c:	e099      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800926e:	2100      	movs	r1, #0
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7ff fd3f 	bl	8008cf4 <SDIO_GetResponse>
 8009276:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	4b4e      	ldr	r3, [pc, #312]	@ (80093b4 <SDMMC_GetCmdResp1+0x1d8>)
 800927c:	4013      	ands	r3, r2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009282:	2300      	movs	r3, #0
 8009284:	e08d      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	da02      	bge.n	8009292 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800928c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009290:	e087      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800929c:	2340      	movs	r3, #64	@ 0x40
 800929e:	e080      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092aa:	2380      	movs	r3, #128	@ 0x80
 80092ac:	e079      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092bc:	e071      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092cc:	e069      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092dc:	e061      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80092e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092ec:	e059      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092fc:	e051      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009308:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800930c:	e049      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009318:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800931c:	e041      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009328:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800932c:	e039      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009338:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800933c:	e031      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009348:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800934c:	e029      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009358:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800935c:	e021      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009368:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800936c:	e019      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009378:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800937c:	e011      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009388:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800938c:	e009      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f003 0308 	and.w	r3, r3, #8
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009398:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800939c:	e001      	b.n	80093a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800939e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20000004 	.word	0x20000004
 80093b0:	10624dd3 	.word	0x10624dd3
 80093b4:	fdffe008 	.word	0xfdffe008

080093b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <SDMMC_GetCmdResp2+0x88>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a1f      	ldr	r2, [pc, #124]	@ (8009444 <SDMMC_GetCmdResp2+0x8c>)
 80093c6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ca:	0a5b      	lsrs	r3, r3, #9
 80093cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d0:	fb02 f303 	mul.w	r3, r2, r3
 80093d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1e5a      	subs	r2, r3, #1
 80093da:	60fa      	str	r2, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093e4:	e026      	b.n	8009434 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ef      	beq.n	80093d6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1ea      	bne.n	80093d6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2204      	movs	r2, #4
 8009410:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009412:	2304      	movs	r3, #4
 8009414:	e00e      	b.n	8009434 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009428:	2301      	movs	r3, #1
 800942a:	e003      	b.n	8009434 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	22c5      	movs	r2, #197	@ 0xc5
 8009430:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	20000004 	.word	0x20000004
 8009444:	10624dd3 	.word	0x10624dd3

08009448 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009450:	4b1a      	ldr	r3, [pc, #104]	@ (80094bc <SDMMC_GetCmdResp3+0x74>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a1a      	ldr	r2, [pc, #104]	@ (80094c0 <SDMMC_GetCmdResp3+0x78>)
 8009456:	fba2 2303 	umull	r2, r3, r2, r3
 800945a:	0a5b      	lsrs	r3, r3, #9
 800945c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009460:	fb02 f303 	mul.w	r3, r2, r3
 8009464:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	1e5a      	subs	r2, r3, #1
 800946a:	60fa      	str	r2, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009470:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009474:	e01b      	b.n	80094ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0ef      	beq.n	8009466 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1ea      	bne.n	8009466 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2204      	movs	r2, #4
 80094a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094a2:	2304      	movs	r3, #4
 80094a4:	e003      	b.n	80094ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	22c5      	movs	r2, #197	@ 0xc5
 80094aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20000004 	.word	0x20000004
 80094c0:	10624dd3 	.word	0x10624dd3

080094c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	460b      	mov	r3, r1
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094d2:	4b35      	ldr	r3, [pc, #212]	@ (80095a8 <SDMMC_GetCmdResp6+0xe4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a35      	ldr	r2, [pc, #212]	@ (80095ac <SDMMC_GetCmdResp6+0xe8>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	0a5b      	lsrs	r3, r3, #9
 80094de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	1e5a      	subs	r2, r3, #1
 80094ec:	61fa      	str	r2, [r7, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094f6:	e052      	b.n	800959e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0ef      	beq.n	80094e8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1ea      	bne.n	80094e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2204      	movs	r2, #4
 8009522:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009524:	2304      	movs	r3, #4
 8009526:	e03a      	b.n	800959e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800953a:	2301      	movs	r3, #1
 800953c:	e02f      	b.n	800959e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff fbcb 	bl	8008cda <SDIO_GetCommandResponse>
 8009544:	4603      	mov	r3, r0
 8009546:	461a      	mov	r2, r3
 8009548:	7afb      	ldrb	r3, [r7, #11]
 800954a:	4293      	cmp	r3, r2
 800954c:	d001      	beq.n	8009552 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800954e:	2301      	movs	r3, #1
 8009550:	e025      	b.n	800959e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	22c5      	movs	r2, #197	@ 0xc5
 8009556:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009558:	2100      	movs	r1, #0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff fbca 	bl	8008cf4 <SDIO_GetResponse>
 8009560:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	0c1b      	lsrs	r3, r3, #16
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009576:	2300      	movs	r3, #0
 8009578:	e011      	b.n	800959e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009588:	e009      	b.n	800959e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009598:	e001      	b.n	800959e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800959a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20000004 	.word	0x20000004
 80095ac:	10624dd3 	.word	0x10624dd3

080095b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095b8:	4b22      	ldr	r3, [pc, #136]	@ (8009644 <SDMMC_GetCmdResp7+0x94>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a22      	ldr	r2, [pc, #136]	@ (8009648 <SDMMC_GetCmdResp7+0x98>)
 80095be:	fba2 2303 	umull	r2, r3, r2, r3
 80095c2:	0a5b      	lsrs	r3, r3, #9
 80095c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095c8:	fb02 f303 	mul.w	r3, r2, r3
 80095cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1e5a      	subs	r2, r3, #1
 80095d2:	60fa      	str	r2, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095dc:	e02c      	b.n	8009638 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0ef      	beq.n	80095ce <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1ea      	bne.n	80095ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2204      	movs	r2, #4
 8009608:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800960a:	2304      	movs	r3, #4
 800960c:	e014      	b.n	8009638 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009620:	2301      	movs	r3, #1
 8009622:	e009      	b.n	8009638 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2240      	movs	r2, #64	@ 0x40
 8009634:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009636:	2300      	movs	r3, #0
  
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	20000004 	.word	0x20000004
 8009648:	10624dd3 	.word	0x10624dd3

0800964c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009654:	4b11      	ldr	r3, [pc, #68]	@ (800969c <SDMMC_GetCmdError+0x50>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a11      	ldr	r2, [pc, #68]	@ (80096a0 <SDMMC_GetCmdError+0x54>)
 800965a:	fba2 2303 	umull	r2, r3, r2, r3
 800965e:	0a5b      	lsrs	r3, r3, #9
 8009660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009664:	fb02 f303 	mul.w	r3, r2, r3
 8009668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	1e5a      	subs	r2, r3, #1
 800966e:	60fa      	str	r2, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009674:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009678:	e009      	b.n	800968e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800967e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0f1      	beq.n	800966a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	22c5      	movs	r2, #197	@ 0xc5
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000004 	.word	0x20000004
 80096a0:	10624dd3 	.word	0x10624dd3

080096a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096a4:	b084      	sub	sp, #16
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	f107 001c 	add.w	r0, r7, #28
 80096b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d123      	bne.n	8009706 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80096d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d105      	bne.n	80096fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fae8 	bl	800acd0 <USB_CoreReset>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	e01b      	b.n	800973e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 fadc 	bl	800acd0 <USB_CoreReset>
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800971c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009720:	2b00      	cmp	r3, #0
 8009722:	d106      	bne.n	8009732 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009728:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009730:	e005      	b.n	800973e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009736:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800973e:	7fbb      	ldrb	r3, [r7, #30]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d10b      	bne.n	800975c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f043 0206 	orr.w	r2, r3, #6
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f043 0220 	orr.w	r2, r3, #32
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009768:	b004      	add	sp, #16
 800976a:	4770      	bx	lr

0800976c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	4613      	mov	r3, r2
 8009778:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d165      	bne.n	800984c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4a41      	ldr	r2, [pc, #260]	@ (8009888 <USB_SetTurnaroundTime+0x11c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d906      	bls.n	8009796 <USB_SetTurnaroundTime+0x2a>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4a40      	ldr	r2, [pc, #256]	@ (800988c <USB_SetTurnaroundTime+0x120>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d202      	bcs.n	8009796 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009790:	230f      	movs	r3, #15
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e062      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4a3c      	ldr	r2, [pc, #240]	@ (800988c <USB_SetTurnaroundTime+0x120>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d306      	bcc.n	80097ac <USB_SetTurnaroundTime+0x40>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	4a3b      	ldr	r2, [pc, #236]	@ (8009890 <USB_SetTurnaroundTime+0x124>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d202      	bcs.n	80097ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80097a6:	230e      	movs	r3, #14
 80097a8:	617b      	str	r3, [r7, #20]
 80097aa:	e057      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4a38      	ldr	r2, [pc, #224]	@ (8009890 <USB_SetTurnaroundTime+0x124>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d306      	bcc.n	80097c2 <USB_SetTurnaroundTime+0x56>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4a37      	ldr	r2, [pc, #220]	@ (8009894 <USB_SetTurnaroundTime+0x128>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d202      	bcs.n	80097c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80097bc:	230d      	movs	r3, #13
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	e04c      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	4a33      	ldr	r2, [pc, #204]	@ (8009894 <USB_SetTurnaroundTime+0x128>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d306      	bcc.n	80097d8 <USB_SetTurnaroundTime+0x6c>
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	4a32      	ldr	r2, [pc, #200]	@ (8009898 <USB_SetTurnaroundTime+0x12c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d802      	bhi.n	80097d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80097d2:	230c      	movs	r3, #12
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	e041      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4a2f      	ldr	r2, [pc, #188]	@ (8009898 <USB_SetTurnaroundTime+0x12c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d906      	bls.n	80097ee <USB_SetTurnaroundTime+0x82>
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	4a2e      	ldr	r2, [pc, #184]	@ (800989c <USB_SetTurnaroundTime+0x130>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d802      	bhi.n	80097ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097e8:	230b      	movs	r3, #11
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	e036      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	4a2a      	ldr	r2, [pc, #168]	@ (800989c <USB_SetTurnaroundTime+0x130>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d906      	bls.n	8009804 <USB_SetTurnaroundTime+0x98>
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	4a29      	ldr	r2, [pc, #164]	@ (80098a0 <USB_SetTurnaroundTime+0x134>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d802      	bhi.n	8009804 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097fe:	230a      	movs	r3, #10
 8009800:	617b      	str	r3, [r7, #20]
 8009802:	e02b      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4a26      	ldr	r2, [pc, #152]	@ (80098a0 <USB_SetTurnaroundTime+0x134>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d906      	bls.n	800981a <USB_SetTurnaroundTime+0xae>
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	4a25      	ldr	r2, [pc, #148]	@ (80098a4 <USB_SetTurnaroundTime+0x138>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d202      	bcs.n	800981a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009814:	2309      	movs	r3, #9
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	e020      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	4a21      	ldr	r2, [pc, #132]	@ (80098a4 <USB_SetTurnaroundTime+0x138>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d306      	bcc.n	8009830 <USB_SetTurnaroundTime+0xc4>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	4a20      	ldr	r2, [pc, #128]	@ (80098a8 <USB_SetTurnaroundTime+0x13c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d802      	bhi.n	8009830 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800982a:	2308      	movs	r3, #8
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	e015      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4a1d      	ldr	r2, [pc, #116]	@ (80098a8 <USB_SetTurnaroundTime+0x13c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d906      	bls.n	8009846 <USB_SetTurnaroundTime+0xda>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4a1c      	ldr	r2, [pc, #112]	@ (80098ac <USB_SetTurnaroundTime+0x140>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d202      	bcs.n	8009846 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009840:	2307      	movs	r3, #7
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e00a      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009846:	2306      	movs	r3, #6
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e007      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d102      	bne.n	8009858 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009852:	2309      	movs	r3, #9
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	e001      	b.n	800985c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009858:	2309      	movs	r3, #9
 800985a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	029b      	lsls	r3, r3, #10
 8009870:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009874:	431a      	orrs	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	371c      	adds	r7, #28
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	00d8acbf 	.word	0x00d8acbf
 800988c:	00e4e1c0 	.word	0x00e4e1c0
 8009890:	00f42400 	.word	0x00f42400
 8009894:	01067380 	.word	0x01067380
 8009898:	011a499f 	.word	0x011a499f
 800989c:	01312cff 	.word	0x01312cff
 80098a0:	014ca43f 	.word	0x014ca43f
 80098a4:	016e3600 	.word	0x016e3600
 80098a8:	01a6ab1f 	.word	0x01a6ab1f
 80098ac:	01e84800 	.word	0x01e84800

080098b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f043 0201 	orr.w	r2, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f023 0201 	bic.w	r2, r3, #1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d115      	bne.n	8009942 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009922:	200a      	movs	r0, #10
 8009924:	f7f9 faaa 	bl	8002e7c <HAL_Delay>
      ms += 10U;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	330a      	adds	r3, #10
 800992c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 f93f 	bl	800abb2 <USB_GetMode>
 8009934:	4603      	mov	r3, r0
 8009936:	2b01      	cmp	r3, #1
 8009938:	d01e      	beq.n	8009978 <USB_SetCurrentMode+0x84>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2bc7      	cmp	r3, #199	@ 0xc7
 800993e:	d9f0      	bls.n	8009922 <USB_SetCurrentMode+0x2e>
 8009940:	e01a      	b.n	8009978 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009942:	78fb      	ldrb	r3, [r7, #3]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d115      	bne.n	8009974 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009954:	200a      	movs	r0, #10
 8009956:	f7f9 fa91 	bl	8002e7c <HAL_Delay>
      ms += 10U;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	330a      	adds	r3, #10
 800995e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 f926 	bl	800abb2 <USB_GetMode>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <USB_SetCurrentMode+0x84>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009970:	d9f0      	bls.n	8009954 <USB_SetCurrentMode+0x60>
 8009972:	e001      	b.n	8009978 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e005      	b.n	8009984 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2bc8      	cmp	r3, #200	@ 0xc8
 800997c:	d101      	bne.n	8009982 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e000      	b.n	8009984 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800998c:	b084      	sub	sp, #16
 800998e:	b580      	push	{r7, lr}
 8009990:	b086      	sub	sp, #24
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800999a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099a6:	2300      	movs	r3, #0
 80099a8:	613b      	str	r3, [r7, #16]
 80099aa:	e009      	b.n	80099c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	3340      	adds	r3, #64	@ 0x40
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	2200      	movs	r2, #0
 80099b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	3301      	adds	r3, #1
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2b0e      	cmp	r3, #14
 80099c4:	d9f2      	bls.n	80099ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d11c      	bne.n	8009a08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099dc:	f043 0302 	orr.w	r3, r3, #2
 80099e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a06:	e00b      	b.n	8009a20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a26:	461a      	mov	r2, r3
 8009a28:	2300      	movs	r3, #0
 8009a2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d10d      	bne.n	8009a50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f968 	bl	8009d14 <USB_SetDevSpeed>
 8009a44:	e008      	b.n	8009a58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a46:	2101      	movs	r1, #1
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f963 	bl	8009d14 <USB_SetDevSpeed>
 8009a4e:	e003      	b.n	8009a58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a50:	2103      	movs	r1, #3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f95e 	bl	8009d14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a58:	2110      	movs	r1, #16
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f8fa 	bl	8009c54 <USB_FlushTxFifo>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f924 	bl	8009cb8 <USB_FlushRxFifo>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a80:	461a      	mov	r2, r3
 8009a82:	2300      	movs	r3, #0
 8009a84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	2300      	movs	r3, #0
 8009a90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a98:	461a      	mov	r2, r3
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	613b      	str	r3, [r7, #16]
 8009aa2:	e043      	b.n	8009b2c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aba:	d118      	bne.n	8009aee <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	e013      	b.n	8009b00 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	e008      	b.n	8009b00 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009afa:	461a      	mov	r2, r3
 8009afc:	2300      	movs	r3, #0
 8009afe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	613b      	str	r3, [r7, #16]
 8009b2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b30:	461a      	mov	r2, r3
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d3b5      	bcc.n	8009aa4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	e043      	b.n	8009bc6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b54:	d118      	bne.n	8009b88 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	e013      	b.n	8009b9a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	e008      	b.n	8009b9a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b94:	461a      	mov	r2, r3
 8009b96:	2300      	movs	r3, #0
 8009b98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009bbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	613b      	str	r3, [r7, #16]
 8009bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009bca:	461a      	mov	r2, r3
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d3b5      	bcc.n	8009b3e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009be4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009bf2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d105      	bne.n	8009c08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	f043 0210 	orr.w	r2, r3, #16
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	4b10      	ldr	r3, [pc, #64]	@ (8009c50 <USB_DevInit+0x2c4>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d005      	beq.n	8009c28 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f043 0208 	orr.w	r2, r3, #8
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d107      	bne.n	8009c40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c38:	f043 0304 	orr.w	r3, r3, #4
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c4c:	b004      	add	sp, #16
 8009c4e:	4770      	bx	lr
 8009c50:	803c3800 	.word	0x803c3800

08009c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c6e:	d901      	bls.n	8009c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e01b      	b.n	8009cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	daf2      	bge.n	8009c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	019b      	lsls	r3, r3, #6
 8009c84:	f043 0220 	orr.w	r2, r3, #32
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c98:	d901      	bls.n	8009c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e006      	b.n	8009cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	d0f0      	beq.n	8009c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cd0:	d901      	bls.n	8009cd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e018      	b.n	8009d08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	daf2      	bge.n	8009cc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cf4:	d901      	bls.n	8009cfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e006      	b.n	8009d08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0310 	and.w	r3, r3, #16
 8009d02:	2b10      	cmp	r3, #16
 8009d04:	d0f0      	beq.n	8009ce8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d34:	4313      	orrs	r3, r2
 8009d36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b087      	sub	sp, #28
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f003 0306 	and.w	r3, r3, #6
 8009d5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]
 8009d6a:	e00a      	b.n	8009d82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d002      	beq.n	8009d78 <USB_GetDevSpeed+0x32>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b06      	cmp	r3, #6
 8009d76:	d102      	bne.n	8009d7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	75fb      	strb	r3, [r7, #23]
 8009d7c:	e001      	b.n	8009d82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009d7e:	230f      	movs	r3, #15
 8009d80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	371c      	adds	r7, #28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d13a      	bne.n	8009e22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db2:	69da      	ldr	r2, [r3, #28]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	68f9      	ldr	r1, [r7, #12]
 8009dc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d155      	bne.n	8009e90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	791b      	ldrb	r3, [r3, #4]
 8009dfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	059b      	lsls	r3, r3, #22
 8009e06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	e036      	b.n	8009e90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e28:	69da      	ldr	r2, [r3, #28]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	f003 030f 	and.w	r3, r3, #15
 8009e32:	2101      	movs	r1, #1
 8009e34:	fa01 f303 	lsl.w	r3, r1, r3
 8009e38:	041b      	lsls	r3, r3, #16
 8009e3a:	68f9      	ldr	r1, [r7, #12]
 8009e3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e40:	4313      	orrs	r3, r2
 8009e42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d11a      	bne.n	8009e90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	791b      	ldrb	r3, [r3, #4]
 8009e74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e76:	430b      	orrs	r3, r1
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	0151      	lsls	r1, r2, #5
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	440a      	add	r2, r1
 8009e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
	...

08009ea0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d161      	bne.n	8009f80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ed2:	d11f      	bne.n	8009f14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	0151      	lsls	r1, r2, #5
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	440a      	add	r2, r1
 8009eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ef2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	0151      	lsls	r1, r2, #5
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	440a      	add	r2, r1
 8009f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	2101      	movs	r1, #1
 8009f26:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	68f9      	ldr	r1, [r7, #12]
 8009f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f34:	4013      	ands	r3, r2
 8009f36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f3e:	69da      	ldr	r2, [r3, #28]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	f003 030f 	and.w	r3, r3, #15
 8009f48:	2101      	movs	r1, #1
 8009f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	43db      	mvns	r3, r3
 8009f52:	68f9      	ldr	r1, [r7, #12]
 8009f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f58:	4013      	ands	r3, r2
 8009f5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	0159      	lsls	r1, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	440b      	add	r3, r1
 8009f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f76:	4619      	mov	r1, r3
 8009f78:	4b35      	ldr	r3, [pc, #212]	@ (800a050 <USB_DeactivateEndpoint+0x1b0>)
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	600b      	str	r3, [r1, #0]
 8009f7e:	e060      	b.n	800a042 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f96:	d11f      	bne.n	8009fd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	0151      	lsls	r1, r2, #5
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	440a      	add	r2, r1
 8009fae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	0151      	lsls	r1, r2, #5
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	440a      	add	r2, r1
 8009fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	f003 030f 	and.w	r3, r3, #15
 8009fe8:	2101      	movs	r1, #1
 8009fea:	fa01 f303 	lsl.w	r3, r1, r3
 8009fee:	041b      	lsls	r3, r3, #16
 8009ff0:	43db      	mvns	r3, r3
 8009ff2:	68f9      	ldr	r1, [r7, #12]
 8009ff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	f003 030f 	and.w	r3, r3, #15
 800a00c:	2101      	movs	r1, #1
 800a00e:	fa01 f303 	lsl.w	r3, r1, r3
 800a012:	041b      	lsls	r3, r3, #16
 800a014:	43db      	mvns	r3, r3
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a01c:	4013      	ands	r3, r2
 800a01e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4413      	add	r3, r2
 800a028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	0159      	lsls	r1, r3, #5
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	440b      	add	r3, r1
 800a036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a03a:	4619      	mov	r1, r3
 800a03c:	4b05      	ldr	r3, [pc, #20]	@ (800a054 <USB_DeactivateEndpoint+0x1b4>)
 800a03e:	4013      	ands	r3, r2
 800a040:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	ec337800 	.word	0xec337800
 800a054:	eff37800 	.word	0xeff37800

0800a058 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	@ 0x28
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	2b01      	cmp	r3, #1
 800a076:	f040 817f 	bne.w	800a378 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d132      	bne.n	800a0e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a09c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a0a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a0a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	69ba      	ldr	r2, [r7, #24]
 800a0b6:	0151      	lsls	r1, r2, #5
 800a0b8:	69fa      	ldr	r2, [r7, #28]
 800a0ba:	440a      	add	r2, r1
 800a0bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	0151      	lsls	r1, r2, #5
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	440a      	add	r2, r1
 800a0dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e0:	0cdb      	lsrs	r3, r3, #19
 800a0e2:	04db      	lsls	r3, r3, #19
 800a0e4:	6113      	str	r3, [r2, #16]
 800a0e6:	e097      	b.n	800a218 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	0151      	lsls	r1, r2, #5
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	440a      	add	r2, r1
 800a0fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a102:	0cdb      	lsrs	r3, r3, #19
 800a104:	04db      	lsls	r3, r3, #19
 800a106:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	0151      	lsls	r1, r2, #5
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	440a      	add	r2, r1
 800a11e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a122:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a126:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a12a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d11a      	bne.n	800a168 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	691a      	ldr	r2, [r3, #16]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d903      	bls.n	800a146 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	0151      	lsls	r1, r2, #5
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	440a      	add	r2, r1
 800a15c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a160:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a164:	6113      	str	r3, [r2, #16]
 800a166:	e044      	b.n	800a1f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	4413      	add	r3, r2
 800a172:	1e5a      	subs	r2, r3, #1
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	fbb2 f3f3 	udiv	r3, r2, r3
 800a17c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18a:	691a      	ldr	r2, [r3, #16]
 800a18c:	8afb      	ldrh	r3, [r7, #22]
 800a18e:	04d9      	lsls	r1, r3, #19
 800a190:	4ba4      	ldr	r3, [pc, #656]	@ (800a424 <USB_EPStartXfer+0x3cc>)
 800a192:	400b      	ands	r3, r1
 800a194:	69b9      	ldr	r1, [r7, #24]
 800a196:	0148      	lsls	r0, r1, #5
 800a198:	69f9      	ldr	r1, [r7, #28]
 800a19a:	4401      	add	r1, r0
 800a19c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	791b      	ldrb	r3, [r3, #4]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d122      	bne.n	800a1f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	0151      	lsls	r1, r2, #5
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	440a      	add	r2, r1
 800a1c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a1ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d8:	691a      	ldr	r2, [r3, #16]
 800a1da:	8afb      	ldrh	r3, [r7, #22]
 800a1dc:	075b      	lsls	r3, r3, #29
 800a1de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a1e2:	69b9      	ldr	r1, [r7, #24]
 800a1e4:	0148      	lsls	r0, r1, #5
 800a1e6:	69f9      	ldr	r1, [r7, #28]
 800a1e8:	4401      	add	r1, r0
 800a1ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fe:	691a      	ldr	r2, [r3, #16]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a208:	69b9      	ldr	r1, [r7, #24]
 800a20a:	0148      	lsls	r0, r1, #5
 800a20c:	69f9      	ldr	r1, [r7, #28]
 800a20e:	4401      	add	r1, r0
 800a210:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a214:	4313      	orrs	r3, r2
 800a216:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d14b      	bne.n	800a2b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d009      	beq.n	800a23a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a232:	461a      	mov	r2, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	791b      	ldrb	r3, [r3, #4]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d128      	bne.n	800a294 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d110      	bne.n	800a274 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	69ba      	ldr	r2, [r7, #24]
 800a262:	0151      	lsls	r1, r2, #5
 800a264:	69fa      	ldr	r2, [r7, #28]
 800a266:	440a      	add	r2, r1
 800a268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a26c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e00f      	b.n	800a294 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	69fa      	ldr	r2, [r7, #28]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a28e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a292:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	0151      	lsls	r1, r2, #5
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	440a      	add	r2, r1
 800a2aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	e166      	b.n	800a584 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	0151      	lsls	r1, r2, #5
 800a2c8:	69fa      	ldr	r2, [r7, #28]
 800a2ca:	440a      	add	r2, r1
 800a2cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	791b      	ldrb	r3, [r3, #4]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d015      	beq.n	800a30a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 814e 	beq.w	800a584 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	f003 030f 	and.w	r3, r3, #15
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a2fe:	69f9      	ldr	r1, [r7, #28]
 800a300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a304:	4313      	orrs	r3, r2
 800a306:	634b      	str	r3, [r1, #52]	@ 0x34
 800a308:	e13c      	b.n	800a584 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a316:	2b00      	cmp	r3, #0
 800a318:	d110      	bne.n	800a33c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	0151      	lsls	r1, r2, #5
 800a32c:	69fa      	ldr	r2, [r7, #28]
 800a32e:	440a      	add	r2, r1
 800a330:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a334:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	e00f      	b.n	800a35c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	440a      	add	r2, r1
 800a352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a35a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	68d9      	ldr	r1, [r3, #12]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	781a      	ldrb	r2, [r3, #0]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	b298      	uxth	r0, r3
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	4603      	mov	r3, r0
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f9b9 	bl	800a6e8 <USB_WritePacket>
 800a376:	e105      	b.n	800a584 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a392:	0cdb      	lsrs	r3, r3, #19
 800a394:	04db      	lsls	r3, r3, #19
 800a396:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	0151      	lsls	r1, r2, #5
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	440a      	add	r2, r1
 800a3ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d132      	bne.n	800a428 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	689a      	ldr	r2, [r3, #8]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e6:	691a      	ldr	r2, [r3, #16]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3f0:	69b9      	ldr	r1, [r7, #24]
 800a3f2:	0148      	lsls	r0, r1, #5
 800a3f4:	69f9      	ldr	r1, [r7, #28]
 800a3f6:	4401      	add	r1, r0
 800a3f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	015a      	lsls	r2, r3, #5
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	4413      	add	r3, r2
 800a408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	0151      	lsls	r1, r2, #5
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	440a      	add	r2, r1
 800a416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a41a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a41e:	6113      	str	r3, [r2, #16]
 800a420:	e062      	b.n	800a4e8 <USB_EPStartXfer+0x490>
 800a422:	bf00      	nop
 800a424:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d123      	bne.n	800a478 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a43c:	691a      	ldr	r2, [r3, #16]
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a446:	69b9      	ldr	r1, [r7, #24]
 800a448:	0148      	lsls	r0, r1, #5
 800a44a:	69f9      	ldr	r1, [r7, #28]
 800a44c:	4401      	add	r1, r0
 800a44e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a452:	4313      	orrs	r3, r2
 800a454:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	0151      	lsls	r1, r2, #5
 800a468:	69fa      	ldr	r2, [r7, #28]
 800a46a:	440a      	add	r2, r1
 800a46c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a470:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a474:	6113      	str	r3, [r2, #16]
 800a476:	e037      	b.n	800a4e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	4413      	add	r3, r2
 800a482:	1e5a      	subs	r2, r3, #1
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	fbb2 f3f3 	udiv	r3, r2, r3
 800a48c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	8afa      	ldrh	r2, [r7, #22]
 800a494:	fb03 f202 	mul.w	r2, r3, r2
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	8afb      	ldrh	r3, [r7, #22]
 800a4ac:	04d9      	lsls	r1, r3, #19
 800a4ae:	4b38      	ldr	r3, [pc, #224]	@ (800a590 <USB_EPStartXfer+0x538>)
 800a4b0:	400b      	ands	r3, r1
 800a4b2:	69b9      	ldr	r1, [r7, #24]
 800a4b4:	0148      	lsls	r0, r1, #5
 800a4b6:	69f9      	ldr	r1, [r7, #28]
 800a4b8:	4401      	add	r1, r0
 800a4ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4d8:	69b9      	ldr	r1, [r7, #24]
 800a4da:	0148      	lsls	r0, r1, #5
 800a4dc:	69f9      	ldr	r1, [r7, #28]
 800a4de:	4401      	add	r1, r0
 800a4e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d10d      	bne.n	800a50a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d009      	beq.n	800a50a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	68d9      	ldr	r1, [r3, #12]
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a506:	460a      	mov	r2, r1
 800a508:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	791b      	ldrb	r3, [r3, #4]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d128      	bne.n	800a564 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d110      	bne.n	800a544 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	0151      	lsls	r1, r2, #5
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	440a      	add	r2, r1
 800a538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a53c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	e00f      	b.n	800a564 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a55e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a562:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	0151      	lsls	r1, r2, #5
 800a576:	69fa      	ldr	r2, [r7, #28]
 800a578:	440a      	add	r2, r1
 800a57a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a57e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3720      	adds	r7, #32
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	1ff80000 	.word	0x1ff80000

0800a594 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d14a      	bne.n	800a648 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5ca:	f040 8086 	bne.w	800a6da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	7812      	ldrb	r2, [r2, #0]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a5f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	7812      	ldrb	r2, [r2, #0]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a614:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3301      	adds	r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a622:	4293      	cmp	r3, r2
 800a624:	d902      	bls.n	800a62c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]
          break;
 800a62a:	e056      	b.n	800a6da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a644:	d0e7      	beq.n	800a616 <USB_EPStopXfer+0x82>
 800a646:	e048      	b.n	800a6da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a65c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a660:	d13b      	bne.n	800a6da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	7812      	ldrb	r2, [r2, #0]
 800a676:	0151      	lsls	r1, r2, #5
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	440a      	add	r2, r1
 800a67c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a680:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a684:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	7812      	ldrb	r2, [r2, #0]
 800a69a:	0151      	lsls	r1, r2, #5
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	440a      	add	r2, r1
 800a6a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d902      	bls.n	800a6c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a6be:	e00c      	b.n	800a6da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6d8:	d0e7      	beq.n	800a6aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	371c      	adds	r7, #28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b089      	sub	sp, #36	@ 0x24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	71fb      	strb	r3, [r7, #7]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a706:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d123      	bne.n	800a756 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a70e:	88bb      	ldrh	r3, [r7, #4]
 800a710:	3303      	adds	r3, #3
 800a712:	089b      	lsrs	r3, r3, #2
 800a714:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a716:	2300      	movs	r3, #0
 800a718:	61bb      	str	r3, [r7, #24]
 800a71a:	e018      	b.n	800a74e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	031a      	lsls	r2, r3, #12
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	4413      	add	r3, r2
 800a724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a728:	461a      	mov	r2, r3
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	3301      	adds	r3, #1
 800a734:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	3301      	adds	r3, #1
 800a73a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	3301      	adds	r3, #1
 800a740:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	3301      	adds	r3, #1
 800a746:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	3301      	adds	r3, #1
 800a74c:	61bb      	str	r3, [r7, #24]
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	429a      	cmp	r2, r3
 800a754:	d3e2      	bcc.n	800a71c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3724      	adds	r7, #36	@ 0x24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a764:	b480      	push	{r7}
 800a766:	b08b      	sub	sp, #44	@ 0x2c
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	4613      	mov	r3, r2
 800a770:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	089b      	lsrs	r3, r3, #2
 800a77e:	b29b      	uxth	r3, r3
 800a780:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a782:	88fb      	ldrh	r3, [r7, #6]
 800a784:	f003 0303 	and.w	r3, r3, #3
 800a788:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a78a:	2300      	movs	r3, #0
 800a78c:	623b      	str	r3, [r7, #32]
 800a78e:	e014      	b.n	800a7ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	3301      	adds	r3, #1
 800a7a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	623b      	str	r3, [r7, #32]
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d3e6      	bcc.n	800a790 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7c2:	8bfb      	ldrh	r3, [r7, #30]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01e      	beq.n	800a806 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f107 0310 	add.w	r3, r7, #16
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	701a      	strb	r2, [r3, #0]
      i++;
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a7fa:	8bfb      	ldrh	r3, [r7, #30]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a800:	8bfb      	ldrh	r3, [r7, #30]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1ea      	bne.n	800a7dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a808:	4618      	mov	r0, r3
 800a80a:	372c      	adds	r7, #44	@ 0x2c
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	785b      	ldrb	r3, [r3, #1]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d12c      	bne.n	800a88a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	db12      	blt.n	800a868 <USB_EPSetStall+0x54>
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00f      	beq.n	800a868 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a862:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a866:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	0151      	lsls	r1, r2, #5
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	440a      	add	r2, r1
 800a87e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a882:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	e02b      	b.n	800a8e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db12      	blt.n	800a8c2 <USB_EPSetStall+0xae>
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00f      	beq.n	800a8c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	015a      	lsls	r2, r3, #5
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	0151      	lsls	r1, r2, #5
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	440a      	add	r2, r1
 800a8b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a8c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	0151      	lsls	r1, r2, #5
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	440a      	add	r2, r1
 800a8d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	785b      	ldrb	r3, [r3, #1]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d128      	bne.n	800a95e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a926:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a92a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	791b      	ldrb	r3, [r3, #4]
 800a930:	2b03      	cmp	r3, #3
 800a932:	d003      	beq.n	800a93c <USB_EPClearStall+0x4c>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	791b      	ldrb	r3, [r3, #4]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d138      	bne.n	800a9ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	0151      	lsls	r1, r2, #5
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	440a      	add	r2, r1
 800a952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	e027      	b.n	800a9ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	0151      	lsls	r1, r2, #5
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	440a      	add	r2, r1
 800a974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a978:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a97c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	791b      	ldrb	r3, [r3, #4]
 800a982:	2b03      	cmp	r3, #3
 800a984:	d003      	beq.n	800a98e <USB_EPClearStall+0x9e>
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	791b      	ldrb	r3, [r3, #4]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d10f      	bne.n	800a9ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	0151      	lsls	r1, r2, #5
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	440a      	add	r2, r1
 800a9a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a9de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a9f0:	68f9      	ldr	r1, [r7, #12]
 800a9f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa22:	f023 0303 	bic.w	r3, r3, #3
 800aa26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa36:	f023 0302 	bic.w	r3, r3, #2
 800aa3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa64:	f023 0303 	bic.w	r3, r3, #3
 800aa68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa78:	f043 0302 	orr.w	r3, r3, #2
 800aa7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b085      	sub	sp, #20
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aace:	69db      	ldr	r3, [r3, #28]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	4013      	ands	r3, r2
 800aad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	0c1b      	lsrs	r3, r3, #16
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	4013      	ands	r3, r2
 800ab08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	b29b      	uxth	r3, r3
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b085      	sub	sp, #20
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	4013      	ands	r3, r2
 800ab46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab48:	68bb      	ldr	r3, [r7, #8]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b087      	sub	sp, #28
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab7a:	78fb      	ldrb	r3, [r7, #3]
 800ab7c:	f003 030f 	and.w	r3, r3, #15
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	fa22 f303 	lsr.w	r3, r2, r3
 800ab86:	01db      	lsls	r3, r3, #7
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	4013      	ands	r3, r2
 800aba2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aba4:	68bb      	ldr	r3, [r7, #8]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	f003 0301 	and.w	r3, r3, #1
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abe8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800abec:	f023 0307 	bic.w	r3, r3, #7
 800abf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	333c      	adds	r3, #60	@ 0x3c
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	4a26      	ldr	r2, [pc, #152]	@ (800accc <USB_EP0_OutStart+0xb8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d90a      	bls.n	800ac4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac48:	d101      	bne.n	800ac4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e037      	b.n	800acbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac54:	461a      	mov	r2, r3
 800ac56:	2300      	movs	r3, #0
 800ac58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac7c:	f043 0318 	orr.w	r3, r3, #24
 800ac80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ac94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ac96:	7afb      	ldrb	r3, [r7, #11]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d10f      	bne.n	800acbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acb6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800acba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	371c      	adds	r7, #28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	4f54300a 	.word	0x4f54300a

0800acd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acd8:	2300      	movs	r3, #0
 800acda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3301      	adds	r3, #1
 800ace0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ace8:	d901      	bls.n	800acee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e022      	b.n	800ad34 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	daf2      	bge.n	800acdc <USB_CoreReset+0xc>

  count = 10U;
 800acf6:	230a      	movs	r3, #10
 800acf8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800acfa:	e002      	b.n	800ad02 <USB_CoreReset+0x32>
  {
    count--;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3b01      	subs	r3, #1
 800ad00:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1f9      	bne.n	800acfc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	f043 0201 	orr.w	r2, r3, #1
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3301      	adds	r3, #1
 800ad18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad20:	d901      	bls.n	800ad26 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e006      	b.n	800ad34 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d0f0      	beq.n	800ad14 <USB_CoreReset+0x44>

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ad44:	4904      	ldr	r1, [pc, #16]	@ (800ad58 <MX_FATFS_Init+0x18>)
 800ad46:	4805      	ldr	r0, [pc, #20]	@ (800ad5c <MX_FATFS_Init+0x1c>)
 800ad48:	f005 f86a 	bl	800fe20 <FATFS_LinkDriver>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	4b03      	ldr	r3, [pc, #12]	@ (800ad60 <MX_FATFS_Init+0x20>)
 800ad52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ad54:	bf00      	nop
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	20006618 	.word	0x20006618
 800ad5c:	08013900 	.word	0x08013900
 800ad60:	20006614 	.word	0x20006614

0800ad64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ad7e:	f000 f896 	bl	800aeae <BSP_SD_IsDetected>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d001      	beq.n	800ad8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e012      	b.n	800adb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ad8c:	480b      	ldr	r0, [pc, #44]	@ (800adbc <BSP_SD_Init+0x48>)
 800ad8e:	f7fb fe11 	bl	80069b4 <HAL_SD_Init>
 800ad92:	4603      	mov	r3, r0
 800ad94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ad9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ada0:	4806      	ldr	r0, [pc, #24]	@ (800adbc <BSP_SD_Init+0x48>)
 800ada2:	f7fc fbd7 	bl	8007554 <HAL_SD_ConfigWideBusOperation>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800adb0:	79fb      	ldrb	r3, [r7, #7]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20006414 	.word	0x20006414

0800adc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	68f9      	ldr	r1, [r7, #12]
 800add6:	4806      	ldr	r0, [pc, #24]	@ (800adf0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800add8:	f7fb fe94 	bl	8006b04 <HAL_SD_ReadBlocks_DMA>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20006414 	.word	0x20006414

0800adf4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	68f9      	ldr	r1, [r7, #12]
 800ae0a:	4806      	ldr	r0, [pc, #24]	@ (800ae24 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ae0c:	f7fb ff5c 	bl	8006cc8 <HAL_SD_WriteBlocks_DMA>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3718      	adds	r7, #24
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20006414 	.word	0x20006414

0800ae28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ae2c:	4805      	ldr	r0, [pc, #20]	@ (800ae44 <BSP_SD_GetCardState+0x1c>)
 800ae2e:	f7fc fc2b 	bl	8007688 <HAL_SD_GetCardState>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b04      	cmp	r3, #4
 800ae36:	bf14      	ite	ne
 800ae38:	2301      	movne	r3, #1
 800ae3a:	2300      	moveq	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20006414 	.word	0x20006414

0800ae48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ae50:	6879      	ldr	r1, [r7, #4]
 800ae52:	4803      	ldr	r0, [pc, #12]	@ (800ae60 <BSP_SD_GetCardInfo+0x18>)
 800ae54:	f7fc fb52 	bl	80074fc <HAL_SD_GetCardInfo>
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20006414 	.word	0x20006414

0800ae64 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ae6c:	f000 f818 	bl	800aea0 <BSP_SD_AbortCallback>
}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ae80:	f000 f9c4 	bl	800b20c <BSP_SD_WriteCpltCallback>
}
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ae94:	f000 f9c6 	bl	800b224 <BSP_SD_ReadCpltCallback>
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800aea0:	b480      	push	{r7}
 800aea2:	af00      	add	r7, sp, #0

}
 800aea4:	bf00      	nop
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aeb8:	f000 f80c 	bl	800aed4 <BSP_PlatformIsDetected>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800aec2:	2300      	movs	r3, #0
 800aec4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	b2db      	uxtb	r3, r3
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800aeda:	2301      	movs	r3, #1
 800aedc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800aede:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aee2:	4806      	ldr	r0, [pc, #24]	@ (800aefc <BSP_PlatformIsDetected+0x28>)
 800aee4:	f7f8 fe48 	bl	8003b78 <HAL_GPIO_ReadPin>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800aeee:	2300      	movs	r3, #0
 800aef0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800aef2:	79fb      	ldrb	r3, [r7, #7]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	40020400 	.word	0x40020400

0800af00 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800af08:	f7f7 ffac 	bl	8002e64 <HAL_GetTick>
 800af0c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800af0e:	e006      	b.n	800af1e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af10:	f7ff ff8a 	bl	800ae28 <BSP_SD_GetCardState>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d101      	bne.n	800af1e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e009      	b.n	800af32 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800af1e:	f7f7 ffa1 	bl	8002e64 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d8f0      	bhi.n	800af10 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800af46:	4b0b      	ldr	r3, [pc, #44]	@ (800af74 <SD_CheckStatus+0x38>)
 800af48:	2201      	movs	r2, #1
 800af4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800af4c:	f7ff ff6c 	bl	800ae28 <BSP_SD_GetCardState>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d107      	bne.n	800af66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800af56:	4b07      	ldr	r3, [pc, #28]	@ (800af74 <SD_CheckStatus+0x38>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f023 0301 	bic.w	r3, r3, #1
 800af60:	b2da      	uxtb	r2, r3
 800af62:	4b04      	ldr	r3, [pc, #16]	@ (800af74 <SD_CheckStatus+0x38>)
 800af64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800af66:	4b03      	ldr	r3, [pc, #12]	@ (800af74 <SD_CheckStatus+0x38>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	b2db      	uxtb	r3, r3
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	2000000d 	.word	0x2000000d

0800af78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800af82:	f7ff fef7 	bl	800ad74 <BSP_SD_Init>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d107      	bne.n	800af9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800af8c:	79fb      	ldrb	r3, [r7, #7]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff ffd4 	bl	800af3c <SD_CheckStatus>
 800af94:	4603      	mov	r3, r0
 800af96:	461a      	mov	r2, r3
 800af98:	4b04      	ldr	r3, [pc, #16]	@ (800afac <SD_initialize+0x34>)
 800af9a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800af9c:	4b03      	ldr	r3, [pc, #12]	@ (800afac <SD_initialize+0x34>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	b2db      	uxtb	r3, r3
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	2000000d 	.word	0x2000000d

0800afb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	4603      	mov	r3, r0
 800afb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff ffbd 	bl	800af3c <SD_CheckStatus>
 800afc2:	4603      	mov	r3, r0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60b9      	str	r1, [r7, #8]
 800afd4:	607a      	str	r2, [r7, #4]
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800afe0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800afe4:	f7ff ff8c 	bl	800af00 <SD_CheckStatusWithTimeout>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	da01      	bge.n	800aff2 <SD_read+0x26>
  {
    return res;
 800afee:	7dfb      	ldrb	r3, [r7, #23]
 800aff0:	e03b      	b.n	800b06a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	f7ff fee2 	bl	800adc0 <BSP_SD_ReadBlocks_DMA>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d132      	bne.n	800b068 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b002:	4b1c      	ldr	r3, [pc, #112]	@ (800b074 <SD_read+0xa8>)
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b008:	f7f7 ff2c 	bl	8002e64 <HAL_GetTick>
 800b00c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b00e:	bf00      	nop
 800b010:	4b18      	ldr	r3, [pc, #96]	@ (800b074 <SD_read+0xa8>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d108      	bne.n	800b02a <SD_read+0x5e>
 800b018:	f7f7 ff24 	bl	8002e64 <HAL_GetTick>
 800b01c:	4602      	mov	r2, r0
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b026:	4293      	cmp	r3, r2
 800b028:	d9f2      	bls.n	800b010 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b02a:	4b12      	ldr	r3, [pc, #72]	@ (800b074 <SD_read+0xa8>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d102      	bne.n	800b038 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	75fb      	strb	r3, [r7, #23]
 800b036:	e017      	b.n	800b068 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b038:	4b0e      	ldr	r3, [pc, #56]	@ (800b074 <SD_read+0xa8>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b03e:	f7f7 ff11 	bl	8002e64 <HAL_GetTick>
 800b042:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b044:	e007      	b.n	800b056 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b046:	f7ff feef 	bl	800ae28 <BSP_SD_GetCardState>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d102      	bne.n	800b056 <SD_read+0x8a>
          {
            res = RES_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b054:	e008      	b.n	800b068 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b056:	f7f7 ff05 	bl	8002e64 <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b064:	4293      	cmp	r3, r2
 800b066:	d9ee      	bls.n	800b046 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20006624 	.word	0x20006624

0800b078 <SD_write>:

/* USER CODE BEGIN beforeWriteSection */
/* can be used to modify previous code / undefine following code / add new code */
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60b9      	str	r1, [r7, #8]
 800b080:	607a      	str	r2, [r7, #4]
 800b082:	603b      	str	r3, [r7, #0]
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
	  DRESULT res = RES_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]
	  uint32_t timeout;

	  if(sd_FastWriteFlag == 0)
 800b08c:	4b31      	ldr	r3, [pc, #196]	@ (800b154 <SD_write+0xdc>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d145      	bne.n	800b120 <SD_write+0xa8>
	  {

	   WriteStatus = 0;
 800b094:	4b30      	ldr	r3, [pc, #192]	@ (800b158 <SD_write+0xe0>)
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]

	  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b09a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b09e:	f7ff ff2f 	bl	800af00 <SD_CheckStatusWithTimeout>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da01      	bge.n	800b0ac <SD_write+0x34>
	  {
	    return res;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	e04e      	b.n	800b14a <SD_write+0xd2>
	  }
		    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	68b8      	ldr	r0, [r7, #8]
 800b0b2:	f7ff fe9f 	bl	800adf4 <BSP_SD_WriteBlocks_DMA>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d12f      	bne.n	800b11c <SD_write+0xa4>
		                              (uint32_t)(sector),
		                              count) == MSD_OK)
		    {
		      /* Wait that writing process is completed or a timeout occurs */

		      timeout = HAL_GetTick();
 800b0bc:	f7f7 fed2 	bl	8002e64 <HAL_GetTick>
 800b0c0:	6138      	str	r0, [r7, #16]
		      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b0c2:	bf00      	nop
 800b0c4:	4b24      	ldr	r3, [pc, #144]	@ (800b158 <SD_write+0xe0>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d108      	bne.n	800b0de <SD_write+0x66>
 800b0cc:	f7f7 feca 	bl	8002e64 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d9f2      	bls.n	800b0c4 <SD_write+0x4c>
		      {
		      }
		      /* in case of a timeout return error */
		      if (WriteStatus == 0)
 800b0de:	4b1e      	ldr	r3, [pc, #120]	@ (800b158 <SD_write+0xe0>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d102      	bne.n	800b0ec <SD_write+0x74>
		      {
		        res = RES_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	75fb      	strb	r3, [r7, #23]
 800b0ea:	e017      	b.n	800b11c <SD_write+0xa4>
		      }
		      else
		      {
		        WriteStatus = 1;
 800b0ec:	4b1a      	ldr	r3, [pc, #104]	@ (800b158 <SD_write+0xe0>)
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]
		        timeout = HAL_GetTick();
 800b0f2:	f7f7 feb7 	bl	8002e64 <HAL_GetTick>
 800b0f6:	6138      	str	r0, [r7, #16]

		        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b0f8:	e007      	b.n	800b10a <SD_write+0x92>
		        {
		          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0fa:	f7ff fe95 	bl	800ae28 <BSP_SD_GetCardState>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <SD_write+0x92>
		          {
		            res = RES_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	75fb      	strb	r3, [r7, #23]
		            break;
 800b108:	e008      	b.n	800b11c <SD_write+0xa4>
		        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b10a:	f7f7 feab 	bl	8002e64 <HAL_GetTick>
 800b10e:	4602      	mov	r2, r0
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b118:	4293      	cmp	r3, r2
 800b11a:	d9ee      	bls.n	800b0fa <SD_write+0x82>
		          }
		        }
		      }
		    }
		  return res;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	e014      	b.n	800b14a <SD_write+0xd2>
	  }
	  else
	  {
		  if (WriteStatus == 0)
 800b120:	4b0d      	ldr	r3, [pc, #52]	@ (800b158 <SD_write+0xe0>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <SD_write+0xb6>
		  {
			  res = RES_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	75fb      	strb	r3, [r7, #23]
 800b12c:	e00c      	b.n	800b148 <SD_write+0xd0>
		  }
		  else
		  {
			  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff, (uint32_t)(sector),count) == MSD_OK)
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	68b8      	ldr	r0, [r7, #8]
 800b134:	f7ff fe5e 	bl	800adf4 <BSP_SD_WriteBlocks_DMA>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d104      	bne.n	800b148 <SD_write+0xd0>
			  {
				  WriteStatus = 0;
 800b13e:	4b06      	ldr	r3, [pc, #24]	@ (800b158 <SD_write+0xe0>)
 800b140:	2200      	movs	r2, #0
 800b142:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	75fb      	strb	r3, [r7, #23]
			  }
		  }
		  return res;
 800b148:	7dfb      	ldrb	r3, [r7, #23]
	  }
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	2000661c 	.word	0x2000661c
 800b158:	20006620 	.word	0x20006620

0800b15c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08c      	sub	sp, #48	@ 0x30
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	603a      	str	r2, [r7, #0]
 800b166:	71fb      	strb	r3, [r7, #7]
 800b168:	460b      	mov	r3, r1
 800b16a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b172:	4b25      	ldr	r3, [pc, #148]	@ (800b208 <SD_ioctl+0xac>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <SD_ioctl+0x28>
 800b180:	2303      	movs	r3, #3
 800b182:	e03c      	b.n	800b1fe <SD_ioctl+0xa2>

  switch (cmd)
 800b184:	79bb      	ldrb	r3, [r7, #6]
 800b186:	2b03      	cmp	r3, #3
 800b188:	d834      	bhi.n	800b1f4 <SD_ioctl+0x98>
 800b18a:	a201      	add	r2, pc, #4	@ (adr r2, 800b190 <SD_ioctl+0x34>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1a1 	.word	0x0800b1a1
 800b194:	0800b1a9 	.word	0x0800b1a9
 800b198:	0800b1c1 	.word	0x0800b1c1
 800b19c:	0800b1db 	.word	0x0800b1db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1a6:	e028      	b.n	800b1fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1a8:	f107 030c 	add.w	r3, r7, #12
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff fe4b 	bl	800ae48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1be:	e01c      	b.n	800b1fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1c0:	f107 030c 	add.w	r3, r7, #12
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff fe3f 	bl	800ae48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1d8:	e00f      	b.n	800b1fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7ff fe32 	bl	800ae48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	0a5a      	lsrs	r2, r3, #9
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1f2:	e002      	b.n	800b1fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b1f4:	2304      	movs	r3, #4
 800b1f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3730      	adds	r7, #48	@ 0x30
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	2000000d 	.word	0x2000000d

0800b20c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b210:	4b03      	ldr	r3, [pc, #12]	@ (800b220 <BSP_SD_WriteCpltCallback+0x14>)
 800b212:	2201      	movs	r2, #1
 800b214:	601a      	str	r2, [r3, #0]
}
 800b216:	bf00      	nop
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	20006620 	.word	0x20006620

0800b224 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b228:	4b03      	ldr	r3, [pc, #12]	@ (800b238 <BSP_SD_ReadCpltCallback+0x14>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	601a      	str	r2, [r3, #0]
}
 800b22e:	bf00      	nop
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	20006624 	.word	0x20006624

0800b23c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b248:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b24c:	f005 fb14 	bl	8010878 <USBD_static_malloc>
 800b250:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d109      	bne.n	800b26c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	32b0      	adds	r2, #176	@ 0xb0
 800b262:	2100      	movs	r1, #0
 800b264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b268:	2302      	movs	r3, #2
 800b26a:	e0d4      	b.n	800b416 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b26c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b270:	2100      	movs	r1, #0
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f006 f8f7 	bl	8011466 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	32b0      	adds	r2, #176	@ 0xb0
 800b282:	68f9      	ldr	r1, [r7, #12]
 800b284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	32b0      	adds	r2, #176	@ 0xb0
 800b292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	7c1b      	ldrb	r3, [r3, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d138      	bne.n	800b316 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b2a4:	4b5e      	ldr	r3, [pc, #376]	@ (800b420 <USBD_CDC_Init+0x1e4>)
 800b2a6:	7819      	ldrb	r1, [r3, #0]
 800b2a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f005 f9bf 	bl	8010632 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b2b4:	4b5a      	ldr	r3, [pc, #360]	@ (800b420 <USBD_CDC_Init+0x1e4>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	f003 020f 	and.w	r2, r3, #15
 800b2bc:	6879      	ldr	r1, [r7, #4]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3323      	adds	r3, #35	@ 0x23
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b2ce:	4b55      	ldr	r3, [pc, #340]	@ (800b424 <USBD_CDC_Init+0x1e8>)
 800b2d0:	7819      	ldrb	r1, [r3, #0]
 800b2d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f005 f9aa 	bl	8010632 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b2de:	4b51      	ldr	r3, [pc, #324]	@ (800b424 <USBD_CDC_Init+0x1e8>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	f003 020f 	and.w	r2, r3, #15
 800b2e6:	6879      	ldr	r1, [r7, #4]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	440b      	add	r3, r1
 800b2f2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b2fa:	4b4b      	ldr	r3, [pc, #300]	@ (800b428 <USBD_CDC_Init+0x1ec>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	f003 020f 	and.w	r2, r3, #15
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	331c      	adds	r3, #28
 800b310:	2210      	movs	r2, #16
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	e035      	b.n	800b382 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b316:	4b42      	ldr	r3, [pc, #264]	@ (800b420 <USBD_CDC_Init+0x1e4>)
 800b318:	7819      	ldrb	r1, [r3, #0]
 800b31a:	2340      	movs	r3, #64	@ 0x40
 800b31c:	2202      	movs	r2, #2
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f005 f987 	bl	8010632 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b324:	4b3e      	ldr	r3, [pc, #248]	@ (800b420 <USBD_CDC_Init+0x1e4>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	f003 020f 	and.w	r2, r3, #15
 800b32c:	6879      	ldr	r1, [r7, #4]
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	440b      	add	r3, r1
 800b338:	3323      	adds	r3, #35	@ 0x23
 800b33a:	2201      	movs	r2, #1
 800b33c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b33e:	4b39      	ldr	r3, [pc, #228]	@ (800b424 <USBD_CDC_Init+0x1e8>)
 800b340:	7819      	ldrb	r1, [r3, #0]
 800b342:	2340      	movs	r3, #64	@ 0x40
 800b344:	2202      	movs	r2, #2
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f005 f973 	bl	8010632 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b34c:	4b35      	ldr	r3, [pc, #212]	@ (800b424 <USBD_CDC_Init+0x1e8>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 020f 	and.w	r2, r3, #15
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	4613      	mov	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	440b      	add	r3, r1
 800b360:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b364:	2201      	movs	r2, #1
 800b366:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b368:	4b2f      	ldr	r3, [pc, #188]	@ (800b428 <USBD_CDC_Init+0x1ec>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f003 020f 	and.w	r2, r3, #15
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	440b      	add	r3, r1
 800b37c:	331c      	adds	r3, #28
 800b37e:	2210      	movs	r2, #16
 800b380:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b382:	4b29      	ldr	r3, [pc, #164]	@ (800b428 <USBD_CDC_Init+0x1ec>)
 800b384:	7819      	ldrb	r1, [r3, #0]
 800b386:	2308      	movs	r3, #8
 800b388:	2203      	movs	r2, #3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f005 f951 	bl	8010632 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b390:	4b25      	ldr	r3, [pc, #148]	@ (800b428 <USBD_CDC_Init+0x1ec>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	f003 020f 	and.w	r2, r3, #15
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	4613      	mov	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	440b      	add	r3, r1
 800b3a4:	3323      	adds	r3, #35	@ 0x23
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	33b0      	adds	r3, #176	@ 0xb0
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	e018      	b.n	800b416 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	7c1b      	ldrb	r3, [r3, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b424 <USBD_CDC_Init+0x1e8>)
 800b3ee:	7819      	ldrb	r1, [r3, #0]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f005 fa08 	bl	8010810 <USBD_LL_PrepareReceive>
 800b400:	e008      	b.n	800b414 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b402:	4b08      	ldr	r3, [pc, #32]	@ (800b424 <USBD_CDC_Init+0x1e8>)
 800b404:	7819      	ldrb	r1, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b40c:	2340      	movs	r3, #64	@ 0x40
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f005 f9fe 	bl	8010810 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20000097 	.word	0x20000097
 800b424:	20000098 	.word	0x20000098
 800b428:	20000099 	.word	0x20000099

0800b42c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b438:	4b3a      	ldr	r3, [pc, #232]	@ (800b524 <USBD_CDC_DeInit+0xf8>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f005 f91d 	bl	801067e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b444:	4b37      	ldr	r3, [pc, #220]	@ (800b524 <USBD_CDC_DeInit+0xf8>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	f003 020f 	and.w	r2, r3, #15
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	4613      	mov	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4413      	add	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	440b      	add	r3, r1
 800b458:	3323      	adds	r3, #35	@ 0x23
 800b45a:	2200      	movs	r2, #0
 800b45c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b45e:	4b32      	ldr	r3, [pc, #200]	@ (800b528 <USBD_CDC_DeInit+0xfc>)
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f005 f90a 	bl	801067e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b46a:	4b2f      	ldr	r3, [pc, #188]	@ (800b528 <USBD_CDC_DeInit+0xfc>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	f003 020f 	and.w	r2, r3, #15
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	440b      	add	r3, r1
 800b47e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b482:	2200      	movs	r2, #0
 800b484:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b486:	4b29      	ldr	r3, [pc, #164]	@ (800b52c <USBD_CDC_DeInit+0x100>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f005 f8f6 	bl	801067e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b492:	4b26      	ldr	r3, [pc, #152]	@ (800b52c <USBD_CDC_DeInit+0x100>)
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	f003 020f 	and.w	r2, r3, #15
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	4613      	mov	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	440b      	add	r3, r1
 800b4a6:	3323      	adds	r3, #35	@ 0x23
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b4ac:	4b1f      	ldr	r3, [pc, #124]	@ (800b52c <USBD_CDC_DeInit+0x100>)
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	f003 020f 	and.w	r2, r3, #15
 800b4b4:	6879      	ldr	r1, [r7, #4]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	440b      	add	r3, r1
 800b4c0:	331c      	adds	r3, #28
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	32b0      	adds	r2, #176	@ 0xb0
 800b4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d01f      	beq.n	800b518 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	33b0      	adds	r3, #176	@ 0xb0
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	32b0      	adds	r2, #176	@ 0xb0
 800b4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f005 f9ca 	bl	8010894 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	32b0      	adds	r2, #176	@ 0xb0
 800b50a:	2100      	movs	r1, #0
 800b50c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000097 	.word	0x20000097
 800b528:	20000098 	.word	0x20000098
 800b52c:	20000099 	.word	0x20000099

0800b530 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	32b0      	adds	r2, #176	@ 0xb0
 800b544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b548:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e0bf      	b.n	800b6e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d050      	beq.n	800b60e <USBD_CDC_Setup+0xde>
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	f040 80af 	bne.w	800b6d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	88db      	ldrh	r3, [r3, #6]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d03a      	beq.n	800b5f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	b25b      	sxtb	r3, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	da1b      	bge.n	800b5bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	33b0      	adds	r3, #176	@ 0xb0
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b59a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	88d2      	ldrh	r2, [r2, #6]
 800b5a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	88db      	ldrh	r3, [r3, #6]
 800b5a6:	2b07      	cmp	r3, #7
 800b5a8:	bf28      	it	cs
 800b5aa:	2307      	movcs	r3, #7
 800b5ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	89fa      	ldrh	r2, [r7, #14]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 fda9 	bl	800d10c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b5ba:	e090      	b.n	800b6de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	785a      	ldrb	r2, [r3, #1]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	88db      	ldrh	r3, [r3, #6]
 800b5ca:	2b3f      	cmp	r3, #63	@ 0x3f
 800b5cc:	d803      	bhi.n	800b5d6 <USBD_CDC_Setup+0xa6>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	88db      	ldrh	r3, [r3, #6]
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	e000      	b.n	800b5d8 <USBD_CDC_Setup+0xa8>
 800b5d6:	2240      	movs	r2, #64	@ 0x40
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b5de:	6939      	ldr	r1, [r7, #16]
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 fdbe 	bl	800d16a <USBD_CtlPrepareRx>
      break;
 800b5ee:	e076      	b.n	800b6de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	33b0      	adds	r3, #176	@ 0xb0
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	7850      	ldrb	r0, [r2, #1]
 800b606:	2200      	movs	r2, #0
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	4798      	blx	r3
      break;
 800b60c:	e067      	b.n	800b6de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	785b      	ldrb	r3, [r3, #1]
 800b612:	2b0b      	cmp	r3, #11
 800b614:	d851      	bhi.n	800b6ba <USBD_CDC_Setup+0x18a>
 800b616:	a201      	add	r2, pc, #4	@ (adr r2, 800b61c <USBD_CDC_Setup+0xec>)
 800b618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61c:	0800b64d 	.word	0x0800b64d
 800b620:	0800b6c9 	.word	0x0800b6c9
 800b624:	0800b6bb 	.word	0x0800b6bb
 800b628:	0800b6bb 	.word	0x0800b6bb
 800b62c:	0800b6bb 	.word	0x0800b6bb
 800b630:	0800b6bb 	.word	0x0800b6bb
 800b634:	0800b6bb 	.word	0x0800b6bb
 800b638:	0800b6bb 	.word	0x0800b6bb
 800b63c:	0800b6bb 	.word	0x0800b6bb
 800b640:	0800b6bb 	.word	0x0800b6bb
 800b644:	0800b677 	.word	0x0800b677
 800b648:	0800b6a1 	.word	0x0800b6a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b03      	cmp	r3, #3
 800b656:	d107      	bne.n	800b668 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b658:	f107 030a 	add.w	r3, r7, #10
 800b65c:	2202      	movs	r2, #2
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 fd53 	bl	800d10c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b666:	e032      	b.n	800b6ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f001 fcd1 	bl	800d012 <USBD_CtlError>
            ret = USBD_FAIL;
 800b670:	2303      	movs	r3, #3
 800b672:	75fb      	strb	r3, [r7, #23]
          break;
 800b674:	e02b      	b.n	800b6ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d107      	bne.n	800b692 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b682:	f107 030d 	add.w	r3, r7, #13
 800b686:	2201      	movs	r2, #1
 800b688:	4619      	mov	r1, r3
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f001 fd3e 	bl	800d10c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b690:	e01d      	b.n	800b6ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f001 fcbc 	bl	800d012 <USBD_CtlError>
            ret = USBD_FAIL;
 800b69a:	2303      	movs	r3, #3
 800b69c:	75fb      	strb	r3, [r7, #23]
          break;
 800b69e:	e016      	b.n	800b6ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d00f      	beq.n	800b6cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f001 fcaf 	bl	800d012 <USBD_CtlError>
            ret = USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b6b8:	e008      	b.n	800b6cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 fca8 	bl	800d012 <USBD_CtlError>
          ret = USBD_FAIL;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b6c6:	e002      	b.n	800b6ce <USBD_CDC_Setup+0x19e>
          break;
 800b6c8:	bf00      	nop
 800b6ca:	e008      	b.n	800b6de <USBD_CDC_Setup+0x1ae>
          break;
 800b6cc:	bf00      	nop
      }
      break;
 800b6ce:	e006      	b.n	800b6de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f001 fc9d 	bl	800d012 <USBD_CtlError>
      ret = USBD_FAIL;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	75fb      	strb	r3, [r7, #23]
      break;
 800b6dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	32b0      	adds	r2, #176	@ 0xb0
 800b706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b70e:	2303      	movs	r3, #3
 800b710:	e065      	b.n	800b7de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	32b0      	adds	r2, #176	@ 0xb0
 800b71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b720:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b722:	78fb      	ldrb	r3, [r7, #3]
 800b724:	f003 020f 	and.w	r2, r3, #15
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	4613      	mov	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	440b      	add	r3, r1
 800b734:	3314      	adds	r3, #20
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d02f      	beq.n	800b79c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b73c:	78fb      	ldrb	r3, [r7, #3]
 800b73e:	f003 020f 	and.w	r2, r3, #15
 800b742:	6879      	ldr	r1, [r7, #4]
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	440b      	add	r3, r1
 800b74e:	3314      	adds	r3, #20
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	f003 010f 	and.w	r1, r3, #15
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	460b      	mov	r3, r1
 800b75c:	00db      	lsls	r3, r3, #3
 800b75e:	440b      	add	r3, r1
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4403      	add	r3, r0
 800b764:	331c      	adds	r3, #28
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	fbb2 f1f3 	udiv	r1, r2, r3
 800b76c:	fb01 f303 	mul.w	r3, r1, r3
 800b770:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b772:	2b00      	cmp	r3, #0
 800b774:	d112      	bne.n	800b79c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b776:	78fb      	ldrb	r3, [r7, #3]
 800b778:	f003 020f 	and.w	r2, r3, #15
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	4613      	mov	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	440b      	add	r3, r1
 800b788:	3314      	adds	r3, #20
 800b78a:	2200      	movs	r2, #0
 800b78c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b78e:	78f9      	ldrb	r1, [r7, #3]
 800b790:	2300      	movs	r3, #0
 800b792:	2200      	movs	r2, #0
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f005 f81a 	bl	80107ce <USBD_LL_Transmit>
 800b79a:	e01f      	b.n	800b7dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	33b0      	adds	r3, #176	@ 0xb0
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	4413      	add	r3, r2
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d010      	beq.n	800b7dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	33b0      	adds	r3, #176	@ 0xb0
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b7d8:	78fa      	ldrb	r2, [r7, #3]
 800b7da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	32b0      	adds	r2, #176	@ 0xb0
 800b7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b800:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	32b0      	adds	r2, #176	@ 0xb0
 800b80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b814:	2303      	movs	r3, #3
 800b816:	e01a      	b.n	800b84e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b818:	78fb      	ldrb	r3, [r7, #3]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f005 f818 	bl	8010852 <USBD_LL_GetRxDataSize>
 800b822:	4602      	mov	r2, r0
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	33b0      	adds	r3, #176	@ 0xb0
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b848:	4611      	mov	r1, r2
 800b84a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	32b0      	adds	r2, #176	@ 0xb0
 800b868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b874:	2303      	movs	r3, #3
 800b876:	e024      	b.n	800b8c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	33b0      	adds	r3, #176	@ 0xb0
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d019      	beq.n	800b8c0 <USBD_CDC_EP0_RxReady+0x6a>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b892:	2bff      	cmp	r3, #255	@ 0xff
 800b894:	d014      	beq.n	800b8c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	33b0      	adds	r3, #176	@ 0xb0
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b8ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b8b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	22ff      	movs	r2, #255	@ 0xff
 800b8bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8d4:	2182      	movs	r1, #130	@ 0x82
 800b8d6:	4818      	ldr	r0, [pc, #96]	@ (800b938 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8d8:	f000 fd62 	bl	800c3a0 <USBD_GetEpDesc>
 800b8dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8de:	2101      	movs	r1, #1
 800b8e0:	4815      	ldr	r0, [pc, #84]	@ (800b938 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8e2:	f000 fd5d 	bl	800c3a0 <USBD_GetEpDesc>
 800b8e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8e8:	2181      	movs	r1, #129	@ 0x81
 800b8ea:	4813      	ldr	r0, [pc, #76]	@ (800b938 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8ec:	f000 fd58 	bl	800c3a0 <USBD_GetEpDesc>
 800b8f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d006      	beq.n	800b912 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	2200      	movs	r2, #0
 800b908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b90c:	711a      	strb	r2, [r3, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d006      	beq.n	800b926 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b920:	711a      	strb	r2, [r3, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2243      	movs	r2, #67	@ 0x43
 800b92a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b92c:	4b02      	ldr	r3, [pc, #8]	@ (800b938 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3718      	adds	r7, #24
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	20000054 	.word	0x20000054

0800b93c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b944:	2182      	movs	r1, #130	@ 0x82
 800b946:	4818      	ldr	r0, [pc, #96]	@ (800b9a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b948:	f000 fd2a 	bl	800c3a0 <USBD_GetEpDesc>
 800b94c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b94e:	2101      	movs	r1, #1
 800b950:	4815      	ldr	r0, [pc, #84]	@ (800b9a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b952:	f000 fd25 	bl	800c3a0 <USBD_GetEpDesc>
 800b956:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b958:	2181      	movs	r1, #129	@ 0x81
 800b95a:	4813      	ldr	r0, [pc, #76]	@ (800b9a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b95c:	f000 fd20 	bl	800c3a0 <USBD_GetEpDesc>
 800b960:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	2210      	movs	r2, #16
 800b96c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d006      	beq.n	800b982 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2200      	movs	r2, #0
 800b978:	711a      	strb	r2, [r3, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f042 0202 	orr.w	r2, r2, #2
 800b980:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d006      	beq.n	800b996 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	711a      	strb	r2, [r3, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f042 0202 	orr.w	r2, r2, #2
 800b994:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2243      	movs	r2, #67	@ 0x43
 800b99a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b99c:	4b02      	ldr	r3, [pc, #8]	@ (800b9a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000054 	.word	0x20000054

0800b9ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9b4:	2182      	movs	r1, #130	@ 0x82
 800b9b6:	4818      	ldr	r0, [pc, #96]	@ (800ba18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9b8:	f000 fcf2 	bl	800c3a0 <USBD_GetEpDesc>
 800b9bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9be:	2101      	movs	r1, #1
 800b9c0:	4815      	ldr	r0, [pc, #84]	@ (800ba18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9c2:	f000 fced 	bl	800c3a0 <USBD_GetEpDesc>
 800b9c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b9c8:	2181      	movs	r1, #129	@ 0x81
 800b9ca:	4813      	ldr	r0, [pc, #76]	@ (800ba18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9cc:	f000 fce8 	bl	800c3a0 <USBD_GetEpDesc>
 800b9d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2210      	movs	r2, #16
 800b9dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d006      	beq.n	800b9f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9ec:	711a      	strb	r2, [r3, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d006      	beq.n	800ba06 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba00:	711a      	strb	r2, [r3, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2243      	movs	r2, #67	@ 0x43
 800ba0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba0c:	4b02      	ldr	r3, [pc, #8]	@ (800ba18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3718      	adds	r7, #24
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20000054 	.word	0x20000054

0800ba1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	220a      	movs	r2, #10
 800ba28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ba2a:	4b03      	ldr	r3, [pc, #12]	@ (800ba38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	20000010 	.word	0x20000010

0800ba3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e009      	b.n	800ba64 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	33b0      	adds	r3, #176	@ 0xb0
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b087      	sub	sp, #28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	32b0      	adds	r2, #176	@ 0xb0
 800ba86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e008      	b.n	800baa8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	371c      	adds	r7, #28
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	32b0      	adds	r2, #176	@ 0xb0
 800bac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bacc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d101      	bne.n	800bad8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bad4:	2303      	movs	r3, #3
 800bad6:	e004      	b.n	800bae2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
	...

0800baf0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	32b0      	adds	r2, #176	@ 0xb0
 800bb02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb06:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e025      	b.n	800bb62 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d11f      	bne.n	800bb60 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bb28:	4b10      	ldr	r3, [pc, #64]	@ (800bb6c <USBD_CDC_TransmitPacket+0x7c>)
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	f003 020f 	and.w	r2, r3, #15
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4403      	add	r3, r0
 800bb42:	3314      	adds	r3, #20
 800bb44:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bb46:	4b09      	ldr	r3, [pc, #36]	@ (800bb6c <USBD_CDC_TransmitPacket+0x7c>)
 800bb48:	7819      	ldrb	r1, [r3, #0]
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f004 fe39 	bl	80107ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000097 	.word	0x20000097

0800bb70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	32b0      	adds	r2, #176	@ 0xb0
 800bb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	32b0      	adds	r2, #176	@ 0xb0
 800bb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e018      	b.n	800bbd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7c1b      	ldrb	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10a      	bne.n	800bbbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bba6:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd8 <USBD_CDC_ReceivePacket+0x68>)
 800bba8:	7819      	ldrb	r1, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bbb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f004 fe2b 	bl	8010810 <USBD_LL_PrepareReceive>
 800bbba:	e008      	b.n	800bbce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bbbc:	4b06      	ldr	r3, [pc, #24]	@ (800bbd8 <USBD_CDC_ReceivePacket+0x68>)
 800bbbe:	7819      	ldrb	r1, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bbc6:	2340      	movs	r3, #64	@ 0x40
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f004 fe21 	bl	8010810 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	20000098 	.word	0x20000098

0800bbdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d101      	bne.n	800bbf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e01f      	b.n	800bc34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	79fa      	ldrb	r2, [r7, #7]
 800bc26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f004 fc9b 	bl	8010564 <USBD_LL_Init>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc46:	2300      	movs	r3, #0
 800bc48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e025      	b.n	800bca0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	32ae      	adds	r2, #174	@ 0xae
 800bc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00f      	beq.n	800bc90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	32ae      	adds	r2, #174	@ 0xae
 800bc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc80:	f107 020e 	add.w	r2, r7, #14
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
 800bc88:	4602      	mov	r2, r0
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc96:	1c5a      	adds	r2, r3, #1
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f004 fca3 	bl	80105fc <USBD_LL_Start>
 800bcb6:	4603      	mov	r3, r0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	460b      	mov	r3, r1
 800bce0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	78fa      	ldrb	r2, [r7, #3]
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	4798      	blx	r3
 800bd00:	4603      	mov	r3, r0
 800bd02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	4798      	blx	r3
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bd34:	2303      	movs	r3, #3
 800bd36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b084      	sub	sp, #16
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f922 	bl	800cf9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bd68:	461a      	mov	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd76:	f003 031f 	and.w	r3, r3, #31
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d01a      	beq.n	800bdb4 <USBD_LL_SetupStage+0x72>
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d822      	bhi.n	800bdc8 <USBD_LL_SetupStage+0x86>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <USBD_LL_SetupStage+0x4a>
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d00a      	beq.n	800bda0 <USBD_LL_SetupStage+0x5e>
 800bd8a:	e01d      	b.n	800bdc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fb77 	bl	800c488 <USBD_StdDevReq>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd9e:	e020      	b.n	800bde2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fbdf 	bl	800c56c <USBD_StdItfReq>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73fb      	strb	r3, [r7, #15]
      break;
 800bdb2:	e016      	b.n	800bde2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fc41 	bl	800c644 <USBD_StdEPReq>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc6:	e00c      	b.n	800bde2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bdce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f004 fc70 	bl	80106bc <USBD_LL_StallEP>
 800bddc:	4603      	mov	r3, r0
 800bdde:	73fb      	strb	r3, [r7, #15]
      break;
 800bde0:	bf00      	nop
  }

  return ret;
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bdfe:	7afb      	ldrb	r3, [r7, #11]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d177      	bne.n	800bef4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800be0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be12:	2b03      	cmp	r3, #3
 800be14:	f040 80a1 	bne.w	800bf5a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	8992      	ldrh	r2, [r2, #12]
 800be20:	4293      	cmp	r3, r2
 800be22:	d91c      	bls.n	800be5e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	8992      	ldrh	r2, [r2, #12]
 800be2c:	1a9a      	subs	r2, r3, r2
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	8992      	ldrh	r2, [r2, #12]
 800be3a:	441a      	add	r2, r3
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6919      	ldr	r1, [r3, #16]
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	899b      	ldrh	r3, [r3, #12]
 800be48:	461a      	mov	r2, r3
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	4293      	cmp	r3, r2
 800be50:	bf38      	it	cc
 800be52:	4613      	movcc	r3, r2
 800be54:	461a      	mov	r2, r3
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f001 f9a8 	bl	800d1ac <USBD_CtlContinueRx>
 800be5c:	e07d      	b.n	800bf5a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be64:	f003 031f 	and.w	r3, r3, #31
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d014      	beq.n	800be96 <USBD_LL_DataOutStage+0xaa>
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d81d      	bhi.n	800beac <USBD_LL_DataOutStage+0xc0>
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <USBD_LL_DataOutStage+0x8e>
 800be74:	2b01      	cmp	r3, #1
 800be76:	d003      	beq.n	800be80 <USBD_LL_DataOutStage+0x94>
 800be78:	e018      	b.n	800beac <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800be7a:	2300      	movs	r3, #0
 800be7c:	75bb      	strb	r3, [r7, #22]
            break;
 800be7e:	e018      	b.n	800beb2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be86:	b2db      	uxtb	r3, r3
 800be88:	4619      	mov	r1, r3
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 fa6e 	bl	800c36c <USBD_CoreFindIF>
 800be90:	4603      	mov	r3, r0
 800be92:	75bb      	strb	r3, [r7, #22]
            break;
 800be94:	e00d      	b.n	800beb2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	4619      	mov	r1, r3
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 fa70 	bl	800c386 <USBD_CoreFindEP>
 800bea6:	4603      	mov	r3, r0
 800bea8:	75bb      	strb	r3, [r7, #22]
            break;
 800beaa:	e002      	b.n	800beb2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800beac:	2300      	movs	r3, #0
 800beae:	75bb      	strb	r3, [r7, #22]
            break;
 800beb0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800beb2:	7dbb      	ldrb	r3, [r7, #22]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d119      	bne.n	800beec <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b03      	cmp	r3, #3
 800bec2:	d113      	bne.n	800beec <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bec4:	7dba      	ldrb	r2, [r7, #22]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	32ae      	adds	r2, #174	@ 0xae
 800beca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00b      	beq.n	800beec <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bed4:	7dba      	ldrb	r2, [r7, #22]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bedc:	7dba      	ldrb	r2, [r7, #22]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	32ae      	adds	r2, #174	@ 0xae
 800bee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f001 f96e 	bl	800d1ce <USBD_CtlSendStatus>
 800bef2:	e032      	b.n	800bf5a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bef4:	7afb      	ldrb	r3, [r7, #11]
 800bef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800befa:	b2db      	uxtb	r3, r3
 800befc:	4619      	mov	r1, r3
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 fa41 	bl	800c386 <USBD_CoreFindEP>
 800bf04:	4603      	mov	r3, r0
 800bf06:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf08:	7dbb      	ldrb	r3, [r7, #22]
 800bf0a:	2bff      	cmp	r3, #255	@ 0xff
 800bf0c:	d025      	beq.n	800bf5a <USBD_LL_DataOutStage+0x16e>
 800bf0e:	7dbb      	ldrb	r3, [r7, #22]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d122      	bne.n	800bf5a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	d117      	bne.n	800bf50 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bf20:	7dba      	ldrb	r2, [r7, #22]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	32ae      	adds	r2, #174	@ 0xae
 800bf26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00f      	beq.n	800bf50 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bf30:	7dba      	ldrb	r2, [r7, #22]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bf38:	7dba      	ldrb	r2, [r7, #22]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	32ae      	adds	r2, #174	@ 0xae
 800bf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	7afa      	ldrb	r2, [r7, #11]
 800bf46:	4611      	mov	r1, r2
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	4798      	blx	r3
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	e000      	b.n	800bf5c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bf72:	7afb      	ldrb	r3, [r7, #11]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d178      	bne.n	800c06a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3314      	adds	r3, #20
 800bf7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d163      	bne.n	800c050 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	8992      	ldrh	r2, [r2, #12]
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d91c      	bls.n	800bfce <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	8992      	ldrh	r2, [r2, #12]
 800bf9c:	1a9a      	subs	r2, r3, r2
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	8992      	ldrh	r2, [r2, #12]
 800bfaa:	441a      	add	r2, r3
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	6919      	ldr	r1, [r3, #16]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f001 f8c4 	bl	800d148 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f004 fc22 	bl	8010810 <USBD_LL_PrepareReceive>
 800bfcc:	e040      	b.n	800c050 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	899b      	ldrh	r3, [r3, #12]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d11c      	bne.n	800c016 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d316      	bcc.n	800c016 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d20f      	bcs.n	800c016 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bff6:	2200      	movs	r2, #0
 800bff8:	2100      	movs	r1, #0
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f001 f8a4 	bl	800d148 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c008:	2300      	movs	r3, #0
 800c00a:	2200      	movs	r2, #0
 800c00c:	2100      	movs	r1, #0
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f004 fbfe 	bl	8010810 <USBD_LL_PrepareReceive>
 800c014:	e01c      	b.n	800c050 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d10f      	bne.n	800c042 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d009      	beq.n	800c042 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c042:	2180      	movs	r1, #128	@ 0x80
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f004 fb39 	bl	80106bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f001 f8d2 	bl	800d1f4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d03a      	beq.n	800c0d0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fe30 	bl	800bcc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c068:	e032      	b.n	800c0d0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c06a:	7afb      	ldrb	r3, [r7, #11]
 800c06c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c070:	b2db      	uxtb	r3, r3
 800c072:	4619      	mov	r1, r3
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f986 	bl	800c386 <USBD_CoreFindEP>
 800c07a:	4603      	mov	r3, r0
 800c07c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
 800c080:	2bff      	cmp	r3, #255	@ 0xff
 800c082:	d025      	beq.n	800c0d0 <USBD_LL_DataInStage+0x16c>
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d122      	bne.n	800c0d0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b03      	cmp	r3, #3
 800c094:	d11c      	bne.n	800c0d0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c096:	7dfa      	ldrb	r2, [r7, #23]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	32ae      	adds	r2, #174	@ 0xae
 800c09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d014      	beq.n	800c0d0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c0a6:	7dfa      	ldrb	r2, [r7, #23]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c0ae:	7dfa      	ldrb	r2, [r7, #23]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	32ae      	adds	r2, #174	@ 0xae
 800c0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	7afa      	ldrb	r2, [r7, #11]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	4798      	blx	r3
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c0c6:	7dbb      	ldrb	r3, [r7, #22]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c0cc:	7dbb      	ldrb	r3, [r7, #22]
 800c0ce:	e000      	b.n	800c0d2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d014      	beq.n	800c140 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00e      	beq.n	800c140 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	6852      	ldr	r2, [r2, #4]
 800c12e:	b2d2      	uxtb	r2, r2
 800c130:	4611      	mov	r1, r2
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	4798      	blx	r3
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c13c:	2303      	movs	r3, #3
 800c13e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c140:	2340      	movs	r3, #64	@ 0x40
 800c142:	2200      	movs	r2, #0
 800c144:	2100      	movs	r1, #0
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f004 fa73 	bl	8010632 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2240      	movs	r2, #64	@ 0x40
 800c158:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c15c:	2340      	movs	r3, #64	@ 0x40
 800c15e:	2200      	movs	r2, #0
 800c160:	2180      	movs	r1, #128	@ 0x80
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f004 fa65 	bl	8010632 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2240      	movs	r2, #64	@ 0x40
 800c174:	841a      	strh	r2, [r3, #32]

  return ret;
 800c176:	7bfb      	ldrb	r3, [r7, #15]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	78fa      	ldrb	r2, [r7, #3]
 800c190:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b04      	cmp	r3, #4
 800c1b2:	d006      	beq.n	800c1c2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2204      	movs	r2, #4
 800c1c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b04      	cmp	r3, #4
 800c1ea:	d106      	bne.n	800c1fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d110      	bne.n	800c23e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00b      	beq.n	800c23e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d005      	beq.n	800c23e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c238:	69db      	ldr	r3, [r3, #28]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	32ae      	adds	r2, #174	@ 0xae
 800c25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c266:	2303      	movs	r3, #3
 800c268:	e01c      	b.n	800c2a4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b03      	cmp	r3, #3
 800c274:	d115      	bne.n	800c2a2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	32ae      	adds	r2, #174	@ 0xae
 800c280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00b      	beq.n	800c2a2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	32ae      	adds	r2, #174	@ 0xae
 800c294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	78fa      	ldrb	r2, [r7, #3]
 800c29c:	4611      	mov	r1, r2
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	32ae      	adds	r2, #174	@ 0xae
 800c2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e01c      	b.n	800c308 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d115      	bne.n	800c306 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	32ae      	adds	r2, #174	@ 0xae
 800c2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00b      	beq.n	800c306 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	32ae      	adds	r2, #174	@ 0xae
 800c2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fe:	78fa      	ldrb	r2, [r7, #3]
 800c300:	4611      	mov	r1, r2
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00e      	beq.n	800c362 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	6852      	ldr	r2, [r2, #4]
 800c350:	b2d2      	uxtb	r2, r2
 800c352:	4611      	mov	r1, r2
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	4798      	blx	r3
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c35e:	2303      	movs	r3, #3
 800c360:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c362:	7bfb      	ldrb	r3, [r7, #15]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c378:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c386:	b480      	push	{r7}
 800c388:	b083      	sub	sp, #12
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	460b      	mov	r3, r1
 800c390:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c392:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c394:	4618      	mov	r0, r3
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	885b      	ldrh	r3, [r3, #2]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	7812      	ldrb	r2, [r2, #0]
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d91f      	bls.n	800c406 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c3cc:	e013      	b.n	800c3f6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c3ce:	f107 030a 	add.w	r3, r7, #10
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6978      	ldr	r0, [r7, #20]
 800c3d6:	f000 f81b 	bl	800c410 <USBD_GetNextDesc>
 800c3da:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	785b      	ldrb	r3, [r3, #1]
 800c3e0:	2b05      	cmp	r3, #5
 800c3e2:	d108      	bne.n	800c3f6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	789b      	ldrb	r3, [r3, #2]
 800c3ec:	78fa      	ldrb	r2, [r7, #3]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d008      	beq.n	800c404 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	885b      	ldrh	r3, [r3, #2]
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	897b      	ldrh	r3, [r7, #10]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d8e5      	bhi.n	800c3ce <USBD_GetEpDesc+0x2e>
 800c402:	e000      	b.n	800c406 <USBD_GetEpDesc+0x66>
          break;
 800c404:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c406:	693b      	ldr	r3, [r7, #16]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	7812      	ldrb	r2, [r2, #0]
 800c426:	4413      	add	r3, r2
 800c428:	b29a      	uxth	r2, r3
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4413      	add	r3, r2
 800c438:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c43a:	68fb      	ldr	r3, [r7, #12]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c448:	b480      	push	{r7}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	3301      	adds	r3, #1
 800c45e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c466:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c46a:	021b      	lsls	r3, r3, #8
 800c46c:	b21a      	sxth	r2, r3
 800c46e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c472:	4313      	orrs	r3, r2
 800c474:	b21b      	sxth	r3, r3
 800c476:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c478:	89fb      	ldrh	r3, [r7, #14]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	371c      	adds	r7, #28
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
	...

0800c488 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c49e:	2b40      	cmp	r3, #64	@ 0x40
 800c4a0:	d005      	beq.n	800c4ae <USBD_StdDevReq+0x26>
 800c4a2:	2b40      	cmp	r3, #64	@ 0x40
 800c4a4:	d857      	bhi.n	800c556 <USBD_StdDevReq+0xce>
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00f      	beq.n	800c4ca <USBD_StdDevReq+0x42>
 800c4aa:	2b20      	cmp	r3, #32
 800c4ac:	d153      	bne.n	800c556 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	32ae      	adds	r2, #174	@ 0xae
 800c4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	4798      	blx	r3
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c8:	e04a      	b.n	800c560 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	785b      	ldrb	r3, [r3, #1]
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d83b      	bhi.n	800c54a <USBD_StdDevReq+0xc2>
 800c4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d8 <USBD_StdDevReq+0x50>)
 800c4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d8:	0800c52d 	.word	0x0800c52d
 800c4dc:	0800c541 	.word	0x0800c541
 800c4e0:	0800c54b 	.word	0x0800c54b
 800c4e4:	0800c537 	.word	0x0800c537
 800c4e8:	0800c54b 	.word	0x0800c54b
 800c4ec:	0800c50b 	.word	0x0800c50b
 800c4f0:	0800c501 	.word	0x0800c501
 800c4f4:	0800c54b 	.word	0x0800c54b
 800c4f8:	0800c523 	.word	0x0800c523
 800c4fc:	0800c515 	.word	0x0800c515
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fa3e 	bl	800c984 <USBD_GetDescriptor>
          break;
 800c508:	e024      	b.n	800c554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fba3 	bl	800cc58 <USBD_SetAddress>
          break;
 800c512:	e01f      	b.n	800c554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fbe2 	bl	800cce0 <USBD_SetConfig>
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]
          break;
 800c520:	e018      	b.n	800c554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fc85 	bl	800ce34 <USBD_GetConfig>
          break;
 800c52a:	e013      	b.n	800c554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fcb6 	bl	800cea0 <USBD_GetStatus>
          break;
 800c534:	e00e      	b.n	800c554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fce5 	bl	800cf08 <USBD_SetFeature>
          break;
 800c53e:	e009      	b.n	800c554 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fd09 	bl	800cf5a <USBD_ClrFeature>
          break;
 800c548:	e004      	b.n	800c554 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fd60 	bl	800d012 <USBD_CtlError>
          break;
 800c552:	bf00      	nop
      }
      break;
 800c554:	e004      	b.n	800c560 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fd5a 	bl	800d012 <USBD_CtlError>
      break;
 800c55e:	bf00      	nop
  }

  return ret;
 800c560:	7bfb      	ldrb	r3, [r7, #15]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop

0800c56c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c582:	2b40      	cmp	r3, #64	@ 0x40
 800c584:	d005      	beq.n	800c592 <USBD_StdItfReq+0x26>
 800c586:	2b40      	cmp	r3, #64	@ 0x40
 800c588:	d852      	bhi.n	800c630 <USBD_StdItfReq+0xc4>
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <USBD_StdItfReq+0x26>
 800c58e:	2b20      	cmp	r3, #32
 800c590:	d14e      	bne.n	800c630 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	3b01      	subs	r3, #1
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d840      	bhi.n	800c622 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	889b      	ldrh	r3, [r3, #4]
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d836      	bhi.n	800c618 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	889b      	ldrh	r3, [r3, #4]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff feda 	bl	800c36c <USBD_CoreFindIF>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5bc:	7bbb      	ldrb	r3, [r7, #14]
 800c5be:	2bff      	cmp	r3, #255	@ 0xff
 800c5c0:	d01d      	beq.n	800c5fe <USBD_StdItfReq+0x92>
 800c5c2:	7bbb      	ldrb	r3, [r7, #14]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d11a      	bne.n	800c5fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c5c8:	7bba      	ldrb	r2, [r7, #14]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	32ae      	adds	r2, #174	@ 0xae
 800c5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00f      	beq.n	800c5f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c5d8:	7bba      	ldrb	r2, [r7, #14]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5e0:	7bba      	ldrb	r2, [r7, #14]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	32ae      	adds	r2, #174	@ 0xae
 800c5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c5f6:	e004      	b.n	800c602 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c5fc:	e001      	b.n	800c602 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c5fe:	2303      	movs	r3, #3
 800c600:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	88db      	ldrh	r3, [r3, #6]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d110      	bne.n	800c62c <USBD_StdItfReq+0xc0>
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10d      	bne.n	800c62c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fddc 	bl	800d1ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c616:	e009      	b.n	800c62c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fcf9 	bl	800d012 <USBD_CtlError>
          break;
 800c620:	e004      	b.n	800c62c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fcf4 	bl	800d012 <USBD_CtlError>
          break;
 800c62a:	e000      	b.n	800c62e <USBD_StdItfReq+0xc2>
          break;
 800c62c:	bf00      	nop
      }
      break;
 800c62e:	e004      	b.n	800c63a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fced 	bl	800d012 <USBD_CtlError>
      break;
 800c638:	bf00      	nop
  }

  return ret;
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c660:	2b40      	cmp	r3, #64	@ 0x40
 800c662:	d007      	beq.n	800c674 <USBD_StdEPReq+0x30>
 800c664:	2b40      	cmp	r3, #64	@ 0x40
 800c666:	f200 8181 	bhi.w	800c96c <USBD_StdEPReq+0x328>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d02a      	beq.n	800c6c4 <USBD_StdEPReq+0x80>
 800c66e:	2b20      	cmp	r3, #32
 800c670:	f040 817c 	bne.w	800c96c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff fe84 	bl	800c386 <USBD_CoreFindEP>
 800c67e:	4603      	mov	r3, r0
 800c680:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c682:	7b7b      	ldrb	r3, [r7, #13]
 800c684:	2bff      	cmp	r3, #255	@ 0xff
 800c686:	f000 8176 	beq.w	800c976 <USBD_StdEPReq+0x332>
 800c68a:	7b7b      	ldrb	r3, [r7, #13]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f040 8172 	bne.w	800c976 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c692:	7b7a      	ldrb	r2, [r7, #13]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c69a:	7b7a      	ldrb	r2, [r7, #13]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	32ae      	adds	r2, #174	@ 0xae
 800c6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8165 	beq.w	800c976 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c6ac:	7b7a      	ldrb	r2, [r7, #13]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	32ae      	adds	r2, #174	@ 0xae
 800c6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	4798      	blx	r3
 800c6be:	4603      	mov	r3, r0
 800c6c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c6c2:	e158      	b.n	800c976 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	785b      	ldrb	r3, [r3, #1]
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d008      	beq.n	800c6de <USBD_StdEPReq+0x9a>
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	f300 8147 	bgt.w	800c960 <USBD_StdEPReq+0x31c>
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 809b 	beq.w	800c80e <USBD_StdEPReq+0x1ca>
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d03c      	beq.n	800c756 <USBD_StdEPReq+0x112>
 800c6dc:	e140      	b.n	800c960 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d002      	beq.n	800c6f0 <USBD_StdEPReq+0xac>
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	d016      	beq.n	800c71c <USBD_StdEPReq+0xd8>
 800c6ee:	e02c      	b.n	800c74a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6f0:	7bbb      	ldrb	r3, [r7, #14]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00d      	beq.n	800c712 <USBD_StdEPReq+0xce>
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
 800c6f8:	2b80      	cmp	r3, #128	@ 0x80
 800c6fa:	d00a      	beq.n	800c712 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6fc:	7bbb      	ldrb	r3, [r7, #14]
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f003 ffdb 	bl	80106bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c706:	2180      	movs	r1, #128	@ 0x80
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f003 ffd7 	bl	80106bc <USBD_LL_StallEP>
 800c70e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c710:	e020      	b.n	800c754 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c712:	6839      	ldr	r1, [r7, #0]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fc7c 	bl	800d012 <USBD_CtlError>
              break;
 800c71a:	e01b      	b.n	800c754 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	885b      	ldrh	r3, [r3, #2]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10e      	bne.n	800c742 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c724:	7bbb      	ldrb	r3, [r7, #14]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00b      	beq.n	800c742 <USBD_StdEPReq+0xfe>
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	2b80      	cmp	r3, #128	@ 0x80
 800c72e:	d008      	beq.n	800c742 <USBD_StdEPReq+0xfe>
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	88db      	ldrh	r3, [r3, #6]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d104      	bne.n	800c742 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c738:	7bbb      	ldrb	r3, [r7, #14]
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f003 ffbd 	bl	80106bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fd43 	bl	800d1ce <USBD_CtlSendStatus>

              break;
 800c748:	e004      	b.n	800c754 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fc60 	bl	800d012 <USBD_CtlError>
              break;
 800c752:	bf00      	nop
          }
          break;
 800c754:	e109      	b.n	800c96a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d002      	beq.n	800c768 <USBD_StdEPReq+0x124>
 800c762:	2b03      	cmp	r3, #3
 800c764:	d016      	beq.n	800c794 <USBD_StdEPReq+0x150>
 800c766:	e04b      	b.n	800c800 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c768:	7bbb      	ldrb	r3, [r7, #14]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00d      	beq.n	800c78a <USBD_StdEPReq+0x146>
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	2b80      	cmp	r3, #128	@ 0x80
 800c772:	d00a      	beq.n	800c78a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c774:	7bbb      	ldrb	r3, [r7, #14]
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f003 ff9f 	bl	80106bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c77e:	2180      	movs	r1, #128	@ 0x80
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f003 ff9b 	bl	80106bc <USBD_LL_StallEP>
 800c786:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c788:	e040      	b.n	800c80c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fc40 	bl	800d012 <USBD_CtlError>
              break;
 800c792:	e03b      	b.n	800c80c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	885b      	ldrh	r3, [r3, #2]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d136      	bne.n	800c80a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d004      	beq.n	800c7b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7a6:	7bbb      	ldrb	r3, [r7, #14]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f003 ffa5 	bl	80106fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 fd0c 	bl	800d1ce <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f7ff fde3 	bl	800c386 <USBD_CoreFindEP>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7c4:	7b7b      	ldrb	r3, [r7, #13]
 800c7c6:	2bff      	cmp	r3, #255	@ 0xff
 800c7c8:	d01f      	beq.n	800c80a <USBD_StdEPReq+0x1c6>
 800c7ca:	7b7b      	ldrb	r3, [r7, #13]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d11c      	bne.n	800c80a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c7d0:	7b7a      	ldrb	r2, [r7, #13]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c7d8:	7b7a      	ldrb	r2, [r7, #13]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	32ae      	adds	r2, #174	@ 0xae
 800c7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d010      	beq.n	800c80a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c7e8:	7b7a      	ldrb	r2, [r7, #13]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	32ae      	adds	r2, #174	@ 0xae
 800c7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	4798      	blx	r3
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c7fe:	e004      	b.n	800c80a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fc05 	bl	800d012 <USBD_CtlError>
              break;
 800c808:	e000      	b.n	800c80c <USBD_StdEPReq+0x1c8>
              break;
 800c80a:	bf00      	nop
          }
          break;
 800c80c:	e0ad      	b.n	800c96a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b02      	cmp	r3, #2
 800c818:	d002      	beq.n	800c820 <USBD_StdEPReq+0x1dc>
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d033      	beq.n	800c886 <USBD_StdEPReq+0x242>
 800c81e:	e099      	b.n	800c954 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c820:	7bbb      	ldrb	r3, [r7, #14]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d007      	beq.n	800c836 <USBD_StdEPReq+0x1f2>
 800c826:	7bbb      	ldrb	r3, [r7, #14]
 800c828:	2b80      	cmp	r3, #128	@ 0x80
 800c82a:	d004      	beq.n	800c836 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fbef 	bl	800d012 <USBD_CtlError>
                break;
 800c834:	e093      	b.n	800c95e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	da0b      	bge.n	800c856 <USBD_StdEPReq+0x212>
 800c83e:	7bbb      	ldrb	r3, [r7, #14]
 800c840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c844:	4613      	mov	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	4413      	add	r3, r2
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	3310      	adds	r3, #16
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	4413      	add	r3, r2
 800c852:	3304      	adds	r3, #4
 800c854:	e00b      	b.n	800c86e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c85c:	4613      	mov	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	4413      	add	r3, r2
 800c86c:	3304      	adds	r3, #4
 800c86e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2200      	movs	r2, #0
 800c874:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	330e      	adds	r3, #14
 800c87a:	2202      	movs	r2, #2
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 fc44 	bl	800d10c <USBD_CtlSendData>
              break;
 800c884:	e06b      	b.n	800c95e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	da11      	bge.n	800c8b2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c88e:	7bbb      	ldrb	r3, [r7, #14]
 800c890:	f003 020f 	and.w	r2, r3, #15
 800c894:	6879      	ldr	r1, [r7, #4]
 800c896:	4613      	mov	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	440b      	add	r3, r1
 800c8a0:	3323      	adds	r3, #35	@ 0x23
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d117      	bne.n	800c8d8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fbb1 	bl	800d012 <USBD_CtlError>
                  break;
 800c8b0:	e055      	b.n	800c95e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8b2:	7bbb      	ldrb	r3, [r7, #14]
 800c8b4:	f003 020f 	and.w	r2, r3, #15
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	440b      	add	r3, r1
 800c8c4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d104      	bne.n	800c8d8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fb9e 	bl	800d012 <USBD_CtlError>
                  break;
 800c8d6:	e042      	b.n	800c95e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	da0b      	bge.n	800c8f8 <USBD_StdEPReq+0x2b4>
 800c8e0:	7bbb      	ldrb	r3, [r7, #14]
 800c8e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	3310      	adds	r3, #16
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	e00b      	b.n	800c910 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c8f8:	7bbb      	ldrb	r3, [r7, #14]
 800c8fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8fe:	4613      	mov	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	4413      	add	r3, r2
 800c90e:	3304      	adds	r3, #4
 800c910:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c912:	7bbb      	ldrb	r3, [r7, #14]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <USBD_StdEPReq+0x2da>
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b80      	cmp	r3, #128	@ 0x80
 800c91c:	d103      	bne.n	800c926 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2200      	movs	r2, #0
 800c922:	739a      	strb	r2, [r3, #14]
 800c924:	e00e      	b.n	800c944 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	4619      	mov	r1, r3
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f003 ff04 	bl	8010738 <USBD_LL_IsStallEP>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d003      	beq.n	800c93e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2201      	movs	r2, #1
 800c93a:	739a      	strb	r2, [r3, #14]
 800c93c:	e002      	b.n	800c944 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2200      	movs	r2, #0
 800c942:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	330e      	adds	r3, #14
 800c948:	2202      	movs	r2, #2
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fbdd 	bl	800d10c <USBD_CtlSendData>
              break;
 800c952:	e004      	b.n	800c95e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fb5b 	bl	800d012 <USBD_CtlError>
              break;
 800c95c:	bf00      	nop
          }
          break;
 800c95e:	e004      	b.n	800c96a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fb55 	bl	800d012 <USBD_CtlError>
          break;
 800c968:	bf00      	nop
      }
      break;
 800c96a:	e005      	b.n	800c978 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fb4f 	bl	800d012 <USBD_CtlError>
      break;
 800c974:	e000      	b.n	800c978 <USBD_StdEPReq+0x334>
      break;
 800c976:	bf00      	nop
  }

  return ret;
 800c978:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
	...

0800c984 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c996:	2300      	movs	r3, #0
 800c998:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	885b      	ldrh	r3, [r3, #2]
 800c99e:	0a1b      	lsrs	r3, r3, #8
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	2b06      	cmp	r3, #6
 800c9a6:	f200 8128 	bhi.w	800cbfa <USBD_GetDescriptor+0x276>
 800c9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b0 <USBD_GetDescriptor+0x2c>)
 800c9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b0:	0800c9cd 	.word	0x0800c9cd
 800c9b4:	0800c9e5 	.word	0x0800c9e5
 800c9b8:	0800ca25 	.word	0x0800ca25
 800c9bc:	0800cbfb 	.word	0x0800cbfb
 800c9c0:	0800cbfb 	.word	0x0800cbfb
 800c9c4:	0800cb9b 	.word	0x0800cb9b
 800c9c8:	0800cbc7 	.word	0x0800cbc7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	7c12      	ldrb	r2, [r2, #16]
 800c9d8:	f107 0108 	add.w	r1, r7, #8
 800c9dc:	4610      	mov	r0, r2
 800c9de:	4798      	blx	r3
 800c9e0:	60f8      	str	r0, [r7, #12]
      break;
 800c9e2:	e112      	b.n	800cc0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	7c1b      	ldrb	r3, [r3, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10d      	bne.n	800ca08 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f4:	f107 0208 	add.w	r2, r7, #8
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
 800c9fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3301      	adds	r3, #1
 800ca02:	2202      	movs	r2, #2
 800ca04:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ca06:	e100      	b.n	800cc0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca10:	f107 0208 	add.w	r2, r7, #8
 800ca14:	4610      	mov	r0, r2
 800ca16:	4798      	blx	r3
 800ca18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	2202      	movs	r2, #2
 800ca20:	701a      	strb	r2, [r3, #0]
      break;
 800ca22:	e0f2      	b.n	800cc0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	885b      	ldrh	r3, [r3, #2]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b05      	cmp	r3, #5
 800ca2c:	f200 80ac 	bhi.w	800cb88 <USBD_GetDescriptor+0x204>
 800ca30:	a201      	add	r2, pc, #4	@ (adr r2, 800ca38 <USBD_GetDescriptor+0xb4>)
 800ca32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800ca51 	.word	0x0800ca51
 800ca3c:	0800ca85 	.word	0x0800ca85
 800ca40:	0800cab9 	.word	0x0800cab9
 800ca44:	0800caed 	.word	0x0800caed
 800ca48:	0800cb21 	.word	0x0800cb21
 800ca4c:	0800cb55 	.word	0x0800cb55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00b      	beq.n	800ca74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	7c12      	ldrb	r2, [r2, #16]
 800ca68:	f107 0108 	add.w	r1, r7, #8
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	4798      	blx	r3
 800ca70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca72:	e091      	b.n	800cb98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 facb 	bl	800d012 <USBD_CtlError>
            err++;
 800ca7c:	7afb      	ldrb	r3, [r7, #11]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	72fb      	strb	r3, [r7, #11]
          break;
 800ca82:	e089      	b.n	800cb98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00b      	beq.n	800caa8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	7c12      	ldrb	r2, [r2, #16]
 800ca9c:	f107 0108 	add.w	r1, r7, #8
 800caa0:	4610      	mov	r0, r2
 800caa2:	4798      	blx	r3
 800caa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caa6:	e077      	b.n	800cb98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fab1 	bl	800d012 <USBD_CtlError>
            err++;
 800cab0:	7afb      	ldrb	r3, [r7, #11]
 800cab2:	3301      	adds	r3, #1
 800cab4:	72fb      	strb	r3, [r7, #11]
          break;
 800cab6:	e06f      	b.n	800cb98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00b      	beq.n	800cadc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	7c12      	ldrb	r2, [r2, #16]
 800cad0:	f107 0108 	add.w	r1, r7, #8
 800cad4:	4610      	mov	r0, r2
 800cad6:	4798      	blx	r3
 800cad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cada:	e05d      	b.n	800cb98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fa97 	bl	800d012 <USBD_CtlError>
            err++;
 800cae4:	7afb      	ldrb	r3, [r7, #11]
 800cae6:	3301      	adds	r3, #1
 800cae8:	72fb      	strb	r3, [r7, #11]
          break;
 800caea:	e055      	b.n	800cb98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00b      	beq.n	800cb10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	7c12      	ldrb	r2, [r2, #16]
 800cb04:	f107 0108 	add.w	r1, r7, #8
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4798      	blx	r3
 800cb0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb0e:	e043      	b.n	800cb98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fa7d 	bl	800d012 <USBD_CtlError>
            err++;
 800cb18:	7afb      	ldrb	r3, [r7, #11]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb1e:	e03b      	b.n	800cb98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00b      	beq.n	800cb44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	7c12      	ldrb	r2, [r2, #16]
 800cb38:	f107 0108 	add.w	r1, r7, #8
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	4798      	blx	r3
 800cb40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb42:	e029      	b.n	800cb98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fa63 	bl	800d012 <USBD_CtlError>
            err++;
 800cb4c:	7afb      	ldrb	r3, [r7, #11]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	72fb      	strb	r3, [r7, #11]
          break;
 800cb52:	e021      	b.n	800cb98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00b      	beq.n	800cb78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	7c12      	ldrb	r2, [r2, #16]
 800cb6c:	f107 0108 	add.w	r1, r7, #8
 800cb70:	4610      	mov	r0, r2
 800cb72:	4798      	blx	r3
 800cb74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb76:	e00f      	b.n	800cb98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb78:	6839      	ldr	r1, [r7, #0]
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fa49 	bl	800d012 <USBD_CtlError>
            err++;
 800cb80:	7afb      	ldrb	r3, [r7, #11]
 800cb82:	3301      	adds	r3, #1
 800cb84:	72fb      	strb	r3, [r7, #11]
          break;
 800cb86:	e007      	b.n	800cb98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fa41 	bl	800d012 <USBD_CtlError>
          err++;
 800cb90:	7afb      	ldrb	r3, [r7, #11]
 800cb92:	3301      	adds	r3, #1
 800cb94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cb96:	bf00      	nop
      }
      break;
 800cb98:	e037      	b.n	800cc0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	7c1b      	ldrb	r3, [r3, #16]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d109      	bne.n	800cbb6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbaa:	f107 0208 	add.w	r2, r7, #8
 800cbae:	4610      	mov	r0, r2
 800cbb0:	4798      	blx	r3
 800cbb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbb4:	e029      	b.n	800cc0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fa2a 	bl	800d012 <USBD_CtlError>
        err++;
 800cbbe:	7afb      	ldrb	r3, [r7, #11]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	72fb      	strb	r3, [r7, #11]
      break;
 800cbc4:	e021      	b.n	800cc0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	7c1b      	ldrb	r3, [r3, #16]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10d      	bne.n	800cbea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd6:	f107 0208 	add.w	r2, r7, #8
 800cbda:	4610      	mov	r0, r2
 800cbdc:	4798      	blx	r3
 800cbde:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	2207      	movs	r2, #7
 800cbe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbe8:	e00f      	b.n	800cc0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fa10 	bl	800d012 <USBD_CtlError>
        err++;
 800cbf2:	7afb      	ldrb	r3, [r7, #11]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	72fb      	strb	r3, [r7, #11]
      break;
 800cbf8:	e007      	b.n	800cc0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fa08 	bl	800d012 <USBD_CtlError>
      err++;
 800cc02:	7afb      	ldrb	r3, [r7, #11]
 800cc04:	3301      	adds	r3, #1
 800cc06:	72fb      	strb	r3, [r7, #11]
      break;
 800cc08:	bf00      	nop
  }

  if (err != 0U)
 800cc0a:	7afb      	ldrb	r3, [r7, #11]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d11e      	bne.n	800cc4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	88db      	ldrh	r3, [r3, #6]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d016      	beq.n	800cc46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cc18:	893b      	ldrh	r3, [r7, #8]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00e      	beq.n	800cc3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	88da      	ldrh	r2, [r3, #6]
 800cc22:	893b      	ldrh	r3, [r7, #8]
 800cc24:	4293      	cmp	r3, r2
 800cc26:	bf28      	it	cs
 800cc28:	4613      	movcs	r3, r2
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc2e:	893b      	ldrh	r3, [r7, #8]
 800cc30:	461a      	mov	r2, r3
 800cc32:	68f9      	ldr	r1, [r7, #12]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fa69 	bl	800d10c <USBD_CtlSendData>
 800cc3a:	e009      	b.n	800cc50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f9e7 	bl	800d012 <USBD_CtlError>
 800cc44:	e004      	b.n	800cc50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fac1 	bl	800d1ce <USBD_CtlSendStatus>
 800cc4c:	e000      	b.n	800cc50 <USBD_GetDescriptor+0x2cc>
    return;
 800cc4e:	bf00      	nop
  }
}
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop

0800cc58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	889b      	ldrh	r3, [r3, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d131      	bne.n	800ccce <USBD_SetAddress+0x76>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	88db      	ldrh	r3, [r3, #6]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d12d      	bne.n	800ccce <USBD_SetAddress+0x76>
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	885b      	ldrh	r3, [r3, #2]
 800cc76:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc78:	d829      	bhi.n	800ccce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	885b      	ldrh	r3, [r3, #2]
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d104      	bne.n	800cc9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f9bc 	bl	800d012 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc9a:	e01d      	b.n	800ccd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7bfa      	ldrb	r2, [r7, #15]
 800cca0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f003 fd71 	bl	8010790 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fa8d 	bl	800d1ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d004      	beq.n	800ccc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc2:	e009      	b.n	800ccd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cccc:	e004      	b.n	800ccd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ccce:	6839      	ldr	r1, [r7, #0]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 f99e 	bl	800d012 <USBD_CtlError>
  }
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	885b      	ldrh	r3, [r3, #2]
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	4b4e      	ldr	r3, [pc, #312]	@ (800ce30 <USBD_SetConfig+0x150>)
 800ccf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ccf8:	4b4d      	ldr	r3, [pc, #308]	@ (800ce30 <USBD_SetConfig+0x150>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d905      	bls.n	800cd0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f985 	bl	800d012 <USBD_CtlError>
    return USBD_FAIL;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	e08c      	b.n	800ce26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d002      	beq.n	800cd1e <USBD_SetConfig+0x3e>
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d029      	beq.n	800cd70 <USBD_SetConfig+0x90>
 800cd1c:	e075      	b.n	800ce0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cd1e:	4b44      	ldr	r3, [pc, #272]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d020      	beq.n	800cd68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cd26:	4b42      	ldr	r3, [pc, #264]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd30:	4b3f      	ldr	r3, [pc, #252]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7fe ffcd 	bl	800bcd6 <USBD_SetClassConfig>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d008      	beq.n	800cd58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f962 	bl	800d012 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2202      	movs	r2, #2
 800cd52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd56:	e065      	b.n	800ce24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 fa38 	bl	800d1ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2203      	movs	r2, #3
 800cd62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd66:	e05d      	b.n	800ce24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 fa30 	bl	800d1ce <USBD_CtlSendStatus>
      break;
 800cd6e:	e059      	b.n	800ce24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd70:	4b2f      	ldr	r3, [pc, #188]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d112      	bne.n	800cd9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cd80:	4b2b      	ldr	r3, [pc, #172]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	461a      	mov	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd8a:	4b29      	ldr	r3, [pc, #164]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7fe ffbc 	bl	800bd0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fa19 	bl	800d1ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd9c:	e042      	b.n	800ce24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cd9e:	4b24      	ldr	r3, [pc, #144]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d02a      	beq.n	800ce02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7fe ffaa 	bl	800bd0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cdba:	4b1d      	ldr	r3, [pc, #116]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdc4:	4b1a      	ldr	r3, [pc, #104]	@ (800ce30 <USBD_SetConfig+0x150>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7fe ff83 	bl	800bcd6 <USBD_SetClassConfig>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00f      	beq.n	800cdfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f918 	bl	800d012 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7fe ff8f 	bl	800bd0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2202      	movs	r2, #2
 800cdf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cdf8:	e014      	b.n	800ce24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f9e7 	bl	800d1ce <USBD_CtlSendStatus>
      break;
 800ce00:	e010      	b.n	800ce24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f9e3 	bl	800d1ce <USBD_CtlSendStatus>
      break;
 800ce08:	e00c      	b.n	800ce24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f900 	bl	800d012 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce12:	4b07      	ldr	r3, [pc, #28]	@ (800ce30 <USBD_SetConfig+0x150>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7fe ff78 	bl	800bd0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	73fb      	strb	r3, [r7, #15]
      break;
 800ce22:	bf00      	nop
  }

  return ret;
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	20006628 	.word	0x20006628

0800ce34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	88db      	ldrh	r3, [r3, #6]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d004      	beq.n	800ce50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f8e2 	bl	800d012 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce4e:	e023      	b.n	800ce98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	dc02      	bgt.n	800ce62 <USBD_GetConfig+0x2e>
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dc03      	bgt.n	800ce68 <USBD_GetConfig+0x34>
 800ce60:	e015      	b.n	800ce8e <USBD_GetConfig+0x5a>
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d00b      	beq.n	800ce7e <USBD_GetConfig+0x4a>
 800ce66:	e012      	b.n	800ce8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3308      	adds	r3, #8
 800ce72:	2201      	movs	r2, #1
 800ce74:	4619      	mov	r1, r3
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f948 	bl	800d10c <USBD_CtlSendData>
        break;
 800ce7c:	e00c      	b.n	800ce98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3304      	adds	r3, #4
 800ce82:	2201      	movs	r2, #1
 800ce84:	4619      	mov	r1, r3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f940 	bl	800d10c <USBD_CtlSendData>
        break;
 800ce8c:	e004      	b.n	800ce98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce8e:	6839      	ldr	r1, [r7, #0]
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 f8be 	bl	800d012 <USBD_CtlError>
        break;
 800ce96:	bf00      	nop
}
 800ce98:	bf00      	nop
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d81e      	bhi.n	800cef6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	88db      	ldrh	r3, [r3, #6]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d004      	beq.n	800ceca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f8a5 	bl	800d012 <USBD_CtlError>
        break;
 800cec8:	e01a      	b.n	800cf00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2201      	movs	r2, #1
 800cece:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d005      	beq.n	800cee6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	f043 0202 	orr.w	r2, r3, #2
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	330c      	adds	r3, #12
 800ceea:	2202      	movs	r2, #2
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f90c 	bl	800d10c <USBD_CtlSendData>
      break;
 800cef4:	e004      	b.n	800cf00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f88a 	bl	800d012 <USBD_CtlError>
      break;
 800cefe:	bf00      	nop
  }
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	885b      	ldrh	r3, [r3, #2]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d107      	bne.n	800cf2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 f953 	bl	800d1ce <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cf28:	e013      	b.n	800cf52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	885b      	ldrh	r3, [r3, #2]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d10b      	bne.n	800cf4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	889b      	ldrh	r3, [r3, #4]
 800cf36:	0a1b      	lsrs	r3, r3, #8
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f943 	bl	800d1ce <USBD_CtlSendStatus>
}
 800cf48:	e003      	b.n	800cf52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f860 	bl	800d012 <USBD_CtlError>
}
 800cf52:	bf00      	nop
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d80b      	bhi.n	800cf8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	885b      	ldrh	r3, [r3, #2]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d10c      	bne.n	800cf94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f923 	bl	800d1ce <USBD_CtlSendStatus>
      }
      break;
 800cf88:	e004      	b.n	800cf94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f840 	bl	800d012 <USBD_CtlError>
      break;
 800cf92:	e000      	b.n	800cf96 <USBD_ClrFeature+0x3c>
      break;
 800cf94:	bf00      	nop
  }
}
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b084      	sub	sp, #16
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	781a      	ldrb	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	781a      	ldrb	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f7ff fa3d 	bl	800c448 <SWAPBYTE>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f7ff fa30 	bl	800c448 <SWAPBYTE>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461a      	mov	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3301      	adds	r3, #1
 800cff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3301      	adds	r3, #1
 800cffa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f7ff fa23 	bl	800c448 <SWAPBYTE>
 800d002:	4603      	mov	r3, r0
 800d004:	461a      	mov	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	80da      	strh	r2, [r3, #6]
}
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b082      	sub	sp, #8
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d01c:	2180      	movs	r1, #128	@ 0x80
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f003 fb4c 	bl	80106bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d024:	2100      	movs	r1, #0
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f003 fb48 	bl	80106bc <USBD_LL_StallEP>
}
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b086      	sub	sp, #24
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d040:	2300      	movs	r3, #0
 800d042:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d042      	beq.n	800d0d0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d04e:	6938      	ldr	r0, [r7, #16]
 800d050:	f000 f842 	bl	800d0d8 <USBD_GetLen>
 800d054:	4603      	mov	r3, r0
 800d056:	3301      	adds	r3, #1
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d05e:	d808      	bhi.n	800d072 <USBD_GetString+0x3e>
 800d060:	6938      	ldr	r0, [r7, #16]
 800d062:	f000 f839 	bl	800d0d8 <USBD_GetLen>
 800d066:	4603      	mov	r3, r0
 800d068:	3301      	adds	r3, #1
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	b29a      	uxth	r2, r3
 800d070:	e001      	b.n	800d076 <USBD_GetString+0x42>
 800d072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d07a:	7dfb      	ldrb	r3, [r7, #23]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	4413      	add	r3, r2
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	7812      	ldrb	r2, [r2, #0]
 800d084:	701a      	strb	r2, [r3, #0]
  idx++;
 800d086:	7dfb      	ldrb	r3, [r7, #23]
 800d088:	3301      	adds	r3, #1
 800d08a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d08c:	7dfb      	ldrb	r3, [r7, #23]
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	4413      	add	r3, r2
 800d092:	2203      	movs	r2, #3
 800d094:	701a      	strb	r2, [r3, #0]
  idx++;
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	3301      	adds	r3, #1
 800d09a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d09c:	e013      	b.n	800d0c6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d09e:	7dfb      	ldrb	r3, [r7, #23]
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	693a      	ldr	r2, [r7, #16]
 800d0a6:	7812      	ldrb	r2, [r2, #0]
 800d0a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	613b      	str	r3, [r7, #16]
    idx++;
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	2200      	movs	r2, #0
 800d0be:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0c0:	7dfb      	ldrb	r3, [r7, #23]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1e7      	bne.n	800d09e <USBD_GetString+0x6a>
 800d0ce:	e000      	b.n	800d0d2 <USBD_GetString+0x9e>
    return;
 800d0d0:	bf00      	nop
  }
}
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0e8:	e005      	b.n	800d0f6 <USBD_GetLen+0x1e>
  {
    len++;
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1f5      	bne.n	800d0ea <USBD_GetLen+0x12>
  }

  return len;
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2202      	movs	r2, #2
 800d11c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	68ba      	ldr	r2, [r7, #8]
 800d12a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	2100      	movs	r1, #0
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f003 fb48 	bl	80107ce <USBD_LL_Transmit>

  return USBD_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	2100      	movs	r1, #0
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f003 fb37 	bl	80107ce <USBD_LL_Transmit>

  return USBD_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b084      	sub	sp, #16
 800d16e:	af00      	add	r7, sp, #0
 800d170:	60f8      	str	r0, [r7, #12]
 800d172:	60b9      	str	r1, [r7, #8]
 800d174:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2203      	movs	r2, #3
 800d17a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	2100      	movs	r1, #0
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f003 fb37 	bl	8010810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f003 fb26 	bl	8010810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2204      	movs	r2, #4
 800d1da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1de:	2300      	movs	r3, #0
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f003 faf2 	bl	80107ce <USBD_LL_Transmit>

  return USBD_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2205      	movs	r2, #5
 800d200:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d204:	2300      	movs	r3, #0
 800d206:	2200      	movs	r2, #0
 800d208:	2100      	movs	r1, #0
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f003 fb00 	bl	8010810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
	...

0800d21c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	4603      	mov	r3, r0
 800d224:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	4a08      	ldr	r2, [pc, #32]	@ (800d24c <disk_status+0x30>)
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	79fa      	ldrb	r2, [r7, #7]
 800d234:	4905      	ldr	r1, [pc, #20]	@ (800d24c <disk_status+0x30>)
 800d236:	440a      	add	r2, r1
 800d238:	7a12      	ldrb	r2, [r2, #8]
 800d23a:	4610      	mov	r0, r2
 800d23c:	4798      	blx	r3
 800d23e:	4603      	mov	r3, r0
 800d240:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d242:	7bfb      	ldrb	r3, [r7, #15]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	20006644 	.word	0x20006644

0800d250 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	4a0e      	ldr	r2, [pc, #56]	@ (800d29c <disk_initialize+0x4c>)
 800d262:	5cd3      	ldrb	r3, [r2, r3]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d114      	bne.n	800d292 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d268:	79fb      	ldrb	r3, [r7, #7]
 800d26a:	4a0c      	ldr	r2, [pc, #48]	@ (800d29c <disk_initialize+0x4c>)
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4413      	add	r3, r2
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	79fa      	ldrb	r2, [r7, #7]
 800d276:	4909      	ldr	r1, [pc, #36]	@ (800d29c <disk_initialize+0x4c>)
 800d278:	440a      	add	r2, r1
 800d27a:	7a12      	ldrb	r2, [r2, #8]
 800d27c:	4610      	mov	r0, r2
 800d27e:	4798      	blx	r3
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d103      	bne.n	800d292 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d28a:	79fb      	ldrb	r3, [r7, #7]
 800d28c:	4a03      	ldr	r2, [pc, #12]	@ (800d29c <disk_initialize+0x4c>)
 800d28e:	2101      	movs	r1, #1
 800d290:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d292:	7bfb      	ldrb	r3, [r7, #15]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	20006644 	.word	0x20006644

0800d2a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d2a0:	b590      	push	{r4, r7, lr}
 800d2a2:	b087      	sub	sp, #28
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
 800d2aa:	603b      	str	r3, [r7, #0]
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	4a0a      	ldr	r2, [pc, #40]	@ (800d2dc <disk_read+0x3c>)
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	689c      	ldr	r4, [r3, #8]
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	4a07      	ldr	r2, [pc, #28]	@ (800d2dc <disk_read+0x3c>)
 800d2c0:	4413      	add	r3, r2
 800d2c2:	7a18      	ldrb	r0, [r3, #8]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	68b9      	ldr	r1, [r7, #8]
 800d2ca:	47a0      	blx	r4
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800d2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	371c      	adds	r7, #28
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd90      	pop	{r4, r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	20006644 	.word	0x20006644

0800d2e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60b9      	str	r1, [r7, #8]
 800d2e8:	607a      	str	r2, [r7, #4]
 800d2ea:	603b      	str	r3, [r7, #0]
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4a0a      	ldr	r2, [pc, #40]	@ (800d31c <disk_write+0x3c>)
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	68dc      	ldr	r4, [r3, #12]
 800d2fc:	7bfb      	ldrb	r3, [r7, #15]
 800d2fe:	4a07      	ldr	r2, [pc, #28]	@ (800d31c <disk_write+0x3c>)
 800d300:	4413      	add	r3, r2
 800d302:	7a18      	ldrb	r0, [r3, #8]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	68b9      	ldr	r1, [r7, #8]
 800d30a:	47a0      	blx	r4
 800d30c:	4603      	mov	r3, r0
 800d30e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d310:	7dfb      	ldrb	r3, [r7, #23]
}
 800d312:	4618      	mov	r0, r3
 800d314:	371c      	adds	r7, #28
 800d316:	46bd      	mov	sp, r7
 800d318:	bd90      	pop	{r4, r7, pc}
 800d31a:	bf00      	nop
 800d31c:	20006644 	.word	0x20006644

0800d320 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	603a      	str	r2, [r7, #0]
 800d32a:	71fb      	strb	r3, [r7, #7]
 800d32c:	460b      	mov	r3, r1
 800d32e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	4a09      	ldr	r2, [pc, #36]	@ (800d358 <disk_ioctl+0x38>)
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	691b      	ldr	r3, [r3, #16]
 800d33c:	79fa      	ldrb	r2, [r7, #7]
 800d33e:	4906      	ldr	r1, [pc, #24]	@ (800d358 <disk_ioctl+0x38>)
 800d340:	440a      	add	r2, r1
 800d342:	7a10      	ldrb	r0, [r2, #8]
 800d344:	79b9      	ldrb	r1, [r7, #6]
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	4798      	blx	r3
 800d34a:	4603      	mov	r3, r0
 800d34c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	20006644 	.word	0x20006644

0800d35c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	3301      	adds	r3, #1
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d36c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d370:	021b      	lsls	r3, r3, #8
 800d372:	b21a      	sxth	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	b21b      	sxth	r3, r3
 800d37a:	4313      	orrs	r3, r2
 800d37c:	b21b      	sxth	r3, r3
 800d37e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d380:	89fb      	ldrh	r3, [r7, #14]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3714      	adds	r7, #20
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr

0800d38e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d38e:	b480      	push	{r7}
 800d390:	b085      	sub	sp, #20
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	3303      	adds	r3, #3
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	021b      	lsls	r3, r3, #8
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	3202      	adds	r2, #2
 800d3a6:	7812      	ldrb	r2, [r2, #0]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	021b      	lsls	r3, r3, #8
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	3201      	adds	r2, #1
 800d3b4:	7812      	ldrb	r2, [r2, #0]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	7812      	ldrb	r2, [r2, #0]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	60fb      	str	r3, [r7, #12]
	return rv;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3714      	adds	r7, #20
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	607a      	str	r2, [r7, #4]
 800d3e6:	887a      	ldrh	r2, [r7, #2]
 800d3e8:	b2d2      	uxtb	r2, r2
 800d3ea:	701a      	strb	r2, [r3, #0]
 800d3ec:	887b      	ldrh	r3, [r7, #2]
 800d3ee:	0a1b      	lsrs	r3, r3, #8
 800d3f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	1c5a      	adds	r2, r3, #1
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	887a      	ldrh	r2, [r7, #2]
 800d3fa:	b2d2      	uxtb	r2, r2
 800d3fc:	701a      	strb	r2, [r3, #0]
}
 800d3fe:	bf00      	nop
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	1c5a      	adds	r2, r3, #1
 800d418:	607a      	str	r2, [r7, #4]
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	b2d2      	uxtb	r2, r2
 800d41e:	701a      	strb	r2, [r3, #0]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	0a1b      	lsrs	r3, r3, #8
 800d424:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	607a      	str	r2, [r7, #4]
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	b2d2      	uxtb	r2, r2
 800d430:	701a      	strb	r2, [r3, #0]
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	0a1b      	lsrs	r3, r3, #8
 800d436:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	607a      	str	r2, [r7, #4]
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	b2d2      	uxtb	r2, r2
 800d442:	701a      	strb	r2, [r3, #0]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	0a1b      	lsrs	r3, r3, #8
 800d448:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	1c5a      	adds	r2, r3, #1
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	701a      	strb	r2, [r3, #0]
}
 800d456:	bf00      	nop
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d462:	b480      	push	{r7}
 800d464:	b087      	sub	sp, #28
 800d466:	af00      	add	r7, sp, #0
 800d468:	60f8      	str	r0, [r7, #12]
 800d46a:	60b9      	str	r1, [r7, #8]
 800d46c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00d      	beq.n	800d498 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	1c53      	adds	r3, r2, #1
 800d480:	613b      	str	r3, [r7, #16]
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	1c59      	adds	r1, r3, #1
 800d486:	6179      	str	r1, [r7, #20]
 800d488:	7812      	ldrb	r2, [r2, #0]
 800d48a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3b01      	subs	r3, #1
 800d490:	607b      	str	r3, [r7, #4]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1f1      	bne.n	800d47c <mem_cpy+0x1a>
	}
}
 800d498:	bf00      	nop
 800d49a:	371c      	adds	r7, #28
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d4a4:	b480      	push	{r7}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	617a      	str	r2, [r7, #20]
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	607b      	str	r3, [r7, #4]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1f3      	bne.n	800d4b4 <mem_set+0x10>
}
 800d4cc:	bf00      	nop
 800d4ce:	bf00      	nop
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d4da:	b480      	push	{r7}
 800d4dc:	b089      	sub	sp, #36	@ 0x24
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	60f8      	str	r0, [r7, #12]
 800d4e2:	60b9      	str	r1, [r7, #8]
 800d4e4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	61fa      	str	r2, [r7, #28]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	61ba      	str	r2, [r7, #24]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	1acb      	subs	r3, r1, r3
 800d506:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	607b      	str	r3, [r7, #4]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d002      	beq.n	800d51a <mem_cmp+0x40>
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d0eb      	beq.n	800d4f2 <mem_cmp+0x18>

	return r;
 800d51a:	697b      	ldr	r3, [r7, #20]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3724      	adds	r7, #36	@ 0x24
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d532:	e002      	b.n	800d53a <chk_chr+0x12>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3301      	adds	r3, #1
 800d538:	607b      	str	r3, [r7, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d005      	beq.n	800d54e <chk_chr+0x26>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	461a      	mov	r2, r3
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d1f2      	bne.n	800d534 <chk_chr+0xc>
	return *str;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	781b      	ldrb	r3, [r3, #0]
}
 800d552:	4618      	mov	r0, r3
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
	...

0800d560 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d56a:	2300      	movs	r3, #0
 800d56c:	60bb      	str	r3, [r7, #8]
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	60fb      	str	r3, [r7, #12]
 800d572:	e029      	b.n	800d5c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d574:	4a27      	ldr	r2, [pc, #156]	@ (800d614 <chk_lock+0xb4>)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	011b      	lsls	r3, r3, #4
 800d57a:	4413      	add	r3, r2
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d01d      	beq.n	800d5be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d582:	4a24      	ldr	r2, [pc, #144]	@ (800d614 <chk_lock+0xb4>)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	011b      	lsls	r3, r3, #4
 800d588:	4413      	add	r3, r2
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	429a      	cmp	r2, r3
 800d592:	d116      	bne.n	800d5c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d594:	4a1f      	ldr	r2, [pc, #124]	@ (800d614 <chk_lock+0xb4>)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	4413      	add	r3, r2
 800d59c:	3304      	adds	r3, #4
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d10c      	bne.n	800d5c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5a8:	4a1a      	ldr	r2, [pc, #104]	@ (800d614 <chk_lock+0xb4>)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	011b      	lsls	r3, r3, #4
 800d5ae:	4413      	add	r3, r2
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d102      	bne.n	800d5c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5bc:	e007      	b.n	800d5ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d0d2      	beq.n	800d574 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d109      	bne.n	800d5e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <chk_lock+0x80>
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d101      	bne.n	800d5e4 <chk_lock+0x84>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	e010      	b.n	800d606 <chk_lock+0xa6>
 800d5e4:	2312      	movs	r3, #18
 800d5e6:	e00e      	b.n	800d606 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d108      	bne.n	800d600 <chk_lock+0xa0>
 800d5ee:	4a09      	ldr	r2, [pc, #36]	@ (800d614 <chk_lock+0xb4>)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	011b      	lsls	r3, r3, #4
 800d5f4:	4413      	add	r3, r2
 800d5f6:	330c      	adds	r3, #12
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5fe:	d101      	bne.n	800d604 <chk_lock+0xa4>
 800d600:	2310      	movs	r3, #16
 800d602:	e000      	b.n	800d606 <chk_lock+0xa6>
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	20006634 	.word	0x20006634

0800d618 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d61e:	2300      	movs	r3, #0
 800d620:	607b      	str	r3, [r7, #4]
 800d622:	e002      	b.n	800d62a <enq_lock+0x12>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	3301      	adds	r3, #1
 800d628:	607b      	str	r3, [r7, #4]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d106      	bne.n	800d63e <enq_lock+0x26>
 800d630:	4a09      	ldr	r2, [pc, #36]	@ (800d658 <enq_lock+0x40>)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	011b      	lsls	r3, r3, #4
 800d636:	4413      	add	r3, r2
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1f2      	bne.n	800d624 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2b01      	cmp	r3, #1
 800d642:	bf14      	ite	ne
 800d644:	2301      	movne	r3, #1
 800d646:	2300      	moveq	r3, #0
 800d648:	b2db      	uxtb	r3, r3
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	370c      	adds	r7, #12
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	20006634 	.word	0x20006634

0800d65c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b085      	sub	sp, #20
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d666:	2300      	movs	r3, #0
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	e01f      	b.n	800d6ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d66c:	4a41      	ldr	r2, [pc, #260]	@ (800d774 <inc_lock+0x118>)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	011b      	lsls	r3, r3, #4
 800d672:	4413      	add	r3, r2
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d113      	bne.n	800d6a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d67e:	4a3d      	ldr	r2, [pc, #244]	@ (800d774 <inc_lock+0x118>)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	011b      	lsls	r3, r3, #4
 800d684:	4413      	add	r3, r2
 800d686:	3304      	adds	r3, #4
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d68e:	429a      	cmp	r2, r3
 800d690:	d109      	bne.n	800d6a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d692:	4a38      	ldr	r2, [pc, #224]	@ (800d774 <inc_lock+0x118>)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	011b      	lsls	r3, r3, #4
 800d698:	4413      	add	r3, r2
 800d69a:	3308      	adds	r3, #8
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d006      	beq.n	800d6b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0dc      	beq.n	800d66c <inc_lock+0x10>
 800d6b2:	e000      	b.n	800d6b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d6b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d132      	bne.n	800d722 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	e002      	b.n	800d6c8 <inc_lock+0x6c>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d106      	bne.n	800d6dc <inc_lock+0x80>
 800d6ce:	4a29      	ldr	r2, [pc, #164]	@ (800d774 <inc_lock+0x118>)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	011b      	lsls	r3, r3, #4
 800d6d4:	4413      	add	r3, r2
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1f2      	bne.n	800d6c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d101      	bne.n	800d6e6 <inc_lock+0x8a>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e040      	b.n	800d768 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	4922      	ldr	r1, [pc, #136]	@ (800d774 <inc_lock+0x118>)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	011b      	lsls	r3, r3, #4
 800d6f0:	440b      	add	r3, r1
 800d6f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	491e      	ldr	r1, [pc, #120]	@ (800d774 <inc_lock+0x118>)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	011b      	lsls	r3, r3, #4
 800d6fe:	440b      	add	r3, r1
 800d700:	3304      	adds	r3, #4
 800d702:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	695a      	ldr	r2, [r3, #20]
 800d708:	491a      	ldr	r1, [pc, #104]	@ (800d774 <inc_lock+0x118>)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	011b      	lsls	r3, r3, #4
 800d70e:	440b      	add	r3, r1
 800d710:	3308      	adds	r3, #8
 800d712:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d714:	4a17      	ldr	r2, [pc, #92]	@ (800d774 <inc_lock+0x118>)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	011b      	lsls	r3, r3, #4
 800d71a:	4413      	add	r3, r2
 800d71c:	330c      	adds	r3, #12
 800d71e:	2200      	movs	r2, #0
 800d720:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d009      	beq.n	800d73c <inc_lock+0xe0>
 800d728:	4a12      	ldr	r2, [pc, #72]	@ (800d774 <inc_lock+0x118>)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	011b      	lsls	r3, r3, #4
 800d72e:	4413      	add	r3, r2
 800d730:	330c      	adds	r3, #12
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d001      	beq.n	800d73c <inc_lock+0xe0>
 800d738:	2300      	movs	r3, #0
 800d73a:	e015      	b.n	800d768 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d108      	bne.n	800d754 <inc_lock+0xf8>
 800d742:	4a0c      	ldr	r2, [pc, #48]	@ (800d774 <inc_lock+0x118>)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	011b      	lsls	r3, r3, #4
 800d748:	4413      	add	r3, r2
 800d74a:	330c      	adds	r3, #12
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	3301      	adds	r3, #1
 800d750:	b29a      	uxth	r2, r3
 800d752:	e001      	b.n	800d758 <inc_lock+0xfc>
 800d754:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d758:	4906      	ldr	r1, [pc, #24]	@ (800d774 <inc_lock+0x118>)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	011b      	lsls	r3, r3, #4
 800d75e:	440b      	add	r3, r1
 800d760:	330c      	adds	r3, #12
 800d762:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3301      	adds	r3, #1
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr
 800d774:	20006634 	.word	0x20006634

0800d778 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d780:	2300      	movs	r3, #0
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	e010      	b.n	800d7a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d786:	4a0d      	ldr	r2, [pc, #52]	@ (800d7bc <clear_lock+0x44>)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	011b      	lsls	r3, r3, #4
 800d78c:	4413      	add	r3, r2
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	429a      	cmp	r2, r3
 800d794:	d105      	bne.n	800d7a2 <clear_lock+0x2a>
 800d796:	4a09      	ldr	r2, [pc, #36]	@ (800d7bc <clear_lock+0x44>)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	011b      	lsls	r3, r3, #4
 800d79c:	4413      	add	r3, r2
 800d79e:	2200      	movs	r2, #0
 800d7a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d0eb      	beq.n	800d786 <clear_lock+0xe>
	}
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20006634 	.word	0x20006634

0800d7c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	78db      	ldrb	r3, [r3, #3]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d034      	beq.n	800d83e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	7858      	ldrb	r0, [r3, #1]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	f7ff fd7a 	bl	800d2e0 <disk_write>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	e022      	b.n	800d83e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	1ad2      	subs	r2, r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d217      	bcs.n	800d83e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	789b      	ldrb	r3, [r3, #2]
 800d812:	613b      	str	r3, [r7, #16]
 800d814:	e010      	b.n	800d838 <sync_window+0x78>
					wsect += fs->fsize;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	69db      	ldr	r3, [r3, #28]
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	4413      	add	r3, r2
 800d81e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	7858      	ldrb	r0, [r3, #1]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d82a:	2301      	movs	r3, #1
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	f7ff fd57 	bl	800d2e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	3b01      	subs	r3, #1
 800d836:	613b      	str	r3, [r7, #16]
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d8eb      	bhi.n	800d816 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3718      	adds	r7, #24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d01b      	beq.n	800d898 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ffad 	bl	800d7c0 <sync_window>
 800d866:	4603      	mov	r3, r0
 800d868:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d113      	bne.n	800d898 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7858      	ldrb	r0, [r3, #1]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d87a:	2301      	movs	r3, #1
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	f7ff fd0f 	bl	800d2a0 <disk_read>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d004      	beq.n	800d892 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d888:	f04f 33ff 	mov.w	r3, #4294967295
 800d88c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d88e:	2301      	movs	r3, #1
 800d890:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	683a      	ldr	r2, [r7, #0]
 800d896:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d898:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
	...

0800d8a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff ff87 	bl	800d7c0 <sync_window>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d8b6:	7bfb      	ldrb	r3, [r7, #15]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d159      	bne.n	800d970 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d149      	bne.n	800d958 <sync_fs+0xb4>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	791b      	ldrb	r3, [r3, #4]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d145      	bne.n	800d958 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	899b      	ldrh	r3, [r3, #12]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	2100      	movs	r1, #0
 800d8da:	f7ff fde3 	bl	800d4a4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	3334      	adds	r3, #52	@ 0x34
 800d8e2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d8e6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fd72 	bl	800d3d4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	3334      	adds	r3, #52	@ 0x34
 800d8f4:	4921      	ldr	r1, [pc, #132]	@ (800d97c <sync_fs+0xd8>)
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff fd87 	bl	800d40a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	3334      	adds	r3, #52	@ 0x34
 800d900:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d904:	491e      	ldr	r1, [pc, #120]	@ (800d980 <sync_fs+0xdc>)
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fd7f 	bl	800d40a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3334      	adds	r3, #52	@ 0x34
 800d910:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	695b      	ldr	r3, [r3, #20]
 800d918:	4619      	mov	r1, r3
 800d91a:	4610      	mov	r0, r2
 800d91c:	f7ff fd75 	bl	800d40a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3334      	adds	r3, #52	@ 0x34
 800d924:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f7ff fd6b 	bl	800d40a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a1b      	ldr	r3, [r3, #32]
 800d938:	1c5a      	adds	r2, r3, #1
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	7858      	ldrb	r0, [r3, #1]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d94c:	2301      	movs	r3, #1
 800d94e:	f7ff fcc7 	bl	800d2e0 <disk_write>
			fs->fsi_flag = 0;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	2200      	movs	r2, #0
 800d95e:	2100      	movs	r1, #0
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff fcdd 	bl	800d320 <disk_ioctl>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <sync_fs+0xcc>
 800d96c:	2301      	movs	r3, #1
 800d96e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d970:	7bfb      	ldrb	r3, [r7, #15]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	41615252 	.word	0x41615252
 800d980:	61417272 	.word	0x61417272

0800d984 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	3b02      	subs	r3, #2
 800d992:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	699b      	ldr	r3, [r3, #24]
 800d998:	3b02      	subs	r3, #2
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d301      	bcc.n	800d9a4 <clust2sect+0x20>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e008      	b.n	800d9b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	895b      	ldrh	r3, [r3, #10]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	fb03 f202 	mul.w	r2, r3, r2
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b4:	4413      	add	r3, r2
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b086      	sub	sp, #24
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d904      	bls.n	800d9e2 <get_fat+0x20>
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d302      	bcc.n	800d9e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	617b      	str	r3, [r7, #20]
 800d9e6:	e0ba      	b.n	800db5e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	f000 8082 	beq.w	800dafc <get_fat+0x13a>
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	f300 80a6 	bgt.w	800db4a <get_fat+0x188>
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d002      	beq.n	800da08 <get_fat+0x46>
 800da02:	2b02      	cmp	r3, #2
 800da04:	d055      	beq.n	800dab2 <get_fat+0xf0>
 800da06:	e0a0      	b.n	800db4a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	60fb      	str	r3, [r7, #12]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	085b      	lsrs	r3, r3, #1
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	899b      	ldrh	r3, [r3, #12]
 800da1e:	4619      	mov	r1, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	fbb3 f3f1 	udiv	r3, r3, r1
 800da26:	4413      	add	r3, r2
 800da28:	4619      	mov	r1, r3
 800da2a:	6938      	ldr	r0, [r7, #16]
 800da2c:	f7ff ff0c 	bl	800d848 <move_window>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	f040 808c 	bne.w	800db50 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	60fa      	str	r2, [r7, #12]
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	8992      	ldrh	r2, [r2, #12]
 800da42:	fbb3 f1f2 	udiv	r1, r3, r2
 800da46:	fb01 f202 	mul.w	r2, r1, r2
 800da4a:	1a9b      	subs	r3, r3, r2
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	4413      	add	r3, r2
 800da50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	899b      	ldrh	r3, [r3, #12]
 800da5e:	4619      	mov	r1, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	fbb3 f3f1 	udiv	r3, r3, r1
 800da66:	4413      	add	r3, r2
 800da68:	4619      	mov	r1, r3
 800da6a:	6938      	ldr	r0, [r7, #16]
 800da6c:	f7ff feec 	bl	800d848 <move_window>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d16e      	bne.n	800db54 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	899b      	ldrh	r3, [r3, #12]
 800da7a:	461a      	mov	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800da82:	fb01 f202 	mul.w	r2, r1, r2
 800da86:	1a9b      	subs	r3, r3, r2
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	4413      	add	r3, r2
 800da8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da90:	021b      	lsls	r3, r3, #8
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	4313      	orrs	r3, r2
 800da96:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <get_fat+0xe6>
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	091b      	lsrs	r3, r3, #4
 800daa6:	e002      	b.n	800daae <get_fat+0xec>
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800daae:	617b      	str	r3, [r7, #20]
			break;
 800dab0:	e055      	b.n	800db5e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	899b      	ldrh	r3, [r3, #12]
 800daba:	085b      	lsrs	r3, r3, #1
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	4619      	mov	r1, r3
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dac6:	4413      	add	r3, r2
 800dac8:	4619      	mov	r1, r3
 800daca:	6938      	ldr	r0, [r7, #16]
 800dacc:	f7ff febc 	bl	800d848 <move_window>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d140      	bne.n	800db58 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	8992      	ldrh	r2, [r2, #12]
 800dae4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dae8:	fb00 f202 	mul.w	r2, r0, r2
 800daec:	1a9b      	subs	r3, r3, r2
 800daee:	440b      	add	r3, r1
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fc33 	bl	800d35c <ld_word>
 800daf6:	4603      	mov	r3, r0
 800daf8:	617b      	str	r3, [r7, #20]
			break;
 800dafa:	e030      	b.n	800db5e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	899b      	ldrh	r3, [r3, #12]
 800db04:	089b      	lsrs	r3, r3, #2
 800db06:	b29b      	uxth	r3, r3
 800db08:	4619      	mov	r1, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800db10:	4413      	add	r3, r2
 800db12:	4619      	mov	r1, r3
 800db14:	6938      	ldr	r0, [r7, #16]
 800db16:	f7ff fe97 	bl	800d848 <move_window>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d11d      	bne.n	800db5c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	8992      	ldrh	r2, [r2, #12]
 800db2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800db32:	fb00 f202 	mul.w	r2, r0, r2
 800db36:	1a9b      	subs	r3, r3, r2
 800db38:	440b      	add	r3, r1
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7ff fc27 	bl	800d38e <ld_dword>
 800db40:	4603      	mov	r3, r0
 800db42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800db46:	617b      	str	r3, [r7, #20]
			break;
 800db48:	e009      	b.n	800db5e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800db4a:	2301      	movs	r3, #1
 800db4c:	617b      	str	r3, [r7, #20]
 800db4e:	e006      	b.n	800db5e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db50:	bf00      	nop
 800db52:	e004      	b.n	800db5e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db54:	bf00      	nop
 800db56:	e002      	b.n	800db5e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db58:	bf00      	nop
 800db5a:	e000      	b.n	800db5e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db5c:	bf00      	nop
		}
	}

	return val;
 800db5e:	697b      	ldr	r3, [r7, #20]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800db68:	b590      	push	{r4, r7, lr}
 800db6a:	b089      	sub	sp, #36	@ 0x24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800db74:	2302      	movs	r3, #2
 800db76:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	f240 8109 	bls.w	800dd92 <put_fat+0x22a>
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	699b      	ldr	r3, [r3, #24]
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	429a      	cmp	r2, r3
 800db88:	f080 8103 	bcs.w	800dd92 <put_fat+0x22a>
		switch (fs->fs_type) {
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2b03      	cmp	r3, #3
 800db92:	f000 80b6 	beq.w	800dd02 <put_fat+0x19a>
 800db96:	2b03      	cmp	r3, #3
 800db98:	f300 80fb 	bgt.w	800dd92 <put_fat+0x22a>
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d003      	beq.n	800dba8 <put_fat+0x40>
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	f000 8083 	beq.w	800dcac <put_fat+0x144>
 800dba6:	e0f4      	b.n	800dd92 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	61bb      	str	r3, [r7, #24]
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	085b      	lsrs	r3, r3, #1
 800dbb0:	69ba      	ldr	r2, [r7, #24]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	899b      	ldrh	r3, [r3, #12]
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	4619      	mov	r1, r3
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7ff fe3c 	bl	800d848 <move_window>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dbd4:	7ffb      	ldrb	r3, [r7, #31]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f040 80d4 	bne.w	800dd84 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	1c5a      	adds	r2, r3, #1
 800dbe6:	61ba      	str	r2, [r7, #24]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	8992      	ldrh	r2, [r2, #12]
 800dbec:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbf0:	fb00 f202 	mul.w	r2, r0, r2
 800dbf4:	1a9b      	subs	r3, r3, r2
 800dbf6:	440b      	add	r3, r1
 800dbf8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	f003 0301 	and.w	r3, r3, #1
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00d      	beq.n	800dc20 <put_fat+0xb8>
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	b25b      	sxtb	r3, r3
 800dc0a:	f003 030f 	and.w	r3, r3, #15
 800dc0e:	b25a      	sxtb	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	b25b      	sxtb	r3, r3
 800dc14:	011b      	lsls	r3, r3, #4
 800dc16:	b25b      	sxtb	r3, r3
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	b25b      	sxtb	r3, r3
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	e001      	b.n	800dc24 <put_fat+0xbc>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	697a      	ldr	r2, [r7, #20]
 800dc26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	899b      	ldrh	r3, [r3, #12]
 800dc36:	4619      	mov	r1, r3
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc3e:	4413      	add	r3, r2
 800dc40:	4619      	mov	r1, r3
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f7ff fe00 	bl	800d848 <move_window>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc4c:	7ffb      	ldrb	r3, [r7, #31]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f040 809a 	bne.w	800dd88 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	899b      	ldrh	r3, [r3, #12]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc66:	fb00 f202 	mul.w	r2, r0, r2
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	440b      	add	r3, r1
 800dc6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	f003 0301 	and.w	r3, r3, #1
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d003      	beq.n	800dc82 <put_fat+0x11a>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	091b      	lsrs	r3, r3, #4
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	e00e      	b.n	800dca0 <put_fat+0x138>
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	b25b      	sxtb	r3, r3
 800dc88:	f023 030f 	bic.w	r3, r3, #15
 800dc8c:	b25a      	sxtb	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	0a1b      	lsrs	r3, r3, #8
 800dc92:	b25b      	sxtb	r3, r3
 800dc94:	f003 030f 	and.w	r3, r3, #15
 800dc98:	b25b      	sxtb	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b25b      	sxtb	r3, r3
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2201      	movs	r2, #1
 800dca8:	70da      	strb	r2, [r3, #3]
			break;
 800dcaa:	e072      	b.n	800dd92 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	899b      	ldrh	r3, [r3, #12]
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	4619      	mov	r1, r3
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcc0:	4413      	add	r3, r2
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f7ff fdbf 	bl	800d848 <move_window>
 800dcca:	4603      	mov	r3, r0
 800dccc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcce:	7ffb      	ldrb	r3, [r7, #31]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d15b      	bne.n	800dd8c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	8992      	ldrh	r2, [r2, #12]
 800dce2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dce6:	fb00 f202 	mul.w	r2, r0, r2
 800dcea:	1a9b      	subs	r3, r3, r2
 800dcec:	440b      	add	r3, r1
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	b292      	uxth	r2, r2
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff fb6d 	bl	800d3d4 <st_word>
			fs->wflag = 1;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	70da      	strb	r2, [r3, #3]
			break;
 800dd00:	e047      	b.n	800dd92 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	899b      	ldrh	r3, [r3, #12]
 800dd0a:	089b      	lsrs	r3, r3, #2
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	4619      	mov	r1, r3
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd16:	4413      	add	r3, r2
 800dd18:	4619      	mov	r1, r3
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff fd94 	bl	800d848 <move_window>
 800dd20:	4603      	mov	r3, r0
 800dd22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd24:	7ffb      	ldrb	r3, [r7, #31]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d132      	bne.n	800dd90 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	8992      	ldrh	r2, [r2, #12]
 800dd3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd42:	fb00 f202 	mul.w	r2, r0, r2
 800dd46:	1a9b      	subs	r3, r3, r2
 800dd48:	440b      	add	r3, r1
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7ff fb1f 	bl	800d38e <ld_dword>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800dd56:	4323      	orrs	r3, r4
 800dd58:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	8992      	ldrh	r2, [r2, #12]
 800dd68:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd6c:	fb00 f202 	mul.w	r2, r0, r2
 800dd70:	1a9b      	subs	r3, r3, r2
 800dd72:	440b      	add	r3, r1
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff fb47 	bl	800d40a <st_dword>
			fs->wflag = 1;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	70da      	strb	r2, [r3, #3]
			break;
 800dd82:	e006      	b.n	800dd92 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd84:	bf00      	nop
 800dd86:	e004      	b.n	800dd92 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd88:	bf00      	nop
 800dd8a:	e002      	b.n	800dd92 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd8c:	bf00      	nop
 800dd8e:	e000      	b.n	800dd92 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd90:	bf00      	nop
		}
	}
	return res;
 800dd92:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3724      	adds	r7, #36	@ 0x24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd90      	pop	{r4, r7, pc}

0800dd9c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b088      	sub	sp, #32
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d904      	bls.n	800ddc2 <remove_chain+0x26>
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	699b      	ldr	r3, [r3, #24]
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d301      	bcc.n	800ddc6 <remove_chain+0x2a>
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	e04b      	b.n	800de5e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00c      	beq.n	800dde6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ddcc:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	69b8      	ldr	r0, [r7, #24]
 800ddd4:	f7ff fec8 	bl	800db68 <put_fat>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dddc:	7ffb      	ldrb	r3, [r7, #31]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d001      	beq.n	800dde6 <remove_chain+0x4a>
 800dde2:	7ffb      	ldrb	r3, [r7, #31]
 800dde4:	e03b      	b.n	800de5e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff fdea 	bl	800d9c2 <get_fat>
 800ddee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d031      	beq.n	800de5a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d101      	bne.n	800de00 <remove_chain+0x64>
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	e02e      	b.n	800de5e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de06:	d101      	bne.n	800de0c <remove_chain+0x70>
 800de08:	2301      	movs	r3, #1
 800de0a:	e028      	b.n	800de5e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800de0c:	2200      	movs	r2, #0
 800de0e:	68b9      	ldr	r1, [r7, #8]
 800de10:	69b8      	ldr	r0, [r7, #24]
 800de12:	f7ff fea9 	bl	800db68 <put_fat>
 800de16:	4603      	mov	r3, r0
 800de18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800de1a:	7ffb      	ldrb	r3, [r7, #31]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <remove_chain+0x88>
 800de20:	7ffb      	ldrb	r3, [r7, #31]
 800de22:	e01c      	b.n	800de5e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	695a      	ldr	r2, [r3, #20]
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	3b02      	subs	r3, #2
 800de2e:	429a      	cmp	r2, r3
 800de30:	d20b      	bcs.n	800de4a <remove_chain+0xae>
			fs->free_clst++;
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	1c5a      	adds	r2, r3, #1
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	791b      	ldrb	r3, [r3, #4]
 800de40:	f043 0301 	orr.w	r3, r3, #1
 800de44:	b2da      	uxtb	r2, r3
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	429a      	cmp	r2, r3
 800de56:	d3c6      	bcc.n	800dde6 <remove_chain+0x4a>
 800de58:	e000      	b.n	800de5c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de5a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de5c:	2300      	movs	r3, #0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3720      	adds	r7, #32
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b088      	sub	sp, #32
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10d      	bne.n	800de98 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d004      	beq.n	800de92 <create_chain+0x2c>
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d31b      	bcc.n	800deca <create_chain+0x64>
 800de92:	2301      	movs	r3, #1
 800de94:	61bb      	str	r3, [r7, #24]
 800de96:	e018      	b.n	800deca <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff fd91 	bl	800d9c2 <get_fat>
 800dea0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d801      	bhi.n	800deac <create_chain+0x46>
 800dea8:	2301      	movs	r3, #1
 800deaa:	e070      	b.n	800df8e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb2:	d101      	bne.n	800deb8 <create_chain+0x52>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	e06a      	b.n	800df8e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d201      	bcs.n	800dec6 <create_chain+0x60>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	e063      	b.n	800df8e <create_chain+0x128>
		scl = clst;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	3301      	adds	r3, #1
 800ded2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	699b      	ldr	r3, [r3, #24]
 800ded8:	69fa      	ldr	r2, [r7, #28]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d307      	bcc.n	800deee <create_chain+0x88>
				ncl = 2;
 800dede:	2302      	movs	r3, #2
 800dee0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dee2:	69fa      	ldr	r2, [r7, #28]
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d901      	bls.n	800deee <create_chain+0x88>
 800deea:	2300      	movs	r3, #0
 800deec:	e04f      	b.n	800df8e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800deee:	69f9      	ldr	r1, [r7, #28]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff fd66 	bl	800d9c2 <get_fat>
 800def6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00e      	beq.n	800df1c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d003      	beq.n	800df0c <create_chain+0xa6>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0a:	d101      	bne.n	800df10 <create_chain+0xaa>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	e03e      	b.n	800df8e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800df10:	69fa      	ldr	r2, [r7, #28]
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	429a      	cmp	r2, r3
 800df16:	d1da      	bne.n	800dece <create_chain+0x68>
 800df18:	2300      	movs	r3, #0
 800df1a:	e038      	b.n	800df8e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800df1c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800df1e:	f04f 32ff 	mov.w	r2, #4294967295
 800df22:	69f9      	ldr	r1, [r7, #28]
 800df24:	6938      	ldr	r0, [r7, #16]
 800df26:	f7ff fe1f 	bl	800db68 <put_fat>
 800df2a:	4603      	mov	r3, r0
 800df2c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d109      	bne.n	800df48 <create_chain+0xe2>
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d006      	beq.n	800df48 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800df3a:	69fa      	ldr	r2, [r7, #28]
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	6938      	ldr	r0, [r7, #16]
 800df40:	f7ff fe12 	bl	800db68 <put_fat>
 800df44:	4603      	mov	r3, r0
 800df46:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d116      	bne.n	800df7c <create_chain+0x116>
		fs->last_clst = ncl;
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	69fa      	ldr	r2, [r7, #28]
 800df52:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	695a      	ldr	r2, [r3, #20]
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	3b02      	subs	r3, #2
 800df5e:	429a      	cmp	r2, r3
 800df60:	d804      	bhi.n	800df6c <create_chain+0x106>
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	1e5a      	subs	r2, r3, #1
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	791b      	ldrb	r3, [r3, #4]
 800df70:	f043 0301 	orr.w	r3, r3, #1
 800df74:	b2da      	uxtb	r2, r3
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	711a      	strb	r2, [r3, #4]
 800df7a:	e007      	b.n	800df8c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800df7c:	7dfb      	ldrb	r3, [r7, #23]
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d102      	bne.n	800df88 <create_chain+0x122>
 800df82:	f04f 33ff 	mov.w	r3, #4294967295
 800df86:	e000      	b.n	800df8a <create_chain+0x124>
 800df88:	2301      	movs	r3, #1
 800df8a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800df8c:	69fb      	ldr	r3, [r7, #28]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3720      	adds	r7, #32
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800df96:	b480      	push	{r7}
 800df98:	b087      	sub	sp, #28
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfaa:	3304      	adds	r3, #4
 800dfac:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	899b      	ldrh	r3, [r3, #12]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	8952      	ldrh	r2, [r2, #10]
 800dfbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfc2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	1d1a      	adds	r2, r3, #4
 800dfc8:	613a      	str	r2, [r7, #16]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <clmt_clust+0x42>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	e010      	b.n	800dffa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d307      	bcc.n	800dff0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dfe0:	697a      	ldr	r2, [r7, #20]
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	3304      	adds	r3, #4
 800dfec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfee:	e7e9      	b.n	800dfc4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dff0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	4413      	add	r3, r2
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	371c      	adds	r7, #28
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b086      	sub	sp, #24
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e01c:	d204      	bcs.n	800e028 <dir_sdi+0x22>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	f003 031f 	and.w	r3, r3, #31
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <dir_sdi+0x26>
		return FR_INT_ERR;
 800e028:	2302      	movs	r3, #2
 800e02a:	e071      	b.n	800e110 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d106      	bne.n	800e04c <dir_sdi+0x46>
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2b02      	cmp	r3, #2
 800e044:	d902      	bls.n	800e04c <dir_sdi+0x46>
		clst = fs->dirbase;
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e04a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10c      	bne.n	800e06c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	095b      	lsrs	r3, r3, #5
 800e056:	693a      	ldr	r2, [r7, #16]
 800e058:	8912      	ldrh	r2, [r2, #8]
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d301      	bcc.n	800e062 <dir_sdi+0x5c>
 800e05e:	2302      	movs	r3, #2
 800e060:	e056      	b.n	800e110 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	61da      	str	r2, [r3, #28]
 800e06a:	e02d      	b.n	800e0c8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	895b      	ldrh	r3, [r3, #10]
 800e070:	461a      	mov	r2, r3
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	899b      	ldrh	r3, [r3, #12]
 800e076:	fb02 f303 	mul.w	r3, r2, r3
 800e07a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e07c:	e019      	b.n	800e0b2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6979      	ldr	r1, [r7, #20]
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff fc9d 	bl	800d9c2 <get_fat>
 800e088:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e090:	d101      	bne.n	800e096 <dir_sdi+0x90>
 800e092:	2301      	movs	r3, #1
 800e094:	e03c      	b.n	800e110 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d904      	bls.n	800e0a6 <dir_sdi+0xa0>
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	699b      	ldr	r3, [r3, #24]
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d301      	bcc.n	800e0aa <dir_sdi+0xa4>
 800e0a6:	2302      	movs	r3, #2
 800e0a8:	e032      	b.n	800e110 <dir_sdi+0x10a>
			ofs -= csz;
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e0b2:	683a      	ldr	r2, [r7, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d2e1      	bcs.n	800e07e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e0ba:	6979      	ldr	r1, [r7, #20]
 800e0bc:	6938      	ldr	r0, [r7, #16]
 800e0be:	f7ff fc61 	bl	800d984 <clust2sect>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	697a      	ldr	r2, [r7, #20]
 800e0cc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d101      	bne.n	800e0da <dir_sdi+0xd4>
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	e01a      	b.n	800e110 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	69da      	ldr	r2, [r3, #28]
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	899b      	ldrh	r3, [r3, #12]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0ea:	441a      	add	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	899b      	ldrh	r3, [r3, #12]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800e102:	fb00 f202 	mul.w	r2, r0, r2
 800e106:	1a9b      	subs	r3, r3, r2
 800e108:	18ca      	adds	r2, r1, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b086      	sub	sp, #24
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	3320      	adds	r3, #32
 800e12e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	69db      	ldr	r3, [r3, #28]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d003      	beq.n	800e140 <dir_next+0x28>
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e13e:	d301      	bcc.n	800e144 <dir_next+0x2c>
 800e140:	2304      	movs	r3, #4
 800e142:	e0bb      	b.n	800e2bc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	899b      	ldrh	r3, [r3, #12]
 800e148:	461a      	mov	r2, r3
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e150:	fb01 f202 	mul.w	r2, r1, r2
 800e154:	1a9b      	subs	r3, r3, r2
 800e156:	2b00      	cmp	r3, #0
 800e158:	f040 809d 	bne.w	800e296 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	69db      	ldr	r3, [r3, #28]
 800e160:	1c5a      	adds	r2, r3, #1
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	699b      	ldr	r3, [r3, #24]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10b      	bne.n	800e186 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	095b      	lsrs	r3, r3, #5
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	8912      	ldrh	r2, [r2, #8]
 800e176:	4293      	cmp	r3, r2
 800e178:	f0c0 808d 	bcc.w	800e296 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	61da      	str	r2, [r3, #28]
 800e182:	2304      	movs	r3, #4
 800e184:	e09a      	b.n	800e2bc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	899b      	ldrh	r3, [r3, #12]
 800e18a:	461a      	mov	r2, r3
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	8952      	ldrh	r2, [r2, #10]
 800e196:	3a01      	subs	r2, #1
 800e198:	4013      	ands	r3, r2
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d17b      	bne.n	800e296 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	f7ff fc0b 	bl	800d9c2 <get_fat>
 800e1ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d801      	bhi.n	800e1b8 <dir_next+0xa0>
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	e081      	b.n	800e2bc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1be:	d101      	bne.n	800e1c4 <dir_next+0xac>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e07b      	b.n	800e2bc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	699b      	ldr	r3, [r3, #24]
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d359      	bcc.n	800e282 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d104      	bne.n	800e1de <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	61da      	str	r2, [r3, #28]
 800e1da:	2304      	movs	r3, #4
 800e1dc:	e06e      	b.n	800e2bc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7ff fe3d 	bl	800de66 <create_chain>
 800e1ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <dir_next+0xe0>
 800e1f4:	2307      	movs	r3, #7
 800e1f6:	e061      	b.n	800e2bc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d101      	bne.n	800e202 <dir_next+0xea>
 800e1fe:	2302      	movs	r3, #2
 800e200:	e05c      	b.n	800e2bc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e208:	d101      	bne.n	800e20e <dir_next+0xf6>
 800e20a:	2301      	movs	r3, #1
 800e20c:	e056      	b.n	800e2bc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7ff fad6 	bl	800d7c0 <sync_window>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <dir_next+0x106>
 800e21a:	2301      	movs	r3, #1
 800e21c:	e04e      	b.n	800e2bc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	899b      	ldrh	r3, [r3, #12]
 800e228:	461a      	mov	r2, r3
 800e22a:	2100      	movs	r1, #0
 800e22c:	f7ff f93a 	bl	800d4a4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e230:	2300      	movs	r3, #0
 800e232:	613b      	str	r3, [r7, #16]
 800e234:	6979      	ldr	r1, [r7, #20]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f7ff fba4 	bl	800d984 <clust2sect>
 800e23c:	4602      	mov	r2, r0
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	631a      	str	r2, [r3, #48]	@ 0x30
 800e242:	e012      	b.n	800e26a <dir_next+0x152>
						fs->wflag = 1;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2201      	movs	r2, #1
 800e248:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f7ff fab8 	bl	800d7c0 <sync_window>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d001      	beq.n	800e25a <dir_next+0x142>
 800e256:	2301      	movs	r3, #1
 800e258:	e030      	b.n	800e2bc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	3301      	adds	r3, #1
 800e25e:	613b      	str	r3, [r7, #16]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e264:	1c5a      	adds	r2, r3, #1
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	631a      	str	r2, [r3, #48]	@ 0x30
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	895b      	ldrh	r3, [r3, #10]
 800e26e:	461a      	mov	r2, r3
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	4293      	cmp	r3, r2
 800e274:	d3e6      	bcc.n	800e244 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	1ad2      	subs	r2, r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e288:	6979      	ldr	r1, [r7, #20]
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7ff fb7a 	bl	800d984 <clust2sect>
 800e290:	4602      	mov	r2, r0
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	899b      	ldrh	r3, [r3, #12]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800e2ae:	fb00 f202 	mul.w	r2, r0, r2
 800e2b2:	1a9b      	subs	r3, r3, r2
 800e2b4:	18ca      	adds	r2, r1, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3718      	adds	r7, #24
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff fe95 	bl	800e006 <dir_sdi>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2e0:	7dfb      	ldrb	r3, [r7, #23]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d12b      	bne.n	800e33e <dir_alloc+0x7a>
		n = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	69db      	ldr	r3, [r3, #28]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff faa9 	bl	800d848 <move_window>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d11d      	bne.n	800e33c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2be5      	cmp	r3, #229	@ 0xe5
 800e308:	d004      	beq.n	800e314 <dir_alloc+0x50>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a1b      	ldr	r3, [r3, #32]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d107      	bne.n	800e324 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	3301      	adds	r3, #1
 800e318:	613b      	str	r3, [r7, #16]
 800e31a:	693a      	ldr	r2, [r7, #16]
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d102      	bne.n	800e328 <dir_alloc+0x64>
 800e322:	e00c      	b.n	800e33e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e324:	2300      	movs	r3, #0
 800e326:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e328:	2101      	movs	r1, #1
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff fef4 	bl	800e118 <dir_next>
 800e330:	4603      	mov	r3, r0
 800e332:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e334:	7dfb      	ldrb	r3, [r7, #23]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0d7      	beq.n	800e2ea <dir_alloc+0x26>
 800e33a:	e000      	b.n	800e33e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e33c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e33e:	7dfb      	ldrb	r3, [r7, #23]
 800e340:	2b04      	cmp	r3, #4
 800e342:	d101      	bne.n	800e348 <dir_alloc+0x84>
 800e344:	2307      	movs	r3, #7
 800e346:	75fb      	strb	r3, [r7, #23]
	return res;
 800e348:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3718      	adds	r7, #24
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	331a      	adds	r3, #26
 800e360:	4618      	mov	r0, r3
 800e362:	f7fe fffb 	bl	800d35c <ld_word>
 800e366:	4603      	mov	r3, r0
 800e368:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b03      	cmp	r3, #3
 800e370:	d109      	bne.n	800e386 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	3314      	adds	r3, #20
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe fff0 	bl	800d35c <ld_word>
 800e37c:	4603      	mov	r3, r0
 800e37e:	041b      	lsls	r3, r3, #16
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	4313      	orrs	r3, r2
 800e384:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e386:	68fb      	ldr	r3, [r7, #12]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	331a      	adds	r3, #26
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	b292      	uxth	r2, r2
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7ff f814 	bl	800d3d4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	2b03      	cmp	r3, #3
 800e3b2:	d109      	bne.n	800e3c8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	f103 0214 	add.w	r2, r3, #20
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	0c1b      	lsrs	r3, r3, #16
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	f7ff f806 	bl	800d3d4 <st_word>
	}
}
 800e3c8:	bf00      	nop
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e3da:	2304      	movs	r3, #4
 800e3dc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e3e4:	e03c      	b.n	800e460 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6938      	ldr	r0, [r7, #16]
 800e3ee:	f7ff fa2b 	bl	800d848 <move_window>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3f6:	7dfb      	ldrb	r3, [r7, #23]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d136      	bne.n	800e46a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6a1b      	ldr	r3, [r3, #32]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e404:	7bfb      	ldrb	r3, [r7, #15]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d102      	bne.n	800e410 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e40a:	2304      	movs	r3, #4
 800e40c:	75fb      	strb	r3, [r7, #23]
 800e40e:	e031      	b.n	800e474 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6a1b      	ldr	r3, [r3, #32]
 800e414:	330b      	adds	r3, #11
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e41c:	73bb      	strb	r3, [r7, #14]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	7bba      	ldrb	r2, [r7, #14]
 800e422:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	2be5      	cmp	r3, #229	@ 0xe5
 800e428:	d011      	beq.n	800e44e <dir_read+0x7e>
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e42e:	d00e      	beq.n	800e44e <dir_read+0x7e>
 800e430:	7bbb      	ldrb	r3, [r7, #14]
 800e432:	2b0f      	cmp	r3, #15
 800e434:	d00b      	beq.n	800e44e <dir_read+0x7e>
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	f023 0320 	bic.w	r3, r3, #32
 800e43c:	2b08      	cmp	r3, #8
 800e43e:	bf0c      	ite	eq
 800e440:	2301      	moveq	r3, #1
 800e442:	2300      	movne	r3, #0
 800e444:	b2db      	uxtb	r3, r3
 800e446:	461a      	mov	r2, r3
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d00f      	beq.n	800e46e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e44e:	2100      	movs	r1, #0
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff fe61 	bl	800e118 <dir_next>
 800e456:	4603      	mov	r3, r0
 800e458:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e45a:	7dfb      	ldrb	r3, [r7, #23]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d108      	bne.n	800e472 <dir_read+0xa2>
	while (dp->sect) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1be      	bne.n	800e3e6 <dir_read+0x16>
 800e468:	e004      	b.n	800e474 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e46a:	bf00      	nop
 800e46c:	e002      	b.n	800e474 <dir_read+0xa4>
				break;
 800e46e:	bf00      	nop
 800e470:	e000      	b.n	800e474 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e472:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e474:	7dfb      	ldrb	r3, [r7, #23]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <dir_read+0xb0>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	61da      	str	r2, [r3, #28]
	return res;
 800e480:	7dfb      	ldrb	r3, [r7, #23]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b086      	sub	sp, #24
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e498:	2100      	movs	r1, #0
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f7ff fdb3 	bl	800e006 <dir_sdi>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <dir_find+0x24>
 800e4aa:	7dfb      	ldrb	r3, [r7, #23]
 800e4ac:	e03e      	b.n	800e52c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	69db      	ldr	r3, [r3, #28]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6938      	ldr	r0, [r7, #16]
 800e4b6:	f7ff f9c7 	bl	800d848 <move_window>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d12f      	bne.n	800e524 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a1b      	ldr	r3, [r3, #32]
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <dir_find+0x4e>
 800e4d2:	2304      	movs	r3, #4
 800e4d4:	75fb      	strb	r3, [r7, #23]
 800e4d6:	e028      	b.n	800e52a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6a1b      	ldr	r3, [r3, #32]
 800e4dc:	330b      	adds	r3, #11
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	330b      	adds	r3, #11
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	f003 0308 	and.w	r3, r3, #8
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10a      	bne.n	800e510 <dir_find+0x86>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a18      	ldr	r0, [r3, #32]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	3324      	adds	r3, #36	@ 0x24
 800e502:	220b      	movs	r2, #11
 800e504:	4619      	mov	r1, r3
 800e506:	f7fe ffe8 	bl	800d4da <mem_cmp>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00b      	beq.n	800e528 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e510:	2100      	movs	r1, #0
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7ff fe00 	bl	800e118 <dir_next>
 800e518:	4603      	mov	r3, r0
 800e51a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e51c:	7dfb      	ldrb	r3, [r7, #23]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0c5      	beq.n	800e4ae <dir_find+0x24>
 800e522:	e002      	b.n	800e52a <dir_find+0xa0>
		if (res != FR_OK) break;
 800e524:	bf00      	nop
 800e526:	e000      	b.n	800e52a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e528:	bf00      	nop

	return res;
 800e52a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3718      	adds	r7, #24
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e542:	2101      	movs	r1, #1
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7ff febd 	bl	800e2c4 <dir_alloc>
 800e54a:	4603      	mov	r3, r0
 800e54c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e54e:	7bfb      	ldrb	r3, [r7, #15]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11c      	bne.n	800e58e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	69db      	ldr	r3, [r3, #28]
 800e558:	4619      	mov	r1, r3
 800e55a:	68b8      	ldr	r0, [r7, #8]
 800e55c:	f7ff f974 	bl	800d848 <move_window>
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e564:	7bfb      	ldrb	r3, [r7, #15]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d111      	bne.n	800e58e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	2220      	movs	r2, #32
 800e570:	2100      	movs	r1, #0
 800e572:	4618      	mov	r0, r3
 800e574:	f7fe ff96 	bl	800d4a4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a18      	ldr	r0, [r3, #32]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	3324      	adds	r3, #36	@ 0x24
 800e580:	220b      	movs	r2, #11
 800e582:	4619      	mov	r1, r3
 800e584:	f7fe ff6d 	bl	800d462 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	2201      	movs	r2, #1
 800e58c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e590:	4618      	mov	r0, r3
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	69db      	ldr	r3, [r3, #28]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d04f      	beq.n	800e650 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	613b      	str	r3, [r7, #16]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e5b8:	e022      	b.n	800e600 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a1a      	ldr	r2, [r3, #32]
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	1c59      	adds	r1, r3, #1
 800e5c2:	6179      	str	r1, [r7, #20]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
 800e5cc:	2b20      	cmp	r3, #32
 800e5ce:	d016      	beq.n	800e5fe <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
 800e5d2:	2b05      	cmp	r3, #5
 800e5d4:	d101      	bne.n	800e5da <get_fileinfo+0x42>
 800e5d6:	23e5      	movs	r3, #229	@ 0xe5
 800e5d8:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b09      	cmp	r3, #9
 800e5de:	d106      	bne.n	800e5ee <get_fileinfo+0x56>
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	1c5a      	adds	r2, r3, #1
 800e5e4:	613a      	str	r2, [r7, #16]
 800e5e6:	683a      	ldr	r2, [r7, #0]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	222e      	movs	r2, #46	@ 0x2e
 800e5ec:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	613a      	str	r2, [r7, #16]
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	7bfa      	ldrb	r2, [r7, #15]
 800e5fa:	725a      	strb	r2, [r3, #9]
 800e5fc:	e000      	b.n	800e600 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800e5fe:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	2b0a      	cmp	r3, #10
 800e604:	d9d9      	bls.n	800e5ba <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	4413      	add	r3, r2
 800e60c:	3309      	adds	r3, #9
 800e60e:	2200      	movs	r2, #0
 800e610:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a1b      	ldr	r3, [r3, #32]
 800e616:	7ada      	ldrb	r2, [r3, #11]
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6a1b      	ldr	r3, [r3, #32]
 800e620:	331c      	adds	r3, #28
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe feb3 	bl	800d38e <ld_dword>
 800e628:	4602      	mov	r2, r0
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a1b      	ldr	r3, [r3, #32]
 800e632:	3316      	adds	r3, #22
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe feaa 	bl	800d38e <ld_dword>
 800e63a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	b29a      	uxth	r2, r3
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	80da      	strh	r2, [r3, #6]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	0c1b      	lsrs	r3, r3, #16
 800e648:	b29a      	uxth	r2, r3
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	809a      	strh	r2, [r3, #4]
 800e64e:	e000      	b.n	800e652 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e650:	bf00      	nop
}
 800e652:	3718      	adds	r7, #24
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	1c59      	adds	r1, r3, #1
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	6011      	str	r1, [r2, #0]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e66e:	89fb      	ldrh	r3, [r7, #14]
 800e670:	2b60      	cmp	r3, #96	@ 0x60
 800e672:	d905      	bls.n	800e680 <get_achar+0x28>
 800e674:	89fb      	ldrh	r3, [r7, #14]
 800e676:	2b7a      	cmp	r3, #122	@ 0x7a
 800e678:	d802      	bhi.n	800e680 <get_achar+0x28>
 800e67a:	89fb      	ldrh	r3, [r7, #14]
 800e67c:	3b20      	subs	r3, #32
 800e67e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e680:	89fb      	ldrh	r3, [r7, #14]
 800e682:	2b7f      	cmp	r3, #127	@ 0x7f
 800e684:	d904      	bls.n	800e690 <get_achar+0x38>
 800e686:	89fb      	ldrh	r3, [r7, #14]
 800e688:	3b80      	subs	r3, #128	@ 0x80
 800e68a:	4a05      	ldr	r2, [pc, #20]	@ (800e6a0 <get_achar+0x48>)
 800e68c:	5cd3      	ldrb	r3, [r2, r3]
 800e68e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800e690:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e692:	4618      	mov	r0, r3
 800e694:	3714      	adds	r7, #20
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	08013914 	.word	0x08013914

0800e6a4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b08a      	sub	sp, #40	@ 0x28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
 800e6b0:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e6b2:	e009      	b.n	800e6c8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e6b4:	f107 0308 	add.w	r3, r7, #8
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff ffcd 	bl	800e658 <get_achar>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d101      	bne.n	800e6c8 <pattern_matching+0x24>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	e064      	b.n	800e792 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	1e5a      	subs	r2, r3, #1
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1f0      	bne.n	800e6b4 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d104      	bne.n	800e6e4 <pattern_matching+0x40>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <pattern_matching+0x40>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e056      	b.n	800e792 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	617b      	str	r3, [r7, #20]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	2b3f      	cmp	r3, #63	@ 0x3f
 800e6f2:	d003      	beq.n	800e6fc <pattern_matching+0x58>
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6fa:	d126      	bne.n	800e74a <pattern_matching+0xa6>
				nm = nx = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	61fb      	str	r3, [r7, #28]
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	1c5a      	adds	r2, r3, #1
 800e708:	617a      	str	r2, [r7, #20]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	2b3f      	cmp	r3, #63	@ 0x3f
 800e70e:	d103      	bne.n	800e718 <pattern_matching+0x74>
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	3301      	adds	r3, #1
 800e714:	623b      	str	r3, [r7, #32]
 800e716:	e001      	b.n	800e71c <pattern_matching+0x78>
 800e718:	2301      	movs	r3, #1
 800e71a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	2b3f      	cmp	r3, #63	@ 0x3f
 800e722:	d0ef      	beq.n	800e704 <pattern_matching+0x60>
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	2b2a      	cmp	r3, #42	@ 0x2a
 800e72a:	d0eb      	beq.n	800e704 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e72c:	6978      	ldr	r0, [r7, #20]
 800e72e:	6939      	ldr	r1, [r7, #16]
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	6a3a      	ldr	r2, [r7, #32]
 800e734:	f7ff ffb6 	bl	800e6a4 <pattern_matching>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <pattern_matching+0x9e>
 800e73e:	2301      	movs	r3, #1
 800e740:	e027      	b.n	800e792 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e748:	e017      	b.n	800e77a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800e74a:	f107 0314 	add.w	r3, r7, #20
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff ff82 	bl	800e658 <get_achar>
 800e754:	4603      	mov	r3, r0
 800e756:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800e758:	f107 0310 	add.w	r3, r7, #16
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7ff ff7b 	bl	800e658 <get_achar>
 800e762:	4603      	mov	r3, r0
 800e764:	84fb      	strh	r3, [r7, #38]	@ 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800e766:	8b7a      	ldrh	r2, [r7, #26]
 800e768:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d104      	bne.n	800e778 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e76e:	8b7b      	ldrh	r3, [r7, #26]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1bb      	bne.n	800e6ec <pattern_matching+0x48>
 800e774:	2301      	movs	r3, #1
 800e776:	e00c      	b.n	800e792 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800e778:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800e77a:	f107 0308 	add.w	r3, r7, #8
 800e77e:	4618      	mov	r0, r3
 800e780:	f7ff ff6a 	bl	800e658 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d002      	beq.n	800e790 <pattern_matching+0xec>
 800e78a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1a9      	bne.n	800e6e4 <pattern_matching+0x40>

	return 0;
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3728      	adds	r7, #40	@ 0x28
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
	...

0800e79c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b088      	sub	sp, #32
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	60fb      	str	r3, [r7, #12]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3324      	adds	r3, #36	@ 0x24
 800e7b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e7b2:	220b      	movs	r2, #11
 800e7b4:	2120      	movs	r1, #32
 800e7b6:	68b8      	ldr	r0, [r7, #8]
 800e7b8:	f7fe fe74 	bl	800d4a4 <mem_set>
	si = i = 0; ni = 8;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	613b      	str	r3, [r7, #16]
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	61fb      	str	r3, [r7, #28]
 800e7c4:	2308      	movs	r3, #8
 800e7c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	61fa      	str	r2, [r7, #28]
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e7d6:	7efb      	ldrb	r3, [r7, #27]
 800e7d8:	2b20      	cmp	r3, #32
 800e7da:	d94e      	bls.n	800e87a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e7dc:	7efb      	ldrb	r3, [r7, #27]
 800e7de:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7e0:	d006      	beq.n	800e7f0 <create_name+0x54>
 800e7e2:	7efb      	ldrb	r3, [r7, #27]
 800e7e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7e6:	d110      	bne.n	800e80a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e7e8:	e002      	b.n	800e7f0 <create_name+0x54>
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	61fb      	str	r3, [r7, #28]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7fa:	d0f6      	beq.n	800e7ea <create_name+0x4e>
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	4413      	add	r3, r2
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	2b5c      	cmp	r3, #92	@ 0x5c
 800e806:	d0f0      	beq.n	800e7ea <create_name+0x4e>
			break;
 800e808:	e038      	b.n	800e87c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e80a:	7efb      	ldrb	r3, [r7, #27]
 800e80c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e80e:	d003      	beq.n	800e818 <create_name+0x7c>
 800e810:	693a      	ldr	r2, [r7, #16]
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	429a      	cmp	r2, r3
 800e816:	d30c      	bcc.n	800e832 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	2b0b      	cmp	r3, #11
 800e81c:	d002      	beq.n	800e824 <create_name+0x88>
 800e81e:	7efb      	ldrb	r3, [r7, #27]
 800e820:	2b2e      	cmp	r3, #46	@ 0x2e
 800e822:	d001      	beq.n	800e828 <create_name+0x8c>
 800e824:	2306      	movs	r3, #6
 800e826:	e044      	b.n	800e8b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e828:	2308      	movs	r3, #8
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	230b      	movs	r3, #11
 800e82e:	617b      	str	r3, [r7, #20]
			continue;
 800e830:	e022      	b.n	800e878 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e832:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e836:	2b00      	cmp	r3, #0
 800e838:	da04      	bge.n	800e844 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e83a:	7efb      	ldrb	r3, [r7, #27]
 800e83c:	3b80      	subs	r3, #128	@ 0x80
 800e83e:	4a1f      	ldr	r2, [pc, #124]	@ (800e8bc <create_name+0x120>)
 800e840:	5cd3      	ldrb	r3, [r2, r3]
 800e842:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e844:	7efb      	ldrb	r3, [r7, #27]
 800e846:	4619      	mov	r1, r3
 800e848:	481d      	ldr	r0, [pc, #116]	@ (800e8c0 <create_name+0x124>)
 800e84a:	f7fe fe6d 	bl	800d528 <chk_chr>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d001      	beq.n	800e858 <create_name+0xbc>
 800e854:	2306      	movs	r3, #6
 800e856:	e02c      	b.n	800e8b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e858:	7efb      	ldrb	r3, [r7, #27]
 800e85a:	2b60      	cmp	r3, #96	@ 0x60
 800e85c:	d905      	bls.n	800e86a <create_name+0xce>
 800e85e:	7efb      	ldrb	r3, [r7, #27]
 800e860:	2b7a      	cmp	r3, #122	@ 0x7a
 800e862:	d802      	bhi.n	800e86a <create_name+0xce>
 800e864:	7efb      	ldrb	r3, [r7, #27]
 800e866:	3b20      	subs	r3, #32
 800e868:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	613a      	str	r2, [r7, #16]
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	4413      	add	r3, r2
 800e874:	7efa      	ldrb	r2, [r7, #27]
 800e876:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e878:	e7a6      	b.n	800e7c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e87a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e87c:	68fa      	ldr	r2, [r7, #12]
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	441a      	add	r2, r3
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d101      	bne.n	800e890 <create_name+0xf4>
 800e88c:	2306      	movs	r3, #6
 800e88e:	e010      	b.n	800e8b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	2be5      	cmp	r3, #229	@ 0xe5
 800e896:	d102      	bne.n	800e89e <create_name+0x102>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2205      	movs	r2, #5
 800e89c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e89e:	7efb      	ldrb	r3, [r7, #27]
 800e8a0:	2b20      	cmp	r3, #32
 800e8a2:	d801      	bhi.n	800e8a8 <create_name+0x10c>
 800e8a4:	2204      	movs	r2, #4
 800e8a6:	e000      	b.n	800e8aa <create_name+0x10e>
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	330b      	adds	r3, #11
 800e8ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e8b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3720      	adds	r7, #32
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	08013914 	.word	0x08013914
 800e8c0:	08013854 	.word	0x08013854

0800e8c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e8d8:	e002      	b.n	800e8e0 <follow_path+0x1c>
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e8e6:	d0f8      	beq.n	800e8da <follow_path+0x16>
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800e8ee:	d0f4      	beq.n	800e8da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	2b1f      	cmp	r3, #31
 800e8fc:	d80a      	bhi.n	800e914 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2280      	movs	r2, #128	@ 0x80
 800e902:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e906:	2100      	movs	r1, #0
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff fb7c 	bl	800e006 <dir_sdi>
 800e90e:	4603      	mov	r3, r0
 800e910:	75fb      	strb	r3, [r7, #23]
 800e912:	e048      	b.n	800e9a6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e914:	463b      	mov	r3, r7
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7ff ff3f 	bl	800e79c <create_name>
 800e91e:	4603      	mov	r3, r0
 800e920:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e922:	7dfb      	ldrb	r3, [r7, #23]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d139      	bne.n	800e99c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7ff fdae 	bl	800e48a <dir_find>
 800e92e:	4603      	mov	r3, r0
 800e930:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e938:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e93a:	7dfb      	ldrb	r3, [r7, #23]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00a      	beq.n	800e956 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e940:	7dfb      	ldrb	r3, [r7, #23]
 800e942:	2b04      	cmp	r3, #4
 800e944:	d12c      	bne.n	800e9a0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e946:	7afb      	ldrb	r3, [r7, #11]
 800e948:	f003 0304 	and.w	r3, r3, #4
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d127      	bne.n	800e9a0 <follow_path+0xdc>
 800e950:	2305      	movs	r3, #5
 800e952:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e954:	e024      	b.n	800e9a0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e956:	7afb      	ldrb	r3, [r7, #11]
 800e958:	f003 0304 	and.w	r3, r3, #4
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d121      	bne.n	800e9a4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	799b      	ldrb	r3, [r3, #6]
 800e964:	f003 0310 	and.w	r3, r3, #16
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d102      	bne.n	800e972 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e96c:	2305      	movs	r3, #5
 800e96e:	75fb      	strb	r3, [r7, #23]
 800e970:	e019      	b.n	800e9a6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	695b      	ldr	r3, [r3, #20]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	8992      	ldrh	r2, [r2, #12]
 800e980:	fbb3 f0f2 	udiv	r0, r3, r2
 800e984:	fb00 f202 	mul.w	r2, r0, r2
 800e988:	1a9b      	subs	r3, r3, r2
 800e98a:	440b      	add	r3, r1
 800e98c:	4619      	mov	r1, r3
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f7ff fcdf 	bl	800e352 <ld_clust>
 800e994:	4602      	mov	r2, r0
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e99a:	e7bb      	b.n	800e914 <follow_path+0x50>
			if (res != FR_OK) break;
 800e99c:	bf00      	nop
 800e99e:	e002      	b.n	800e9a6 <follow_path+0xe2>
				break;
 800e9a0:	bf00      	nop
 800e9a2:	e000      	b.n	800e9a6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e9a4:	bf00      	nop
			}
		}
	}

	return res;
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b087      	sub	sp, #28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9bc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d031      	beq.n	800ea2a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	e002      	b.n	800e9d4 <get_ldnumber+0x24>
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	617b      	str	r3, [r7, #20]
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	2b20      	cmp	r3, #32
 800e9da:	d903      	bls.n	800e9e4 <get_ldnumber+0x34>
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	2b3a      	cmp	r3, #58	@ 0x3a
 800e9e2:	d1f4      	bne.n	800e9ce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	2b3a      	cmp	r3, #58	@ 0x3a
 800e9ea:	d11c      	bne.n	800ea26 <get_ldnumber+0x76>
			tp = *path;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	60fa      	str	r2, [r7, #12]
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	3b30      	subs	r3, #48	@ 0x30
 800e9fc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	2b09      	cmp	r3, #9
 800ea02:	d80e      	bhi.n	800ea22 <get_ldnumber+0x72>
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d10a      	bne.n	800ea22 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d107      	bne.n	800ea22 <get_ldnumber+0x72>
					vol = (int)i;
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	617b      	str	r3, [r7, #20]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	e002      	b.n	800ea2c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ea2a:	693b      	ldr	r3, [r7, #16]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	371c      	adds	r7, #28
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	70da      	strb	r2, [r3, #3]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea4e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ea50:	6839      	ldr	r1, [r7, #0]
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f7fe fef8 	bl	800d848 <move_window>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d001      	beq.n	800ea62 <check_fs+0x2a>
 800ea5e:	2304      	movs	r3, #4
 800ea60:	e038      	b.n	800ead4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	3334      	adds	r3, #52	@ 0x34
 800ea66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fe fc76 	bl	800d35c <ld_word>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d001      	beq.n	800ea80 <check_fs+0x48>
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	e029      	b.n	800ead4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ea86:	2be9      	cmp	r3, #233	@ 0xe9
 800ea88:	d009      	beq.n	800ea9e <check_fs+0x66>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ea90:	2beb      	cmp	r3, #235	@ 0xeb
 800ea92:	d11e      	bne.n	800ead2 <check_fs+0x9a>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ea9a:	2b90      	cmp	r3, #144	@ 0x90
 800ea9c:	d119      	bne.n	800ead2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	3334      	adds	r3, #52	@ 0x34
 800eaa2:	3336      	adds	r3, #54	@ 0x36
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe fc72 	bl	800d38e <ld_dword>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800eab0:	4a0a      	ldr	r2, [pc, #40]	@ (800eadc <check_fs+0xa4>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d101      	bne.n	800eaba <check_fs+0x82>
 800eab6:	2300      	movs	r3, #0
 800eab8:	e00c      	b.n	800ead4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	3334      	adds	r3, #52	@ 0x34
 800eabe:	3352      	adds	r3, #82	@ 0x52
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe fc64 	bl	800d38e <ld_dword>
 800eac6:	4603      	mov	r3, r0
 800eac8:	4a05      	ldr	r2, [pc, #20]	@ (800eae0 <check_fs+0xa8>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d101      	bne.n	800ead2 <check_fs+0x9a>
 800eace:	2300      	movs	r3, #0
 800ead0:	e000      	b.n	800ead4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ead2:	2302      	movs	r3, #2
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	00544146 	.word	0x00544146
 800eae0:	33544146 	.word	0x33544146

0800eae4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b096      	sub	sp, #88	@ 0x58
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	4613      	mov	r3, r2
 800eaf0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7ff ff59 	bl	800e9b0 <get_ldnumber>
 800eafe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	da01      	bge.n	800eb0a <find_volume+0x26>
 800eb06:	230b      	movs	r3, #11
 800eb08:	e262      	b.n	800efd0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eb0a:	4a9f      	ldr	r2, [pc, #636]	@ (800ed88 <find_volume+0x2a4>)
 800eb0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb12:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <find_volume+0x3a>
 800eb1a:	230c      	movs	r3, #12
 800eb1c:	e258      	b.n	800efd0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb22:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	f023 0301 	bic.w	r3, r3, #1
 800eb2a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d01a      	beq.n	800eb6a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800eb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb36:	785b      	ldrb	r3, [r3, #1]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fe fb6f 	bl	800d21c <disk_status>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eb44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb48:	f003 0301 	and.w	r3, r3, #1
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10c      	bne.n	800eb6a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eb50:	79fb      	ldrb	r3, [r7, #7]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d007      	beq.n	800eb66 <find_volume+0x82>
 800eb56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb5a:	f003 0304 	and.w	r3, r3, #4
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d001      	beq.n	800eb66 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eb62:	230a      	movs	r3, #10
 800eb64:	e234      	b.n	800efd0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800eb66:	2300      	movs	r3, #0
 800eb68:	e232      	b.n	800efd0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eb70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb76:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb7a:	785b      	ldrb	r3, [r3, #1]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fe fb67 	bl	800d250 <disk_initialize>
 800eb82:	4603      	mov	r3, r0
 800eb84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eb88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eb94:	2303      	movs	r3, #3
 800eb96:	e21b      	b.n	800efd0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d007      	beq.n	800ebae <find_volume+0xca>
 800eb9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eba2:	f003 0304 	and.w	r3, r3, #4
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ebaa:	230a      	movs	r3, #10
 800ebac:	e210      	b.n	800efd0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ebae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb0:	7858      	ldrb	r0, [r3, #1]
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb4:	330c      	adds	r3, #12
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	2102      	movs	r1, #2
 800ebba:	f7fe fbb1 	bl	800d320 <disk_ioctl>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d001      	beq.n	800ebc8 <find_volume+0xe4>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e203      	b.n	800efd0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebca:	899b      	ldrh	r3, [r3, #12]
 800ebcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebd0:	d80d      	bhi.n	800ebee <find_volume+0x10a>
 800ebd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebd4:	899b      	ldrh	r3, [r3, #12]
 800ebd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebda:	d308      	bcc.n	800ebee <find_volume+0x10a>
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebde:	899b      	ldrh	r3, [r3, #12]
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebe4:	899b      	ldrh	r3, [r3, #12]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	4013      	ands	r3, r2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d001      	beq.n	800ebf2 <find_volume+0x10e>
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e1ee      	b.n	800efd0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ebf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ebf8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ebfa:	f7ff ff1d 	bl	800ea38 <check_fs>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ec04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d149      	bne.n	800eca0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec10:	e01e      	b.n	800ec50 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ec12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec14:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ec18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec1a:	011b      	lsls	r3, r3, #4
 800ec1c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ec20:	4413      	add	r3, r2
 800ec22:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ec24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec26:	3304      	adds	r3, #4
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d006      	beq.n	800ec3c <find_volume+0x158>
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec30:	3308      	adds	r3, #8
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fe fbab 	bl	800d38e <ld_dword>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	e000      	b.n	800ec3e <find_volume+0x15a>
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	3358      	adds	r3, #88	@ 0x58
 800ec44:	443b      	add	r3, r7
 800ec46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d9dd      	bls.n	800ec12 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec56:	2300      	movs	r3, #0
 800ec58:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ec5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d002      	beq.n	800ec66 <find_volume+0x182>
 800ec60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec62:	3b01      	subs	r3, #1
 800ec64:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ec66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	3358      	adds	r3, #88	@ 0x58
 800ec6c:	443b      	add	r3, r7
 800ec6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec72:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ec74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d005      	beq.n	800ec86 <find_volume+0x1a2>
 800ec7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ec7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ec7e:	f7ff fedb 	bl	800ea38 <check_fs>
 800ec82:	4603      	mov	r3, r0
 800ec84:	e000      	b.n	800ec88 <find_volume+0x1a4>
 800ec86:	2303      	movs	r3, #3
 800ec88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ec8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d905      	bls.n	800eca0 <find_volume+0x1bc>
 800ec94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec96:	3301      	adds	r3, #1
 800ec98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec9c:	2b03      	cmp	r3, #3
 800ec9e:	d9e2      	bls.n	800ec66 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eca0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eca4:	2b04      	cmp	r3, #4
 800eca6:	d101      	bne.n	800ecac <find_volume+0x1c8>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e191      	b.n	800efd0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ecac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d901      	bls.n	800ecb8 <find_volume+0x1d4>
 800ecb4:	230d      	movs	r3, #13
 800ecb6:	e18b      	b.n	800efd0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecba:	3334      	adds	r3, #52	@ 0x34
 800ecbc:	330b      	adds	r3, #11
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe fb4c 	bl	800d35c <ld_word>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecca:	899b      	ldrh	r3, [r3, #12]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d001      	beq.n	800ecd4 <find_volume+0x1f0>
 800ecd0:	230d      	movs	r3, #13
 800ecd2:	e17d      	b.n	800efd0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd6:	3334      	adds	r3, #52	@ 0x34
 800ecd8:	3316      	adds	r3, #22
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fe fb3e 	bl	800d35c <ld_word>
 800ece0:	4603      	mov	r3, r0
 800ece2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ece4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d106      	bne.n	800ecf8 <find_volume+0x214>
 800ecea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecec:	3334      	adds	r3, #52	@ 0x34
 800ecee:	3324      	adds	r3, #36	@ 0x24
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fe fb4c 	bl	800d38e <ld_dword>
 800ecf6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ecfc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ecfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed00:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ed04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed06:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ed08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed0a:	789b      	ldrb	r3, [r3, #2]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d005      	beq.n	800ed1c <find_volume+0x238>
 800ed10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed12:	789b      	ldrb	r3, [r3, #2]
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	d001      	beq.n	800ed1c <find_volume+0x238>
 800ed18:	230d      	movs	r3, #13
 800ed1a:	e159      	b.n	800efd0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed1e:	789b      	ldrb	r3, [r3, #2]
 800ed20:	461a      	mov	r2, r3
 800ed22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed24:	fb02 f303 	mul.w	r3, r2, r3
 800ed28:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed30:	461a      	mov	r2, r3
 800ed32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed34:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ed36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed38:	895b      	ldrh	r3, [r3, #10]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d008      	beq.n	800ed50 <find_volume+0x26c>
 800ed3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed40:	895b      	ldrh	r3, [r3, #10]
 800ed42:	461a      	mov	r2, r3
 800ed44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed46:	895b      	ldrh	r3, [r3, #10]
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <find_volume+0x270>
 800ed50:	230d      	movs	r3, #13
 800ed52:	e13d      	b.n	800efd0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed56:	3334      	adds	r3, #52	@ 0x34
 800ed58:	3311      	adds	r3, #17
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fe fafe 	bl	800d35c <ld_word>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461a      	mov	r2, r3
 800ed64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ed68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed6a:	891b      	ldrh	r3, [r3, #8]
 800ed6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed6e:	8992      	ldrh	r2, [r2, #12]
 800ed70:	0952      	lsrs	r2, r2, #5
 800ed72:	b292      	uxth	r2, r2
 800ed74:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed78:	fb01 f202 	mul.w	r2, r1, r2
 800ed7c:	1a9b      	subs	r3, r3, r2
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d003      	beq.n	800ed8c <find_volume+0x2a8>
 800ed84:	230d      	movs	r3, #13
 800ed86:	e123      	b.n	800efd0 <find_volume+0x4ec>
 800ed88:	2000662c 	.word	0x2000662c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ed8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed8e:	3334      	adds	r3, #52	@ 0x34
 800ed90:	3313      	adds	r3, #19
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe fae2 	bl	800d35c <ld_word>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ed9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d106      	bne.n	800edb0 <find_volume+0x2cc>
 800eda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda4:	3334      	adds	r3, #52	@ 0x34
 800eda6:	3320      	adds	r3, #32
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fe faf0 	bl	800d38e <ld_dword>
 800edae:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800edb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb2:	3334      	adds	r3, #52	@ 0x34
 800edb4:	330e      	adds	r3, #14
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fe fad0 	bl	800d35c <ld_word>
 800edbc:	4603      	mov	r3, r0
 800edbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800edc0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d101      	bne.n	800edca <find_volume+0x2e6>
 800edc6:	230d      	movs	r3, #13
 800edc8:	e102      	b.n	800efd0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800edca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800edcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edce:	4413      	add	r3, r2
 800edd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edd2:	8911      	ldrh	r1, [r2, #8]
 800edd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edd6:	8992      	ldrh	r2, [r2, #12]
 800edd8:	0952      	lsrs	r2, r2, #5
 800edda:	b292      	uxth	r2, r2
 800eddc:	fbb1 f2f2 	udiv	r2, r1, r2
 800ede0:	b292      	uxth	r2, r2
 800ede2:	4413      	add	r3, r2
 800ede4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ede6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ede8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edea:	429a      	cmp	r2, r3
 800edec:	d201      	bcs.n	800edf2 <find_volume+0x30e>
 800edee:	230d      	movs	r3, #13
 800edf0:	e0ee      	b.n	800efd0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800edf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800edf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edfa:	8952      	ldrh	r2, [r2, #10]
 800edfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee00:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ee02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d101      	bne.n	800ee0c <find_volume+0x328>
 800ee08:	230d      	movs	r3, #13
 800ee0a:	e0e1      	b.n	800efd0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ee12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee14:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d802      	bhi.n	800ee22 <find_volume+0x33e>
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d802      	bhi.n	800ee32 <find_volume+0x34e>
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee34:	1c9a      	adds	r2, r3, #2
 800ee36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee38:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee3e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee40:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ee42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee44:	441a      	add	r2, r3
 800ee46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee48:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ee4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4e:	441a      	add	r2, r3
 800ee50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee52:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800ee54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d11e      	bne.n	800ee9a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5e:	3334      	adds	r3, #52	@ 0x34
 800ee60:	332a      	adds	r3, #42	@ 0x2a
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fe fa7a 	bl	800d35c <ld_word>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <find_volume+0x38e>
 800ee6e:	230d      	movs	r3, #13
 800ee70:	e0ae      	b.n	800efd0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee74:	891b      	ldrh	r3, [r3, #8]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d001      	beq.n	800ee7e <find_volume+0x39a>
 800ee7a:	230d      	movs	r3, #13
 800ee7c:	e0a8      	b.n	800efd0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee80:	3334      	adds	r3, #52	@ 0x34
 800ee82:	332c      	adds	r3, #44	@ 0x2c
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fe fa82 	bl	800d38e <ld_dword>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee8e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ee90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee98:	e01f      	b.n	800eeda <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9c:	891b      	ldrh	r3, [r3, #8]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <find_volume+0x3c2>
 800eea2:	230d      	movs	r3, #13
 800eea4:	e094      	b.n	800efd0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eeaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eeac:	441a      	add	r2, r3
 800eeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eeb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d103      	bne.n	800eec2 <find_volume+0x3de>
 800eeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eebc:	699b      	ldr	r3, [r3, #24]
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	e00a      	b.n	800eed8 <find_volume+0x3f4>
 800eec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec4:	699a      	ldr	r2, [r3, #24]
 800eec6:	4613      	mov	r3, r2
 800eec8:	005b      	lsls	r3, r3, #1
 800eeca:	4413      	add	r3, r2
 800eecc:	085a      	lsrs	r2, r3, #1
 800eece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed0:	699b      	ldr	r3, [r3, #24]
 800eed2:	f003 0301 	and.w	r3, r3, #1
 800eed6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eed8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eeda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eedc:	69da      	ldr	r2, [r3, #28]
 800eede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee0:	899b      	ldrh	r3, [r3, #12]
 800eee2:	4619      	mov	r1, r3
 800eee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eee6:	440b      	add	r3, r1
 800eee8:	3b01      	subs	r3, #1
 800eeea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eeec:	8989      	ldrh	r1, [r1, #12]
 800eeee:	fbb3 f3f1 	udiv	r3, r3, r1
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d201      	bcs.n	800eefa <find_volume+0x416>
 800eef6:	230d      	movs	r3, #13
 800eef8:	e06a      	b.n	800efd0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefc:	f04f 32ff 	mov.w	r2, #4294967295
 800ef00:	615a      	str	r2, [r3, #20]
 800ef02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef04:	695a      	ldr	r2, [r3, #20]
 800ef06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef08:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef0c:	2280      	movs	r2, #128	@ 0x80
 800ef0e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d149      	bne.n	800efac <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ef18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef1a:	3334      	adds	r3, #52	@ 0x34
 800ef1c:	3330      	adds	r3, #48	@ 0x30
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe fa1c 	bl	800d35c <ld_word>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d140      	bne.n	800efac <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ef2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef32:	f7fe fc89 	bl	800d848 <move_window>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d137      	bne.n	800efac <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef3e:	2200      	movs	r2, #0
 800ef40:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef44:	3334      	adds	r3, #52	@ 0x34
 800ef46:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fa06 	bl	800d35c <ld_word>
 800ef50:	4603      	mov	r3, r0
 800ef52:	461a      	mov	r2, r3
 800ef54:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d127      	bne.n	800efac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5e:	3334      	adds	r3, #52	@ 0x34
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fe fa14 	bl	800d38e <ld_dword>
 800ef66:	4603      	mov	r3, r0
 800ef68:	4a1b      	ldr	r2, [pc, #108]	@ (800efd8 <find_volume+0x4f4>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d11e      	bne.n	800efac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef70:	3334      	adds	r3, #52	@ 0x34
 800ef72:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe fa09 	bl	800d38e <ld_dword>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	4a17      	ldr	r2, [pc, #92]	@ (800efdc <find_volume+0x4f8>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d113      	bne.n	800efac <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef86:	3334      	adds	r3, #52	@ 0x34
 800ef88:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fe f9fe 	bl	800d38e <ld_dword>
 800ef92:	4602      	mov	r2, r0
 800ef94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef96:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef9a:	3334      	adds	r3, #52	@ 0x34
 800ef9c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fe f9f4 	bl	800d38e <ld_dword>
 800efa6:	4602      	mov	r2, r0
 800efa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efaa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800efac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800efb2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800efb4:	4b0a      	ldr	r3, [pc, #40]	@ (800efe0 <find_volume+0x4fc>)
 800efb6:	881b      	ldrh	r3, [r3, #0]
 800efb8:	3301      	adds	r3, #1
 800efba:	b29a      	uxth	r2, r3
 800efbc:	4b08      	ldr	r3, [pc, #32]	@ (800efe0 <find_volume+0x4fc>)
 800efbe:	801a      	strh	r2, [r3, #0]
 800efc0:	4b07      	ldr	r3, [pc, #28]	@ (800efe0 <find_volume+0x4fc>)
 800efc2:	881a      	ldrh	r2, [r3, #0]
 800efc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efc6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800efc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800efca:	f7fe fbd5 	bl	800d778 <clear_lock>
#endif
	return FR_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3758      	adds	r7, #88	@ 0x58
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	41615252 	.word	0x41615252
 800efdc:	61417272 	.word	0x61417272
 800efe0:	20006630 	.word	0x20006630

0800efe4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800efee:	2309      	movs	r3, #9
 800eff0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d01c      	beq.n	800f032 <validate+0x4e>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d018      	beq.n	800f032 <validate+0x4e>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d013      	beq.n	800f032 <validate+0x4e>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	889a      	ldrh	r2, [r3, #4]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	88db      	ldrh	r3, [r3, #6]
 800f014:	429a      	cmp	r2, r3
 800f016:	d10c      	bne.n	800f032 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	785b      	ldrb	r3, [r3, #1]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fe f8fc 	bl	800d21c <disk_status>
 800f024:	4603      	mov	r3, r0
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d101      	bne.n	800f032 <validate+0x4e>
			res = FR_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f032:	7bfb      	ldrb	r3, [r7, #15]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d102      	bne.n	800f03e <validate+0x5a>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	e000      	b.n	800f040 <validate+0x5c>
 800f03e:	2300      	movs	r3, #0
 800f040:	683a      	ldr	r2, [r7, #0]
 800f042:	6013      	str	r3, [r2, #0]
	return res;
 800f044:	7bfb      	ldrb	r3, [r7, #15]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
	...

0800f050 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b088      	sub	sp, #32
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	4613      	mov	r3, r2
 800f05c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f062:	f107 0310 	add.w	r3, r7, #16
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff fca2 	bl	800e9b0 <get_ldnumber>
 800f06c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	2b00      	cmp	r3, #0
 800f072:	da01      	bge.n	800f078 <f_mount+0x28>
 800f074:	230b      	movs	r3, #11
 800f076:	e02b      	b.n	800f0d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f078:	4a17      	ldr	r2, [pc, #92]	@ (800f0d8 <f_mount+0x88>)
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f080:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d005      	beq.n	800f094 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f088:	69b8      	ldr	r0, [r7, #24]
 800f08a:	f7fe fb75 	bl	800d778 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	2200      	movs	r2, #0
 800f092:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d002      	beq.n	800f0a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	490d      	ldr	r1, [pc, #52]	@ (800f0d8 <f_mount+0x88>)
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <f_mount+0x66>
 800f0b0:	79fb      	ldrb	r3, [r7, #7]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d001      	beq.n	800f0ba <f_mount+0x6a>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	e00a      	b.n	800f0d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0ba:	f107 010c 	add.w	r1, r7, #12
 800f0be:	f107 0308 	add.w	r3, r7, #8
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7ff fd0d 	bl	800eae4 <find_volume>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3720      	adds	r7, #32
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	2000662c 	.word	0x2000662c

0800f0dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b09a      	sub	sp, #104	@ 0x68
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d101      	bne.n	800f0f4 <f_open+0x18>
 800f0f0:	2309      	movs	r3, #9
 800f0f2:	e1b7      	b.n	800f464 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f0f4:	79fb      	ldrb	r3, [r7, #7]
 800f0f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f0fc:	79fa      	ldrb	r2, [r7, #7]
 800f0fe:	f107 0114 	add.w	r1, r7, #20
 800f102:	f107 0308 	add.w	r3, r7, #8
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fcec 	bl	800eae4 <find_volume>
 800f10c:	4603      	mov	r3, r0
 800f10e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f112:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 819b 	bne.w	800f452 <f_open+0x376>
		dj.obj.fs = fs;
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	f107 0318 	add.w	r3, r7, #24
 800f126:	4611      	mov	r1, r2
 800f128:	4618      	mov	r0, r3
 800f12a:	f7ff fbcb 	bl	800e8c4 <follow_path>
 800f12e:	4603      	mov	r3, r0
 800f130:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f134:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d118      	bne.n	800f16e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f13c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f140:	b25b      	sxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	da03      	bge.n	800f14e <f_open+0x72>
				res = FR_INVALID_NAME;
 800f146:	2306      	movs	r3, #6
 800f148:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f14c:	e00f      	b.n	800f16e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	2b01      	cmp	r3, #1
 800f152:	bf8c      	ite	hi
 800f154:	2301      	movhi	r3, #1
 800f156:	2300      	movls	r3, #0
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	461a      	mov	r2, r3
 800f15c:	f107 0318 	add.w	r3, r7, #24
 800f160:	4611      	mov	r1, r2
 800f162:	4618      	mov	r0, r3
 800f164:	f7fe f9fc 	bl	800d560 <chk_lock>
 800f168:	4603      	mov	r3, r0
 800f16a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	f003 031c 	and.w	r3, r3, #28
 800f174:	2b00      	cmp	r3, #0
 800f176:	d07f      	beq.n	800f278 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f178:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d017      	beq.n	800f1b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f180:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f184:	2b04      	cmp	r3, #4
 800f186:	d10e      	bne.n	800f1a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f188:	f7fe fa46 	bl	800d618 <enq_lock>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d006      	beq.n	800f1a0 <f_open+0xc4>
 800f192:	f107 0318 	add.w	r3, r7, #24
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff f9cc 	bl	800e534 <dir_register>
 800f19c:	4603      	mov	r3, r0
 800f19e:	e000      	b.n	800f1a2 <f_open+0xc6>
 800f1a0:	2312      	movs	r3, #18
 800f1a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f1a6:	79fb      	ldrb	r3, [r7, #7]
 800f1a8:	f043 0308 	orr.w	r3, r3, #8
 800f1ac:	71fb      	strb	r3, [r7, #7]
 800f1ae:	e010      	b.n	800f1d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f1b0:	7fbb      	ldrb	r3, [r7, #30]
 800f1b2:	f003 0311 	and.w	r3, r3, #17
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d003      	beq.n	800f1c2 <f_open+0xe6>
					res = FR_DENIED;
 800f1ba:	2307      	movs	r3, #7
 800f1bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f1c0:	e007      	b.n	800f1d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	f003 0304 	and.w	r3, r3, #4
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <f_open+0xf6>
 800f1cc:	2308      	movs	r3, #8
 800f1ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f1d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d168      	bne.n	800f2ac <f_open+0x1d0>
 800f1da:	79fb      	ldrb	r3, [r7, #7]
 800f1dc:	f003 0308 	and.w	r3, r3, #8
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d063      	beq.n	800f2ac <f_open+0x1d0>
				dw = GET_FATTIME();
 800f1e4:	f7fb fdbe 	bl	800ad64 <get_fattime>
 800f1e8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ec:	330e      	adds	r3, #14
 800f1ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fe f90a 	bl	800d40a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f8:	3316      	adds	r3, #22
 800f1fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7fe f904 	bl	800d40a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f204:	330b      	adds	r3, #11
 800f206:	2220      	movs	r2, #32
 800f208:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f20e:	4611      	mov	r1, r2
 800f210:	4618      	mov	r0, r3
 800f212:	f7ff f89e 	bl	800e352 <ld_clust>
 800f216:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f21c:	2200      	movs	r2, #0
 800f21e:	4618      	mov	r0, r3
 800f220:	f7ff f8b6 	bl	800e390 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f226:	331c      	adds	r3, #28
 800f228:	2100      	movs	r1, #0
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fe f8ed 	bl	800d40a <st_dword>
					fs->wflag = 1;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2201      	movs	r2, #1
 800f234:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d037      	beq.n	800f2ac <f_open+0x1d0>
						dw = fs->winsect;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f240:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f242:	f107 0318 	add.w	r3, r7, #24
 800f246:	2200      	movs	r2, #0
 800f248:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fe fda6 	bl	800dd9c <remove_chain>
 800f250:	4603      	mov	r3, r0
 800f252:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800f256:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d126      	bne.n	800f2ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f262:	4618      	mov	r0, r3
 800f264:	f7fe faf0 	bl	800d848 <move_window>
 800f268:	4603      	mov	r3, r0
 800f26a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f272:	3a01      	subs	r2, #1
 800f274:	611a      	str	r2, [r3, #16]
 800f276:	e019      	b.n	800f2ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f278:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d115      	bne.n	800f2ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f280:	7fbb      	ldrb	r3, [r7, #30]
 800f282:	f003 0310 	and.w	r3, r3, #16
 800f286:	2b00      	cmp	r3, #0
 800f288:	d003      	beq.n	800f292 <f_open+0x1b6>
					res = FR_NO_FILE;
 800f28a:	2304      	movs	r3, #4
 800f28c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f290:	e00c      	b.n	800f2ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f292:	79fb      	ldrb	r3, [r7, #7]
 800f294:	f003 0302 	and.w	r3, r3, #2
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <f_open+0x1d0>
 800f29c:	7fbb      	ldrb	r3, [r7, #30]
 800f29e:	f003 0301 	and.w	r3, r3, #1
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d002      	beq.n	800f2ac <f_open+0x1d0>
						res = FR_DENIED;
 800f2a6:	2307      	movs	r3, #7
 800f2a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f2ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d126      	bne.n	800f302 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f2b4:	79fb      	ldrb	r3, [r7, #7]
 800f2b6:	f003 0308 	and.w	r3, r3, #8
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d003      	beq.n	800f2c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800f2be:	79fb      	ldrb	r3, [r7, #7]
 800f2c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f2ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2d4:	79fb      	ldrb	r3, [r7, #7]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	bf8c      	ite	hi
 800f2da:	2301      	movhi	r3, #1
 800f2dc:	2300      	movls	r3, #0
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	f107 0318 	add.w	r3, r7, #24
 800f2e6:	4611      	mov	r1, r2
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fe f9b7 	bl	800d65c <inc_lock>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <f_open+0x226>
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f302:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f306:	2b00      	cmp	r3, #0
 800f308:	f040 80a3 	bne.w	800f452 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f310:	4611      	mov	r1, r2
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff f81d 	bl	800e352 <ld_clust>
 800f318:	4602      	mov	r2, r0
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f320:	331c      	adds	r3, #28
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe f833 	bl	800d38e <ld_dword>
 800f328:	4602      	mov	r2, r0
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f334:	697a      	ldr	r2, [r7, #20]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	88da      	ldrh	r2, [r3, #6]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	79fa      	ldrb	r2, [r7, #7]
 800f346:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2200      	movs	r2, #0
 800f34c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	3330      	adds	r3, #48	@ 0x30
 800f35e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f362:	2100      	movs	r1, #0
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe f89d 	bl	800d4a4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	f003 0320 	and.w	r3, r3, #32
 800f370:	2b00      	cmp	r3, #0
 800f372:	d06e      	beq.n	800f452 <f_open+0x376>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d06a      	beq.n	800f452 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	68da      	ldr	r2, [r3, #12]
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	895b      	ldrh	r3, [r3, #10]
 800f388:	461a      	mov	r2, r3
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	899b      	ldrh	r3, [r3, #12]
 800f38e:	fb02 f303 	mul.w	r3, r2, r3
 800f392:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f3a0:	e016      	b.n	800f3d0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fe fb0b 	bl	800d9c2 <get_fat>
 800f3ac:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f3ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d802      	bhi.n	800f3ba <f_open+0x2de>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c0:	d102      	bne.n	800f3c8 <f_open+0x2ec>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f3ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f3d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d103      	bne.n	800f3e0 <f_open+0x304>
 800f3d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d8e0      	bhi.n	800f3a2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f3e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d131      	bne.n	800f452 <f_open+0x376>
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	899b      	ldrh	r3, [r3, #12]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3fa:	fb01 f202 	mul.w	r2, r1, r2
 800f3fe:	1a9b      	subs	r3, r3, r2
 800f400:	2b00      	cmp	r3, #0
 800f402:	d026      	beq.n	800f452 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fe fabb 	bl	800d984 <clust2sect>
 800f40e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800f410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f412:	2b00      	cmp	r3, #0
 800f414:	d103      	bne.n	800f41e <f_open+0x342>
						res = FR_INT_ERR;
 800f416:	2302      	movs	r3, #2
 800f418:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f41c:	e019      	b.n	800f452 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	899b      	ldrh	r3, [r3, #12]
 800f422:	461a      	mov	r2, r3
 800f424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f426:	fbb3 f2f2 	udiv	r2, r3, r2
 800f42a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f42c:	441a      	add	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	7858      	ldrb	r0, [r3, #1]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6a1a      	ldr	r2, [r3, #32]
 800f440:	2301      	movs	r3, #1
 800f442:	f7fd ff2d 	bl	800d2a0 <disk_read>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d002      	beq.n	800f452 <f_open+0x376>
 800f44c:	2301      	movs	r3, #1
 800f44e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f452:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <f_open+0x384>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2200      	movs	r2, #0
 800f45e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f460:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f464:	4618      	mov	r0, r3
 800f466:	3768      	adds	r7, #104	@ 0x68
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08c      	sub	sp, #48	@ 0x30
 800f470:	af00      	add	r7, sp, #0
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	607a      	str	r2, [r7, #4]
 800f478:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	2200      	movs	r2, #0
 800f482:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f107 0210 	add.w	r2, r7, #16
 800f48a:	4611      	mov	r1, r2
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7ff fda9 	bl	800efe4 <validate>
 800f492:	4603      	mov	r3, r0
 800f494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f498:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d107      	bne.n	800f4b0 <f_write+0x44>
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	7d5b      	ldrb	r3, [r3, #21]
 800f4a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f4a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d002      	beq.n	800f4b6 <f_write+0x4a>
 800f4b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f4b4:	e16a      	b.n	800f78c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	7d1b      	ldrb	r3, [r3, #20]
 800f4ba:	f003 0302 	and.w	r3, r3, #2
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d101      	bne.n	800f4c6 <f_write+0x5a>
 800f4c2:	2307      	movs	r3, #7
 800f4c4:	e162      	b.n	800f78c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	699a      	ldr	r2, [r3, #24]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	441a      	add	r2, r3
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	f080 814c 	bcs.w	800f770 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	43db      	mvns	r3, r3
 800f4de:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f4e0:	e146      	b.n	800f770 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	699b      	ldr	r3, [r3, #24]
 800f4e6:	693a      	ldr	r2, [r7, #16]
 800f4e8:	8992      	ldrh	r2, [r2, #12]
 800f4ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4ee:	fb01 f202 	mul.w	r2, r1, r2
 800f4f2:	1a9b      	subs	r3, r3, r2
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f040 80f1 	bne.w	800f6dc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	699b      	ldr	r3, [r3, #24]
 800f4fe:	693a      	ldr	r2, [r7, #16]
 800f500:	8992      	ldrh	r2, [r2, #12]
 800f502:	fbb3 f3f2 	udiv	r3, r3, r2
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	8952      	ldrh	r2, [r2, #10]
 800f50a:	3a01      	subs	r2, #1
 800f50c:	4013      	ands	r3, r2
 800f50e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d143      	bne.n	800f59e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	699b      	ldr	r3, [r3, #24]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10c      	bne.n	800f538 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f526:	2b00      	cmp	r3, #0
 800f528:	d11a      	bne.n	800f560 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2100      	movs	r1, #0
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fe fc99 	bl	800de66 <create_chain>
 800f534:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f536:	e013      	b.n	800f560 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d007      	beq.n	800f550 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	699b      	ldr	r3, [r3, #24]
 800f544:	4619      	mov	r1, r3
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f7fe fd25 	bl	800df96 <clmt_clust>
 800f54c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f54e:	e007      	b.n	800f560 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	69db      	ldr	r3, [r3, #28]
 800f556:	4619      	mov	r1, r3
 800f558:	4610      	mov	r0, r2
 800f55a:	f7fe fc84 	bl	800de66 <create_chain>
 800f55e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f562:	2b00      	cmp	r3, #0
 800f564:	f000 8109 	beq.w	800f77a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d104      	bne.n	800f578 <f_write+0x10c>
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2202      	movs	r2, #2
 800f572:	755a      	strb	r2, [r3, #21]
 800f574:	2302      	movs	r3, #2
 800f576:	e109      	b.n	800f78c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f57e:	d104      	bne.n	800f58a <f_write+0x11e>
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2201      	movs	r2, #1
 800f584:	755a      	strb	r2, [r3, #21]
 800f586:	2301      	movs	r3, #1
 800f588:	e100      	b.n	800f78c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f58e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d102      	bne.n	800f59e <f_write+0x132>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f59c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	7d1b      	ldrb	r3, [r3, #20]
 800f5a2:	b25b      	sxtb	r3, r3
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	da18      	bge.n	800f5da <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	7858      	ldrb	r0, [r3, #1]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6a1a      	ldr	r2, [r3, #32]
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	f7fd fe92 	bl	800d2e0 <disk_write>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d004      	beq.n	800f5cc <f_write+0x160>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	755a      	strb	r2, [r3, #21]
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e0df      	b.n	800f78c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	7d1b      	ldrb	r3, [r3, #20]
 800f5d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5d4:	b2da      	uxtb	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	69db      	ldr	r3, [r3, #28]
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	4610      	mov	r0, r2
 800f5e4:	f7fe f9ce 	bl	800d984 <clust2sect>
 800f5e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d104      	bne.n	800f5fa <f_write+0x18e>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2202      	movs	r2, #2
 800f5f4:	755a      	strb	r2, [r3, #21]
 800f5f6:	2302      	movs	r3, #2
 800f5f8:	e0c8      	b.n	800f78c <f_write+0x320>
			sect += csect;
 800f5fa:	697a      	ldr	r2, [r7, #20]
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	4413      	add	r3, r2
 800f600:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	899b      	ldrh	r3, [r3, #12]
 800f606:	461a      	mov	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f60e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f610:	6a3b      	ldr	r3, [r7, #32]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d043      	beq.n	800f69e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f616:	69ba      	ldr	r2, [r7, #24]
 800f618:	6a3b      	ldr	r3, [r7, #32]
 800f61a:	4413      	add	r3, r2
 800f61c:	693a      	ldr	r2, [r7, #16]
 800f61e:	8952      	ldrh	r2, [r2, #10]
 800f620:	4293      	cmp	r3, r2
 800f622:	d905      	bls.n	800f630 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	895b      	ldrh	r3, [r3, #10]
 800f628:	461a      	mov	r2, r3
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	7858      	ldrb	r0, [r3, #1]
 800f634:	6a3b      	ldr	r3, [r7, #32]
 800f636:	697a      	ldr	r2, [r7, #20]
 800f638:	69f9      	ldr	r1, [r7, #28]
 800f63a:	f7fd fe51 	bl	800d2e0 <disk_write>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d004      	beq.n	800f64e <f_write+0x1e2>
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2201      	movs	r2, #1
 800f648:	755a      	strb	r2, [r3, #21]
 800f64a:	2301      	movs	r3, #1
 800f64c:	e09e      	b.n	800f78c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6a1a      	ldr	r2, [r3, #32]
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	1ad3      	subs	r3, r2, r3
 800f656:	6a3a      	ldr	r2, [r7, #32]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d918      	bls.n	800f68e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6a1a      	ldr	r2, [r3, #32]
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	693a      	ldr	r2, [r7, #16]
 800f66c:	8992      	ldrh	r2, [r2, #12]
 800f66e:	fb02 f303 	mul.w	r3, r2, r3
 800f672:	69fa      	ldr	r2, [r7, #28]
 800f674:	18d1      	adds	r1, r2, r3
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	899b      	ldrh	r3, [r3, #12]
 800f67a:	461a      	mov	r2, r3
 800f67c:	f7fd fef1 	bl	800d462 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	7d1b      	ldrb	r3, [r3, #20]
 800f684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f688:	b2da      	uxtb	r2, r3
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	899b      	ldrh	r3, [r3, #12]
 800f692:	461a      	mov	r2, r3
 800f694:	6a3b      	ldr	r3, [r7, #32]
 800f696:	fb02 f303 	mul.w	r3, r2, r3
 800f69a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f69c:	e04b      	b.n	800f736 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6a1b      	ldr	r3, [r3, #32]
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d016      	beq.n	800f6d6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	699a      	ldr	r2, [r3, #24]
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d210      	bcs.n	800f6d6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	7858      	ldrb	r0, [r3, #1]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f6be:	2301      	movs	r3, #1
 800f6c0:	697a      	ldr	r2, [r7, #20]
 800f6c2:	f7fd fded 	bl	800d2a0 <disk_read>
 800f6c6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d004      	beq.n	800f6d6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	755a      	strb	r2, [r3, #21]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e05a      	b.n	800f78c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	899b      	ldrh	r3, [r3, #12]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	693a      	ldr	r2, [r7, #16]
 800f6e8:	8992      	ldrh	r2, [r2, #12]
 800f6ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6ee:	fb01 f202 	mul.w	r2, r1, r2
 800f6f2:	1a9b      	subs	r3, r3, r2
 800f6f4:	1ac3      	subs	r3, r0, r3
 800f6f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f6f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d901      	bls.n	800f704 <f_write+0x298>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	693a      	ldr	r2, [r7, #16]
 800f710:	8992      	ldrh	r2, [r2, #12]
 800f712:	fbb3 f0f2 	udiv	r0, r3, r2
 800f716:	fb00 f202 	mul.w	r2, r0, r2
 800f71a:	1a9b      	subs	r3, r3, r2
 800f71c:	440b      	add	r3, r1
 800f71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f720:	69f9      	ldr	r1, [r7, #28]
 800f722:	4618      	mov	r0, r3
 800f724:	f7fd fe9d 	bl	800d462 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	7d1b      	ldrb	r3, [r3, #20]
 800f72c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f730:	b2da      	uxtb	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f736:	69fa      	ldr	r2, [r7, #28]
 800f738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f73a:	4413      	add	r3, r2
 800f73c:	61fb      	str	r3, [r7, #28]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	699a      	ldr	r2, [r3, #24]
 800f742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f744:	441a      	add	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	619a      	str	r2, [r3, #24]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	68da      	ldr	r2, [r3, #12]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	429a      	cmp	r2, r3
 800f754:	bf38      	it	cc
 800f756:	461a      	movcc	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	60da      	str	r2, [r3, #12]
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f762:	441a      	add	r2, r3
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	601a      	str	r2, [r3, #0]
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	f47f aeb5 	bne.w	800f4e2 <f_write+0x76>
 800f778:	e000      	b.n	800f77c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f77a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	7d1b      	ldrb	r3, [r3, #20]
 800f780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f784:	b2da      	uxtb	r2, r3
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3730      	adds	r7, #48	@ 0x30
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f107 0208 	add.w	r2, r7, #8
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff fc1d 	bl	800efe4 <validate>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f7ae:	7dfb      	ldrb	r3, [r7, #23]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d168      	bne.n	800f886 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7d1b      	ldrb	r3, [r3, #20]
 800f7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d062      	beq.n	800f886 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	b25b      	sxtb	r3, r3
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	da15      	bge.n	800f7f6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	7858      	ldrb	r0, [r3, #1]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a1a      	ldr	r2, [r3, #32]
 800f7d8:	2301      	movs	r3, #1
 800f7da:	f7fd fd81 	bl	800d2e0 <disk_write>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <f_sync+0x54>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e04f      	b.n	800f888 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	7d1b      	ldrb	r3, [r3, #20]
 800f7ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7f0:	b2da      	uxtb	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f7f6:	f7fb fab5 	bl	800ad64 <get_fattime>
 800f7fa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f7fc:	68ba      	ldr	r2, [r7, #8]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f802:	4619      	mov	r1, r3
 800f804:	4610      	mov	r0, r2
 800f806:	f7fe f81f 	bl	800d848 <move_window>
 800f80a:	4603      	mov	r3, r0
 800f80c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f80e:	7dfb      	ldrb	r3, [r7, #23]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d138      	bne.n	800f886 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f818:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	330b      	adds	r3, #11
 800f81e:	781a      	ldrb	r2, [r3, #0]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	330b      	adds	r3, #11
 800f824:	f042 0220 	orr.w	r2, r2, #32
 800f828:	b2d2      	uxtb	r2, r2
 800f82a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6818      	ldr	r0, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	461a      	mov	r2, r3
 800f836:	68f9      	ldr	r1, [r7, #12]
 800f838:	f7fe fdaa 	bl	800e390 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f103 021c 	add.w	r2, r3, #28
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	4619      	mov	r1, r3
 800f848:	4610      	mov	r0, r2
 800f84a:	f7fd fdde 	bl	800d40a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3316      	adds	r3, #22
 800f852:	6939      	ldr	r1, [r7, #16]
 800f854:	4618      	mov	r0, r3
 800f856:	f7fd fdd8 	bl	800d40a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3312      	adds	r3, #18
 800f85e:	2100      	movs	r1, #0
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd fdb7 	bl	800d3d4 <st_word>
					fs->wflag = 1;
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2201      	movs	r2, #1
 800f86a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fe f818 	bl	800d8a4 <sync_fs>
 800f874:	4603      	mov	r3, r0
 800f876:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	7d1b      	ldrb	r3, [r3, #20]
 800f87c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f880:	b2da      	uxtb	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f886:	7dfb      	ldrb	r3, [r7, #23]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3718      	adds	r7, #24
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d101      	bne.n	800f8a4 <f_opendir+0x14>
 800f8a0:	2309      	movs	r3, #9
 800f8a2:	e064      	b.n	800f96e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f8a8:	f107 010c 	add.w	r1, r7, #12
 800f8ac:	463b      	mov	r3, r7
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff f917 	bl	800eae4 <find_volume>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8ba:	7dfb      	ldrb	r3, [r7, #23]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d14f      	bne.n	800f960 <f_opendir+0xd0>
		obj->fs = fs;
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7fe fffa 	bl	800e8c4 <follow_path>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f8d4:	7dfb      	ldrb	r3, [r7, #23]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d13d      	bne.n	800f956 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f8e0:	b25b      	sxtb	r3, r3
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	db12      	blt.n	800f90c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	799b      	ldrb	r3, [r3, #6]
 800f8ea:	f003 0310 	and.w	r3, r3, #16
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d00a      	beq.n	800f908 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6a1b      	ldr	r3, [r3, #32]
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	f7fe fd29 	bl	800e352 <ld_clust>
 800f900:	4602      	mov	r2, r0
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	609a      	str	r2, [r3, #8]
 800f906:	e001      	b.n	800f90c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f908:	2305      	movs	r3, #5
 800f90a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f90c:	7dfb      	ldrb	r3, [r7, #23]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d121      	bne.n	800f956 <f_opendir+0xc6>
				obj->id = fs->id;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	88da      	ldrh	r2, [r3, #6]
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f91a:	2100      	movs	r1, #0
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f7fe fb72 	bl	800e006 <dir_sdi>
 800f922:	4603      	mov	r3, r0
 800f924:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f926:	7dfb      	ldrb	r3, [r7, #23]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d114      	bne.n	800f956 <f_opendir+0xc6>
					if (obj->sclust) {
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00d      	beq.n	800f950 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f934:	2100      	movs	r1, #0
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7fd fe90 	bl	800d65c <inc_lock>
 800f93c:	4602      	mov	r2, r0
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d105      	bne.n	800f956 <f_opendir+0xc6>
 800f94a:	2312      	movs	r3, #18
 800f94c:	75fb      	strb	r3, [r7, #23]
 800f94e:	e002      	b.n	800f956 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	2200      	movs	r2, #0
 800f954:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f956:	7dfb      	ldrb	r3, [r7, #23]
 800f958:	2b04      	cmp	r3, #4
 800f95a:	d101      	bne.n	800f960 <f_opendir+0xd0>
 800f95c:	2305      	movs	r3, #5
 800f95e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f960:	7dfb      	ldrb	r3, [r7, #23]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d002      	beq.n	800f96c <f_opendir+0xdc>
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	2200      	movs	r2, #0
 800f96a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3718      	adds	r7, #24
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f976:	b580      	push	{r7, lr}
 800f978:	b084      	sub	sp, #16
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
 800f97e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f107 0208 	add.w	r2, r7, #8
 800f986:	4611      	mov	r1, r2
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff fb2b 	bl	800efe4 <validate>
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f992:	7bfb      	ldrb	r3, [r7, #15]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d126      	bne.n	800f9e6 <f_readdir+0x70>
		if (!fno) {
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d106      	bne.n	800f9ac <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f99e:	2100      	movs	r1, #0
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7fe fb30 	bl	800e006 <dir_sdi>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	73fb      	strb	r3, [r7, #15]
 800f9aa:	e01c      	b.n	800f9e6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7fe fd0e 	bl	800e3d0 <dir_read>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ba:	2b04      	cmp	r3, #4
 800f9bc:	d101      	bne.n	800f9c2 <f_readdir+0x4c>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f9c2:	7bfb      	ldrb	r3, [r7, #15]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d10e      	bne.n	800f9e6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7fe fde4 	bl	800e598 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7fe fba0 	bl	800e118 <dir_next>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f9dc:	7bfb      	ldrb	r3, [r7, #15]
 800f9de:	2b04      	cmp	r3, #4
 800f9e0:	d101      	bne.n	800f9e6 <f_readdir+0x70>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7ff ffba 	bl	800f976 <f_readdir>
 800fa02:	4603      	mov	r3, r0
 800fa04:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fa06:	7bfb      	ldrb	r3, [r7, #15]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d114      	bne.n	800fa36 <f_findnext+0x46>
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d011      	beq.n	800fa36 <f_findnext+0x46>
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	7a5b      	ldrb	r3, [r3, #9]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00d      	beq.n	800fa36 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	f103 0109 	add.w	r1, r3, #9
 800fa24:	2300      	movs	r3, #0
 800fa26:	2200      	movs	r2, #0
 800fa28:	f7fe fe3c 	bl	800e6a4 <pattern_matching>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d100      	bne.n	800fa34 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fa32:	e7e2      	b.n	800f9fa <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa34:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800fa36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	683a      	ldr	r2, [r7, #0]
 800fa52:	631a      	str	r2, [r3, #48]	@ 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800fa54:	6879      	ldr	r1, [r7, #4]
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f7ff ff1a 	bl	800f890 <f_opendir>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fa60:	7dfb      	ldrb	r3, [r7, #23]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d105      	bne.n	800fa72 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800fa66:	68b9      	ldr	r1, [r7, #8]
 800fa68:	68f8      	ldr	r0, [r7, #12]
 800fa6a:	f7ff ffc1 	bl	800f9f0 <f_findnext>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b086      	sub	sp, #24
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f107 020c 	add.w	r2, r7, #12
 800fa8a:	4611      	mov	r1, r2
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7ff faa9 	bl	800efe4 <validate>
 800fa92:	4603      	mov	r3, r0
 800fa94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800fa96:	7dfb      	ldrb	r3, [r7, #23]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d105      	bne.n	800faa8 <f_truncate+0x2c>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	7d5b      	ldrb	r3, [r3, #21]
 800faa0:	75fb      	strb	r3, [r7, #23]
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d001      	beq.n	800faac <f_truncate+0x30>
 800faa8:	7dfb      	ldrb	r3, [r7, #23]
 800faaa:	e077      	b.n	800fb9c <f_truncate+0x120>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	7d1b      	ldrb	r3, [r3, #20]
 800fab0:	f003 0302 	and.w	r3, r3, #2
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <f_truncate+0x40>
 800fab8:	2307      	movs	r3, #7
 800faba:	e06f      	b.n	800fb9c <f_truncate+0x120>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	699a      	ldr	r2, [r3, #24]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d268      	bcs.n	800fb9a <f_truncate+0x11e>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	699b      	ldr	r3, [r3, #24]
 800facc:	2b00      	cmp	r3, #0
 800face:	d10c      	bne.n	800faea <f_truncate+0x6e>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	2200      	movs	r2, #0
 800fad8:	4619      	mov	r1, r3
 800fada:	f7fe f95f 	bl	800dd9c <remove_chain>
 800fade:	4603      	mov	r3, r0
 800fae0:	75fb      	strb	r3, [r7, #23]
			fp->obj.sclust = 0;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	609a      	str	r2, [r3, #8]
 800fae8:	e025      	b.n	800fb36 <f_truncate+0xba>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	69db      	ldr	r3, [r3, #28]
 800faf0:	4619      	mov	r1, r3
 800faf2:	4610      	mov	r0, r2
 800faf4:	f7fd ff65 	bl	800d9c2 <get_fat>
 800faf8:	6138      	str	r0, [r7, #16]
			res = FR_OK;
 800fafa:	2300      	movs	r3, #0
 800fafc:	75fb      	strb	r3, [r7, #23]
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb04:	d101      	bne.n	800fb0a <f_truncate+0x8e>
 800fb06:	2301      	movs	r3, #1
 800fb08:	75fb      	strb	r3, [r7, #23]
			if (ncl == 1) res = FR_INT_ERR;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d101      	bne.n	800fb14 <f_truncate+0x98>
 800fb10:	2302      	movs	r3, #2
 800fb12:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK && ncl < fs->n_fatent) {
 800fb14:	7dfb      	ldrb	r3, [r7, #23]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d10d      	bne.n	800fb36 <f_truncate+0xba>
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	699b      	ldr	r3, [r3, #24]
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d208      	bcs.n	800fb36 <f_truncate+0xba>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	69db      	ldr	r3, [r3, #28]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	6939      	ldr	r1, [r7, #16]
 800fb2e:	f7fe f935 	bl	800dd9c <remove_chain>
 800fb32:	4603      	mov	r3, r0
 800fb34:	75fb      	strb	r3, [r7, #23]
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	699a      	ldr	r2, [r3, #24]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	60da      	str	r2, [r3, #12]
		fp->flag |= FA_MODIFIED;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	7d1b      	ldrb	r3, [r3, #20]
 800fb42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	751a      	strb	r2, [r3, #20]
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 800fb4c:	7dfb      	ldrb	r3, [r7, #23]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d11b      	bne.n	800fb8a <f_truncate+0x10e>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	7d1b      	ldrb	r3, [r3, #20]
 800fb56:	b25b      	sxtb	r3, r3
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	da16      	bge.n	800fb8a <f_truncate+0x10e>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	7858      	ldrb	r0, [r3, #1]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a1a      	ldr	r2, [r3, #32]
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	f7fd fbb8 	bl	800d2e0 <disk_write>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d002      	beq.n	800fb7c <f_truncate+0x100>
				res = FR_DISK_ERR;
 800fb76:	2301      	movs	r3, #1
 800fb78:	75fb      	strb	r3, [r7, #23]
 800fb7a:	e006      	b.n	800fb8a <f_truncate+0x10e>
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb84:	b2da      	uxtb	r2, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	751a      	strb	r2, [r3, #20]
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <f_truncate+0x11e>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	7dfa      	ldrb	r2, [r7, #23]
 800fb94:	755a      	strb	r2, [r3, #21]
 800fb96:	7dfb      	ldrb	r3, [r7, #23]
 800fb98:	e000      	b.n	800fb9c <f_truncate+0x120>
	}

	LEAVE_FF(fs, res);
 800fb9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <f_expand>:
FRESULT f_expand (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t fsz,	/* File size to be expanded to */
	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b08e      	sub	sp, #56	@ 0x38
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	71fb      	strb	r3, [r7, #7]
	FRESULT res;
	FATFS *fs;
	DWORD n, clst, stcl, scl, ncl, tcl, lclst;


	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f107 0214 	add.w	r2, r7, #20
 800fbb8:	4611      	mov	r1, r2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff fa12 	bl	800efe4 <validate>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800fbc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d107      	bne.n	800fbde <f_expand+0x3a>
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	7d5b      	ldrb	r3, [r3, #21]
 800fbd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fbd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d002      	beq.n	800fbe4 <f_expand+0x40>
 800fbde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbe2:	e0cd      	b.n	800fd80 <f_expand+0x1dc>
	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d009      	beq.n	800fbfe <f_expand+0x5a>
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d105      	bne.n	800fbfe <f_expand+0x5a>
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	7d1b      	ldrb	r3, [r3, #20]
 800fbf6:	f003 0302 	and.w	r3, r3, #2
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <f_expand+0x5e>
 800fbfe:	2307      	movs	r3, #7
 800fc00:	e0be      	b.n	800fd80 <f_expand+0x1dc>
#if _FS_EXFAT
	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size limit */
#endif
	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	895b      	ldrh	r3, [r3, #10]
 800fc06:	461a      	mov	r2, r3
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	899b      	ldrh	r3, [r3, #12]
 800fc0c:	fb02 f303 	mul.w	r3, r2, r3
 800fc10:	633b      	str	r3, [r7, #48]	@ 0x30
	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc16:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc1c:	1e51      	subs	r1, r2, #1
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	400a      	ands	r2, r1
 800fc22:	2a00      	cmp	r2, #0
 800fc24:	d001      	beq.n	800fc2a <f_expand+0x86>
 800fc26:	2201      	movs	r2, #1
 800fc28:	e000      	b.n	800fc2c <f_expand+0x88>
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	4413      	add	r3, r2
 800fc2e:	61bb      	str	r3, [r7, #24]
	stcl = fs->last_clst; lclst = 0;
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc36:	2300      	movs	r3, #0
 800fc38:	61fb      	str	r3, [r7, #28]
	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 800fc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d904      	bls.n	800fc4a <f_expand+0xa6>
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d301      	bcc.n	800fc4e <f_expand+0xaa>
 800fc4a:	2302      	movs	r3, #2
 800fc4c:	62bb      	str	r3, [r7, #40]	@ 0x28
			}
		}
	} else
#endif
	{
		scl = clst = stcl; ncl = 0;
 800fc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc54:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc56:	2300      	movs	r3, #0
 800fc58:	623b      	str	r3, [r7, #32]
		for (;;) {	/* Find a contiguous cluster block */
			n = get_fat(&fp->obj, clst);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fd feaf 	bl	800d9c2 <get_fat>
 800fc64:	6338      	str	r0, [r7, #48]	@ 0x30
			if (++clst >= fs->n_fatent) clst = 2;
 800fc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc68:	3301      	adds	r3, #1
 800fc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	699b      	ldr	r3, [r3, #24]
 800fc70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d301      	bcc.n	800fc7a <f_expand+0xd6>
 800fc76:	2302      	movs	r3, #2
 800fc78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (n == 1) { res = FR_INT_ERR; break; }
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d103      	bne.n	800fc88 <f_expand+0xe4>
 800fc80:	2302      	movs	r3, #2
 800fc82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fc86:	e01d      	b.n	800fcc4 <f_expand+0x120>
			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8e:	d103      	bne.n	800fc98 <f_expand+0xf4>
 800fc90:	2301      	movs	r3, #1
 800fc92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fc96:	e015      	b.n	800fcc4 <f_expand+0x120>
			if (n == 0) {	/* Is it a free cluster? */
 800fc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d107      	bne.n	800fcae <f_expand+0x10a>
				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
 800fc9e:	6a3b      	ldr	r3, [r7, #32]
 800fca0:	3301      	adds	r3, #1
 800fca2:	623b      	str	r3, [r7, #32]
 800fca4:	6a3a      	ldr	r2, [r7, #32]
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d104      	bne.n	800fcb6 <f_expand+0x112>
 800fcac:	e00a      	b.n	800fcc4 <f_expand+0x120>
			} else {
				scl = clst; ncl = 0;		/* Not a free cluster */
 800fcae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	623b      	str	r3, [r7, #32]
			}
			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
 800fcb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d1cd      	bne.n	800fc5a <f_expand+0xb6>
 800fcbe:	2307      	movs	r3, #7
 800fcc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}
		if (res == FR_OK) {	/* A contiguous free area is found */
 800fcc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d12c      	bne.n	800fd26 <f_expand+0x182>
			if (opt) {		/* Allocate it now */
 800fccc:	79fb      	ldrb	r3, [r7, #7]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d024      	beq.n	800fd1c <f_expand+0x178>
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 800fcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcda:	e01b      	b.n	800fd14 <f_expand+0x170>
					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 800fcdc:	6978      	ldr	r0, [r7, #20]
 800fcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d002      	beq.n	800fcea <f_expand+0x146>
 800fce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce6:	3301      	adds	r3, #1
 800fce8:	e001      	b.n	800fcee <f_expand+0x14a>
 800fcea:	f04f 33ff 	mov.w	r3, #4294967295
 800fcee:	461a      	mov	r2, r3
 800fcf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcf2:	f7fd ff39 	bl	800db68 <put_fat>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					if (res != FR_OK) break;
 800fcfc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d10f      	bne.n	800fd24 <f_expand+0x180>
					lclst = clst;
 800fd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd06:	61fb      	str	r3, [r7, #28]
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 800fd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd10:	3b01      	subs	r3, #1
 800fd12:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d1e0      	bne.n	800fcdc <f_expand+0x138>
 800fd1a:	e004      	b.n	800fd26 <f_expand+0x182>
				}
			} else {		/* Set it as suggested point for next allocation */
				lclst = scl - 1;
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	61fb      	str	r3, [r7, #28]
 800fd22:	e000      	b.n	800fd26 <f_expand+0x182>
					if (res != FR_OK) break;
 800fd24:	bf00      	nop
			}
		}
	}

	if (res == FR_OK) {
 800fd26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d126      	bne.n	800fd7c <f_expand+0x1d8>
		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	69fa      	ldr	r2, [r7, #28]
 800fd32:	611a      	str	r2, [r3, #16]
		if (opt) {	/* Is it allocated now? */
 800fd34:	79fb      	ldrb	r3, [r7, #7]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d020      	beq.n	800fd7c <f_expand+0x1d8>
			fp->obj.sclust = scl;		/* Update object allocation information */
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd3e:	609a      	str	r2, [r3, #8]
			fp->obj.objsize = fsz;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	60da      	str	r2, [r3, #12]
			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
			fp->flag |= FA_MODIFIED;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	7d1b      	ldrb	r3, [r3, #20]
 800fd4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	751a      	strb	r2, [r3, #20]
			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	695a      	ldr	r2, [r3, #20]
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	699b      	ldr	r3, [r3, #24]
 800fd5c:	3b02      	subs	r3, #2
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d80c      	bhi.n	800fd7c <f_expand+0x1d8>
				fs->free_clst -= tcl;
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	6959      	ldr	r1, [r3, #20]
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	69ba      	ldr	r2, [r7, #24]
 800fd6a:	1a8a      	subs	r2, r1, r2
 800fd6c:	615a      	str	r2, [r3, #20]
				fs->fsi_flag |= 1;
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	791a      	ldrb	r2, [r3, #4]
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	f042 0201 	orr.w	r2, r2, #1
 800fd78:	b2d2      	uxtb	r2, r2
 800fd7a:	711a      	strb	r2, [r3, #4]
			}
		}
	}

	LEAVE_FF(fs, res);
 800fd7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3738      	adds	r7, #56	@ 0x38
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b087      	sub	sp, #28
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	4613      	mov	r3, r2
 800fd94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fd96:	2301      	movs	r3, #1
 800fd98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fd9e:	4b1f      	ldr	r3, [pc, #124]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fda0:	7a5b      	ldrb	r3, [r3, #9]
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d131      	bne.n	800fe0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fda8:	4b1c      	ldr	r3, [pc, #112]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fdaa:	7a5b      	ldrb	r3, [r3, #9]
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	461a      	mov	r2, r3
 800fdb0:	4b1a      	ldr	r3, [pc, #104]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fdb6:	4b19      	ldr	r3, [pc, #100]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fdb8:	7a5b      	ldrb	r3, [r3, #9]
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	4a17      	ldr	r2, [pc, #92]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	4413      	add	r3, r2
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fdc6:	4b15      	ldr	r3, [pc, #84]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fdc8:	7a5b      	ldrb	r3, [r3, #9]
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	461a      	mov	r2, r3
 800fdce:	4b13      	ldr	r3, [pc, #76]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fdd0:	4413      	add	r3, r2
 800fdd2:	79fa      	ldrb	r2, [r7, #7]
 800fdd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fdd6:	4b11      	ldr	r3, [pc, #68]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fdd8:	7a5b      	ldrb	r3, [r3, #9]
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	1c5a      	adds	r2, r3, #1
 800fdde:	b2d1      	uxtb	r1, r2
 800fde0:	4a0e      	ldr	r2, [pc, #56]	@ (800fe1c <FATFS_LinkDriverEx+0x94>)
 800fde2:	7251      	strb	r1, [r2, #9]
 800fde4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fde6:	7dbb      	ldrb	r3, [r7, #22]
 800fde8:	3330      	adds	r3, #48	@ 0x30
 800fdea:	b2da      	uxtb	r2, r3
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	223a      	movs	r2, #58	@ 0x3a
 800fdf6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	3302      	adds	r3, #2
 800fdfc:	222f      	movs	r2, #47	@ 0x2f
 800fdfe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	3303      	adds	r3, #3
 800fe04:	2200      	movs	r2, #0
 800fe06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	371c      	adds	r7, #28
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	20006644 	.word	0x20006644

0800fe20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	6839      	ldr	r1, [r7, #0]
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7ff ffaa 	bl	800fd88 <FATFS_LinkDriverEx>
 800fe34:	4603      	mov	r3, r0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
	...

0800fe40 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800fe50:	2301      	movs	r3, #1
 800fe52:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800fe54:	4b15      	ldr	r3, [pc, #84]	@ (800feac <FATFS_UnLinkDriverEx+0x6c>)
 800fe56:	7a5b      	ldrb	r3, [r3, #9]
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d01e      	beq.n	800fe9c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	3b30      	subs	r3, #48	@ 0x30
 800fe64:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800fe66:	7bbb      	ldrb	r3, [r7, #14]
 800fe68:	4a10      	ldr	r2, [pc, #64]	@ (800feac <FATFS_UnLinkDriverEx+0x6c>)
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	4413      	add	r3, r2
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d013      	beq.n	800fe9c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800fe74:	7bbb      	ldrb	r3, [r7, #14]
 800fe76:	4a0d      	ldr	r2, [pc, #52]	@ (800feac <FATFS_UnLinkDriverEx+0x6c>)
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4413      	add	r3, r2
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800fe80:	7bbb      	ldrb	r3, [r7, #14]
 800fe82:	4a0a      	ldr	r2, [pc, #40]	@ (800feac <FATFS_UnLinkDriverEx+0x6c>)
 800fe84:	4413      	add	r3, r2
 800fe86:	2200      	movs	r2, #0
 800fe88:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800fe8a:	4b08      	ldr	r3, [pc, #32]	@ (800feac <FATFS_UnLinkDriverEx+0x6c>)
 800fe8c:	7a5b      	ldrb	r3, [r3, #9]
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	3b01      	subs	r3, #1
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	4b05      	ldr	r3, [pc, #20]	@ (800feac <FATFS_UnLinkDriverEx+0x6c>)
 800fe96:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	20006644 	.word	0x20006644

0800feb0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800feb8:	2100      	movs	r1, #0
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7ff ffc0 	bl	800fe40 <FATFS_UnLinkDriverEx>
 800fec0:	4603      	mov	r3, r0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
	...

0800fecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fed0:	2200      	movs	r2, #0
 800fed2:	4912      	ldr	r1, [pc, #72]	@ (800ff1c <MX_USB_DEVICE_Init+0x50>)
 800fed4:	4812      	ldr	r0, [pc, #72]	@ (800ff20 <MX_USB_DEVICE_Init+0x54>)
 800fed6:	f7fb fe81 	bl	800bbdc <USBD_Init>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d001      	beq.n	800fee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fee0:	f7f2 f962 	bl	80021a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fee4:	490f      	ldr	r1, [pc, #60]	@ (800ff24 <MX_USB_DEVICE_Init+0x58>)
 800fee6:	480e      	ldr	r0, [pc, #56]	@ (800ff20 <MX_USB_DEVICE_Init+0x54>)
 800fee8:	f7fb fea8 	bl	800bc3c <USBD_RegisterClass>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fef2:	f7f2 f959 	bl	80021a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fef6:	490c      	ldr	r1, [pc, #48]	@ (800ff28 <MX_USB_DEVICE_Init+0x5c>)
 800fef8:	4809      	ldr	r0, [pc, #36]	@ (800ff20 <MX_USB_DEVICE_Init+0x54>)
 800fefa:	f7fb fd9f 	bl	800ba3c <USBD_CDC_RegisterInterface>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d001      	beq.n	800ff08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff04:	f7f2 f950 	bl	80021a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff08:	4805      	ldr	r0, [pc, #20]	@ (800ff20 <MX_USB_DEVICE_Init+0x54>)
 800ff0a:	f7fb fecd 	bl	800bca8 <USBD_Start>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d001      	beq.n	800ff18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff14:	f7f2 f948 	bl	80021a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff18:	bf00      	nop
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	200000b0 	.word	0x200000b0
 800ff20:	20006650 	.word	0x20006650
 800ff24:	2000001c 	.word	0x2000001c
 800ff28:	2000009c 	.word	0x2000009c

0800ff2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff30:	2200      	movs	r2, #0
 800ff32:	4905      	ldr	r1, [pc, #20]	@ (800ff48 <CDC_Init_FS+0x1c>)
 800ff34:	4805      	ldr	r0, [pc, #20]	@ (800ff4c <CDC_Init_FS+0x20>)
 800ff36:	f7fb fd9b 	bl	800ba70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff3a:	4905      	ldr	r1, [pc, #20]	@ (800ff50 <CDC_Init_FS+0x24>)
 800ff3c:	4803      	ldr	r0, [pc, #12]	@ (800ff4c <CDC_Init_FS+0x20>)
 800ff3e:	f7fb fdb9 	bl	800bab4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	2000712c 	.word	0x2000712c
 800ff4c:	20006650 	.word	0x20006650
 800ff50:	2000692c 	.word	0x2000692c

0800ff54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff54:	b480      	push	{r7}
 800ff56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ff58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	6039      	str	r1, [r7, #0]
 800ff6e:	71fb      	strb	r3, [r7, #7]
 800ff70:	4613      	mov	r3, r2
 800ff72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	2b23      	cmp	r3, #35	@ 0x23
 800ff78:	d84a      	bhi.n	8010010 <CDC_Control_FS+0xac>
 800ff7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ff80 <CDC_Control_FS+0x1c>)
 800ff7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff80:	08010011 	.word	0x08010011
 800ff84:	08010011 	.word	0x08010011
 800ff88:	08010011 	.word	0x08010011
 800ff8c:	08010011 	.word	0x08010011
 800ff90:	08010011 	.word	0x08010011
 800ff94:	08010011 	.word	0x08010011
 800ff98:	08010011 	.word	0x08010011
 800ff9c:	08010011 	.word	0x08010011
 800ffa0:	08010011 	.word	0x08010011
 800ffa4:	08010011 	.word	0x08010011
 800ffa8:	08010011 	.word	0x08010011
 800ffac:	08010011 	.word	0x08010011
 800ffb0:	08010011 	.word	0x08010011
 800ffb4:	08010011 	.word	0x08010011
 800ffb8:	08010011 	.word	0x08010011
 800ffbc:	08010011 	.word	0x08010011
 800ffc0:	08010011 	.word	0x08010011
 800ffc4:	08010011 	.word	0x08010011
 800ffc8:	08010011 	.word	0x08010011
 800ffcc:	08010011 	.word	0x08010011
 800ffd0:	08010011 	.word	0x08010011
 800ffd4:	08010011 	.word	0x08010011
 800ffd8:	08010011 	.word	0x08010011
 800ffdc:	08010011 	.word	0x08010011
 800ffe0:	08010011 	.word	0x08010011
 800ffe4:	08010011 	.word	0x08010011
 800ffe8:	08010011 	.word	0x08010011
 800ffec:	08010011 	.word	0x08010011
 800fff0:	08010011 	.word	0x08010011
 800fff4:	08010011 	.word	0x08010011
 800fff8:	08010011 	.word	0x08010011
 800fffc:	08010011 	.word	0x08010011
 8010000:	08010011 	.word	0x08010011
 8010004:	08010011 	.word	0x08010011
 8010008:	08010011 	.word	0x08010011
 801000c:	08010011 	.word	0x08010011
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010010:	bf00      	nop
  }

  return (USBD_OK);
 8010012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010014:	4618      	mov	r0, r3
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801002a:	6879      	ldr	r1, [r7, #4]
 801002c:	4805      	ldr	r0, [pc, #20]	@ (8010044 <CDC_Receive_FS+0x24>)
 801002e:	f7fb fd41 	bl	800bab4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010032:	4804      	ldr	r0, [pc, #16]	@ (8010044 <CDC_Receive_FS+0x24>)
 8010034:	f7fb fd9c 	bl	800bb70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	20006650 	.word	0x20006650

08010048 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	460b      	mov	r3, r1
 8010052:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010054:	2300      	movs	r3, #0
 8010056:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010058:	4b0d      	ldr	r3, [pc, #52]	@ (8010090 <CDC_Transmit_FS+0x48>)
 801005a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801005e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010066:	2b00      	cmp	r3, #0
 8010068:	d001      	beq.n	801006e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801006a:	2301      	movs	r3, #1
 801006c:	e00b      	b.n	8010086 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801006e:	887b      	ldrh	r3, [r7, #2]
 8010070:	461a      	mov	r2, r3
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	4806      	ldr	r0, [pc, #24]	@ (8010090 <CDC_Transmit_FS+0x48>)
 8010076:	f7fb fcfb 	bl	800ba70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801007a:	4805      	ldr	r0, [pc, #20]	@ (8010090 <CDC_Transmit_FS+0x48>)
 801007c:	f7fb fd38 	bl	800baf0 <USBD_CDC_TransmitPacket>
 8010080:	4603      	mov	r3, r0
 8010082:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010084:	7bfb      	ldrb	r3, [r7, #15]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	20006650 	.word	0x20006650

08010094 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010094:	b480      	push	{r7}
 8010096:	b087      	sub	sp, #28
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	4613      	mov	r3, r2
 80100a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	371c      	adds	r7, #28
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
	...

080100b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	6039      	str	r1, [r7, #0]
 80100c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	2212      	movs	r2, #18
 80100c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100ca:	4b03      	ldr	r3, [pc, #12]	@ (80100d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr
 80100d8:	200000cc 	.word	0x200000cc

080100dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	4603      	mov	r3, r0
 80100e4:	6039      	str	r1, [r7, #0]
 80100e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	2204      	movs	r2, #4
 80100ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100ee:	4b03      	ldr	r3, [pc, #12]	@ (80100fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	200000e0 	.word	0x200000e0

08010100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	4603      	mov	r3, r0
 8010108:	6039      	str	r1, [r7, #0]
 801010a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801010c:	79fb      	ldrb	r3, [r7, #7]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d105      	bne.n	801011e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010112:	683a      	ldr	r2, [r7, #0]
 8010114:	4907      	ldr	r1, [pc, #28]	@ (8010134 <USBD_FS_ProductStrDescriptor+0x34>)
 8010116:	4808      	ldr	r0, [pc, #32]	@ (8010138 <USBD_FS_ProductStrDescriptor+0x38>)
 8010118:	f7fc ff8c 	bl	800d034 <USBD_GetString>
 801011c:	e004      	b.n	8010128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801011e:	683a      	ldr	r2, [r7, #0]
 8010120:	4904      	ldr	r1, [pc, #16]	@ (8010134 <USBD_FS_ProductStrDescriptor+0x34>)
 8010122:	4805      	ldr	r0, [pc, #20]	@ (8010138 <USBD_FS_ProductStrDescriptor+0x38>)
 8010124:	f7fc ff86 	bl	800d034 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010128:	4b02      	ldr	r3, [pc, #8]	@ (8010134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801012a:	4618      	mov	r0, r3
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	2000792c 	.word	0x2000792c
 8010138:	08013898 	.word	0x08013898

0801013c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	4603      	mov	r3, r0
 8010144:	6039      	str	r1, [r7, #0]
 8010146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010148:	683a      	ldr	r2, [r7, #0]
 801014a:	4904      	ldr	r1, [pc, #16]	@ (801015c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801014c:	4804      	ldr	r0, [pc, #16]	@ (8010160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801014e:	f7fc ff71 	bl	800d034 <USBD_GetString>
  return USBD_StrDesc;
 8010152:	4b02      	ldr	r3, [pc, #8]	@ (801015c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010154:	4618      	mov	r0, r3
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	2000792c 	.word	0x2000792c
 8010160:	080138b0 	.word	0x080138b0

08010164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	4603      	mov	r3, r0
 801016c:	6039      	str	r1, [r7, #0]
 801016e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	221a      	movs	r2, #26
 8010174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010176:	f000 f843 	bl	8010200 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801017a:	4b02      	ldr	r3, [pc, #8]	@ (8010184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801017c:	4618      	mov	r0, r3
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	200000e4 	.word	0x200000e4

08010188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	4603      	mov	r3, r0
 8010190:	6039      	str	r1, [r7, #0]
 8010192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010194:	79fb      	ldrb	r3, [r7, #7]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d105      	bne.n	80101a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	4907      	ldr	r1, [pc, #28]	@ (80101bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801019e:	4808      	ldr	r0, [pc, #32]	@ (80101c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101a0:	f7fc ff48 	bl	800d034 <USBD_GetString>
 80101a4:	e004      	b.n	80101b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101a6:	683a      	ldr	r2, [r7, #0]
 80101a8:	4904      	ldr	r1, [pc, #16]	@ (80101bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80101aa:	4805      	ldr	r0, [pc, #20]	@ (80101c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101ac:	f7fc ff42 	bl	800d034 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101b0:	4b02      	ldr	r3, [pc, #8]	@ (80101bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	2000792c 	.word	0x2000792c
 80101c0:	080138c4 	.word	0x080138c4

080101c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4603      	mov	r3, r0
 80101cc:	6039      	str	r1, [r7, #0]
 80101ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101d0:	79fb      	ldrb	r3, [r7, #7]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d105      	bne.n	80101e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	4907      	ldr	r1, [pc, #28]	@ (80101f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101da:	4808      	ldr	r0, [pc, #32]	@ (80101fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101dc:	f7fc ff2a 	bl	800d034 <USBD_GetString>
 80101e0:	e004      	b.n	80101ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	4904      	ldr	r1, [pc, #16]	@ (80101f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101e6:	4805      	ldr	r0, [pc, #20]	@ (80101fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101e8:	f7fc ff24 	bl	800d034 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101ec:	4b02      	ldr	r3, [pc, #8]	@ (80101f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	2000792c 	.word	0x2000792c
 80101fc:	080138d0 	.word	0x080138d0

08010200 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010206:	4b0f      	ldr	r3, [pc, #60]	@ (8010244 <Get_SerialNum+0x44>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801020c:	4b0e      	ldr	r3, [pc, #56]	@ (8010248 <Get_SerialNum+0x48>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010212:	4b0e      	ldr	r3, [pc, #56]	@ (801024c <Get_SerialNum+0x4c>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4413      	add	r3, r2
 801021e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d009      	beq.n	801023a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010226:	2208      	movs	r2, #8
 8010228:	4909      	ldr	r1, [pc, #36]	@ (8010250 <Get_SerialNum+0x50>)
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f000 f814 	bl	8010258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010230:	2204      	movs	r2, #4
 8010232:	4908      	ldr	r1, [pc, #32]	@ (8010254 <Get_SerialNum+0x54>)
 8010234:	68b8      	ldr	r0, [r7, #8]
 8010236:	f000 f80f 	bl	8010258 <IntToUnicode>
  }
}
 801023a:	bf00      	nop
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	1fff7a10 	.word	0x1fff7a10
 8010248:	1fff7a14 	.word	0x1fff7a14
 801024c:	1fff7a18 	.word	0x1fff7a18
 8010250:	200000e6 	.word	0x200000e6
 8010254:	200000f6 	.word	0x200000f6

08010258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010258:	b480      	push	{r7}
 801025a:	b087      	sub	sp, #28
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	4613      	mov	r3, r2
 8010264:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010266:	2300      	movs	r3, #0
 8010268:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801026a:	2300      	movs	r3, #0
 801026c:	75fb      	strb	r3, [r7, #23]
 801026e:	e027      	b.n	80102c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	0f1b      	lsrs	r3, r3, #28
 8010274:	2b09      	cmp	r3, #9
 8010276:	d80b      	bhi.n	8010290 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	0f1b      	lsrs	r3, r3, #28
 801027c:	b2da      	uxtb	r2, r3
 801027e:	7dfb      	ldrb	r3, [r7, #23]
 8010280:	005b      	lsls	r3, r3, #1
 8010282:	4619      	mov	r1, r3
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	440b      	add	r3, r1
 8010288:	3230      	adds	r2, #48	@ 0x30
 801028a:	b2d2      	uxtb	r2, r2
 801028c:	701a      	strb	r2, [r3, #0]
 801028e:	e00a      	b.n	80102a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	0f1b      	lsrs	r3, r3, #28
 8010294:	b2da      	uxtb	r2, r3
 8010296:	7dfb      	ldrb	r3, [r7, #23]
 8010298:	005b      	lsls	r3, r3, #1
 801029a:	4619      	mov	r1, r3
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	440b      	add	r3, r1
 80102a0:	3237      	adds	r2, #55	@ 0x37
 80102a2:	b2d2      	uxtb	r2, r2
 80102a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	011b      	lsls	r3, r3, #4
 80102aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
 80102ae:	005b      	lsls	r3, r3, #1
 80102b0:	3301      	adds	r3, #1
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	4413      	add	r3, r2
 80102b6:	2200      	movs	r2, #0
 80102b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102ba:	7dfb      	ldrb	r3, [r7, #23]
 80102bc:	3301      	adds	r3, #1
 80102be:	75fb      	strb	r3, [r7, #23]
 80102c0:	7dfa      	ldrb	r2, [r7, #23]
 80102c2:	79fb      	ldrb	r3, [r7, #7]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d3d3      	bcc.n	8010270 <IntToUnicode+0x18>
  }
}
 80102c8:	bf00      	nop
 80102ca:	bf00      	nop
 80102cc:	371c      	adds	r7, #28
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
	...

080102d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b08a      	sub	sp, #40	@ 0x28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102e0:	f107 0314 	add.w	r3, r7, #20
 80102e4:	2200      	movs	r2, #0
 80102e6:	601a      	str	r2, [r3, #0]
 80102e8:	605a      	str	r2, [r3, #4]
 80102ea:	609a      	str	r2, [r3, #8]
 80102ec:	60da      	str	r2, [r3, #12]
 80102ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80102f8:	d13a      	bne.n	8010370 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102fa:	2300      	movs	r3, #0
 80102fc:	613b      	str	r3, [r7, #16]
 80102fe:	4b1e      	ldr	r3, [pc, #120]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 8010300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010302:	4a1d      	ldr	r2, [pc, #116]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 8010304:	f043 0301 	orr.w	r3, r3, #1
 8010308:	6313      	str	r3, [r2, #48]	@ 0x30
 801030a:	4b1b      	ldr	r3, [pc, #108]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 801030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	613b      	str	r3, [r7, #16]
 8010314:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010316:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801031a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801031c:	2302      	movs	r3, #2
 801031e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010320:	2300      	movs	r3, #0
 8010322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010324:	2303      	movs	r3, #3
 8010326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010328:	230a      	movs	r3, #10
 801032a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801032c:	f107 0314 	add.w	r3, r7, #20
 8010330:	4619      	mov	r1, r3
 8010332:	4812      	ldr	r0, [pc, #72]	@ (801037c <HAL_PCD_MspInit+0xa4>)
 8010334:	f7f3 fa84 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010338:	4b0f      	ldr	r3, [pc, #60]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 801033a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801033c:	4a0e      	ldr	r2, [pc, #56]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 801033e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010342:	6353      	str	r3, [r2, #52]	@ 0x34
 8010344:	2300      	movs	r3, #0
 8010346:	60fb      	str	r3, [r7, #12]
 8010348:	4b0b      	ldr	r3, [pc, #44]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 801034a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801034c:	4a0a      	ldr	r2, [pc, #40]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 801034e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010352:	6453      	str	r3, [r2, #68]	@ 0x44
 8010354:	4b08      	ldr	r3, [pc, #32]	@ (8010378 <HAL_PCD_MspInit+0xa0>)
 8010356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801035c:	60fb      	str	r3, [r7, #12]
 801035e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010360:	2200      	movs	r2, #0
 8010362:	2100      	movs	r1, #0
 8010364:	2043      	movs	r0, #67	@ 0x43
 8010366:	f7f2 fe88 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801036a:	2043      	movs	r0, #67	@ 0x43
 801036c:	f7f2 fea1 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010370:	bf00      	nop
 8010372:	3728      	adds	r7, #40	@ 0x28
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	40023800 	.word	0x40023800
 801037c:	40020000 	.word	0x40020000

08010380 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010394:	4619      	mov	r1, r3
 8010396:	4610      	mov	r0, r2
 8010398:	f7fb fcd3 	bl	800bd42 <USBD_LL_SetupStage>
}
 801039c:	bf00      	nop
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	460b      	mov	r3, r1
 80103ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103b6:	78fa      	ldrb	r2, [r7, #3]
 80103b8:	6879      	ldr	r1, [r7, #4]
 80103ba:	4613      	mov	r3, r2
 80103bc:	00db      	lsls	r3, r3, #3
 80103be:	4413      	add	r3, r2
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	440b      	add	r3, r1
 80103c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	78fb      	ldrb	r3, [r7, #3]
 80103cc:	4619      	mov	r1, r3
 80103ce:	f7fb fd0d 	bl	800bdec <USBD_LL_DataOutStage>
}
 80103d2:	bf00      	nop
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b082      	sub	sp, #8
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	460b      	mov	r3, r1
 80103e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103ec:	78fa      	ldrb	r2, [r7, #3]
 80103ee:	6879      	ldr	r1, [r7, #4]
 80103f0:	4613      	mov	r3, r2
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	4413      	add	r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	440b      	add	r3, r1
 80103fa:	3320      	adds	r3, #32
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	78fb      	ldrb	r3, [r7, #3]
 8010400:	4619      	mov	r1, r3
 8010402:	f7fb fdaf 	bl	800bf64 <USBD_LL_DataInStage>
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b082      	sub	sp, #8
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801041c:	4618      	mov	r0, r3
 801041e:	f7fb fef3 	bl	800c208 <USBD_LL_SOF>
}
 8010422:	bf00      	nop
 8010424:	3708      	adds	r7, #8
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b084      	sub	sp, #16
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010432:	2301      	movs	r3, #1
 8010434:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	79db      	ldrb	r3, [r3, #7]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d102      	bne.n	8010444 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801043e:	2300      	movs	r3, #0
 8010440:	73fb      	strb	r3, [r7, #15]
 8010442:	e008      	b.n	8010456 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	79db      	ldrb	r3, [r3, #7]
 8010448:	2b02      	cmp	r3, #2
 801044a:	d102      	bne.n	8010452 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801044c:	2301      	movs	r3, #1
 801044e:	73fb      	strb	r3, [r7, #15]
 8010450:	e001      	b.n	8010456 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010452:	f7f1 fea9 	bl	80021a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801045c:	7bfa      	ldrb	r2, [r7, #15]
 801045e:	4611      	mov	r1, r2
 8010460:	4618      	mov	r0, r3
 8010462:	f7fb fe8d 	bl	800c180 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801046c:	4618      	mov	r0, r3
 801046e:	f7fb fe34 	bl	800c0da <USBD_LL_Reset>
}
 8010472:	bf00      	nop
 8010474:	3710      	adds	r7, #16
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
	...

0801047c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801048a:	4618      	mov	r0, r3
 801048c:	f7fb fe88 	bl	800c1a0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	6812      	ldr	r2, [r2, #0]
 801049e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80104a2:	f043 0301 	orr.w	r3, r3, #1
 80104a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	7adb      	ldrb	r3, [r3, #11]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d005      	beq.n	80104bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80104b0:	4b04      	ldr	r3, [pc, #16]	@ (80104c4 <HAL_PCD_SuspendCallback+0x48>)
 80104b2:	691b      	ldr	r3, [r3, #16]
 80104b4:	4a03      	ldr	r2, [pc, #12]	@ (80104c4 <HAL_PCD_SuspendCallback+0x48>)
 80104b6:	f043 0306 	orr.w	r3, r3, #6
 80104ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80104bc:	bf00      	nop
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	e000ed00 	.word	0xe000ed00

080104c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fb fe7e 	bl	800c1d8 <USBD_LL_Resume>
}
 80104dc:	bf00      	nop
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	460b      	mov	r3, r1
 80104ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104f6:	78fa      	ldrb	r2, [r7, #3]
 80104f8:	4611      	mov	r1, r2
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fb fed6 	bl	800c2ac <USBD_LL_IsoOUTIncomplete>
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801051a:	78fa      	ldrb	r2, [r7, #3]
 801051c:	4611      	mov	r1, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f7fb fe92 	bl	800c248 <USBD_LL_IsoINIncomplete>
}
 8010524:	bf00      	nop
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801053a:	4618      	mov	r0, r3
 801053c:	f7fb fee8 	bl	800c310 <USBD_LL_DevConnected>
}
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010556:	4618      	mov	r0, r3
 8010558:	f7fb fee5 	bl	800c326 <USBD_LL_DevDisconnected>
}
 801055c:	bf00      	nop
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d13c      	bne.n	80105ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010574:	4a20      	ldr	r2, [pc, #128]	@ (80105f8 <USBD_LL_Init+0x94>)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a1e      	ldr	r2, [pc, #120]	@ (80105f8 <USBD_LL_Init+0x94>)
 8010580:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010584:	4b1c      	ldr	r3, [pc, #112]	@ (80105f8 <USBD_LL_Init+0x94>)
 8010586:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801058a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801058c:	4b1a      	ldr	r3, [pc, #104]	@ (80105f8 <USBD_LL_Init+0x94>)
 801058e:	2204      	movs	r2, #4
 8010590:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010592:	4b19      	ldr	r3, [pc, #100]	@ (80105f8 <USBD_LL_Init+0x94>)
 8010594:	2202      	movs	r2, #2
 8010596:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010598:	4b17      	ldr	r3, [pc, #92]	@ (80105f8 <USBD_LL_Init+0x94>)
 801059a:	2200      	movs	r2, #0
 801059c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801059e:	4b16      	ldr	r3, [pc, #88]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105a0:	2202      	movs	r2, #2
 80105a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80105a4:	4b14      	ldr	r3, [pc, #80]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80105aa:	4b13      	ldr	r3, [pc, #76]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105ac:	2200      	movs	r2, #0
 80105ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80105b0:	4b11      	ldr	r3, [pc, #68]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80105b6:	4b10      	ldr	r3, [pc, #64]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80105bc:	4b0e      	ldr	r3, [pc, #56]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105be:	2200      	movs	r2, #0
 80105c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80105c2:	480d      	ldr	r0, [pc, #52]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105c4:	f7f4 fb60 	bl	8004c88 <HAL_PCD_Init>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d001      	beq.n	80105d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80105ce:	f7f1 fdeb 	bl	80021a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80105d2:	2180      	movs	r1, #128	@ 0x80
 80105d4:	4808      	ldr	r0, [pc, #32]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105d6:	f7f5 fd8c 	bl	80060f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80105da:	2240      	movs	r2, #64	@ 0x40
 80105dc:	2100      	movs	r1, #0
 80105de:	4806      	ldr	r0, [pc, #24]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105e0:	f7f5 fd40 	bl	8006064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80105e4:	2280      	movs	r2, #128	@ 0x80
 80105e6:	2101      	movs	r1, #1
 80105e8:	4803      	ldr	r0, [pc, #12]	@ (80105f8 <USBD_LL_Init+0x94>)
 80105ea:	f7f5 fd3b 	bl	8006064 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3708      	adds	r7, #8
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	20007b2c 	.word	0x20007b2c

080105fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010604:	2300      	movs	r3, #0
 8010606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010608:	2300      	movs	r3, #0
 801060a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010612:	4618      	mov	r0, r3
 8010614:	f7f4 fc47 	bl	8004ea6 <HAL_PCD_Start>
 8010618:	4603      	mov	r3, r0
 801061a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801061c:	7bfb      	ldrb	r3, [r7, #15]
 801061e:	4618      	mov	r0, r3
 8010620:	f000 f942 	bl	80108a8 <USBD_Get_USB_Status>
 8010624:	4603      	mov	r3, r0
 8010626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010628:	7bbb      	ldrb	r3, [r7, #14]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3710      	adds	r7, #16
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b084      	sub	sp, #16
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
 801063a:	4608      	mov	r0, r1
 801063c:	4611      	mov	r1, r2
 801063e:	461a      	mov	r2, r3
 8010640:	4603      	mov	r3, r0
 8010642:	70fb      	strb	r3, [r7, #3]
 8010644:	460b      	mov	r3, r1
 8010646:	70bb      	strb	r3, [r7, #2]
 8010648:	4613      	mov	r3, r2
 801064a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801065a:	78bb      	ldrb	r3, [r7, #2]
 801065c:	883a      	ldrh	r2, [r7, #0]
 801065e:	78f9      	ldrb	r1, [r7, #3]
 8010660:	f7f5 f91b 	bl	800589a <HAL_PCD_EP_Open>
 8010664:	4603      	mov	r3, r0
 8010666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010668:	7bfb      	ldrb	r3, [r7, #15]
 801066a:	4618      	mov	r0, r3
 801066c:	f000 f91c 	bl	80108a8 <USBD_Get_USB_Status>
 8010670:	4603      	mov	r3, r0
 8010672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010674:	7bbb      	ldrb	r3, [r7, #14]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3710      	adds	r7, #16
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b084      	sub	sp, #16
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	460b      	mov	r3, r1
 8010688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801068a:	2300      	movs	r3, #0
 801068c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801068e:	2300      	movs	r3, #0
 8010690:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010698:	78fa      	ldrb	r2, [r7, #3]
 801069a:	4611      	mov	r1, r2
 801069c:	4618      	mov	r0, r3
 801069e:	f7f5 f966 	bl	800596e <HAL_PCD_EP_Close>
 80106a2:	4603      	mov	r3, r0
 80106a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 f8fd 	bl	80108a8 <USBD_Get_USB_Status>
 80106ae:	4603      	mov	r3, r0
 80106b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3710      	adds	r7, #16
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	460b      	mov	r3, r1
 80106c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106c8:	2300      	movs	r3, #0
 80106ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106cc:	2300      	movs	r3, #0
 80106ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106d6:	78fa      	ldrb	r2, [r7, #3]
 80106d8:	4611      	mov	r1, r2
 80106da:	4618      	mov	r0, r3
 80106dc:	f7f5 fa1e 	bl	8005b1c <HAL_PCD_EP_SetStall>
 80106e0:	4603      	mov	r3, r0
 80106e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106e4:	7bfb      	ldrb	r3, [r7, #15]
 80106e6:	4618      	mov	r0, r3
 80106e8:	f000 f8de 	bl	80108a8 <USBD_Get_USB_Status>
 80106ec:	4603      	mov	r3, r0
 80106ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	460b      	mov	r3, r1
 8010704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010706:	2300      	movs	r3, #0
 8010708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801070a:	2300      	movs	r3, #0
 801070c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010714:	78fa      	ldrb	r2, [r7, #3]
 8010716:	4611      	mov	r1, r2
 8010718:	4618      	mov	r0, r3
 801071a:	f7f5 fa62 	bl	8005be2 <HAL_PCD_EP_ClrStall>
 801071e:	4603      	mov	r3, r0
 8010720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010722:	7bfb      	ldrb	r3, [r7, #15]
 8010724:	4618      	mov	r0, r3
 8010726:	f000 f8bf 	bl	80108a8 <USBD_Get_USB_Status>
 801072a:	4603      	mov	r3, r0
 801072c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801072e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	460b      	mov	r3, r1
 8010742:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801074a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801074c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010750:	2b00      	cmp	r3, #0
 8010752:	da0b      	bge.n	801076c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010754:	78fb      	ldrb	r3, [r7, #3]
 8010756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801075a:	68f9      	ldr	r1, [r7, #12]
 801075c:	4613      	mov	r3, r2
 801075e:	00db      	lsls	r3, r3, #3
 8010760:	4413      	add	r3, r2
 8010762:	009b      	lsls	r3, r3, #2
 8010764:	440b      	add	r3, r1
 8010766:	3316      	adds	r3, #22
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	e00b      	b.n	8010784 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801076c:	78fb      	ldrb	r3, [r7, #3]
 801076e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010772:	68f9      	ldr	r1, [r7, #12]
 8010774:	4613      	mov	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	4413      	add	r3, r2
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	440b      	add	r3, r1
 801077e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010782:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010784:	4618      	mov	r0, r3
 8010786:	3714      	adds	r7, #20
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	460b      	mov	r3, r1
 801079a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107aa:	78fa      	ldrb	r2, [r7, #3]
 80107ac:	4611      	mov	r1, r2
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7f5 f84f 	bl	8005852 <HAL_PCD_SetAddress>
 80107b4:	4603      	mov	r3, r0
 80107b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107b8:	7bfb      	ldrb	r3, [r7, #15]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f000 f874 	bl	80108a8 <USBD_Get_USB_Status>
 80107c0:	4603      	mov	r3, r0
 80107c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b086      	sub	sp, #24
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	60f8      	str	r0, [r7, #12]
 80107d6:	607a      	str	r2, [r7, #4]
 80107d8:	603b      	str	r3, [r7, #0]
 80107da:	460b      	mov	r3, r1
 80107dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107de:	2300      	movs	r3, #0
 80107e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107e2:	2300      	movs	r3, #0
 80107e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80107ec:	7af9      	ldrb	r1, [r7, #11]
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	f7f5 f959 	bl	8005aa8 <HAL_PCD_EP_Transmit>
 80107f6:	4603      	mov	r3, r0
 80107f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107fa:	7dfb      	ldrb	r3, [r7, #23]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f000 f853 	bl	80108a8 <USBD_Get_USB_Status>
 8010802:	4603      	mov	r3, r0
 8010804:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010806:	7dbb      	ldrb	r3, [r7, #22]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b086      	sub	sp, #24
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	607a      	str	r2, [r7, #4]
 801081a:	603b      	str	r3, [r7, #0]
 801081c:	460b      	mov	r3, r1
 801081e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010824:	2300      	movs	r3, #0
 8010826:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801082e:	7af9      	ldrb	r1, [r7, #11]
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	f7f5 f8e5 	bl	8005a02 <HAL_PCD_EP_Receive>
 8010838:	4603      	mov	r3, r0
 801083a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801083c:	7dfb      	ldrb	r3, [r7, #23]
 801083e:	4618      	mov	r0, r3
 8010840:	f000 f832 	bl	80108a8 <USBD_Get_USB_Status>
 8010844:	4603      	mov	r3, r0
 8010846:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010848:	7dbb      	ldrb	r3, [r7, #22]
}
 801084a:	4618      	mov	r0, r3
 801084c:	3718      	adds	r7, #24
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}

08010852 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010852:	b580      	push	{r7, lr}
 8010854:	b082      	sub	sp, #8
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
 801085a:	460b      	mov	r3, r1
 801085c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010864:	78fa      	ldrb	r2, [r7, #3]
 8010866:	4611      	mov	r1, r2
 8010868:	4618      	mov	r0, r3
 801086a:	f7f5 f905 	bl	8005a78 <HAL_PCD_EP_GetRxCount>
 801086e:	4603      	mov	r3, r0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010878:	b480      	push	{r7}
 801087a:	b083      	sub	sp, #12
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010880:	4b03      	ldr	r3, [pc, #12]	@ (8010890 <USBD_static_malloc+0x18>)
}
 8010882:	4618      	mov	r0, r3
 8010884:	370c      	adds	r7, #12
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr
 801088e:	bf00      	nop
 8010890:	20008010 	.word	0x20008010

08010894 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]

}
 801089c:	bf00      	nop
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b085      	sub	sp, #20
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	4603      	mov	r3, r0
 80108b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	2b03      	cmp	r3, #3
 80108ba:	d817      	bhi.n	80108ec <USBD_Get_USB_Status+0x44>
 80108bc:	a201      	add	r2, pc, #4	@ (adr r2, 80108c4 <USBD_Get_USB_Status+0x1c>)
 80108be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c2:	bf00      	nop
 80108c4:	080108d5 	.word	0x080108d5
 80108c8:	080108db 	.word	0x080108db
 80108cc:	080108e1 	.word	0x080108e1
 80108d0:	080108e7 	.word	0x080108e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108d4:	2300      	movs	r3, #0
 80108d6:	73fb      	strb	r3, [r7, #15]
    break;
 80108d8:	e00b      	b.n	80108f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108da:	2303      	movs	r3, #3
 80108dc:	73fb      	strb	r3, [r7, #15]
    break;
 80108de:	e008      	b.n	80108f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108e0:	2301      	movs	r3, #1
 80108e2:	73fb      	strb	r3, [r7, #15]
    break;
 80108e4:	e005      	b.n	80108f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108e6:	2303      	movs	r3, #3
 80108e8:	73fb      	strb	r3, [r7, #15]
    break;
 80108ea:	e002      	b.n	80108f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80108ec:	2303      	movs	r3, #3
 80108ee:	73fb      	strb	r3, [r7, #15]
    break;
 80108f0:	bf00      	nop
  }
  return usb_status;
 80108f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <__cvt>:
 8010900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010904:	ec57 6b10 	vmov	r6, r7, d0
 8010908:	2f00      	cmp	r7, #0
 801090a:	460c      	mov	r4, r1
 801090c:	4619      	mov	r1, r3
 801090e:	463b      	mov	r3, r7
 8010910:	bfbb      	ittet	lt
 8010912:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010916:	461f      	movlt	r7, r3
 8010918:	2300      	movge	r3, #0
 801091a:	232d      	movlt	r3, #45	@ 0x2d
 801091c:	700b      	strb	r3, [r1, #0]
 801091e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010920:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010924:	4691      	mov	r9, r2
 8010926:	f023 0820 	bic.w	r8, r3, #32
 801092a:	bfbc      	itt	lt
 801092c:	4632      	movlt	r2, r6
 801092e:	4616      	movlt	r6, r2
 8010930:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010934:	d005      	beq.n	8010942 <__cvt+0x42>
 8010936:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801093a:	d100      	bne.n	801093e <__cvt+0x3e>
 801093c:	3401      	adds	r4, #1
 801093e:	2102      	movs	r1, #2
 8010940:	e000      	b.n	8010944 <__cvt+0x44>
 8010942:	2103      	movs	r1, #3
 8010944:	ab03      	add	r3, sp, #12
 8010946:	9301      	str	r3, [sp, #4]
 8010948:	ab02      	add	r3, sp, #8
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	ec47 6b10 	vmov	d0, r6, r7
 8010950:	4653      	mov	r3, sl
 8010952:	4622      	mov	r2, r4
 8010954:	f000 fea8 	bl	80116a8 <_dtoa_r>
 8010958:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801095c:	4605      	mov	r5, r0
 801095e:	d119      	bne.n	8010994 <__cvt+0x94>
 8010960:	f019 0f01 	tst.w	r9, #1
 8010964:	d00e      	beq.n	8010984 <__cvt+0x84>
 8010966:	eb00 0904 	add.w	r9, r0, r4
 801096a:	2200      	movs	r2, #0
 801096c:	2300      	movs	r3, #0
 801096e:	4630      	mov	r0, r6
 8010970:	4639      	mov	r1, r7
 8010972:	f7f0 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010976:	b108      	cbz	r0, 801097c <__cvt+0x7c>
 8010978:	f8cd 900c 	str.w	r9, [sp, #12]
 801097c:	2230      	movs	r2, #48	@ 0x30
 801097e:	9b03      	ldr	r3, [sp, #12]
 8010980:	454b      	cmp	r3, r9
 8010982:	d31e      	bcc.n	80109c2 <__cvt+0xc2>
 8010984:	9b03      	ldr	r3, [sp, #12]
 8010986:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010988:	1b5b      	subs	r3, r3, r5
 801098a:	4628      	mov	r0, r5
 801098c:	6013      	str	r3, [r2, #0]
 801098e:	b004      	add	sp, #16
 8010990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010994:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010998:	eb00 0904 	add.w	r9, r0, r4
 801099c:	d1e5      	bne.n	801096a <__cvt+0x6a>
 801099e:	7803      	ldrb	r3, [r0, #0]
 80109a0:	2b30      	cmp	r3, #48	@ 0x30
 80109a2:	d10a      	bne.n	80109ba <__cvt+0xba>
 80109a4:	2200      	movs	r2, #0
 80109a6:	2300      	movs	r3, #0
 80109a8:	4630      	mov	r0, r6
 80109aa:	4639      	mov	r1, r7
 80109ac:	f7f0 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80109b0:	b918      	cbnz	r0, 80109ba <__cvt+0xba>
 80109b2:	f1c4 0401 	rsb	r4, r4, #1
 80109b6:	f8ca 4000 	str.w	r4, [sl]
 80109ba:	f8da 3000 	ldr.w	r3, [sl]
 80109be:	4499      	add	r9, r3
 80109c0:	e7d3      	b.n	801096a <__cvt+0x6a>
 80109c2:	1c59      	adds	r1, r3, #1
 80109c4:	9103      	str	r1, [sp, #12]
 80109c6:	701a      	strb	r2, [r3, #0]
 80109c8:	e7d9      	b.n	801097e <__cvt+0x7e>

080109ca <__exponent>:
 80109ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109cc:	2900      	cmp	r1, #0
 80109ce:	bfba      	itte	lt
 80109d0:	4249      	neglt	r1, r1
 80109d2:	232d      	movlt	r3, #45	@ 0x2d
 80109d4:	232b      	movge	r3, #43	@ 0x2b
 80109d6:	2909      	cmp	r1, #9
 80109d8:	7002      	strb	r2, [r0, #0]
 80109da:	7043      	strb	r3, [r0, #1]
 80109dc:	dd29      	ble.n	8010a32 <__exponent+0x68>
 80109de:	f10d 0307 	add.w	r3, sp, #7
 80109e2:	461d      	mov	r5, r3
 80109e4:	270a      	movs	r7, #10
 80109e6:	461a      	mov	r2, r3
 80109e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80109ec:	fb07 1416 	mls	r4, r7, r6, r1
 80109f0:	3430      	adds	r4, #48	@ 0x30
 80109f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80109f6:	460c      	mov	r4, r1
 80109f8:	2c63      	cmp	r4, #99	@ 0x63
 80109fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80109fe:	4631      	mov	r1, r6
 8010a00:	dcf1      	bgt.n	80109e6 <__exponent+0x1c>
 8010a02:	3130      	adds	r1, #48	@ 0x30
 8010a04:	1e94      	subs	r4, r2, #2
 8010a06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010a0a:	1c41      	adds	r1, r0, #1
 8010a0c:	4623      	mov	r3, r4
 8010a0e:	42ab      	cmp	r3, r5
 8010a10:	d30a      	bcc.n	8010a28 <__exponent+0x5e>
 8010a12:	f10d 0309 	add.w	r3, sp, #9
 8010a16:	1a9b      	subs	r3, r3, r2
 8010a18:	42ac      	cmp	r4, r5
 8010a1a:	bf88      	it	hi
 8010a1c:	2300      	movhi	r3, #0
 8010a1e:	3302      	adds	r3, #2
 8010a20:	4403      	add	r3, r0
 8010a22:	1a18      	subs	r0, r3, r0
 8010a24:	b003      	add	sp, #12
 8010a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a28:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010a2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010a30:	e7ed      	b.n	8010a0e <__exponent+0x44>
 8010a32:	2330      	movs	r3, #48	@ 0x30
 8010a34:	3130      	adds	r1, #48	@ 0x30
 8010a36:	7083      	strb	r3, [r0, #2]
 8010a38:	70c1      	strb	r1, [r0, #3]
 8010a3a:	1d03      	adds	r3, r0, #4
 8010a3c:	e7f1      	b.n	8010a22 <__exponent+0x58>
	...

08010a40 <_printf_float>:
 8010a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a44:	b08d      	sub	sp, #52	@ 0x34
 8010a46:	460c      	mov	r4, r1
 8010a48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010a4c:	4616      	mov	r6, r2
 8010a4e:	461f      	mov	r7, r3
 8010a50:	4605      	mov	r5, r0
 8010a52:	f000 fd11 	bl	8011478 <_localeconv_r>
 8010a56:	6803      	ldr	r3, [r0, #0]
 8010a58:	9304      	str	r3, [sp, #16]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7ef fc08 	bl	8000270 <strlen>
 8010a60:	2300      	movs	r3, #0
 8010a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a64:	f8d8 3000 	ldr.w	r3, [r8]
 8010a68:	9005      	str	r0, [sp, #20]
 8010a6a:	3307      	adds	r3, #7
 8010a6c:	f023 0307 	bic.w	r3, r3, #7
 8010a70:	f103 0208 	add.w	r2, r3, #8
 8010a74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010a78:	f8d4 b000 	ldr.w	fp, [r4]
 8010a7c:	f8c8 2000 	str.w	r2, [r8]
 8010a80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010a88:	9307      	str	r3, [sp, #28]
 8010a8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8010a8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a96:	4b9c      	ldr	r3, [pc, #624]	@ (8010d08 <_printf_float+0x2c8>)
 8010a98:	f04f 32ff 	mov.w	r2, #4294967295
 8010a9c:	f7f0 f846 	bl	8000b2c <__aeabi_dcmpun>
 8010aa0:	bb70      	cbnz	r0, 8010b00 <_printf_float+0xc0>
 8010aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010aa6:	4b98      	ldr	r3, [pc, #608]	@ (8010d08 <_printf_float+0x2c8>)
 8010aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8010aac:	f7f0 f820 	bl	8000af0 <__aeabi_dcmple>
 8010ab0:	bb30      	cbnz	r0, 8010b00 <_printf_float+0xc0>
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	4640      	mov	r0, r8
 8010ab8:	4649      	mov	r1, r9
 8010aba:	f7f0 f80f 	bl	8000adc <__aeabi_dcmplt>
 8010abe:	b110      	cbz	r0, 8010ac6 <_printf_float+0x86>
 8010ac0:	232d      	movs	r3, #45	@ 0x2d
 8010ac2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ac6:	4a91      	ldr	r2, [pc, #580]	@ (8010d0c <_printf_float+0x2cc>)
 8010ac8:	4b91      	ldr	r3, [pc, #580]	@ (8010d10 <_printf_float+0x2d0>)
 8010aca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010ace:	bf8c      	ite	hi
 8010ad0:	4690      	movhi	r8, r2
 8010ad2:	4698      	movls	r8, r3
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	6123      	str	r3, [r4, #16]
 8010ad8:	f02b 0304 	bic.w	r3, fp, #4
 8010adc:	6023      	str	r3, [r4, #0]
 8010ade:	f04f 0900 	mov.w	r9, #0
 8010ae2:	9700      	str	r7, [sp, #0]
 8010ae4:	4633      	mov	r3, r6
 8010ae6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010ae8:	4621      	mov	r1, r4
 8010aea:	4628      	mov	r0, r5
 8010aec:	f000 f9d2 	bl	8010e94 <_printf_common>
 8010af0:	3001      	adds	r0, #1
 8010af2:	f040 808d 	bne.w	8010c10 <_printf_float+0x1d0>
 8010af6:	f04f 30ff 	mov.w	r0, #4294967295
 8010afa:	b00d      	add	sp, #52	@ 0x34
 8010afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b00:	4642      	mov	r2, r8
 8010b02:	464b      	mov	r3, r9
 8010b04:	4640      	mov	r0, r8
 8010b06:	4649      	mov	r1, r9
 8010b08:	f7f0 f810 	bl	8000b2c <__aeabi_dcmpun>
 8010b0c:	b140      	cbz	r0, 8010b20 <_printf_float+0xe0>
 8010b0e:	464b      	mov	r3, r9
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	bfbc      	itt	lt
 8010b14:	232d      	movlt	r3, #45	@ 0x2d
 8010b16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8010d14 <_printf_float+0x2d4>)
 8010b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8010d18 <_printf_float+0x2d8>)
 8010b1e:	e7d4      	b.n	8010aca <_printf_float+0x8a>
 8010b20:	6863      	ldr	r3, [r4, #4]
 8010b22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010b26:	9206      	str	r2, [sp, #24]
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	d13b      	bne.n	8010ba4 <_printf_float+0x164>
 8010b2c:	2306      	movs	r3, #6
 8010b2e:	6063      	str	r3, [r4, #4]
 8010b30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010b34:	2300      	movs	r3, #0
 8010b36:	6022      	str	r2, [r4, #0]
 8010b38:	9303      	str	r3, [sp, #12]
 8010b3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8010b3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010b40:	ab09      	add	r3, sp, #36	@ 0x24
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	6861      	ldr	r1, [r4, #4]
 8010b46:	ec49 8b10 	vmov	d0, r8, r9
 8010b4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f7ff fed6 	bl	8010900 <__cvt>
 8010b54:	9b06      	ldr	r3, [sp, #24]
 8010b56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b58:	2b47      	cmp	r3, #71	@ 0x47
 8010b5a:	4680      	mov	r8, r0
 8010b5c:	d129      	bne.n	8010bb2 <_printf_float+0x172>
 8010b5e:	1cc8      	adds	r0, r1, #3
 8010b60:	db02      	blt.n	8010b68 <_printf_float+0x128>
 8010b62:	6863      	ldr	r3, [r4, #4]
 8010b64:	4299      	cmp	r1, r3
 8010b66:	dd41      	ble.n	8010bec <_printf_float+0x1ac>
 8010b68:	f1aa 0a02 	sub.w	sl, sl, #2
 8010b6c:	fa5f fa8a 	uxtb.w	sl, sl
 8010b70:	3901      	subs	r1, #1
 8010b72:	4652      	mov	r2, sl
 8010b74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010b78:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b7a:	f7ff ff26 	bl	80109ca <__exponent>
 8010b7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b80:	1813      	adds	r3, r2, r0
 8010b82:	2a01      	cmp	r2, #1
 8010b84:	4681      	mov	r9, r0
 8010b86:	6123      	str	r3, [r4, #16]
 8010b88:	dc02      	bgt.n	8010b90 <_printf_float+0x150>
 8010b8a:	6822      	ldr	r2, [r4, #0]
 8010b8c:	07d2      	lsls	r2, r2, #31
 8010b8e:	d501      	bpl.n	8010b94 <_printf_float+0x154>
 8010b90:	3301      	adds	r3, #1
 8010b92:	6123      	str	r3, [r4, #16]
 8010b94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d0a2      	beq.n	8010ae2 <_printf_float+0xa2>
 8010b9c:	232d      	movs	r3, #45	@ 0x2d
 8010b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ba2:	e79e      	b.n	8010ae2 <_printf_float+0xa2>
 8010ba4:	9a06      	ldr	r2, [sp, #24]
 8010ba6:	2a47      	cmp	r2, #71	@ 0x47
 8010ba8:	d1c2      	bne.n	8010b30 <_printf_float+0xf0>
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d1c0      	bne.n	8010b30 <_printf_float+0xf0>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e7bd      	b.n	8010b2e <_printf_float+0xee>
 8010bb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010bb6:	d9db      	bls.n	8010b70 <_printf_float+0x130>
 8010bb8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010bbc:	d118      	bne.n	8010bf0 <_printf_float+0x1b0>
 8010bbe:	2900      	cmp	r1, #0
 8010bc0:	6863      	ldr	r3, [r4, #4]
 8010bc2:	dd0b      	ble.n	8010bdc <_printf_float+0x19c>
 8010bc4:	6121      	str	r1, [r4, #16]
 8010bc6:	b913      	cbnz	r3, 8010bce <_printf_float+0x18e>
 8010bc8:	6822      	ldr	r2, [r4, #0]
 8010bca:	07d0      	lsls	r0, r2, #31
 8010bcc:	d502      	bpl.n	8010bd4 <_printf_float+0x194>
 8010bce:	3301      	adds	r3, #1
 8010bd0:	440b      	add	r3, r1
 8010bd2:	6123      	str	r3, [r4, #16]
 8010bd4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010bd6:	f04f 0900 	mov.w	r9, #0
 8010bda:	e7db      	b.n	8010b94 <_printf_float+0x154>
 8010bdc:	b913      	cbnz	r3, 8010be4 <_printf_float+0x1a4>
 8010bde:	6822      	ldr	r2, [r4, #0]
 8010be0:	07d2      	lsls	r2, r2, #31
 8010be2:	d501      	bpl.n	8010be8 <_printf_float+0x1a8>
 8010be4:	3302      	adds	r3, #2
 8010be6:	e7f4      	b.n	8010bd2 <_printf_float+0x192>
 8010be8:	2301      	movs	r3, #1
 8010bea:	e7f2      	b.n	8010bd2 <_printf_float+0x192>
 8010bec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bf2:	4299      	cmp	r1, r3
 8010bf4:	db05      	blt.n	8010c02 <_printf_float+0x1c2>
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	6121      	str	r1, [r4, #16]
 8010bfa:	07d8      	lsls	r0, r3, #31
 8010bfc:	d5ea      	bpl.n	8010bd4 <_printf_float+0x194>
 8010bfe:	1c4b      	adds	r3, r1, #1
 8010c00:	e7e7      	b.n	8010bd2 <_printf_float+0x192>
 8010c02:	2900      	cmp	r1, #0
 8010c04:	bfd4      	ite	le
 8010c06:	f1c1 0202 	rsble	r2, r1, #2
 8010c0a:	2201      	movgt	r2, #1
 8010c0c:	4413      	add	r3, r2
 8010c0e:	e7e0      	b.n	8010bd2 <_printf_float+0x192>
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	055a      	lsls	r2, r3, #21
 8010c14:	d407      	bmi.n	8010c26 <_printf_float+0x1e6>
 8010c16:	6923      	ldr	r3, [r4, #16]
 8010c18:	4642      	mov	r2, r8
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	47b8      	blx	r7
 8010c20:	3001      	adds	r0, #1
 8010c22:	d12b      	bne.n	8010c7c <_printf_float+0x23c>
 8010c24:	e767      	b.n	8010af6 <_printf_float+0xb6>
 8010c26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010c2a:	f240 80dd 	bls.w	8010de8 <_printf_float+0x3a8>
 8010c2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010c32:	2200      	movs	r2, #0
 8010c34:	2300      	movs	r3, #0
 8010c36:	f7ef ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d033      	beq.n	8010ca6 <_printf_float+0x266>
 8010c3e:	4a37      	ldr	r2, [pc, #220]	@ (8010d1c <_printf_float+0x2dc>)
 8010c40:	2301      	movs	r3, #1
 8010c42:	4631      	mov	r1, r6
 8010c44:	4628      	mov	r0, r5
 8010c46:	47b8      	blx	r7
 8010c48:	3001      	adds	r0, #1
 8010c4a:	f43f af54 	beq.w	8010af6 <_printf_float+0xb6>
 8010c4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010c52:	4543      	cmp	r3, r8
 8010c54:	db02      	blt.n	8010c5c <_printf_float+0x21c>
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	07d8      	lsls	r0, r3, #31
 8010c5a:	d50f      	bpl.n	8010c7c <_printf_float+0x23c>
 8010c5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c60:	4631      	mov	r1, r6
 8010c62:	4628      	mov	r0, r5
 8010c64:	47b8      	blx	r7
 8010c66:	3001      	adds	r0, #1
 8010c68:	f43f af45 	beq.w	8010af6 <_printf_float+0xb6>
 8010c6c:	f04f 0900 	mov.w	r9, #0
 8010c70:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c74:	f104 0a1a 	add.w	sl, r4, #26
 8010c78:	45c8      	cmp	r8, r9
 8010c7a:	dc09      	bgt.n	8010c90 <_printf_float+0x250>
 8010c7c:	6823      	ldr	r3, [r4, #0]
 8010c7e:	079b      	lsls	r3, r3, #30
 8010c80:	f100 8103 	bmi.w	8010e8a <_printf_float+0x44a>
 8010c84:	68e0      	ldr	r0, [r4, #12]
 8010c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c88:	4298      	cmp	r0, r3
 8010c8a:	bfb8      	it	lt
 8010c8c:	4618      	movlt	r0, r3
 8010c8e:	e734      	b.n	8010afa <_printf_float+0xba>
 8010c90:	2301      	movs	r3, #1
 8010c92:	4652      	mov	r2, sl
 8010c94:	4631      	mov	r1, r6
 8010c96:	4628      	mov	r0, r5
 8010c98:	47b8      	blx	r7
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	f43f af2b 	beq.w	8010af6 <_printf_float+0xb6>
 8010ca0:	f109 0901 	add.w	r9, r9, #1
 8010ca4:	e7e8      	b.n	8010c78 <_printf_float+0x238>
 8010ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dc39      	bgt.n	8010d20 <_printf_float+0x2e0>
 8010cac:	4a1b      	ldr	r2, [pc, #108]	@ (8010d1c <_printf_float+0x2dc>)
 8010cae:	2301      	movs	r3, #1
 8010cb0:	4631      	mov	r1, r6
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	47b8      	blx	r7
 8010cb6:	3001      	adds	r0, #1
 8010cb8:	f43f af1d 	beq.w	8010af6 <_printf_float+0xb6>
 8010cbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010cc0:	ea59 0303 	orrs.w	r3, r9, r3
 8010cc4:	d102      	bne.n	8010ccc <_printf_float+0x28c>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	07d9      	lsls	r1, r3, #31
 8010cca:	d5d7      	bpl.n	8010c7c <_printf_float+0x23c>
 8010ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cd0:	4631      	mov	r1, r6
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	47b8      	blx	r7
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	f43f af0d 	beq.w	8010af6 <_printf_float+0xb6>
 8010cdc:	f04f 0a00 	mov.w	sl, #0
 8010ce0:	f104 0b1a 	add.w	fp, r4, #26
 8010ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ce6:	425b      	negs	r3, r3
 8010ce8:	4553      	cmp	r3, sl
 8010cea:	dc01      	bgt.n	8010cf0 <_printf_float+0x2b0>
 8010cec:	464b      	mov	r3, r9
 8010cee:	e793      	b.n	8010c18 <_printf_float+0x1d8>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	465a      	mov	r2, fp
 8010cf4:	4631      	mov	r1, r6
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	47b8      	blx	r7
 8010cfa:	3001      	adds	r0, #1
 8010cfc:	f43f aefb 	beq.w	8010af6 <_printf_float+0xb6>
 8010d00:	f10a 0a01 	add.w	sl, sl, #1
 8010d04:	e7ee      	b.n	8010ce4 <_printf_float+0x2a4>
 8010d06:	bf00      	nop
 8010d08:	7fefffff 	.word	0x7fefffff
 8010d0c:	08013998 	.word	0x08013998
 8010d10:	08013994 	.word	0x08013994
 8010d14:	080139a0 	.word	0x080139a0
 8010d18:	0801399c 	.word	0x0801399c
 8010d1c:	080139a4 	.word	0x080139a4
 8010d20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d26:	4553      	cmp	r3, sl
 8010d28:	bfa8      	it	ge
 8010d2a:	4653      	movge	r3, sl
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	4699      	mov	r9, r3
 8010d30:	dc36      	bgt.n	8010da0 <_printf_float+0x360>
 8010d32:	f04f 0b00 	mov.w	fp, #0
 8010d36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d3a:	f104 021a 	add.w	r2, r4, #26
 8010d3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d40:	9306      	str	r3, [sp, #24]
 8010d42:	eba3 0309 	sub.w	r3, r3, r9
 8010d46:	455b      	cmp	r3, fp
 8010d48:	dc31      	bgt.n	8010dae <_printf_float+0x36e>
 8010d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d4c:	459a      	cmp	sl, r3
 8010d4e:	dc3a      	bgt.n	8010dc6 <_printf_float+0x386>
 8010d50:	6823      	ldr	r3, [r4, #0]
 8010d52:	07da      	lsls	r2, r3, #31
 8010d54:	d437      	bmi.n	8010dc6 <_printf_float+0x386>
 8010d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d58:	ebaa 0903 	sub.w	r9, sl, r3
 8010d5c:	9b06      	ldr	r3, [sp, #24]
 8010d5e:	ebaa 0303 	sub.w	r3, sl, r3
 8010d62:	4599      	cmp	r9, r3
 8010d64:	bfa8      	it	ge
 8010d66:	4699      	movge	r9, r3
 8010d68:	f1b9 0f00 	cmp.w	r9, #0
 8010d6c:	dc33      	bgt.n	8010dd6 <_printf_float+0x396>
 8010d6e:	f04f 0800 	mov.w	r8, #0
 8010d72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d76:	f104 0b1a 	add.w	fp, r4, #26
 8010d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d7c:	ebaa 0303 	sub.w	r3, sl, r3
 8010d80:	eba3 0309 	sub.w	r3, r3, r9
 8010d84:	4543      	cmp	r3, r8
 8010d86:	f77f af79 	ble.w	8010c7c <_printf_float+0x23c>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	465a      	mov	r2, fp
 8010d8e:	4631      	mov	r1, r6
 8010d90:	4628      	mov	r0, r5
 8010d92:	47b8      	blx	r7
 8010d94:	3001      	adds	r0, #1
 8010d96:	f43f aeae 	beq.w	8010af6 <_printf_float+0xb6>
 8010d9a:	f108 0801 	add.w	r8, r8, #1
 8010d9e:	e7ec      	b.n	8010d7a <_printf_float+0x33a>
 8010da0:	4642      	mov	r2, r8
 8010da2:	4631      	mov	r1, r6
 8010da4:	4628      	mov	r0, r5
 8010da6:	47b8      	blx	r7
 8010da8:	3001      	adds	r0, #1
 8010daa:	d1c2      	bne.n	8010d32 <_printf_float+0x2f2>
 8010dac:	e6a3      	b.n	8010af6 <_printf_float+0xb6>
 8010dae:	2301      	movs	r3, #1
 8010db0:	4631      	mov	r1, r6
 8010db2:	4628      	mov	r0, r5
 8010db4:	9206      	str	r2, [sp, #24]
 8010db6:	47b8      	blx	r7
 8010db8:	3001      	adds	r0, #1
 8010dba:	f43f ae9c 	beq.w	8010af6 <_printf_float+0xb6>
 8010dbe:	9a06      	ldr	r2, [sp, #24]
 8010dc0:	f10b 0b01 	add.w	fp, fp, #1
 8010dc4:	e7bb      	b.n	8010d3e <_printf_float+0x2fe>
 8010dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dca:	4631      	mov	r1, r6
 8010dcc:	4628      	mov	r0, r5
 8010dce:	47b8      	blx	r7
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	d1c0      	bne.n	8010d56 <_printf_float+0x316>
 8010dd4:	e68f      	b.n	8010af6 <_printf_float+0xb6>
 8010dd6:	9a06      	ldr	r2, [sp, #24]
 8010dd8:	464b      	mov	r3, r9
 8010dda:	4442      	add	r2, r8
 8010ddc:	4631      	mov	r1, r6
 8010dde:	4628      	mov	r0, r5
 8010de0:	47b8      	blx	r7
 8010de2:	3001      	adds	r0, #1
 8010de4:	d1c3      	bne.n	8010d6e <_printf_float+0x32e>
 8010de6:	e686      	b.n	8010af6 <_printf_float+0xb6>
 8010de8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010dec:	f1ba 0f01 	cmp.w	sl, #1
 8010df0:	dc01      	bgt.n	8010df6 <_printf_float+0x3b6>
 8010df2:	07db      	lsls	r3, r3, #31
 8010df4:	d536      	bpl.n	8010e64 <_printf_float+0x424>
 8010df6:	2301      	movs	r3, #1
 8010df8:	4642      	mov	r2, r8
 8010dfa:	4631      	mov	r1, r6
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	47b8      	blx	r7
 8010e00:	3001      	adds	r0, #1
 8010e02:	f43f ae78 	beq.w	8010af6 <_printf_float+0xb6>
 8010e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	47b8      	blx	r7
 8010e10:	3001      	adds	r0, #1
 8010e12:	f43f ae70 	beq.w	8010af6 <_printf_float+0xb6>
 8010e16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e22:	f7ef fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e26:	b9c0      	cbnz	r0, 8010e5a <_printf_float+0x41a>
 8010e28:	4653      	mov	r3, sl
 8010e2a:	f108 0201 	add.w	r2, r8, #1
 8010e2e:	4631      	mov	r1, r6
 8010e30:	4628      	mov	r0, r5
 8010e32:	47b8      	blx	r7
 8010e34:	3001      	adds	r0, #1
 8010e36:	d10c      	bne.n	8010e52 <_printf_float+0x412>
 8010e38:	e65d      	b.n	8010af6 <_printf_float+0xb6>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	465a      	mov	r2, fp
 8010e3e:	4631      	mov	r1, r6
 8010e40:	4628      	mov	r0, r5
 8010e42:	47b8      	blx	r7
 8010e44:	3001      	adds	r0, #1
 8010e46:	f43f ae56 	beq.w	8010af6 <_printf_float+0xb6>
 8010e4a:	f108 0801 	add.w	r8, r8, #1
 8010e4e:	45d0      	cmp	r8, sl
 8010e50:	dbf3      	blt.n	8010e3a <_printf_float+0x3fa>
 8010e52:	464b      	mov	r3, r9
 8010e54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010e58:	e6df      	b.n	8010c1a <_printf_float+0x1da>
 8010e5a:	f04f 0800 	mov.w	r8, #0
 8010e5e:	f104 0b1a 	add.w	fp, r4, #26
 8010e62:	e7f4      	b.n	8010e4e <_printf_float+0x40e>
 8010e64:	2301      	movs	r3, #1
 8010e66:	4642      	mov	r2, r8
 8010e68:	e7e1      	b.n	8010e2e <_printf_float+0x3ee>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	464a      	mov	r2, r9
 8010e6e:	4631      	mov	r1, r6
 8010e70:	4628      	mov	r0, r5
 8010e72:	47b8      	blx	r7
 8010e74:	3001      	adds	r0, #1
 8010e76:	f43f ae3e 	beq.w	8010af6 <_printf_float+0xb6>
 8010e7a:	f108 0801 	add.w	r8, r8, #1
 8010e7e:	68e3      	ldr	r3, [r4, #12]
 8010e80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e82:	1a5b      	subs	r3, r3, r1
 8010e84:	4543      	cmp	r3, r8
 8010e86:	dcf0      	bgt.n	8010e6a <_printf_float+0x42a>
 8010e88:	e6fc      	b.n	8010c84 <_printf_float+0x244>
 8010e8a:	f04f 0800 	mov.w	r8, #0
 8010e8e:	f104 0919 	add.w	r9, r4, #25
 8010e92:	e7f4      	b.n	8010e7e <_printf_float+0x43e>

08010e94 <_printf_common>:
 8010e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e98:	4616      	mov	r6, r2
 8010e9a:	4698      	mov	r8, r3
 8010e9c:	688a      	ldr	r2, [r1, #8]
 8010e9e:	690b      	ldr	r3, [r1, #16]
 8010ea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	bfb8      	it	lt
 8010ea8:	4613      	movlt	r3, r2
 8010eaa:	6033      	str	r3, [r6, #0]
 8010eac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010eb0:	4607      	mov	r7, r0
 8010eb2:	460c      	mov	r4, r1
 8010eb4:	b10a      	cbz	r2, 8010eba <_printf_common+0x26>
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	6033      	str	r3, [r6, #0]
 8010eba:	6823      	ldr	r3, [r4, #0]
 8010ebc:	0699      	lsls	r1, r3, #26
 8010ebe:	bf42      	ittt	mi
 8010ec0:	6833      	ldrmi	r3, [r6, #0]
 8010ec2:	3302      	addmi	r3, #2
 8010ec4:	6033      	strmi	r3, [r6, #0]
 8010ec6:	6825      	ldr	r5, [r4, #0]
 8010ec8:	f015 0506 	ands.w	r5, r5, #6
 8010ecc:	d106      	bne.n	8010edc <_printf_common+0x48>
 8010ece:	f104 0a19 	add.w	sl, r4, #25
 8010ed2:	68e3      	ldr	r3, [r4, #12]
 8010ed4:	6832      	ldr	r2, [r6, #0]
 8010ed6:	1a9b      	subs	r3, r3, r2
 8010ed8:	42ab      	cmp	r3, r5
 8010eda:	dc26      	bgt.n	8010f2a <_printf_common+0x96>
 8010edc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010ee0:	6822      	ldr	r2, [r4, #0]
 8010ee2:	3b00      	subs	r3, #0
 8010ee4:	bf18      	it	ne
 8010ee6:	2301      	movne	r3, #1
 8010ee8:	0692      	lsls	r2, r2, #26
 8010eea:	d42b      	bmi.n	8010f44 <_printf_common+0xb0>
 8010eec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ef0:	4641      	mov	r1, r8
 8010ef2:	4638      	mov	r0, r7
 8010ef4:	47c8      	blx	r9
 8010ef6:	3001      	adds	r0, #1
 8010ef8:	d01e      	beq.n	8010f38 <_printf_common+0xa4>
 8010efa:	6823      	ldr	r3, [r4, #0]
 8010efc:	6922      	ldr	r2, [r4, #16]
 8010efe:	f003 0306 	and.w	r3, r3, #6
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	bf02      	ittt	eq
 8010f06:	68e5      	ldreq	r5, [r4, #12]
 8010f08:	6833      	ldreq	r3, [r6, #0]
 8010f0a:	1aed      	subeq	r5, r5, r3
 8010f0c:	68a3      	ldr	r3, [r4, #8]
 8010f0e:	bf0c      	ite	eq
 8010f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f14:	2500      	movne	r5, #0
 8010f16:	4293      	cmp	r3, r2
 8010f18:	bfc4      	itt	gt
 8010f1a:	1a9b      	subgt	r3, r3, r2
 8010f1c:	18ed      	addgt	r5, r5, r3
 8010f1e:	2600      	movs	r6, #0
 8010f20:	341a      	adds	r4, #26
 8010f22:	42b5      	cmp	r5, r6
 8010f24:	d11a      	bne.n	8010f5c <_printf_common+0xc8>
 8010f26:	2000      	movs	r0, #0
 8010f28:	e008      	b.n	8010f3c <_printf_common+0xa8>
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	4652      	mov	r2, sl
 8010f2e:	4641      	mov	r1, r8
 8010f30:	4638      	mov	r0, r7
 8010f32:	47c8      	blx	r9
 8010f34:	3001      	adds	r0, #1
 8010f36:	d103      	bne.n	8010f40 <_printf_common+0xac>
 8010f38:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f40:	3501      	adds	r5, #1
 8010f42:	e7c6      	b.n	8010ed2 <_printf_common+0x3e>
 8010f44:	18e1      	adds	r1, r4, r3
 8010f46:	1c5a      	adds	r2, r3, #1
 8010f48:	2030      	movs	r0, #48	@ 0x30
 8010f4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f4e:	4422      	add	r2, r4
 8010f50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f58:	3302      	adds	r3, #2
 8010f5a:	e7c7      	b.n	8010eec <_printf_common+0x58>
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	4622      	mov	r2, r4
 8010f60:	4641      	mov	r1, r8
 8010f62:	4638      	mov	r0, r7
 8010f64:	47c8      	blx	r9
 8010f66:	3001      	adds	r0, #1
 8010f68:	d0e6      	beq.n	8010f38 <_printf_common+0xa4>
 8010f6a:	3601      	adds	r6, #1
 8010f6c:	e7d9      	b.n	8010f22 <_printf_common+0x8e>
	...

08010f70 <_printf_i>:
 8010f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f74:	7e0f      	ldrb	r7, [r1, #24]
 8010f76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f78:	2f78      	cmp	r7, #120	@ 0x78
 8010f7a:	4691      	mov	r9, r2
 8010f7c:	4680      	mov	r8, r0
 8010f7e:	460c      	mov	r4, r1
 8010f80:	469a      	mov	sl, r3
 8010f82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f86:	d807      	bhi.n	8010f98 <_printf_i+0x28>
 8010f88:	2f62      	cmp	r7, #98	@ 0x62
 8010f8a:	d80a      	bhi.n	8010fa2 <_printf_i+0x32>
 8010f8c:	2f00      	cmp	r7, #0
 8010f8e:	f000 80d1 	beq.w	8011134 <_printf_i+0x1c4>
 8010f92:	2f58      	cmp	r7, #88	@ 0x58
 8010f94:	f000 80b8 	beq.w	8011108 <_printf_i+0x198>
 8010f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010fa0:	e03a      	b.n	8011018 <_printf_i+0xa8>
 8010fa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010fa6:	2b15      	cmp	r3, #21
 8010fa8:	d8f6      	bhi.n	8010f98 <_printf_i+0x28>
 8010faa:	a101      	add	r1, pc, #4	@ (adr r1, 8010fb0 <_printf_i+0x40>)
 8010fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fb0:	08011009 	.word	0x08011009
 8010fb4:	0801101d 	.word	0x0801101d
 8010fb8:	08010f99 	.word	0x08010f99
 8010fbc:	08010f99 	.word	0x08010f99
 8010fc0:	08010f99 	.word	0x08010f99
 8010fc4:	08010f99 	.word	0x08010f99
 8010fc8:	0801101d 	.word	0x0801101d
 8010fcc:	08010f99 	.word	0x08010f99
 8010fd0:	08010f99 	.word	0x08010f99
 8010fd4:	08010f99 	.word	0x08010f99
 8010fd8:	08010f99 	.word	0x08010f99
 8010fdc:	0801111b 	.word	0x0801111b
 8010fe0:	08011047 	.word	0x08011047
 8010fe4:	080110d5 	.word	0x080110d5
 8010fe8:	08010f99 	.word	0x08010f99
 8010fec:	08010f99 	.word	0x08010f99
 8010ff0:	0801113d 	.word	0x0801113d
 8010ff4:	08010f99 	.word	0x08010f99
 8010ff8:	08011047 	.word	0x08011047
 8010ffc:	08010f99 	.word	0x08010f99
 8011000:	08010f99 	.word	0x08010f99
 8011004:	080110dd 	.word	0x080110dd
 8011008:	6833      	ldr	r3, [r6, #0]
 801100a:	1d1a      	adds	r2, r3, #4
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	6032      	str	r2, [r6, #0]
 8011010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011014:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011018:	2301      	movs	r3, #1
 801101a:	e09c      	b.n	8011156 <_printf_i+0x1e6>
 801101c:	6833      	ldr	r3, [r6, #0]
 801101e:	6820      	ldr	r0, [r4, #0]
 8011020:	1d19      	adds	r1, r3, #4
 8011022:	6031      	str	r1, [r6, #0]
 8011024:	0606      	lsls	r6, r0, #24
 8011026:	d501      	bpl.n	801102c <_printf_i+0xbc>
 8011028:	681d      	ldr	r5, [r3, #0]
 801102a:	e003      	b.n	8011034 <_printf_i+0xc4>
 801102c:	0645      	lsls	r5, r0, #25
 801102e:	d5fb      	bpl.n	8011028 <_printf_i+0xb8>
 8011030:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011034:	2d00      	cmp	r5, #0
 8011036:	da03      	bge.n	8011040 <_printf_i+0xd0>
 8011038:	232d      	movs	r3, #45	@ 0x2d
 801103a:	426d      	negs	r5, r5
 801103c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011040:	4858      	ldr	r0, [pc, #352]	@ (80111a4 <_printf_i+0x234>)
 8011042:	230a      	movs	r3, #10
 8011044:	e011      	b.n	801106a <_printf_i+0xfa>
 8011046:	6821      	ldr	r1, [r4, #0]
 8011048:	6833      	ldr	r3, [r6, #0]
 801104a:	0608      	lsls	r0, r1, #24
 801104c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011050:	d402      	bmi.n	8011058 <_printf_i+0xe8>
 8011052:	0649      	lsls	r1, r1, #25
 8011054:	bf48      	it	mi
 8011056:	b2ad      	uxthmi	r5, r5
 8011058:	2f6f      	cmp	r7, #111	@ 0x6f
 801105a:	4852      	ldr	r0, [pc, #328]	@ (80111a4 <_printf_i+0x234>)
 801105c:	6033      	str	r3, [r6, #0]
 801105e:	bf14      	ite	ne
 8011060:	230a      	movne	r3, #10
 8011062:	2308      	moveq	r3, #8
 8011064:	2100      	movs	r1, #0
 8011066:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801106a:	6866      	ldr	r6, [r4, #4]
 801106c:	60a6      	str	r6, [r4, #8]
 801106e:	2e00      	cmp	r6, #0
 8011070:	db05      	blt.n	801107e <_printf_i+0x10e>
 8011072:	6821      	ldr	r1, [r4, #0]
 8011074:	432e      	orrs	r6, r5
 8011076:	f021 0104 	bic.w	r1, r1, #4
 801107a:	6021      	str	r1, [r4, #0]
 801107c:	d04b      	beq.n	8011116 <_printf_i+0x1a6>
 801107e:	4616      	mov	r6, r2
 8011080:	fbb5 f1f3 	udiv	r1, r5, r3
 8011084:	fb03 5711 	mls	r7, r3, r1, r5
 8011088:	5dc7      	ldrb	r7, [r0, r7]
 801108a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801108e:	462f      	mov	r7, r5
 8011090:	42bb      	cmp	r3, r7
 8011092:	460d      	mov	r5, r1
 8011094:	d9f4      	bls.n	8011080 <_printf_i+0x110>
 8011096:	2b08      	cmp	r3, #8
 8011098:	d10b      	bne.n	80110b2 <_printf_i+0x142>
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	07df      	lsls	r7, r3, #31
 801109e:	d508      	bpl.n	80110b2 <_printf_i+0x142>
 80110a0:	6923      	ldr	r3, [r4, #16]
 80110a2:	6861      	ldr	r1, [r4, #4]
 80110a4:	4299      	cmp	r1, r3
 80110a6:	bfde      	ittt	le
 80110a8:	2330      	movle	r3, #48	@ 0x30
 80110aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80110ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80110b2:	1b92      	subs	r2, r2, r6
 80110b4:	6122      	str	r2, [r4, #16]
 80110b6:	f8cd a000 	str.w	sl, [sp]
 80110ba:	464b      	mov	r3, r9
 80110bc:	aa03      	add	r2, sp, #12
 80110be:	4621      	mov	r1, r4
 80110c0:	4640      	mov	r0, r8
 80110c2:	f7ff fee7 	bl	8010e94 <_printf_common>
 80110c6:	3001      	adds	r0, #1
 80110c8:	d14a      	bne.n	8011160 <_printf_i+0x1f0>
 80110ca:	f04f 30ff 	mov.w	r0, #4294967295
 80110ce:	b004      	add	sp, #16
 80110d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110d4:	6823      	ldr	r3, [r4, #0]
 80110d6:	f043 0320 	orr.w	r3, r3, #32
 80110da:	6023      	str	r3, [r4, #0]
 80110dc:	4832      	ldr	r0, [pc, #200]	@ (80111a8 <_printf_i+0x238>)
 80110de:	2778      	movs	r7, #120	@ 0x78
 80110e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	6831      	ldr	r1, [r6, #0]
 80110e8:	061f      	lsls	r7, r3, #24
 80110ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80110ee:	d402      	bmi.n	80110f6 <_printf_i+0x186>
 80110f0:	065f      	lsls	r7, r3, #25
 80110f2:	bf48      	it	mi
 80110f4:	b2ad      	uxthmi	r5, r5
 80110f6:	6031      	str	r1, [r6, #0]
 80110f8:	07d9      	lsls	r1, r3, #31
 80110fa:	bf44      	itt	mi
 80110fc:	f043 0320 	orrmi.w	r3, r3, #32
 8011100:	6023      	strmi	r3, [r4, #0]
 8011102:	b11d      	cbz	r5, 801110c <_printf_i+0x19c>
 8011104:	2310      	movs	r3, #16
 8011106:	e7ad      	b.n	8011064 <_printf_i+0xf4>
 8011108:	4826      	ldr	r0, [pc, #152]	@ (80111a4 <_printf_i+0x234>)
 801110a:	e7e9      	b.n	80110e0 <_printf_i+0x170>
 801110c:	6823      	ldr	r3, [r4, #0]
 801110e:	f023 0320 	bic.w	r3, r3, #32
 8011112:	6023      	str	r3, [r4, #0]
 8011114:	e7f6      	b.n	8011104 <_printf_i+0x194>
 8011116:	4616      	mov	r6, r2
 8011118:	e7bd      	b.n	8011096 <_printf_i+0x126>
 801111a:	6833      	ldr	r3, [r6, #0]
 801111c:	6825      	ldr	r5, [r4, #0]
 801111e:	6961      	ldr	r1, [r4, #20]
 8011120:	1d18      	adds	r0, r3, #4
 8011122:	6030      	str	r0, [r6, #0]
 8011124:	062e      	lsls	r6, r5, #24
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	d501      	bpl.n	801112e <_printf_i+0x1be>
 801112a:	6019      	str	r1, [r3, #0]
 801112c:	e002      	b.n	8011134 <_printf_i+0x1c4>
 801112e:	0668      	lsls	r0, r5, #25
 8011130:	d5fb      	bpl.n	801112a <_printf_i+0x1ba>
 8011132:	8019      	strh	r1, [r3, #0]
 8011134:	2300      	movs	r3, #0
 8011136:	6123      	str	r3, [r4, #16]
 8011138:	4616      	mov	r6, r2
 801113a:	e7bc      	b.n	80110b6 <_printf_i+0x146>
 801113c:	6833      	ldr	r3, [r6, #0]
 801113e:	1d1a      	adds	r2, r3, #4
 8011140:	6032      	str	r2, [r6, #0]
 8011142:	681e      	ldr	r6, [r3, #0]
 8011144:	6862      	ldr	r2, [r4, #4]
 8011146:	2100      	movs	r1, #0
 8011148:	4630      	mov	r0, r6
 801114a:	f7ef f841 	bl	80001d0 <memchr>
 801114e:	b108      	cbz	r0, 8011154 <_printf_i+0x1e4>
 8011150:	1b80      	subs	r0, r0, r6
 8011152:	6060      	str	r0, [r4, #4]
 8011154:	6863      	ldr	r3, [r4, #4]
 8011156:	6123      	str	r3, [r4, #16]
 8011158:	2300      	movs	r3, #0
 801115a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801115e:	e7aa      	b.n	80110b6 <_printf_i+0x146>
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	4632      	mov	r2, r6
 8011164:	4649      	mov	r1, r9
 8011166:	4640      	mov	r0, r8
 8011168:	47d0      	blx	sl
 801116a:	3001      	adds	r0, #1
 801116c:	d0ad      	beq.n	80110ca <_printf_i+0x15a>
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	079b      	lsls	r3, r3, #30
 8011172:	d413      	bmi.n	801119c <_printf_i+0x22c>
 8011174:	68e0      	ldr	r0, [r4, #12]
 8011176:	9b03      	ldr	r3, [sp, #12]
 8011178:	4298      	cmp	r0, r3
 801117a:	bfb8      	it	lt
 801117c:	4618      	movlt	r0, r3
 801117e:	e7a6      	b.n	80110ce <_printf_i+0x15e>
 8011180:	2301      	movs	r3, #1
 8011182:	4632      	mov	r2, r6
 8011184:	4649      	mov	r1, r9
 8011186:	4640      	mov	r0, r8
 8011188:	47d0      	blx	sl
 801118a:	3001      	adds	r0, #1
 801118c:	d09d      	beq.n	80110ca <_printf_i+0x15a>
 801118e:	3501      	adds	r5, #1
 8011190:	68e3      	ldr	r3, [r4, #12]
 8011192:	9903      	ldr	r1, [sp, #12]
 8011194:	1a5b      	subs	r3, r3, r1
 8011196:	42ab      	cmp	r3, r5
 8011198:	dcf2      	bgt.n	8011180 <_printf_i+0x210>
 801119a:	e7eb      	b.n	8011174 <_printf_i+0x204>
 801119c:	2500      	movs	r5, #0
 801119e:	f104 0619 	add.w	r6, r4, #25
 80111a2:	e7f5      	b.n	8011190 <_printf_i+0x220>
 80111a4:	080139a6 	.word	0x080139a6
 80111a8:	080139b7 	.word	0x080139b7

080111ac <std>:
 80111ac:	2300      	movs	r3, #0
 80111ae:	b510      	push	{r4, lr}
 80111b0:	4604      	mov	r4, r0
 80111b2:	e9c0 3300 	strd	r3, r3, [r0]
 80111b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111ba:	6083      	str	r3, [r0, #8]
 80111bc:	8181      	strh	r1, [r0, #12]
 80111be:	6643      	str	r3, [r0, #100]	@ 0x64
 80111c0:	81c2      	strh	r2, [r0, #14]
 80111c2:	6183      	str	r3, [r0, #24]
 80111c4:	4619      	mov	r1, r3
 80111c6:	2208      	movs	r2, #8
 80111c8:	305c      	adds	r0, #92	@ 0x5c
 80111ca:	f000 f94c 	bl	8011466 <memset>
 80111ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011204 <std+0x58>)
 80111d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80111d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011208 <std+0x5c>)
 80111d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80111d6:	4b0d      	ldr	r3, [pc, #52]	@ (801120c <std+0x60>)
 80111d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80111da:	4b0d      	ldr	r3, [pc, #52]	@ (8011210 <std+0x64>)
 80111dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80111de:	4b0d      	ldr	r3, [pc, #52]	@ (8011214 <std+0x68>)
 80111e0:	6224      	str	r4, [r4, #32]
 80111e2:	429c      	cmp	r4, r3
 80111e4:	d006      	beq.n	80111f4 <std+0x48>
 80111e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80111ea:	4294      	cmp	r4, r2
 80111ec:	d002      	beq.n	80111f4 <std+0x48>
 80111ee:	33d0      	adds	r3, #208	@ 0xd0
 80111f0:	429c      	cmp	r4, r3
 80111f2:	d105      	bne.n	8011200 <std+0x54>
 80111f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80111f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111fc:	f000 b9b0 	b.w	8011560 <__retarget_lock_init_recursive>
 8011200:	bd10      	pop	{r4, pc}
 8011202:	bf00      	nop
 8011204:	080113e1 	.word	0x080113e1
 8011208:	08011403 	.word	0x08011403
 801120c:	0801143b 	.word	0x0801143b
 8011210:	0801145f 	.word	0x0801145f
 8011214:	20008230 	.word	0x20008230

08011218 <stdio_exit_handler>:
 8011218:	4a02      	ldr	r2, [pc, #8]	@ (8011224 <stdio_exit_handler+0xc>)
 801121a:	4903      	ldr	r1, [pc, #12]	@ (8011228 <stdio_exit_handler+0x10>)
 801121c:	4803      	ldr	r0, [pc, #12]	@ (801122c <stdio_exit_handler+0x14>)
 801121e:	f000 b869 	b.w	80112f4 <_fwalk_sglue>
 8011222:	bf00      	nop
 8011224:	20000100 	.word	0x20000100
 8011228:	08012ef5 	.word	0x08012ef5
 801122c:	20000110 	.word	0x20000110

08011230 <cleanup_stdio>:
 8011230:	6841      	ldr	r1, [r0, #4]
 8011232:	4b0c      	ldr	r3, [pc, #48]	@ (8011264 <cleanup_stdio+0x34>)
 8011234:	4299      	cmp	r1, r3
 8011236:	b510      	push	{r4, lr}
 8011238:	4604      	mov	r4, r0
 801123a:	d001      	beq.n	8011240 <cleanup_stdio+0x10>
 801123c:	f001 fe5a 	bl	8012ef4 <_fflush_r>
 8011240:	68a1      	ldr	r1, [r4, #8]
 8011242:	4b09      	ldr	r3, [pc, #36]	@ (8011268 <cleanup_stdio+0x38>)
 8011244:	4299      	cmp	r1, r3
 8011246:	d002      	beq.n	801124e <cleanup_stdio+0x1e>
 8011248:	4620      	mov	r0, r4
 801124a:	f001 fe53 	bl	8012ef4 <_fflush_r>
 801124e:	68e1      	ldr	r1, [r4, #12]
 8011250:	4b06      	ldr	r3, [pc, #24]	@ (801126c <cleanup_stdio+0x3c>)
 8011252:	4299      	cmp	r1, r3
 8011254:	d004      	beq.n	8011260 <cleanup_stdio+0x30>
 8011256:	4620      	mov	r0, r4
 8011258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801125c:	f001 be4a 	b.w	8012ef4 <_fflush_r>
 8011260:	bd10      	pop	{r4, pc}
 8011262:	bf00      	nop
 8011264:	20008230 	.word	0x20008230
 8011268:	20008298 	.word	0x20008298
 801126c:	20008300 	.word	0x20008300

08011270 <global_stdio_init.part.0>:
 8011270:	b510      	push	{r4, lr}
 8011272:	4b0b      	ldr	r3, [pc, #44]	@ (80112a0 <global_stdio_init.part.0+0x30>)
 8011274:	4c0b      	ldr	r4, [pc, #44]	@ (80112a4 <global_stdio_init.part.0+0x34>)
 8011276:	4a0c      	ldr	r2, [pc, #48]	@ (80112a8 <global_stdio_init.part.0+0x38>)
 8011278:	601a      	str	r2, [r3, #0]
 801127a:	4620      	mov	r0, r4
 801127c:	2200      	movs	r2, #0
 801127e:	2104      	movs	r1, #4
 8011280:	f7ff ff94 	bl	80111ac <std>
 8011284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011288:	2201      	movs	r2, #1
 801128a:	2109      	movs	r1, #9
 801128c:	f7ff ff8e 	bl	80111ac <std>
 8011290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011294:	2202      	movs	r2, #2
 8011296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801129a:	2112      	movs	r1, #18
 801129c:	f7ff bf86 	b.w	80111ac <std>
 80112a0:	20008368 	.word	0x20008368
 80112a4:	20008230 	.word	0x20008230
 80112a8:	08011219 	.word	0x08011219

080112ac <__sfp_lock_acquire>:
 80112ac:	4801      	ldr	r0, [pc, #4]	@ (80112b4 <__sfp_lock_acquire+0x8>)
 80112ae:	f000 b958 	b.w	8011562 <__retarget_lock_acquire_recursive>
 80112b2:	bf00      	nop
 80112b4:	20008371 	.word	0x20008371

080112b8 <__sfp_lock_release>:
 80112b8:	4801      	ldr	r0, [pc, #4]	@ (80112c0 <__sfp_lock_release+0x8>)
 80112ba:	f000 b953 	b.w	8011564 <__retarget_lock_release_recursive>
 80112be:	bf00      	nop
 80112c0:	20008371 	.word	0x20008371

080112c4 <__sinit>:
 80112c4:	b510      	push	{r4, lr}
 80112c6:	4604      	mov	r4, r0
 80112c8:	f7ff fff0 	bl	80112ac <__sfp_lock_acquire>
 80112cc:	6a23      	ldr	r3, [r4, #32]
 80112ce:	b11b      	cbz	r3, 80112d8 <__sinit+0x14>
 80112d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112d4:	f7ff bff0 	b.w	80112b8 <__sfp_lock_release>
 80112d8:	4b04      	ldr	r3, [pc, #16]	@ (80112ec <__sinit+0x28>)
 80112da:	6223      	str	r3, [r4, #32]
 80112dc:	4b04      	ldr	r3, [pc, #16]	@ (80112f0 <__sinit+0x2c>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1f5      	bne.n	80112d0 <__sinit+0xc>
 80112e4:	f7ff ffc4 	bl	8011270 <global_stdio_init.part.0>
 80112e8:	e7f2      	b.n	80112d0 <__sinit+0xc>
 80112ea:	bf00      	nop
 80112ec:	08011231 	.word	0x08011231
 80112f0:	20008368 	.word	0x20008368

080112f4 <_fwalk_sglue>:
 80112f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112f8:	4607      	mov	r7, r0
 80112fa:	4688      	mov	r8, r1
 80112fc:	4614      	mov	r4, r2
 80112fe:	2600      	movs	r6, #0
 8011300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011304:	f1b9 0901 	subs.w	r9, r9, #1
 8011308:	d505      	bpl.n	8011316 <_fwalk_sglue+0x22>
 801130a:	6824      	ldr	r4, [r4, #0]
 801130c:	2c00      	cmp	r4, #0
 801130e:	d1f7      	bne.n	8011300 <_fwalk_sglue+0xc>
 8011310:	4630      	mov	r0, r6
 8011312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011316:	89ab      	ldrh	r3, [r5, #12]
 8011318:	2b01      	cmp	r3, #1
 801131a:	d907      	bls.n	801132c <_fwalk_sglue+0x38>
 801131c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011320:	3301      	adds	r3, #1
 8011322:	d003      	beq.n	801132c <_fwalk_sglue+0x38>
 8011324:	4629      	mov	r1, r5
 8011326:	4638      	mov	r0, r7
 8011328:	47c0      	blx	r8
 801132a:	4306      	orrs	r6, r0
 801132c:	3568      	adds	r5, #104	@ 0x68
 801132e:	e7e9      	b.n	8011304 <_fwalk_sglue+0x10>

08011330 <sniprintf>:
 8011330:	b40c      	push	{r2, r3}
 8011332:	b530      	push	{r4, r5, lr}
 8011334:	4b18      	ldr	r3, [pc, #96]	@ (8011398 <sniprintf+0x68>)
 8011336:	1e0c      	subs	r4, r1, #0
 8011338:	681d      	ldr	r5, [r3, #0]
 801133a:	b09d      	sub	sp, #116	@ 0x74
 801133c:	da08      	bge.n	8011350 <sniprintf+0x20>
 801133e:	238b      	movs	r3, #139	@ 0x8b
 8011340:	602b      	str	r3, [r5, #0]
 8011342:	f04f 30ff 	mov.w	r0, #4294967295
 8011346:	b01d      	add	sp, #116	@ 0x74
 8011348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801134c:	b002      	add	sp, #8
 801134e:	4770      	bx	lr
 8011350:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011354:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011358:	f04f 0300 	mov.w	r3, #0
 801135c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801135e:	bf14      	ite	ne
 8011360:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011364:	4623      	moveq	r3, r4
 8011366:	9304      	str	r3, [sp, #16]
 8011368:	9307      	str	r3, [sp, #28]
 801136a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801136e:	9002      	str	r0, [sp, #8]
 8011370:	9006      	str	r0, [sp, #24]
 8011372:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011376:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011378:	ab21      	add	r3, sp, #132	@ 0x84
 801137a:	a902      	add	r1, sp, #8
 801137c:	4628      	mov	r0, r5
 801137e:	9301      	str	r3, [sp, #4]
 8011380:	f001 fc38 	bl	8012bf4 <_svfiprintf_r>
 8011384:	1c43      	adds	r3, r0, #1
 8011386:	bfbc      	itt	lt
 8011388:	238b      	movlt	r3, #139	@ 0x8b
 801138a:	602b      	strlt	r3, [r5, #0]
 801138c:	2c00      	cmp	r4, #0
 801138e:	d0da      	beq.n	8011346 <sniprintf+0x16>
 8011390:	9b02      	ldr	r3, [sp, #8]
 8011392:	2200      	movs	r2, #0
 8011394:	701a      	strb	r2, [r3, #0]
 8011396:	e7d6      	b.n	8011346 <sniprintf+0x16>
 8011398:	2000010c 	.word	0x2000010c

0801139c <siprintf>:
 801139c:	b40e      	push	{r1, r2, r3}
 801139e:	b510      	push	{r4, lr}
 80113a0:	b09d      	sub	sp, #116	@ 0x74
 80113a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80113a4:	9002      	str	r0, [sp, #8]
 80113a6:	9006      	str	r0, [sp, #24]
 80113a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80113ac:	480a      	ldr	r0, [pc, #40]	@ (80113d8 <siprintf+0x3c>)
 80113ae:	9107      	str	r1, [sp, #28]
 80113b0:	9104      	str	r1, [sp, #16]
 80113b2:	490a      	ldr	r1, [pc, #40]	@ (80113dc <siprintf+0x40>)
 80113b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80113b8:	9105      	str	r1, [sp, #20]
 80113ba:	2400      	movs	r4, #0
 80113bc:	a902      	add	r1, sp, #8
 80113be:	6800      	ldr	r0, [r0, #0]
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80113c4:	f001 fc16 	bl	8012bf4 <_svfiprintf_r>
 80113c8:	9b02      	ldr	r3, [sp, #8]
 80113ca:	701c      	strb	r4, [r3, #0]
 80113cc:	b01d      	add	sp, #116	@ 0x74
 80113ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113d2:	b003      	add	sp, #12
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	2000010c 	.word	0x2000010c
 80113dc:	ffff0208 	.word	0xffff0208

080113e0 <__sread>:
 80113e0:	b510      	push	{r4, lr}
 80113e2:	460c      	mov	r4, r1
 80113e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113e8:	f000 f86c 	bl	80114c4 <_read_r>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	bfab      	itete	ge
 80113f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80113f2:	89a3      	ldrhlt	r3, [r4, #12]
 80113f4:	181b      	addge	r3, r3, r0
 80113f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80113fa:	bfac      	ite	ge
 80113fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80113fe:	81a3      	strhlt	r3, [r4, #12]
 8011400:	bd10      	pop	{r4, pc}

08011402 <__swrite>:
 8011402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011406:	461f      	mov	r7, r3
 8011408:	898b      	ldrh	r3, [r1, #12]
 801140a:	05db      	lsls	r3, r3, #23
 801140c:	4605      	mov	r5, r0
 801140e:	460c      	mov	r4, r1
 8011410:	4616      	mov	r6, r2
 8011412:	d505      	bpl.n	8011420 <__swrite+0x1e>
 8011414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011418:	2302      	movs	r3, #2
 801141a:	2200      	movs	r2, #0
 801141c:	f000 f840 	bl	80114a0 <_lseek_r>
 8011420:	89a3      	ldrh	r3, [r4, #12]
 8011422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801142a:	81a3      	strh	r3, [r4, #12]
 801142c:	4632      	mov	r2, r6
 801142e:	463b      	mov	r3, r7
 8011430:	4628      	mov	r0, r5
 8011432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011436:	f000 b857 	b.w	80114e8 <_write_r>

0801143a <__sseek>:
 801143a:	b510      	push	{r4, lr}
 801143c:	460c      	mov	r4, r1
 801143e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011442:	f000 f82d 	bl	80114a0 <_lseek_r>
 8011446:	1c43      	adds	r3, r0, #1
 8011448:	89a3      	ldrh	r3, [r4, #12]
 801144a:	bf15      	itete	ne
 801144c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801144e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011452:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011456:	81a3      	strheq	r3, [r4, #12]
 8011458:	bf18      	it	ne
 801145a:	81a3      	strhne	r3, [r4, #12]
 801145c:	bd10      	pop	{r4, pc}

0801145e <__sclose>:
 801145e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011462:	f000 b80d 	b.w	8011480 <_close_r>

08011466 <memset>:
 8011466:	4402      	add	r2, r0
 8011468:	4603      	mov	r3, r0
 801146a:	4293      	cmp	r3, r2
 801146c:	d100      	bne.n	8011470 <memset+0xa>
 801146e:	4770      	bx	lr
 8011470:	f803 1b01 	strb.w	r1, [r3], #1
 8011474:	e7f9      	b.n	801146a <memset+0x4>
	...

08011478 <_localeconv_r>:
 8011478:	4800      	ldr	r0, [pc, #0]	@ (801147c <_localeconv_r+0x4>)
 801147a:	4770      	bx	lr
 801147c:	2000024c 	.word	0x2000024c

08011480 <_close_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	4d06      	ldr	r5, [pc, #24]	@ (801149c <_close_r+0x1c>)
 8011484:	2300      	movs	r3, #0
 8011486:	4604      	mov	r4, r0
 8011488:	4608      	mov	r0, r1
 801148a:	602b      	str	r3, [r5, #0]
 801148c:	f7f1 fbc0 	bl	8002c10 <_close>
 8011490:	1c43      	adds	r3, r0, #1
 8011492:	d102      	bne.n	801149a <_close_r+0x1a>
 8011494:	682b      	ldr	r3, [r5, #0]
 8011496:	b103      	cbz	r3, 801149a <_close_r+0x1a>
 8011498:	6023      	str	r3, [r4, #0]
 801149a:	bd38      	pop	{r3, r4, r5, pc}
 801149c:	2000836c 	.word	0x2000836c

080114a0 <_lseek_r>:
 80114a0:	b538      	push	{r3, r4, r5, lr}
 80114a2:	4d07      	ldr	r5, [pc, #28]	@ (80114c0 <_lseek_r+0x20>)
 80114a4:	4604      	mov	r4, r0
 80114a6:	4608      	mov	r0, r1
 80114a8:	4611      	mov	r1, r2
 80114aa:	2200      	movs	r2, #0
 80114ac:	602a      	str	r2, [r5, #0]
 80114ae:	461a      	mov	r2, r3
 80114b0:	f7f1 fbd5 	bl	8002c5e <_lseek>
 80114b4:	1c43      	adds	r3, r0, #1
 80114b6:	d102      	bne.n	80114be <_lseek_r+0x1e>
 80114b8:	682b      	ldr	r3, [r5, #0]
 80114ba:	b103      	cbz	r3, 80114be <_lseek_r+0x1e>
 80114bc:	6023      	str	r3, [r4, #0]
 80114be:	bd38      	pop	{r3, r4, r5, pc}
 80114c0:	2000836c 	.word	0x2000836c

080114c4 <_read_r>:
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	4d07      	ldr	r5, [pc, #28]	@ (80114e4 <_read_r+0x20>)
 80114c8:	4604      	mov	r4, r0
 80114ca:	4608      	mov	r0, r1
 80114cc:	4611      	mov	r1, r2
 80114ce:	2200      	movs	r2, #0
 80114d0:	602a      	str	r2, [r5, #0]
 80114d2:	461a      	mov	r2, r3
 80114d4:	f7f1 fb63 	bl	8002b9e <_read>
 80114d8:	1c43      	adds	r3, r0, #1
 80114da:	d102      	bne.n	80114e2 <_read_r+0x1e>
 80114dc:	682b      	ldr	r3, [r5, #0]
 80114de:	b103      	cbz	r3, 80114e2 <_read_r+0x1e>
 80114e0:	6023      	str	r3, [r4, #0]
 80114e2:	bd38      	pop	{r3, r4, r5, pc}
 80114e4:	2000836c 	.word	0x2000836c

080114e8 <_write_r>:
 80114e8:	b538      	push	{r3, r4, r5, lr}
 80114ea:	4d07      	ldr	r5, [pc, #28]	@ (8011508 <_write_r+0x20>)
 80114ec:	4604      	mov	r4, r0
 80114ee:	4608      	mov	r0, r1
 80114f0:	4611      	mov	r1, r2
 80114f2:	2200      	movs	r2, #0
 80114f4:	602a      	str	r2, [r5, #0]
 80114f6:	461a      	mov	r2, r3
 80114f8:	f7f1 fb6e 	bl	8002bd8 <_write>
 80114fc:	1c43      	adds	r3, r0, #1
 80114fe:	d102      	bne.n	8011506 <_write_r+0x1e>
 8011500:	682b      	ldr	r3, [r5, #0]
 8011502:	b103      	cbz	r3, 8011506 <_write_r+0x1e>
 8011504:	6023      	str	r3, [r4, #0]
 8011506:	bd38      	pop	{r3, r4, r5, pc}
 8011508:	2000836c 	.word	0x2000836c

0801150c <__errno>:
 801150c:	4b01      	ldr	r3, [pc, #4]	@ (8011514 <__errno+0x8>)
 801150e:	6818      	ldr	r0, [r3, #0]
 8011510:	4770      	bx	lr
 8011512:	bf00      	nop
 8011514:	2000010c 	.word	0x2000010c

08011518 <__libc_init_array>:
 8011518:	b570      	push	{r4, r5, r6, lr}
 801151a:	4d0d      	ldr	r5, [pc, #52]	@ (8011550 <__libc_init_array+0x38>)
 801151c:	4c0d      	ldr	r4, [pc, #52]	@ (8011554 <__libc_init_array+0x3c>)
 801151e:	1b64      	subs	r4, r4, r5
 8011520:	10a4      	asrs	r4, r4, #2
 8011522:	2600      	movs	r6, #0
 8011524:	42a6      	cmp	r6, r4
 8011526:	d109      	bne.n	801153c <__libc_init_array+0x24>
 8011528:	4d0b      	ldr	r5, [pc, #44]	@ (8011558 <__libc_init_array+0x40>)
 801152a:	4c0c      	ldr	r4, [pc, #48]	@ (801155c <__libc_init_array+0x44>)
 801152c:	f002 f872 	bl	8013614 <_init>
 8011530:	1b64      	subs	r4, r4, r5
 8011532:	10a4      	asrs	r4, r4, #2
 8011534:	2600      	movs	r6, #0
 8011536:	42a6      	cmp	r6, r4
 8011538:	d105      	bne.n	8011546 <__libc_init_array+0x2e>
 801153a:	bd70      	pop	{r4, r5, r6, pc}
 801153c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011540:	4798      	blx	r3
 8011542:	3601      	adds	r6, #1
 8011544:	e7ee      	b.n	8011524 <__libc_init_array+0xc>
 8011546:	f855 3b04 	ldr.w	r3, [r5], #4
 801154a:	4798      	blx	r3
 801154c:	3601      	adds	r6, #1
 801154e:	e7f2      	b.n	8011536 <__libc_init_array+0x1e>
 8011550:	08013d14 	.word	0x08013d14
 8011554:	08013d14 	.word	0x08013d14
 8011558:	08013d14 	.word	0x08013d14
 801155c:	08013d18 	.word	0x08013d18

08011560 <__retarget_lock_init_recursive>:
 8011560:	4770      	bx	lr

08011562 <__retarget_lock_acquire_recursive>:
 8011562:	4770      	bx	lr

08011564 <__retarget_lock_release_recursive>:
 8011564:	4770      	bx	lr

08011566 <strcpy>:
 8011566:	4603      	mov	r3, r0
 8011568:	f811 2b01 	ldrb.w	r2, [r1], #1
 801156c:	f803 2b01 	strb.w	r2, [r3], #1
 8011570:	2a00      	cmp	r2, #0
 8011572:	d1f9      	bne.n	8011568 <strcpy+0x2>
 8011574:	4770      	bx	lr

08011576 <memcpy>:
 8011576:	440a      	add	r2, r1
 8011578:	4291      	cmp	r1, r2
 801157a:	f100 33ff 	add.w	r3, r0, #4294967295
 801157e:	d100      	bne.n	8011582 <memcpy+0xc>
 8011580:	4770      	bx	lr
 8011582:	b510      	push	{r4, lr}
 8011584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011588:	f803 4f01 	strb.w	r4, [r3, #1]!
 801158c:	4291      	cmp	r1, r2
 801158e:	d1f9      	bne.n	8011584 <memcpy+0xe>
 8011590:	bd10      	pop	{r4, pc}

08011592 <quorem>:
 8011592:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011596:	6903      	ldr	r3, [r0, #16]
 8011598:	690c      	ldr	r4, [r1, #16]
 801159a:	42a3      	cmp	r3, r4
 801159c:	4607      	mov	r7, r0
 801159e:	db7e      	blt.n	801169e <quorem+0x10c>
 80115a0:	3c01      	subs	r4, #1
 80115a2:	f101 0814 	add.w	r8, r1, #20
 80115a6:	00a3      	lsls	r3, r4, #2
 80115a8:	f100 0514 	add.w	r5, r0, #20
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115b2:	9301      	str	r3, [sp, #4]
 80115b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115bc:	3301      	adds	r3, #1
 80115be:	429a      	cmp	r2, r3
 80115c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80115c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80115c8:	d32e      	bcc.n	8011628 <quorem+0x96>
 80115ca:	f04f 0a00 	mov.w	sl, #0
 80115ce:	46c4      	mov	ip, r8
 80115d0:	46ae      	mov	lr, r5
 80115d2:	46d3      	mov	fp, sl
 80115d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80115d8:	b298      	uxth	r0, r3
 80115da:	fb06 a000 	mla	r0, r6, r0, sl
 80115de:	0c02      	lsrs	r2, r0, #16
 80115e0:	0c1b      	lsrs	r3, r3, #16
 80115e2:	fb06 2303 	mla	r3, r6, r3, r2
 80115e6:	f8de 2000 	ldr.w	r2, [lr]
 80115ea:	b280      	uxth	r0, r0
 80115ec:	b292      	uxth	r2, r2
 80115ee:	1a12      	subs	r2, r2, r0
 80115f0:	445a      	add	r2, fp
 80115f2:	f8de 0000 	ldr.w	r0, [lr]
 80115f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011600:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011604:	b292      	uxth	r2, r2
 8011606:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801160a:	45e1      	cmp	r9, ip
 801160c:	f84e 2b04 	str.w	r2, [lr], #4
 8011610:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011614:	d2de      	bcs.n	80115d4 <quorem+0x42>
 8011616:	9b00      	ldr	r3, [sp, #0]
 8011618:	58eb      	ldr	r3, [r5, r3]
 801161a:	b92b      	cbnz	r3, 8011628 <quorem+0x96>
 801161c:	9b01      	ldr	r3, [sp, #4]
 801161e:	3b04      	subs	r3, #4
 8011620:	429d      	cmp	r5, r3
 8011622:	461a      	mov	r2, r3
 8011624:	d32f      	bcc.n	8011686 <quorem+0xf4>
 8011626:	613c      	str	r4, [r7, #16]
 8011628:	4638      	mov	r0, r7
 801162a:	f001 f97f 	bl	801292c <__mcmp>
 801162e:	2800      	cmp	r0, #0
 8011630:	db25      	blt.n	801167e <quorem+0xec>
 8011632:	4629      	mov	r1, r5
 8011634:	2000      	movs	r0, #0
 8011636:	f858 2b04 	ldr.w	r2, [r8], #4
 801163a:	f8d1 c000 	ldr.w	ip, [r1]
 801163e:	fa1f fe82 	uxth.w	lr, r2
 8011642:	fa1f f38c 	uxth.w	r3, ip
 8011646:	eba3 030e 	sub.w	r3, r3, lr
 801164a:	4403      	add	r3, r0
 801164c:	0c12      	lsrs	r2, r2, #16
 801164e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011652:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011656:	b29b      	uxth	r3, r3
 8011658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801165c:	45c1      	cmp	r9, r8
 801165e:	f841 3b04 	str.w	r3, [r1], #4
 8011662:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011666:	d2e6      	bcs.n	8011636 <quorem+0xa4>
 8011668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801166c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011670:	b922      	cbnz	r2, 801167c <quorem+0xea>
 8011672:	3b04      	subs	r3, #4
 8011674:	429d      	cmp	r5, r3
 8011676:	461a      	mov	r2, r3
 8011678:	d30b      	bcc.n	8011692 <quorem+0x100>
 801167a:	613c      	str	r4, [r7, #16]
 801167c:	3601      	adds	r6, #1
 801167e:	4630      	mov	r0, r6
 8011680:	b003      	add	sp, #12
 8011682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011686:	6812      	ldr	r2, [r2, #0]
 8011688:	3b04      	subs	r3, #4
 801168a:	2a00      	cmp	r2, #0
 801168c:	d1cb      	bne.n	8011626 <quorem+0x94>
 801168e:	3c01      	subs	r4, #1
 8011690:	e7c6      	b.n	8011620 <quorem+0x8e>
 8011692:	6812      	ldr	r2, [r2, #0]
 8011694:	3b04      	subs	r3, #4
 8011696:	2a00      	cmp	r2, #0
 8011698:	d1ef      	bne.n	801167a <quorem+0xe8>
 801169a:	3c01      	subs	r4, #1
 801169c:	e7ea      	b.n	8011674 <quorem+0xe2>
 801169e:	2000      	movs	r0, #0
 80116a0:	e7ee      	b.n	8011680 <quorem+0xee>
 80116a2:	0000      	movs	r0, r0
 80116a4:	0000      	movs	r0, r0
	...

080116a8 <_dtoa_r>:
 80116a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ac:	69c7      	ldr	r7, [r0, #28]
 80116ae:	b097      	sub	sp, #92	@ 0x5c
 80116b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80116b4:	ec55 4b10 	vmov	r4, r5, d0
 80116b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80116ba:	9107      	str	r1, [sp, #28]
 80116bc:	4681      	mov	r9, r0
 80116be:	920c      	str	r2, [sp, #48]	@ 0x30
 80116c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80116c2:	b97f      	cbnz	r7, 80116e4 <_dtoa_r+0x3c>
 80116c4:	2010      	movs	r0, #16
 80116c6:	f000 fe09 	bl	80122dc <malloc>
 80116ca:	4602      	mov	r2, r0
 80116cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80116d0:	b920      	cbnz	r0, 80116dc <_dtoa_r+0x34>
 80116d2:	4ba9      	ldr	r3, [pc, #676]	@ (8011978 <_dtoa_r+0x2d0>)
 80116d4:	21ef      	movs	r1, #239	@ 0xef
 80116d6:	48a9      	ldr	r0, [pc, #676]	@ (801197c <_dtoa_r+0x2d4>)
 80116d8:	f001 fc5e 	bl	8012f98 <__assert_func>
 80116dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80116e0:	6007      	str	r7, [r0, #0]
 80116e2:	60c7      	str	r7, [r0, #12]
 80116e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80116e8:	6819      	ldr	r1, [r3, #0]
 80116ea:	b159      	cbz	r1, 8011704 <_dtoa_r+0x5c>
 80116ec:	685a      	ldr	r2, [r3, #4]
 80116ee:	604a      	str	r2, [r1, #4]
 80116f0:	2301      	movs	r3, #1
 80116f2:	4093      	lsls	r3, r2
 80116f4:	608b      	str	r3, [r1, #8]
 80116f6:	4648      	mov	r0, r9
 80116f8:	f000 fee6 	bl	80124c8 <_Bfree>
 80116fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011700:	2200      	movs	r2, #0
 8011702:	601a      	str	r2, [r3, #0]
 8011704:	1e2b      	subs	r3, r5, #0
 8011706:	bfb9      	ittee	lt
 8011708:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801170c:	9305      	strlt	r3, [sp, #20]
 801170e:	2300      	movge	r3, #0
 8011710:	6033      	strge	r3, [r6, #0]
 8011712:	9f05      	ldr	r7, [sp, #20]
 8011714:	4b9a      	ldr	r3, [pc, #616]	@ (8011980 <_dtoa_r+0x2d8>)
 8011716:	bfbc      	itt	lt
 8011718:	2201      	movlt	r2, #1
 801171a:	6032      	strlt	r2, [r6, #0]
 801171c:	43bb      	bics	r3, r7
 801171e:	d112      	bne.n	8011746 <_dtoa_r+0x9e>
 8011720:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011722:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011726:	6013      	str	r3, [r2, #0]
 8011728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801172c:	4323      	orrs	r3, r4
 801172e:	f000 855a 	beq.w	80121e6 <_dtoa_r+0xb3e>
 8011732:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011734:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8011994 <_dtoa_r+0x2ec>
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 855c 	beq.w	80121f6 <_dtoa_r+0xb4e>
 801173e:	f10a 0303 	add.w	r3, sl, #3
 8011742:	f000 bd56 	b.w	80121f2 <_dtoa_r+0xb4a>
 8011746:	ed9d 7b04 	vldr	d7, [sp, #16]
 801174a:	2200      	movs	r2, #0
 801174c:	ec51 0b17 	vmov	r0, r1, d7
 8011750:	2300      	movs	r3, #0
 8011752:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8011756:	f7ef f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 801175a:	4680      	mov	r8, r0
 801175c:	b158      	cbz	r0, 8011776 <_dtoa_r+0xce>
 801175e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011760:	2301      	movs	r3, #1
 8011762:	6013      	str	r3, [r2, #0]
 8011764:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011766:	b113      	cbz	r3, 801176e <_dtoa_r+0xc6>
 8011768:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801176a:	4b86      	ldr	r3, [pc, #536]	@ (8011984 <_dtoa_r+0x2dc>)
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011998 <_dtoa_r+0x2f0>
 8011772:	f000 bd40 	b.w	80121f6 <_dtoa_r+0xb4e>
 8011776:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801177a:	aa14      	add	r2, sp, #80	@ 0x50
 801177c:	a915      	add	r1, sp, #84	@ 0x54
 801177e:	4648      	mov	r0, r9
 8011780:	f001 f984 	bl	8012a8c <__d2b>
 8011784:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011788:	9002      	str	r0, [sp, #8]
 801178a:	2e00      	cmp	r6, #0
 801178c:	d078      	beq.n	8011880 <_dtoa_r+0x1d8>
 801178e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011790:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8011794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011798:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801179c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80117a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80117a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80117a8:	4619      	mov	r1, r3
 80117aa:	2200      	movs	r2, #0
 80117ac:	4b76      	ldr	r3, [pc, #472]	@ (8011988 <_dtoa_r+0x2e0>)
 80117ae:	f7ee fd6b 	bl	8000288 <__aeabi_dsub>
 80117b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8011960 <_dtoa_r+0x2b8>)
 80117b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b8:	f7ee ff1e 	bl	80005f8 <__aeabi_dmul>
 80117bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8011968 <_dtoa_r+0x2c0>)
 80117be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c2:	f7ee fd63 	bl	800028c <__adddf3>
 80117c6:	4604      	mov	r4, r0
 80117c8:	4630      	mov	r0, r6
 80117ca:	460d      	mov	r5, r1
 80117cc:	f7ee feaa 	bl	8000524 <__aeabi_i2d>
 80117d0:	a367      	add	r3, pc, #412	@ (adr r3, 8011970 <_dtoa_r+0x2c8>)
 80117d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d6:	f7ee ff0f 	bl	80005f8 <__aeabi_dmul>
 80117da:	4602      	mov	r2, r0
 80117dc:	460b      	mov	r3, r1
 80117de:	4620      	mov	r0, r4
 80117e0:	4629      	mov	r1, r5
 80117e2:	f7ee fd53 	bl	800028c <__adddf3>
 80117e6:	4604      	mov	r4, r0
 80117e8:	460d      	mov	r5, r1
 80117ea:	f7ef f9b5 	bl	8000b58 <__aeabi_d2iz>
 80117ee:	2200      	movs	r2, #0
 80117f0:	4607      	mov	r7, r0
 80117f2:	2300      	movs	r3, #0
 80117f4:	4620      	mov	r0, r4
 80117f6:	4629      	mov	r1, r5
 80117f8:	f7ef f970 	bl	8000adc <__aeabi_dcmplt>
 80117fc:	b140      	cbz	r0, 8011810 <_dtoa_r+0x168>
 80117fe:	4638      	mov	r0, r7
 8011800:	f7ee fe90 	bl	8000524 <__aeabi_i2d>
 8011804:	4622      	mov	r2, r4
 8011806:	462b      	mov	r3, r5
 8011808:	f7ef f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 801180c:	b900      	cbnz	r0, 8011810 <_dtoa_r+0x168>
 801180e:	3f01      	subs	r7, #1
 8011810:	2f16      	cmp	r7, #22
 8011812:	d852      	bhi.n	80118ba <_dtoa_r+0x212>
 8011814:	4b5d      	ldr	r3, [pc, #372]	@ (801198c <_dtoa_r+0x2e4>)
 8011816:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011822:	f7ef f95b 	bl	8000adc <__aeabi_dcmplt>
 8011826:	2800      	cmp	r0, #0
 8011828:	d049      	beq.n	80118be <_dtoa_r+0x216>
 801182a:	3f01      	subs	r7, #1
 801182c:	2300      	movs	r3, #0
 801182e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011830:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011832:	1b9b      	subs	r3, r3, r6
 8011834:	1e5a      	subs	r2, r3, #1
 8011836:	bf45      	ittet	mi
 8011838:	f1c3 0301 	rsbmi	r3, r3, #1
 801183c:	9300      	strmi	r3, [sp, #0]
 801183e:	2300      	movpl	r3, #0
 8011840:	2300      	movmi	r3, #0
 8011842:	9206      	str	r2, [sp, #24]
 8011844:	bf54      	ite	pl
 8011846:	9300      	strpl	r3, [sp, #0]
 8011848:	9306      	strmi	r3, [sp, #24]
 801184a:	2f00      	cmp	r7, #0
 801184c:	db39      	blt.n	80118c2 <_dtoa_r+0x21a>
 801184e:	9b06      	ldr	r3, [sp, #24]
 8011850:	970d      	str	r7, [sp, #52]	@ 0x34
 8011852:	443b      	add	r3, r7
 8011854:	9306      	str	r3, [sp, #24]
 8011856:	2300      	movs	r3, #0
 8011858:	9308      	str	r3, [sp, #32]
 801185a:	9b07      	ldr	r3, [sp, #28]
 801185c:	2b09      	cmp	r3, #9
 801185e:	d863      	bhi.n	8011928 <_dtoa_r+0x280>
 8011860:	2b05      	cmp	r3, #5
 8011862:	bfc4      	itt	gt
 8011864:	3b04      	subgt	r3, #4
 8011866:	9307      	strgt	r3, [sp, #28]
 8011868:	9b07      	ldr	r3, [sp, #28]
 801186a:	f1a3 0302 	sub.w	r3, r3, #2
 801186e:	bfcc      	ite	gt
 8011870:	2400      	movgt	r4, #0
 8011872:	2401      	movle	r4, #1
 8011874:	2b03      	cmp	r3, #3
 8011876:	d863      	bhi.n	8011940 <_dtoa_r+0x298>
 8011878:	e8df f003 	tbb	[pc, r3]
 801187c:	2b375452 	.word	0x2b375452
 8011880:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8011884:	441e      	add	r6, r3
 8011886:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801188a:	2b20      	cmp	r3, #32
 801188c:	bfc1      	itttt	gt
 801188e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011892:	409f      	lslgt	r7, r3
 8011894:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011898:	fa24 f303 	lsrgt.w	r3, r4, r3
 801189c:	bfd6      	itet	le
 801189e:	f1c3 0320 	rsble	r3, r3, #32
 80118a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80118a6:	fa04 f003 	lslle.w	r0, r4, r3
 80118aa:	f7ee fe2b 	bl	8000504 <__aeabi_ui2d>
 80118ae:	2201      	movs	r2, #1
 80118b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80118b4:	3e01      	subs	r6, #1
 80118b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80118b8:	e776      	b.n	80117a8 <_dtoa_r+0x100>
 80118ba:	2301      	movs	r3, #1
 80118bc:	e7b7      	b.n	801182e <_dtoa_r+0x186>
 80118be:	9010      	str	r0, [sp, #64]	@ 0x40
 80118c0:	e7b6      	b.n	8011830 <_dtoa_r+0x188>
 80118c2:	9b00      	ldr	r3, [sp, #0]
 80118c4:	1bdb      	subs	r3, r3, r7
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	427b      	negs	r3, r7
 80118ca:	9308      	str	r3, [sp, #32]
 80118cc:	2300      	movs	r3, #0
 80118ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80118d0:	e7c3      	b.n	801185a <_dtoa_r+0x1b2>
 80118d2:	2301      	movs	r3, #1
 80118d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80118d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118d8:	eb07 0b03 	add.w	fp, r7, r3
 80118dc:	f10b 0301 	add.w	r3, fp, #1
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	9303      	str	r3, [sp, #12]
 80118e4:	bfb8      	it	lt
 80118e6:	2301      	movlt	r3, #1
 80118e8:	e006      	b.n	80118f8 <_dtoa_r+0x250>
 80118ea:	2301      	movs	r3, #1
 80118ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80118ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	dd28      	ble.n	8011946 <_dtoa_r+0x29e>
 80118f4:	469b      	mov	fp, r3
 80118f6:	9303      	str	r3, [sp, #12]
 80118f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80118fc:	2100      	movs	r1, #0
 80118fe:	2204      	movs	r2, #4
 8011900:	f102 0514 	add.w	r5, r2, #20
 8011904:	429d      	cmp	r5, r3
 8011906:	d926      	bls.n	8011956 <_dtoa_r+0x2ae>
 8011908:	6041      	str	r1, [r0, #4]
 801190a:	4648      	mov	r0, r9
 801190c:	f000 fd9c 	bl	8012448 <_Balloc>
 8011910:	4682      	mov	sl, r0
 8011912:	2800      	cmp	r0, #0
 8011914:	d142      	bne.n	801199c <_dtoa_r+0x2f4>
 8011916:	4b1e      	ldr	r3, [pc, #120]	@ (8011990 <_dtoa_r+0x2e8>)
 8011918:	4602      	mov	r2, r0
 801191a:	f240 11af 	movw	r1, #431	@ 0x1af
 801191e:	e6da      	b.n	80116d6 <_dtoa_r+0x2e>
 8011920:	2300      	movs	r3, #0
 8011922:	e7e3      	b.n	80118ec <_dtoa_r+0x244>
 8011924:	2300      	movs	r3, #0
 8011926:	e7d5      	b.n	80118d4 <_dtoa_r+0x22c>
 8011928:	2401      	movs	r4, #1
 801192a:	2300      	movs	r3, #0
 801192c:	9307      	str	r3, [sp, #28]
 801192e:	9409      	str	r4, [sp, #36]	@ 0x24
 8011930:	f04f 3bff 	mov.w	fp, #4294967295
 8011934:	2200      	movs	r2, #0
 8011936:	f8cd b00c 	str.w	fp, [sp, #12]
 801193a:	2312      	movs	r3, #18
 801193c:	920c      	str	r2, [sp, #48]	@ 0x30
 801193e:	e7db      	b.n	80118f8 <_dtoa_r+0x250>
 8011940:	2301      	movs	r3, #1
 8011942:	9309      	str	r3, [sp, #36]	@ 0x24
 8011944:	e7f4      	b.n	8011930 <_dtoa_r+0x288>
 8011946:	f04f 0b01 	mov.w	fp, #1
 801194a:	f8cd b00c 	str.w	fp, [sp, #12]
 801194e:	465b      	mov	r3, fp
 8011950:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011954:	e7d0      	b.n	80118f8 <_dtoa_r+0x250>
 8011956:	3101      	adds	r1, #1
 8011958:	0052      	lsls	r2, r2, #1
 801195a:	e7d1      	b.n	8011900 <_dtoa_r+0x258>
 801195c:	f3af 8000 	nop.w
 8011960:	636f4361 	.word	0x636f4361
 8011964:	3fd287a7 	.word	0x3fd287a7
 8011968:	8b60c8b3 	.word	0x8b60c8b3
 801196c:	3fc68a28 	.word	0x3fc68a28
 8011970:	509f79fb 	.word	0x509f79fb
 8011974:	3fd34413 	.word	0x3fd34413
 8011978:	080139d5 	.word	0x080139d5
 801197c:	080139ec 	.word	0x080139ec
 8011980:	7ff00000 	.word	0x7ff00000
 8011984:	080139a5 	.word	0x080139a5
 8011988:	3ff80000 	.word	0x3ff80000
 801198c:	08013b40 	.word	0x08013b40
 8011990:	08013a44 	.word	0x08013a44
 8011994:	080139d1 	.word	0x080139d1
 8011998:	080139a4 	.word	0x080139a4
 801199c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80119a0:	6018      	str	r0, [r3, #0]
 80119a2:	9b03      	ldr	r3, [sp, #12]
 80119a4:	2b0e      	cmp	r3, #14
 80119a6:	f200 80a1 	bhi.w	8011aec <_dtoa_r+0x444>
 80119aa:	2c00      	cmp	r4, #0
 80119ac:	f000 809e 	beq.w	8011aec <_dtoa_r+0x444>
 80119b0:	2f00      	cmp	r7, #0
 80119b2:	dd33      	ble.n	8011a1c <_dtoa_r+0x374>
 80119b4:	4b9c      	ldr	r3, [pc, #624]	@ (8011c28 <_dtoa_r+0x580>)
 80119b6:	f007 020f 	and.w	r2, r7, #15
 80119ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119be:	ed93 7b00 	vldr	d7, [r3]
 80119c2:	05f8      	lsls	r0, r7, #23
 80119c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80119c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80119cc:	d516      	bpl.n	80119fc <_dtoa_r+0x354>
 80119ce:	4b97      	ldr	r3, [pc, #604]	@ (8011c2c <_dtoa_r+0x584>)
 80119d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80119d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80119d8:	f7ee ff38 	bl	800084c <__aeabi_ddiv>
 80119dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119e0:	f004 040f 	and.w	r4, r4, #15
 80119e4:	2603      	movs	r6, #3
 80119e6:	4d91      	ldr	r5, [pc, #580]	@ (8011c2c <_dtoa_r+0x584>)
 80119e8:	b954      	cbnz	r4, 8011a00 <_dtoa_r+0x358>
 80119ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80119ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119f2:	f7ee ff2b 	bl	800084c <__aeabi_ddiv>
 80119f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119fa:	e028      	b.n	8011a4e <_dtoa_r+0x3a6>
 80119fc:	2602      	movs	r6, #2
 80119fe:	e7f2      	b.n	80119e6 <_dtoa_r+0x33e>
 8011a00:	07e1      	lsls	r1, r4, #31
 8011a02:	d508      	bpl.n	8011a16 <_dtoa_r+0x36e>
 8011a04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011a08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a0c:	f7ee fdf4 	bl	80005f8 <__aeabi_dmul>
 8011a10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011a14:	3601      	adds	r6, #1
 8011a16:	1064      	asrs	r4, r4, #1
 8011a18:	3508      	adds	r5, #8
 8011a1a:	e7e5      	b.n	80119e8 <_dtoa_r+0x340>
 8011a1c:	f000 80af 	beq.w	8011b7e <_dtoa_r+0x4d6>
 8011a20:	427c      	negs	r4, r7
 8011a22:	4b81      	ldr	r3, [pc, #516]	@ (8011c28 <_dtoa_r+0x580>)
 8011a24:	4d81      	ldr	r5, [pc, #516]	@ (8011c2c <_dtoa_r+0x584>)
 8011a26:	f004 020f 	and.w	r2, r4, #15
 8011a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011a36:	f7ee fddf 	bl	80005f8 <__aeabi_dmul>
 8011a3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a3e:	1124      	asrs	r4, r4, #4
 8011a40:	2300      	movs	r3, #0
 8011a42:	2602      	movs	r6, #2
 8011a44:	2c00      	cmp	r4, #0
 8011a46:	f040 808f 	bne.w	8011b68 <_dtoa_r+0x4c0>
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d1d3      	bne.n	80119f6 <_dtoa_r+0x34e>
 8011a4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	f000 8094 	beq.w	8011b82 <_dtoa_r+0x4da>
 8011a5a:	4b75      	ldr	r3, [pc, #468]	@ (8011c30 <_dtoa_r+0x588>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	4620      	mov	r0, r4
 8011a60:	4629      	mov	r1, r5
 8011a62:	f7ef f83b 	bl	8000adc <__aeabi_dcmplt>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	f000 808b 	beq.w	8011b82 <_dtoa_r+0x4da>
 8011a6c:	9b03      	ldr	r3, [sp, #12]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	f000 8087 	beq.w	8011b82 <_dtoa_r+0x4da>
 8011a74:	f1bb 0f00 	cmp.w	fp, #0
 8011a78:	dd34      	ble.n	8011ae4 <_dtoa_r+0x43c>
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8011c34 <_dtoa_r+0x58c>)
 8011a7e:	2200      	movs	r2, #0
 8011a80:	4629      	mov	r1, r5
 8011a82:	f7ee fdb9 	bl	80005f8 <__aeabi_dmul>
 8011a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a8a:	f107 38ff 	add.w	r8, r7, #4294967295
 8011a8e:	3601      	adds	r6, #1
 8011a90:	465c      	mov	r4, fp
 8011a92:	4630      	mov	r0, r6
 8011a94:	f7ee fd46 	bl	8000524 <__aeabi_i2d>
 8011a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a9c:	f7ee fdac 	bl	80005f8 <__aeabi_dmul>
 8011aa0:	4b65      	ldr	r3, [pc, #404]	@ (8011c38 <_dtoa_r+0x590>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f7ee fbf2 	bl	800028c <__adddf3>
 8011aa8:	4605      	mov	r5, r0
 8011aaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011aae:	2c00      	cmp	r4, #0
 8011ab0:	d16a      	bne.n	8011b88 <_dtoa_r+0x4e0>
 8011ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ab6:	4b61      	ldr	r3, [pc, #388]	@ (8011c3c <_dtoa_r+0x594>)
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f7ee fbe5 	bl	8000288 <__aeabi_dsub>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ac6:	462a      	mov	r2, r5
 8011ac8:	4633      	mov	r3, r6
 8011aca:	f7ef f825 	bl	8000b18 <__aeabi_dcmpgt>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	f040 8298 	bne.w	8012004 <_dtoa_r+0x95c>
 8011ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ad8:	462a      	mov	r2, r5
 8011ada:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011ade:	f7ee fffd 	bl	8000adc <__aeabi_dcmplt>
 8011ae2:	bb38      	cbnz	r0, 8011b34 <_dtoa_r+0x48c>
 8011ae4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011ae8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011aec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f2c0 8157 	blt.w	8011da2 <_dtoa_r+0x6fa>
 8011af4:	2f0e      	cmp	r7, #14
 8011af6:	f300 8154 	bgt.w	8011da2 <_dtoa_r+0x6fa>
 8011afa:	4b4b      	ldr	r3, [pc, #300]	@ (8011c28 <_dtoa_r+0x580>)
 8011afc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b00:	ed93 7b00 	vldr	d7, [r3]
 8011b04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	ed8d 7b00 	vstr	d7, [sp]
 8011b0c:	f280 80e5 	bge.w	8011cda <_dtoa_r+0x632>
 8011b10:	9b03      	ldr	r3, [sp, #12]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f300 80e1 	bgt.w	8011cda <_dtoa_r+0x632>
 8011b18:	d10c      	bne.n	8011b34 <_dtoa_r+0x48c>
 8011b1a:	4b48      	ldr	r3, [pc, #288]	@ (8011c3c <_dtoa_r+0x594>)
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	ec51 0b17 	vmov	r0, r1, d7
 8011b22:	f7ee fd69 	bl	80005f8 <__aeabi_dmul>
 8011b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b2a:	f7ee ffeb 	bl	8000b04 <__aeabi_dcmpge>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	f000 8266 	beq.w	8012000 <_dtoa_r+0x958>
 8011b34:	2400      	movs	r4, #0
 8011b36:	4625      	mov	r5, r4
 8011b38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b3a:	4656      	mov	r6, sl
 8011b3c:	ea6f 0803 	mvn.w	r8, r3
 8011b40:	2700      	movs	r7, #0
 8011b42:	4621      	mov	r1, r4
 8011b44:	4648      	mov	r0, r9
 8011b46:	f000 fcbf 	bl	80124c8 <_Bfree>
 8011b4a:	2d00      	cmp	r5, #0
 8011b4c:	f000 80bd 	beq.w	8011cca <_dtoa_r+0x622>
 8011b50:	b12f      	cbz	r7, 8011b5e <_dtoa_r+0x4b6>
 8011b52:	42af      	cmp	r7, r5
 8011b54:	d003      	beq.n	8011b5e <_dtoa_r+0x4b6>
 8011b56:	4639      	mov	r1, r7
 8011b58:	4648      	mov	r0, r9
 8011b5a:	f000 fcb5 	bl	80124c8 <_Bfree>
 8011b5e:	4629      	mov	r1, r5
 8011b60:	4648      	mov	r0, r9
 8011b62:	f000 fcb1 	bl	80124c8 <_Bfree>
 8011b66:	e0b0      	b.n	8011cca <_dtoa_r+0x622>
 8011b68:	07e2      	lsls	r2, r4, #31
 8011b6a:	d505      	bpl.n	8011b78 <_dtoa_r+0x4d0>
 8011b6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b70:	f7ee fd42 	bl	80005f8 <__aeabi_dmul>
 8011b74:	3601      	adds	r6, #1
 8011b76:	2301      	movs	r3, #1
 8011b78:	1064      	asrs	r4, r4, #1
 8011b7a:	3508      	adds	r5, #8
 8011b7c:	e762      	b.n	8011a44 <_dtoa_r+0x39c>
 8011b7e:	2602      	movs	r6, #2
 8011b80:	e765      	b.n	8011a4e <_dtoa_r+0x3a6>
 8011b82:	9c03      	ldr	r4, [sp, #12]
 8011b84:	46b8      	mov	r8, r7
 8011b86:	e784      	b.n	8011a92 <_dtoa_r+0x3ea>
 8011b88:	4b27      	ldr	r3, [pc, #156]	@ (8011c28 <_dtoa_r+0x580>)
 8011b8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b94:	4454      	add	r4, sl
 8011b96:	2900      	cmp	r1, #0
 8011b98:	d054      	beq.n	8011c44 <_dtoa_r+0x59c>
 8011b9a:	4929      	ldr	r1, [pc, #164]	@ (8011c40 <_dtoa_r+0x598>)
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	f7ee fe55 	bl	800084c <__aeabi_ddiv>
 8011ba2:	4633      	mov	r3, r6
 8011ba4:	462a      	mov	r2, r5
 8011ba6:	f7ee fb6f 	bl	8000288 <__aeabi_dsub>
 8011baa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011bae:	4656      	mov	r6, sl
 8011bb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bb4:	f7ee ffd0 	bl	8000b58 <__aeabi_d2iz>
 8011bb8:	4605      	mov	r5, r0
 8011bba:	f7ee fcb3 	bl	8000524 <__aeabi_i2d>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bc6:	f7ee fb5f 	bl	8000288 <__aeabi_dsub>
 8011bca:	3530      	adds	r5, #48	@ 0x30
 8011bcc:	4602      	mov	r2, r0
 8011bce:	460b      	mov	r3, r1
 8011bd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011bd4:	f806 5b01 	strb.w	r5, [r6], #1
 8011bd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011bdc:	f7ee ff7e 	bl	8000adc <__aeabi_dcmplt>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d172      	bne.n	8011cca <_dtoa_r+0x622>
 8011be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011be8:	4911      	ldr	r1, [pc, #68]	@ (8011c30 <_dtoa_r+0x588>)
 8011bea:	2000      	movs	r0, #0
 8011bec:	f7ee fb4c 	bl	8000288 <__aeabi_dsub>
 8011bf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011bf4:	f7ee ff72 	bl	8000adc <__aeabi_dcmplt>
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	f040 80b4 	bne.w	8011d66 <_dtoa_r+0x6be>
 8011bfe:	42a6      	cmp	r6, r4
 8011c00:	f43f af70 	beq.w	8011ae4 <_dtoa_r+0x43c>
 8011c04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011c08:	4b0a      	ldr	r3, [pc, #40]	@ (8011c34 <_dtoa_r+0x58c>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f7ee fcf4 	bl	80005f8 <__aeabi_dmul>
 8011c10:	4b08      	ldr	r3, [pc, #32]	@ (8011c34 <_dtoa_r+0x58c>)
 8011c12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011c16:	2200      	movs	r2, #0
 8011c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c1c:	f7ee fcec 	bl	80005f8 <__aeabi_dmul>
 8011c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c24:	e7c4      	b.n	8011bb0 <_dtoa_r+0x508>
 8011c26:	bf00      	nop
 8011c28:	08013b40 	.word	0x08013b40
 8011c2c:	08013b18 	.word	0x08013b18
 8011c30:	3ff00000 	.word	0x3ff00000
 8011c34:	40240000 	.word	0x40240000
 8011c38:	401c0000 	.word	0x401c0000
 8011c3c:	40140000 	.word	0x40140000
 8011c40:	3fe00000 	.word	0x3fe00000
 8011c44:	4631      	mov	r1, r6
 8011c46:	4628      	mov	r0, r5
 8011c48:	f7ee fcd6 	bl	80005f8 <__aeabi_dmul>
 8011c4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011c50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011c52:	4656      	mov	r6, sl
 8011c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c58:	f7ee ff7e 	bl	8000b58 <__aeabi_d2iz>
 8011c5c:	4605      	mov	r5, r0
 8011c5e:	f7ee fc61 	bl	8000524 <__aeabi_i2d>
 8011c62:	4602      	mov	r2, r0
 8011c64:	460b      	mov	r3, r1
 8011c66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c6a:	f7ee fb0d 	bl	8000288 <__aeabi_dsub>
 8011c6e:	3530      	adds	r5, #48	@ 0x30
 8011c70:	f806 5b01 	strb.w	r5, [r6], #1
 8011c74:	4602      	mov	r2, r0
 8011c76:	460b      	mov	r3, r1
 8011c78:	42a6      	cmp	r6, r4
 8011c7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011c7e:	f04f 0200 	mov.w	r2, #0
 8011c82:	d124      	bne.n	8011cce <_dtoa_r+0x626>
 8011c84:	4baf      	ldr	r3, [pc, #700]	@ (8011f44 <_dtoa_r+0x89c>)
 8011c86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011c8a:	f7ee faff 	bl	800028c <__adddf3>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	460b      	mov	r3, r1
 8011c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c96:	f7ee ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	d163      	bne.n	8011d66 <_dtoa_r+0x6be>
 8011c9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011ca2:	49a8      	ldr	r1, [pc, #672]	@ (8011f44 <_dtoa_r+0x89c>)
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	f7ee faef 	bl	8000288 <__aeabi_dsub>
 8011caa:	4602      	mov	r2, r0
 8011cac:	460b      	mov	r3, r1
 8011cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011cb2:	f7ee ff13 	bl	8000adc <__aeabi_dcmplt>
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	f43f af14 	beq.w	8011ae4 <_dtoa_r+0x43c>
 8011cbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011cbe:	1e73      	subs	r3, r6, #1
 8011cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011cc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011cc6:	2b30      	cmp	r3, #48	@ 0x30
 8011cc8:	d0f8      	beq.n	8011cbc <_dtoa_r+0x614>
 8011cca:	4647      	mov	r7, r8
 8011ccc:	e03b      	b.n	8011d46 <_dtoa_r+0x69e>
 8011cce:	4b9e      	ldr	r3, [pc, #632]	@ (8011f48 <_dtoa_r+0x8a0>)
 8011cd0:	f7ee fc92 	bl	80005f8 <__aeabi_dmul>
 8011cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011cd8:	e7bc      	b.n	8011c54 <_dtoa_r+0x5ac>
 8011cda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011cde:	4656      	mov	r6, sl
 8011ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	f7ee fdb0 	bl	800084c <__aeabi_ddiv>
 8011cec:	f7ee ff34 	bl	8000b58 <__aeabi_d2iz>
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	f7ee fc17 	bl	8000524 <__aeabi_i2d>
 8011cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cfa:	f7ee fc7d 	bl	80005f8 <__aeabi_dmul>
 8011cfe:	4602      	mov	r2, r0
 8011d00:	460b      	mov	r3, r1
 8011d02:	4620      	mov	r0, r4
 8011d04:	4629      	mov	r1, r5
 8011d06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011d0a:	f7ee fabd 	bl	8000288 <__aeabi_dsub>
 8011d0e:	f806 4b01 	strb.w	r4, [r6], #1
 8011d12:	9d03      	ldr	r5, [sp, #12]
 8011d14:	eba6 040a 	sub.w	r4, r6, sl
 8011d18:	42a5      	cmp	r5, r4
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	d133      	bne.n	8011d88 <_dtoa_r+0x6e0>
 8011d20:	f7ee fab4 	bl	800028c <__adddf3>
 8011d24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d28:	4604      	mov	r4, r0
 8011d2a:	460d      	mov	r5, r1
 8011d2c:	f7ee fef4 	bl	8000b18 <__aeabi_dcmpgt>
 8011d30:	b9c0      	cbnz	r0, 8011d64 <_dtoa_r+0x6bc>
 8011d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d36:	4620      	mov	r0, r4
 8011d38:	4629      	mov	r1, r5
 8011d3a:	f7ee fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d3e:	b110      	cbz	r0, 8011d46 <_dtoa_r+0x69e>
 8011d40:	f018 0f01 	tst.w	r8, #1
 8011d44:	d10e      	bne.n	8011d64 <_dtoa_r+0x6bc>
 8011d46:	9902      	ldr	r1, [sp, #8]
 8011d48:	4648      	mov	r0, r9
 8011d4a:	f000 fbbd 	bl	80124c8 <_Bfree>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	7033      	strb	r3, [r6, #0]
 8011d52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d54:	3701      	adds	r7, #1
 8011d56:	601f      	str	r7, [r3, #0]
 8011d58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	f000 824b 	beq.w	80121f6 <_dtoa_r+0xb4e>
 8011d60:	601e      	str	r6, [r3, #0]
 8011d62:	e248      	b.n	80121f6 <_dtoa_r+0xb4e>
 8011d64:	46b8      	mov	r8, r7
 8011d66:	4633      	mov	r3, r6
 8011d68:	461e      	mov	r6, r3
 8011d6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d6e:	2a39      	cmp	r2, #57	@ 0x39
 8011d70:	d106      	bne.n	8011d80 <_dtoa_r+0x6d8>
 8011d72:	459a      	cmp	sl, r3
 8011d74:	d1f8      	bne.n	8011d68 <_dtoa_r+0x6c0>
 8011d76:	2230      	movs	r2, #48	@ 0x30
 8011d78:	f108 0801 	add.w	r8, r8, #1
 8011d7c:	f88a 2000 	strb.w	r2, [sl]
 8011d80:	781a      	ldrb	r2, [r3, #0]
 8011d82:	3201      	adds	r2, #1
 8011d84:	701a      	strb	r2, [r3, #0]
 8011d86:	e7a0      	b.n	8011cca <_dtoa_r+0x622>
 8011d88:	4b6f      	ldr	r3, [pc, #444]	@ (8011f48 <_dtoa_r+0x8a0>)
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f7ee fc34 	bl	80005f8 <__aeabi_dmul>
 8011d90:	2200      	movs	r2, #0
 8011d92:	2300      	movs	r3, #0
 8011d94:	4604      	mov	r4, r0
 8011d96:	460d      	mov	r5, r1
 8011d98:	f7ee fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d09f      	beq.n	8011ce0 <_dtoa_r+0x638>
 8011da0:	e7d1      	b.n	8011d46 <_dtoa_r+0x69e>
 8011da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011da4:	2a00      	cmp	r2, #0
 8011da6:	f000 80ea 	beq.w	8011f7e <_dtoa_r+0x8d6>
 8011daa:	9a07      	ldr	r2, [sp, #28]
 8011dac:	2a01      	cmp	r2, #1
 8011dae:	f300 80cd 	bgt.w	8011f4c <_dtoa_r+0x8a4>
 8011db2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011db4:	2a00      	cmp	r2, #0
 8011db6:	f000 80c1 	beq.w	8011f3c <_dtoa_r+0x894>
 8011dba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011dbe:	9c08      	ldr	r4, [sp, #32]
 8011dc0:	9e00      	ldr	r6, [sp, #0]
 8011dc2:	9a00      	ldr	r2, [sp, #0]
 8011dc4:	441a      	add	r2, r3
 8011dc6:	9200      	str	r2, [sp, #0]
 8011dc8:	9a06      	ldr	r2, [sp, #24]
 8011dca:	2101      	movs	r1, #1
 8011dcc:	441a      	add	r2, r3
 8011dce:	4648      	mov	r0, r9
 8011dd0:	9206      	str	r2, [sp, #24]
 8011dd2:	f000 fc2d 	bl	8012630 <__i2b>
 8011dd6:	4605      	mov	r5, r0
 8011dd8:	b166      	cbz	r6, 8011df4 <_dtoa_r+0x74c>
 8011dda:	9b06      	ldr	r3, [sp, #24]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	dd09      	ble.n	8011df4 <_dtoa_r+0x74c>
 8011de0:	42b3      	cmp	r3, r6
 8011de2:	9a00      	ldr	r2, [sp, #0]
 8011de4:	bfa8      	it	ge
 8011de6:	4633      	movge	r3, r6
 8011de8:	1ad2      	subs	r2, r2, r3
 8011dea:	9200      	str	r2, [sp, #0]
 8011dec:	9a06      	ldr	r2, [sp, #24]
 8011dee:	1af6      	subs	r6, r6, r3
 8011df0:	1ad3      	subs	r3, r2, r3
 8011df2:	9306      	str	r3, [sp, #24]
 8011df4:	9b08      	ldr	r3, [sp, #32]
 8011df6:	b30b      	cbz	r3, 8011e3c <_dtoa_r+0x794>
 8011df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f000 80c6 	beq.w	8011f8c <_dtoa_r+0x8e4>
 8011e00:	2c00      	cmp	r4, #0
 8011e02:	f000 80c0 	beq.w	8011f86 <_dtoa_r+0x8de>
 8011e06:	4629      	mov	r1, r5
 8011e08:	4622      	mov	r2, r4
 8011e0a:	4648      	mov	r0, r9
 8011e0c:	f000 fcc8 	bl	80127a0 <__pow5mult>
 8011e10:	9a02      	ldr	r2, [sp, #8]
 8011e12:	4601      	mov	r1, r0
 8011e14:	4605      	mov	r5, r0
 8011e16:	4648      	mov	r0, r9
 8011e18:	f000 fc20 	bl	801265c <__multiply>
 8011e1c:	9902      	ldr	r1, [sp, #8]
 8011e1e:	4680      	mov	r8, r0
 8011e20:	4648      	mov	r0, r9
 8011e22:	f000 fb51 	bl	80124c8 <_Bfree>
 8011e26:	9b08      	ldr	r3, [sp, #32]
 8011e28:	1b1b      	subs	r3, r3, r4
 8011e2a:	9308      	str	r3, [sp, #32]
 8011e2c:	f000 80b1 	beq.w	8011f92 <_dtoa_r+0x8ea>
 8011e30:	9a08      	ldr	r2, [sp, #32]
 8011e32:	4641      	mov	r1, r8
 8011e34:	4648      	mov	r0, r9
 8011e36:	f000 fcb3 	bl	80127a0 <__pow5mult>
 8011e3a:	9002      	str	r0, [sp, #8]
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	4648      	mov	r0, r9
 8011e40:	f000 fbf6 	bl	8012630 <__i2b>
 8011e44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e46:	4604      	mov	r4, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f000 81d8 	beq.w	80121fe <_dtoa_r+0xb56>
 8011e4e:	461a      	mov	r2, r3
 8011e50:	4601      	mov	r1, r0
 8011e52:	4648      	mov	r0, r9
 8011e54:	f000 fca4 	bl	80127a0 <__pow5mult>
 8011e58:	9b07      	ldr	r3, [sp, #28]
 8011e5a:	2b01      	cmp	r3, #1
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	f300 809f 	bgt.w	8011fa0 <_dtoa_r+0x8f8>
 8011e62:	9b04      	ldr	r3, [sp, #16]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f040 8097 	bne.w	8011f98 <_dtoa_r+0x8f0>
 8011e6a:	9b05      	ldr	r3, [sp, #20]
 8011e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f040 8093 	bne.w	8011f9c <_dtoa_r+0x8f4>
 8011e76:	9b05      	ldr	r3, [sp, #20]
 8011e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011e7c:	0d1b      	lsrs	r3, r3, #20
 8011e7e:	051b      	lsls	r3, r3, #20
 8011e80:	b133      	cbz	r3, 8011e90 <_dtoa_r+0x7e8>
 8011e82:	9b00      	ldr	r3, [sp, #0]
 8011e84:	3301      	adds	r3, #1
 8011e86:	9300      	str	r3, [sp, #0]
 8011e88:	9b06      	ldr	r3, [sp, #24]
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	9306      	str	r3, [sp, #24]
 8011e8e:	2301      	movs	r3, #1
 8011e90:	9308      	str	r3, [sp, #32]
 8011e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f000 81b8 	beq.w	801220a <_dtoa_r+0xb62>
 8011e9a:	6923      	ldr	r3, [r4, #16]
 8011e9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ea0:	6918      	ldr	r0, [r3, #16]
 8011ea2:	f000 fb79 	bl	8012598 <__hi0bits>
 8011ea6:	f1c0 0020 	rsb	r0, r0, #32
 8011eaa:	9b06      	ldr	r3, [sp, #24]
 8011eac:	4418      	add	r0, r3
 8011eae:	f010 001f 	ands.w	r0, r0, #31
 8011eb2:	f000 8082 	beq.w	8011fba <_dtoa_r+0x912>
 8011eb6:	f1c0 0320 	rsb	r3, r0, #32
 8011eba:	2b04      	cmp	r3, #4
 8011ebc:	dd73      	ble.n	8011fa6 <_dtoa_r+0x8fe>
 8011ebe:	9b00      	ldr	r3, [sp, #0]
 8011ec0:	f1c0 001c 	rsb	r0, r0, #28
 8011ec4:	4403      	add	r3, r0
 8011ec6:	9300      	str	r3, [sp, #0]
 8011ec8:	9b06      	ldr	r3, [sp, #24]
 8011eca:	4403      	add	r3, r0
 8011ecc:	4406      	add	r6, r0
 8011ece:	9306      	str	r3, [sp, #24]
 8011ed0:	9b00      	ldr	r3, [sp, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	dd05      	ble.n	8011ee2 <_dtoa_r+0x83a>
 8011ed6:	9902      	ldr	r1, [sp, #8]
 8011ed8:	461a      	mov	r2, r3
 8011eda:	4648      	mov	r0, r9
 8011edc:	f000 fcba 	bl	8012854 <__lshift>
 8011ee0:	9002      	str	r0, [sp, #8]
 8011ee2:	9b06      	ldr	r3, [sp, #24]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	dd05      	ble.n	8011ef4 <_dtoa_r+0x84c>
 8011ee8:	4621      	mov	r1, r4
 8011eea:	461a      	mov	r2, r3
 8011eec:	4648      	mov	r0, r9
 8011eee:	f000 fcb1 	bl	8012854 <__lshift>
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d061      	beq.n	8011fbe <_dtoa_r+0x916>
 8011efa:	9802      	ldr	r0, [sp, #8]
 8011efc:	4621      	mov	r1, r4
 8011efe:	f000 fd15 	bl	801292c <__mcmp>
 8011f02:	2800      	cmp	r0, #0
 8011f04:	da5b      	bge.n	8011fbe <_dtoa_r+0x916>
 8011f06:	2300      	movs	r3, #0
 8011f08:	9902      	ldr	r1, [sp, #8]
 8011f0a:	220a      	movs	r2, #10
 8011f0c:	4648      	mov	r0, r9
 8011f0e:	f000 fafd 	bl	801250c <__multadd>
 8011f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f14:	9002      	str	r0, [sp, #8]
 8011f16:	f107 38ff 	add.w	r8, r7, #4294967295
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	f000 8177 	beq.w	801220e <_dtoa_r+0xb66>
 8011f20:	4629      	mov	r1, r5
 8011f22:	2300      	movs	r3, #0
 8011f24:	220a      	movs	r2, #10
 8011f26:	4648      	mov	r0, r9
 8011f28:	f000 faf0 	bl	801250c <__multadd>
 8011f2c:	f1bb 0f00 	cmp.w	fp, #0
 8011f30:	4605      	mov	r5, r0
 8011f32:	dc6f      	bgt.n	8012014 <_dtoa_r+0x96c>
 8011f34:	9b07      	ldr	r3, [sp, #28]
 8011f36:	2b02      	cmp	r3, #2
 8011f38:	dc49      	bgt.n	8011fce <_dtoa_r+0x926>
 8011f3a:	e06b      	b.n	8012014 <_dtoa_r+0x96c>
 8011f3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011f3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011f42:	e73c      	b.n	8011dbe <_dtoa_r+0x716>
 8011f44:	3fe00000 	.word	0x3fe00000
 8011f48:	40240000 	.word	0x40240000
 8011f4c:	9b03      	ldr	r3, [sp, #12]
 8011f4e:	1e5c      	subs	r4, r3, #1
 8011f50:	9b08      	ldr	r3, [sp, #32]
 8011f52:	42a3      	cmp	r3, r4
 8011f54:	db09      	blt.n	8011f6a <_dtoa_r+0x8c2>
 8011f56:	1b1c      	subs	r4, r3, r4
 8011f58:	9b03      	ldr	r3, [sp, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f6bf af30 	bge.w	8011dc0 <_dtoa_r+0x718>
 8011f60:	9b00      	ldr	r3, [sp, #0]
 8011f62:	9a03      	ldr	r2, [sp, #12]
 8011f64:	1a9e      	subs	r6, r3, r2
 8011f66:	2300      	movs	r3, #0
 8011f68:	e72b      	b.n	8011dc2 <_dtoa_r+0x71a>
 8011f6a:	9b08      	ldr	r3, [sp, #32]
 8011f6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f6e:	9408      	str	r4, [sp, #32]
 8011f70:	1ae3      	subs	r3, r4, r3
 8011f72:	441a      	add	r2, r3
 8011f74:	9e00      	ldr	r6, [sp, #0]
 8011f76:	9b03      	ldr	r3, [sp, #12]
 8011f78:	920d      	str	r2, [sp, #52]	@ 0x34
 8011f7a:	2400      	movs	r4, #0
 8011f7c:	e721      	b.n	8011dc2 <_dtoa_r+0x71a>
 8011f7e:	9c08      	ldr	r4, [sp, #32]
 8011f80:	9e00      	ldr	r6, [sp, #0]
 8011f82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011f84:	e728      	b.n	8011dd8 <_dtoa_r+0x730>
 8011f86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011f8a:	e751      	b.n	8011e30 <_dtoa_r+0x788>
 8011f8c:	9a08      	ldr	r2, [sp, #32]
 8011f8e:	9902      	ldr	r1, [sp, #8]
 8011f90:	e750      	b.n	8011e34 <_dtoa_r+0x78c>
 8011f92:	f8cd 8008 	str.w	r8, [sp, #8]
 8011f96:	e751      	b.n	8011e3c <_dtoa_r+0x794>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	e779      	b.n	8011e90 <_dtoa_r+0x7e8>
 8011f9c:	9b04      	ldr	r3, [sp, #16]
 8011f9e:	e777      	b.n	8011e90 <_dtoa_r+0x7e8>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	9308      	str	r3, [sp, #32]
 8011fa4:	e779      	b.n	8011e9a <_dtoa_r+0x7f2>
 8011fa6:	d093      	beq.n	8011ed0 <_dtoa_r+0x828>
 8011fa8:	9a00      	ldr	r2, [sp, #0]
 8011faa:	331c      	adds	r3, #28
 8011fac:	441a      	add	r2, r3
 8011fae:	9200      	str	r2, [sp, #0]
 8011fb0:	9a06      	ldr	r2, [sp, #24]
 8011fb2:	441a      	add	r2, r3
 8011fb4:	441e      	add	r6, r3
 8011fb6:	9206      	str	r2, [sp, #24]
 8011fb8:	e78a      	b.n	8011ed0 <_dtoa_r+0x828>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	e7f4      	b.n	8011fa8 <_dtoa_r+0x900>
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	46b8      	mov	r8, r7
 8011fc4:	dc20      	bgt.n	8012008 <_dtoa_r+0x960>
 8011fc6:	469b      	mov	fp, r3
 8011fc8:	9b07      	ldr	r3, [sp, #28]
 8011fca:	2b02      	cmp	r3, #2
 8011fcc:	dd1e      	ble.n	801200c <_dtoa_r+0x964>
 8011fce:	f1bb 0f00 	cmp.w	fp, #0
 8011fd2:	f47f adb1 	bne.w	8011b38 <_dtoa_r+0x490>
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	465b      	mov	r3, fp
 8011fda:	2205      	movs	r2, #5
 8011fdc:	4648      	mov	r0, r9
 8011fde:	f000 fa95 	bl	801250c <__multadd>
 8011fe2:	4601      	mov	r1, r0
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	9802      	ldr	r0, [sp, #8]
 8011fe8:	f000 fca0 	bl	801292c <__mcmp>
 8011fec:	2800      	cmp	r0, #0
 8011fee:	f77f ada3 	ble.w	8011b38 <_dtoa_r+0x490>
 8011ff2:	4656      	mov	r6, sl
 8011ff4:	2331      	movs	r3, #49	@ 0x31
 8011ff6:	f806 3b01 	strb.w	r3, [r6], #1
 8011ffa:	f108 0801 	add.w	r8, r8, #1
 8011ffe:	e59f      	b.n	8011b40 <_dtoa_r+0x498>
 8012000:	9c03      	ldr	r4, [sp, #12]
 8012002:	46b8      	mov	r8, r7
 8012004:	4625      	mov	r5, r4
 8012006:	e7f4      	b.n	8011ff2 <_dtoa_r+0x94a>
 8012008:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801200c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801200e:	2b00      	cmp	r3, #0
 8012010:	f000 8101 	beq.w	8012216 <_dtoa_r+0xb6e>
 8012014:	2e00      	cmp	r6, #0
 8012016:	dd05      	ble.n	8012024 <_dtoa_r+0x97c>
 8012018:	4629      	mov	r1, r5
 801201a:	4632      	mov	r2, r6
 801201c:	4648      	mov	r0, r9
 801201e:	f000 fc19 	bl	8012854 <__lshift>
 8012022:	4605      	mov	r5, r0
 8012024:	9b08      	ldr	r3, [sp, #32]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d05c      	beq.n	80120e4 <_dtoa_r+0xa3c>
 801202a:	6869      	ldr	r1, [r5, #4]
 801202c:	4648      	mov	r0, r9
 801202e:	f000 fa0b 	bl	8012448 <_Balloc>
 8012032:	4606      	mov	r6, r0
 8012034:	b928      	cbnz	r0, 8012042 <_dtoa_r+0x99a>
 8012036:	4b82      	ldr	r3, [pc, #520]	@ (8012240 <_dtoa_r+0xb98>)
 8012038:	4602      	mov	r2, r0
 801203a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801203e:	f7ff bb4a 	b.w	80116d6 <_dtoa_r+0x2e>
 8012042:	692a      	ldr	r2, [r5, #16]
 8012044:	3202      	adds	r2, #2
 8012046:	0092      	lsls	r2, r2, #2
 8012048:	f105 010c 	add.w	r1, r5, #12
 801204c:	300c      	adds	r0, #12
 801204e:	f7ff fa92 	bl	8011576 <memcpy>
 8012052:	2201      	movs	r2, #1
 8012054:	4631      	mov	r1, r6
 8012056:	4648      	mov	r0, r9
 8012058:	f000 fbfc 	bl	8012854 <__lshift>
 801205c:	f10a 0301 	add.w	r3, sl, #1
 8012060:	9300      	str	r3, [sp, #0]
 8012062:	eb0a 030b 	add.w	r3, sl, fp
 8012066:	9308      	str	r3, [sp, #32]
 8012068:	9b04      	ldr	r3, [sp, #16]
 801206a:	f003 0301 	and.w	r3, r3, #1
 801206e:	462f      	mov	r7, r5
 8012070:	9306      	str	r3, [sp, #24]
 8012072:	4605      	mov	r5, r0
 8012074:	9b00      	ldr	r3, [sp, #0]
 8012076:	9802      	ldr	r0, [sp, #8]
 8012078:	4621      	mov	r1, r4
 801207a:	f103 3bff 	add.w	fp, r3, #4294967295
 801207e:	f7ff fa88 	bl	8011592 <quorem>
 8012082:	4603      	mov	r3, r0
 8012084:	3330      	adds	r3, #48	@ 0x30
 8012086:	9003      	str	r0, [sp, #12]
 8012088:	4639      	mov	r1, r7
 801208a:	9802      	ldr	r0, [sp, #8]
 801208c:	9309      	str	r3, [sp, #36]	@ 0x24
 801208e:	f000 fc4d 	bl	801292c <__mcmp>
 8012092:	462a      	mov	r2, r5
 8012094:	9004      	str	r0, [sp, #16]
 8012096:	4621      	mov	r1, r4
 8012098:	4648      	mov	r0, r9
 801209a:	f000 fc63 	bl	8012964 <__mdiff>
 801209e:	68c2      	ldr	r2, [r0, #12]
 80120a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120a2:	4606      	mov	r6, r0
 80120a4:	bb02      	cbnz	r2, 80120e8 <_dtoa_r+0xa40>
 80120a6:	4601      	mov	r1, r0
 80120a8:	9802      	ldr	r0, [sp, #8]
 80120aa:	f000 fc3f 	bl	801292c <__mcmp>
 80120ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120b0:	4602      	mov	r2, r0
 80120b2:	4631      	mov	r1, r6
 80120b4:	4648      	mov	r0, r9
 80120b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80120b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ba:	f000 fa05 	bl	80124c8 <_Bfree>
 80120be:	9b07      	ldr	r3, [sp, #28]
 80120c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80120c2:	9e00      	ldr	r6, [sp, #0]
 80120c4:	ea42 0103 	orr.w	r1, r2, r3
 80120c8:	9b06      	ldr	r3, [sp, #24]
 80120ca:	4319      	orrs	r1, r3
 80120cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120ce:	d10d      	bne.n	80120ec <_dtoa_r+0xa44>
 80120d0:	2b39      	cmp	r3, #57	@ 0x39
 80120d2:	d027      	beq.n	8012124 <_dtoa_r+0xa7c>
 80120d4:	9a04      	ldr	r2, [sp, #16]
 80120d6:	2a00      	cmp	r2, #0
 80120d8:	dd01      	ble.n	80120de <_dtoa_r+0xa36>
 80120da:	9b03      	ldr	r3, [sp, #12]
 80120dc:	3331      	adds	r3, #49	@ 0x31
 80120de:	f88b 3000 	strb.w	r3, [fp]
 80120e2:	e52e      	b.n	8011b42 <_dtoa_r+0x49a>
 80120e4:	4628      	mov	r0, r5
 80120e6:	e7b9      	b.n	801205c <_dtoa_r+0x9b4>
 80120e8:	2201      	movs	r2, #1
 80120ea:	e7e2      	b.n	80120b2 <_dtoa_r+0xa0a>
 80120ec:	9904      	ldr	r1, [sp, #16]
 80120ee:	2900      	cmp	r1, #0
 80120f0:	db04      	blt.n	80120fc <_dtoa_r+0xa54>
 80120f2:	9807      	ldr	r0, [sp, #28]
 80120f4:	4301      	orrs	r1, r0
 80120f6:	9806      	ldr	r0, [sp, #24]
 80120f8:	4301      	orrs	r1, r0
 80120fa:	d120      	bne.n	801213e <_dtoa_r+0xa96>
 80120fc:	2a00      	cmp	r2, #0
 80120fe:	ddee      	ble.n	80120de <_dtoa_r+0xa36>
 8012100:	9902      	ldr	r1, [sp, #8]
 8012102:	9300      	str	r3, [sp, #0]
 8012104:	2201      	movs	r2, #1
 8012106:	4648      	mov	r0, r9
 8012108:	f000 fba4 	bl	8012854 <__lshift>
 801210c:	4621      	mov	r1, r4
 801210e:	9002      	str	r0, [sp, #8]
 8012110:	f000 fc0c 	bl	801292c <__mcmp>
 8012114:	2800      	cmp	r0, #0
 8012116:	9b00      	ldr	r3, [sp, #0]
 8012118:	dc02      	bgt.n	8012120 <_dtoa_r+0xa78>
 801211a:	d1e0      	bne.n	80120de <_dtoa_r+0xa36>
 801211c:	07da      	lsls	r2, r3, #31
 801211e:	d5de      	bpl.n	80120de <_dtoa_r+0xa36>
 8012120:	2b39      	cmp	r3, #57	@ 0x39
 8012122:	d1da      	bne.n	80120da <_dtoa_r+0xa32>
 8012124:	2339      	movs	r3, #57	@ 0x39
 8012126:	f88b 3000 	strb.w	r3, [fp]
 801212a:	4633      	mov	r3, r6
 801212c:	461e      	mov	r6, r3
 801212e:	3b01      	subs	r3, #1
 8012130:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012134:	2a39      	cmp	r2, #57	@ 0x39
 8012136:	d04e      	beq.n	80121d6 <_dtoa_r+0xb2e>
 8012138:	3201      	adds	r2, #1
 801213a:	701a      	strb	r2, [r3, #0]
 801213c:	e501      	b.n	8011b42 <_dtoa_r+0x49a>
 801213e:	2a00      	cmp	r2, #0
 8012140:	dd03      	ble.n	801214a <_dtoa_r+0xaa2>
 8012142:	2b39      	cmp	r3, #57	@ 0x39
 8012144:	d0ee      	beq.n	8012124 <_dtoa_r+0xa7c>
 8012146:	3301      	adds	r3, #1
 8012148:	e7c9      	b.n	80120de <_dtoa_r+0xa36>
 801214a:	9a00      	ldr	r2, [sp, #0]
 801214c:	9908      	ldr	r1, [sp, #32]
 801214e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012152:	428a      	cmp	r2, r1
 8012154:	d028      	beq.n	80121a8 <_dtoa_r+0xb00>
 8012156:	9902      	ldr	r1, [sp, #8]
 8012158:	2300      	movs	r3, #0
 801215a:	220a      	movs	r2, #10
 801215c:	4648      	mov	r0, r9
 801215e:	f000 f9d5 	bl	801250c <__multadd>
 8012162:	42af      	cmp	r7, r5
 8012164:	9002      	str	r0, [sp, #8]
 8012166:	f04f 0300 	mov.w	r3, #0
 801216a:	f04f 020a 	mov.w	r2, #10
 801216e:	4639      	mov	r1, r7
 8012170:	4648      	mov	r0, r9
 8012172:	d107      	bne.n	8012184 <_dtoa_r+0xadc>
 8012174:	f000 f9ca 	bl	801250c <__multadd>
 8012178:	4607      	mov	r7, r0
 801217a:	4605      	mov	r5, r0
 801217c:	9b00      	ldr	r3, [sp, #0]
 801217e:	3301      	adds	r3, #1
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	e777      	b.n	8012074 <_dtoa_r+0x9cc>
 8012184:	f000 f9c2 	bl	801250c <__multadd>
 8012188:	4629      	mov	r1, r5
 801218a:	4607      	mov	r7, r0
 801218c:	2300      	movs	r3, #0
 801218e:	220a      	movs	r2, #10
 8012190:	4648      	mov	r0, r9
 8012192:	f000 f9bb 	bl	801250c <__multadd>
 8012196:	4605      	mov	r5, r0
 8012198:	e7f0      	b.n	801217c <_dtoa_r+0xad4>
 801219a:	f1bb 0f00 	cmp.w	fp, #0
 801219e:	bfcc      	ite	gt
 80121a0:	465e      	movgt	r6, fp
 80121a2:	2601      	movle	r6, #1
 80121a4:	4456      	add	r6, sl
 80121a6:	2700      	movs	r7, #0
 80121a8:	9902      	ldr	r1, [sp, #8]
 80121aa:	9300      	str	r3, [sp, #0]
 80121ac:	2201      	movs	r2, #1
 80121ae:	4648      	mov	r0, r9
 80121b0:	f000 fb50 	bl	8012854 <__lshift>
 80121b4:	4621      	mov	r1, r4
 80121b6:	9002      	str	r0, [sp, #8]
 80121b8:	f000 fbb8 	bl	801292c <__mcmp>
 80121bc:	2800      	cmp	r0, #0
 80121be:	dcb4      	bgt.n	801212a <_dtoa_r+0xa82>
 80121c0:	d102      	bne.n	80121c8 <_dtoa_r+0xb20>
 80121c2:	9b00      	ldr	r3, [sp, #0]
 80121c4:	07db      	lsls	r3, r3, #31
 80121c6:	d4b0      	bmi.n	801212a <_dtoa_r+0xa82>
 80121c8:	4633      	mov	r3, r6
 80121ca:	461e      	mov	r6, r3
 80121cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121d0:	2a30      	cmp	r2, #48	@ 0x30
 80121d2:	d0fa      	beq.n	80121ca <_dtoa_r+0xb22>
 80121d4:	e4b5      	b.n	8011b42 <_dtoa_r+0x49a>
 80121d6:	459a      	cmp	sl, r3
 80121d8:	d1a8      	bne.n	801212c <_dtoa_r+0xa84>
 80121da:	2331      	movs	r3, #49	@ 0x31
 80121dc:	f108 0801 	add.w	r8, r8, #1
 80121e0:	f88a 3000 	strb.w	r3, [sl]
 80121e4:	e4ad      	b.n	8011b42 <_dtoa_r+0x49a>
 80121e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80121e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8012244 <_dtoa_r+0xb9c>
 80121ec:	b11b      	cbz	r3, 80121f6 <_dtoa_r+0xb4e>
 80121ee:	f10a 0308 	add.w	r3, sl, #8
 80121f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80121f4:	6013      	str	r3, [r2, #0]
 80121f6:	4650      	mov	r0, sl
 80121f8:	b017      	add	sp, #92	@ 0x5c
 80121fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fe:	9b07      	ldr	r3, [sp, #28]
 8012200:	2b01      	cmp	r3, #1
 8012202:	f77f ae2e 	ble.w	8011e62 <_dtoa_r+0x7ba>
 8012206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012208:	9308      	str	r3, [sp, #32]
 801220a:	2001      	movs	r0, #1
 801220c:	e64d      	b.n	8011eaa <_dtoa_r+0x802>
 801220e:	f1bb 0f00 	cmp.w	fp, #0
 8012212:	f77f aed9 	ble.w	8011fc8 <_dtoa_r+0x920>
 8012216:	4656      	mov	r6, sl
 8012218:	9802      	ldr	r0, [sp, #8]
 801221a:	4621      	mov	r1, r4
 801221c:	f7ff f9b9 	bl	8011592 <quorem>
 8012220:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8012224:	f806 3b01 	strb.w	r3, [r6], #1
 8012228:	eba6 020a 	sub.w	r2, r6, sl
 801222c:	4593      	cmp	fp, r2
 801222e:	ddb4      	ble.n	801219a <_dtoa_r+0xaf2>
 8012230:	9902      	ldr	r1, [sp, #8]
 8012232:	2300      	movs	r3, #0
 8012234:	220a      	movs	r2, #10
 8012236:	4648      	mov	r0, r9
 8012238:	f000 f968 	bl	801250c <__multadd>
 801223c:	9002      	str	r0, [sp, #8]
 801223e:	e7eb      	b.n	8012218 <_dtoa_r+0xb70>
 8012240:	08013a44 	.word	0x08013a44
 8012244:	080139c8 	.word	0x080139c8

08012248 <_free_r>:
 8012248:	b538      	push	{r3, r4, r5, lr}
 801224a:	4605      	mov	r5, r0
 801224c:	2900      	cmp	r1, #0
 801224e:	d041      	beq.n	80122d4 <_free_r+0x8c>
 8012250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012254:	1f0c      	subs	r4, r1, #4
 8012256:	2b00      	cmp	r3, #0
 8012258:	bfb8      	it	lt
 801225a:	18e4      	addlt	r4, r4, r3
 801225c:	f000 f8e8 	bl	8012430 <__malloc_lock>
 8012260:	4a1d      	ldr	r2, [pc, #116]	@ (80122d8 <_free_r+0x90>)
 8012262:	6813      	ldr	r3, [r2, #0]
 8012264:	b933      	cbnz	r3, 8012274 <_free_r+0x2c>
 8012266:	6063      	str	r3, [r4, #4]
 8012268:	6014      	str	r4, [r2, #0]
 801226a:	4628      	mov	r0, r5
 801226c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012270:	f000 b8e4 	b.w	801243c <__malloc_unlock>
 8012274:	42a3      	cmp	r3, r4
 8012276:	d908      	bls.n	801228a <_free_r+0x42>
 8012278:	6820      	ldr	r0, [r4, #0]
 801227a:	1821      	adds	r1, r4, r0
 801227c:	428b      	cmp	r3, r1
 801227e:	bf01      	itttt	eq
 8012280:	6819      	ldreq	r1, [r3, #0]
 8012282:	685b      	ldreq	r3, [r3, #4]
 8012284:	1809      	addeq	r1, r1, r0
 8012286:	6021      	streq	r1, [r4, #0]
 8012288:	e7ed      	b.n	8012266 <_free_r+0x1e>
 801228a:	461a      	mov	r2, r3
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	b10b      	cbz	r3, 8012294 <_free_r+0x4c>
 8012290:	42a3      	cmp	r3, r4
 8012292:	d9fa      	bls.n	801228a <_free_r+0x42>
 8012294:	6811      	ldr	r1, [r2, #0]
 8012296:	1850      	adds	r0, r2, r1
 8012298:	42a0      	cmp	r0, r4
 801229a:	d10b      	bne.n	80122b4 <_free_r+0x6c>
 801229c:	6820      	ldr	r0, [r4, #0]
 801229e:	4401      	add	r1, r0
 80122a0:	1850      	adds	r0, r2, r1
 80122a2:	4283      	cmp	r3, r0
 80122a4:	6011      	str	r1, [r2, #0]
 80122a6:	d1e0      	bne.n	801226a <_free_r+0x22>
 80122a8:	6818      	ldr	r0, [r3, #0]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	6053      	str	r3, [r2, #4]
 80122ae:	4408      	add	r0, r1
 80122b0:	6010      	str	r0, [r2, #0]
 80122b2:	e7da      	b.n	801226a <_free_r+0x22>
 80122b4:	d902      	bls.n	80122bc <_free_r+0x74>
 80122b6:	230c      	movs	r3, #12
 80122b8:	602b      	str	r3, [r5, #0]
 80122ba:	e7d6      	b.n	801226a <_free_r+0x22>
 80122bc:	6820      	ldr	r0, [r4, #0]
 80122be:	1821      	adds	r1, r4, r0
 80122c0:	428b      	cmp	r3, r1
 80122c2:	bf04      	itt	eq
 80122c4:	6819      	ldreq	r1, [r3, #0]
 80122c6:	685b      	ldreq	r3, [r3, #4]
 80122c8:	6063      	str	r3, [r4, #4]
 80122ca:	bf04      	itt	eq
 80122cc:	1809      	addeq	r1, r1, r0
 80122ce:	6021      	streq	r1, [r4, #0]
 80122d0:	6054      	str	r4, [r2, #4]
 80122d2:	e7ca      	b.n	801226a <_free_r+0x22>
 80122d4:	bd38      	pop	{r3, r4, r5, pc}
 80122d6:	bf00      	nop
 80122d8:	20008378 	.word	0x20008378

080122dc <malloc>:
 80122dc:	4b02      	ldr	r3, [pc, #8]	@ (80122e8 <malloc+0xc>)
 80122de:	4601      	mov	r1, r0
 80122e0:	6818      	ldr	r0, [r3, #0]
 80122e2:	f000 b825 	b.w	8012330 <_malloc_r>
 80122e6:	bf00      	nop
 80122e8:	2000010c 	.word	0x2000010c

080122ec <sbrk_aligned>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	4e0f      	ldr	r6, [pc, #60]	@ (801232c <sbrk_aligned+0x40>)
 80122f0:	460c      	mov	r4, r1
 80122f2:	6831      	ldr	r1, [r6, #0]
 80122f4:	4605      	mov	r5, r0
 80122f6:	b911      	cbnz	r1, 80122fe <sbrk_aligned+0x12>
 80122f8:	f000 fe3e 	bl	8012f78 <_sbrk_r>
 80122fc:	6030      	str	r0, [r6, #0]
 80122fe:	4621      	mov	r1, r4
 8012300:	4628      	mov	r0, r5
 8012302:	f000 fe39 	bl	8012f78 <_sbrk_r>
 8012306:	1c43      	adds	r3, r0, #1
 8012308:	d103      	bne.n	8012312 <sbrk_aligned+0x26>
 801230a:	f04f 34ff 	mov.w	r4, #4294967295
 801230e:	4620      	mov	r0, r4
 8012310:	bd70      	pop	{r4, r5, r6, pc}
 8012312:	1cc4      	adds	r4, r0, #3
 8012314:	f024 0403 	bic.w	r4, r4, #3
 8012318:	42a0      	cmp	r0, r4
 801231a:	d0f8      	beq.n	801230e <sbrk_aligned+0x22>
 801231c:	1a21      	subs	r1, r4, r0
 801231e:	4628      	mov	r0, r5
 8012320:	f000 fe2a 	bl	8012f78 <_sbrk_r>
 8012324:	3001      	adds	r0, #1
 8012326:	d1f2      	bne.n	801230e <sbrk_aligned+0x22>
 8012328:	e7ef      	b.n	801230a <sbrk_aligned+0x1e>
 801232a:	bf00      	nop
 801232c:	20008374 	.word	0x20008374

08012330 <_malloc_r>:
 8012330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012334:	1ccd      	adds	r5, r1, #3
 8012336:	f025 0503 	bic.w	r5, r5, #3
 801233a:	3508      	adds	r5, #8
 801233c:	2d0c      	cmp	r5, #12
 801233e:	bf38      	it	cc
 8012340:	250c      	movcc	r5, #12
 8012342:	2d00      	cmp	r5, #0
 8012344:	4606      	mov	r6, r0
 8012346:	db01      	blt.n	801234c <_malloc_r+0x1c>
 8012348:	42a9      	cmp	r1, r5
 801234a:	d904      	bls.n	8012356 <_malloc_r+0x26>
 801234c:	230c      	movs	r3, #12
 801234e:	6033      	str	r3, [r6, #0]
 8012350:	2000      	movs	r0, #0
 8012352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801242c <_malloc_r+0xfc>
 801235a:	f000 f869 	bl	8012430 <__malloc_lock>
 801235e:	f8d8 3000 	ldr.w	r3, [r8]
 8012362:	461c      	mov	r4, r3
 8012364:	bb44      	cbnz	r4, 80123b8 <_malloc_r+0x88>
 8012366:	4629      	mov	r1, r5
 8012368:	4630      	mov	r0, r6
 801236a:	f7ff ffbf 	bl	80122ec <sbrk_aligned>
 801236e:	1c43      	adds	r3, r0, #1
 8012370:	4604      	mov	r4, r0
 8012372:	d158      	bne.n	8012426 <_malloc_r+0xf6>
 8012374:	f8d8 4000 	ldr.w	r4, [r8]
 8012378:	4627      	mov	r7, r4
 801237a:	2f00      	cmp	r7, #0
 801237c:	d143      	bne.n	8012406 <_malloc_r+0xd6>
 801237e:	2c00      	cmp	r4, #0
 8012380:	d04b      	beq.n	801241a <_malloc_r+0xea>
 8012382:	6823      	ldr	r3, [r4, #0]
 8012384:	4639      	mov	r1, r7
 8012386:	4630      	mov	r0, r6
 8012388:	eb04 0903 	add.w	r9, r4, r3
 801238c:	f000 fdf4 	bl	8012f78 <_sbrk_r>
 8012390:	4581      	cmp	r9, r0
 8012392:	d142      	bne.n	801241a <_malloc_r+0xea>
 8012394:	6821      	ldr	r1, [r4, #0]
 8012396:	1a6d      	subs	r5, r5, r1
 8012398:	4629      	mov	r1, r5
 801239a:	4630      	mov	r0, r6
 801239c:	f7ff ffa6 	bl	80122ec <sbrk_aligned>
 80123a0:	3001      	adds	r0, #1
 80123a2:	d03a      	beq.n	801241a <_malloc_r+0xea>
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	442b      	add	r3, r5
 80123a8:	6023      	str	r3, [r4, #0]
 80123aa:	f8d8 3000 	ldr.w	r3, [r8]
 80123ae:	685a      	ldr	r2, [r3, #4]
 80123b0:	bb62      	cbnz	r2, 801240c <_malloc_r+0xdc>
 80123b2:	f8c8 7000 	str.w	r7, [r8]
 80123b6:	e00f      	b.n	80123d8 <_malloc_r+0xa8>
 80123b8:	6822      	ldr	r2, [r4, #0]
 80123ba:	1b52      	subs	r2, r2, r5
 80123bc:	d420      	bmi.n	8012400 <_malloc_r+0xd0>
 80123be:	2a0b      	cmp	r2, #11
 80123c0:	d917      	bls.n	80123f2 <_malloc_r+0xc2>
 80123c2:	1961      	adds	r1, r4, r5
 80123c4:	42a3      	cmp	r3, r4
 80123c6:	6025      	str	r5, [r4, #0]
 80123c8:	bf18      	it	ne
 80123ca:	6059      	strne	r1, [r3, #4]
 80123cc:	6863      	ldr	r3, [r4, #4]
 80123ce:	bf08      	it	eq
 80123d0:	f8c8 1000 	streq.w	r1, [r8]
 80123d4:	5162      	str	r2, [r4, r5]
 80123d6:	604b      	str	r3, [r1, #4]
 80123d8:	4630      	mov	r0, r6
 80123da:	f000 f82f 	bl	801243c <__malloc_unlock>
 80123de:	f104 000b 	add.w	r0, r4, #11
 80123e2:	1d23      	adds	r3, r4, #4
 80123e4:	f020 0007 	bic.w	r0, r0, #7
 80123e8:	1ac2      	subs	r2, r0, r3
 80123ea:	bf1c      	itt	ne
 80123ec:	1a1b      	subne	r3, r3, r0
 80123ee:	50a3      	strne	r3, [r4, r2]
 80123f0:	e7af      	b.n	8012352 <_malloc_r+0x22>
 80123f2:	6862      	ldr	r2, [r4, #4]
 80123f4:	42a3      	cmp	r3, r4
 80123f6:	bf0c      	ite	eq
 80123f8:	f8c8 2000 	streq.w	r2, [r8]
 80123fc:	605a      	strne	r2, [r3, #4]
 80123fe:	e7eb      	b.n	80123d8 <_malloc_r+0xa8>
 8012400:	4623      	mov	r3, r4
 8012402:	6864      	ldr	r4, [r4, #4]
 8012404:	e7ae      	b.n	8012364 <_malloc_r+0x34>
 8012406:	463c      	mov	r4, r7
 8012408:	687f      	ldr	r7, [r7, #4]
 801240a:	e7b6      	b.n	801237a <_malloc_r+0x4a>
 801240c:	461a      	mov	r2, r3
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	42a3      	cmp	r3, r4
 8012412:	d1fb      	bne.n	801240c <_malloc_r+0xdc>
 8012414:	2300      	movs	r3, #0
 8012416:	6053      	str	r3, [r2, #4]
 8012418:	e7de      	b.n	80123d8 <_malloc_r+0xa8>
 801241a:	230c      	movs	r3, #12
 801241c:	6033      	str	r3, [r6, #0]
 801241e:	4630      	mov	r0, r6
 8012420:	f000 f80c 	bl	801243c <__malloc_unlock>
 8012424:	e794      	b.n	8012350 <_malloc_r+0x20>
 8012426:	6005      	str	r5, [r0, #0]
 8012428:	e7d6      	b.n	80123d8 <_malloc_r+0xa8>
 801242a:	bf00      	nop
 801242c:	20008378 	.word	0x20008378

08012430 <__malloc_lock>:
 8012430:	4801      	ldr	r0, [pc, #4]	@ (8012438 <__malloc_lock+0x8>)
 8012432:	f7ff b896 	b.w	8011562 <__retarget_lock_acquire_recursive>
 8012436:	bf00      	nop
 8012438:	20008370 	.word	0x20008370

0801243c <__malloc_unlock>:
 801243c:	4801      	ldr	r0, [pc, #4]	@ (8012444 <__malloc_unlock+0x8>)
 801243e:	f7ff b891 	b.w	8011564 <__retarget_lock_release_recursive>
 8012442:	bf00      	nop
 8012444:	20008370 	.word	0x20008370

08012448 <_Balloc>:
 8012448:	b570      	push	{r4, r5, r6, lr}
 801244a:	69c6      	ldr	r6, [r0, #28]
 801244c:	4604      	mov	r4, r0
 801244e:	460d      	mov	r5, r1
 8012450:	b976      	cbnz	r6, 8012470 <_Balloc+0x28>
 8012452:	2010      	movs	r0, #16
 8012454:	f7ff ff42 	bl	80122dc <malloc>
 8012458:	4602      	mov	r2, r0
 801245a:	61e0      	str	r0, [r4, #28]
 801245c:	b920      	cbnz	r0, 8012468 <_Balloc+0x20>
 801245e:	4b18      	ldr	r3, [pc, #96]	@ (80124c0 <_Balloc+0x78>)
 8012460:	4818      	ldr	r0, [pc, #96]	@ (80124c4 <_Balloc+0x7c>)
 8012462:	216b      	movs	r1, #107	@ 0x6b
 8012464:	f000 fd98 	bl	8012f98 <__assert_func>
 8012468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801246c:	6006      	str	r6, [r0, #0]
 801246e:	60c6      	str	r6, [r0, #12]
 8012470:	69e6      	ldr	r6, [r4, #28]
 8012472:	68f3      	ldr	r3, [r6, #12]
 8012474:	b183      	cbz	r3, 8012498 <_Balloc+0x50>
 8012476:	69e3      	ldr	r3, [r4, #28]
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801247e:	b9b8      	cbnz	r0, 80124b0 <_Balloc+0x68>
 8012480:	2101      	movs	r1, #1
 8012482:	fa01 f605 	lsl.w	r6, r1, r5
 8012486:	1d72      	adds	r2, r6, #5
 8012488:	0092      	lsls	r2, r2, #2
 801248a:	4620      	mov	r0, r4
 801248c:	f000 fda2 	bl	8012fd4 <_calloc_r>
 8012490:	b160      	cbz	r0, 80124ac <_Balloc+0x64>
 8012492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012496:	e00e      	b.n	80124b6 <_Balloc+0x6e>
 8012498:	2221      	movs	r2, #33	@ 0x21
 801249a:	2104      	movs	r1, #4
 801249c:	4620      	mov	r0, r4
 801249e:	f000 fd99 	bl	8012fd4 <_calloc_r>
 80124a2:	69e3      	ldr	r3, [r4, #28]
 80124a4:	60f0      	str	r0, [r6, #12]
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1e4      	bne.n	8012476 <_Balloc+0x2e>
 80124ac:	2000      	movs	r0, #0
 80124ae:	bd70      	pop	{r4, r5, r6, pc}
 80124b0:	6802      	ldr	r2, [r0, #0]
 80124b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80124b6:	2300      	movs	r3, #0
 80124b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80124bc:	e7f7      	b.n	80124ae <_Balloc+0x66>
 80124be:	bf00      	nop
 80124c0:	080139d5 	.word	0x080139d5
 80124c4:	08013a55 	.word	0x08013a55

080124c8 <_Bfree>:
 80124c8:	b570      	push	{r4, r5, r6, lr}
 80124ca:	69c6      	ldr	r6, [r0, #28]
 80124cc:	4605      	mov	r5, r0
 80124ce:	460c      	mov	r4, r1
 80124d0:	b976      	cbnz	r6, 80124f0 <_Bfree+0x28>
 80124d2:	2010      	movs	r0, #16
 80124d4:	f7ff ff02 	bl	80122dc <malloc>
 80124d8:	4602      	mov	r2, r0
 80124da:	61e8      	str	r0, [r5, #28]
 80124dc:	b920      	cbnz	r0, 80124e8 <_Bfree+0x20>
 80124de:	4b09      	ldr	r3, [pc, #36]	@ (8012504 <_Bfree+0x3c>)
 80124e0:	4809      	ldr	r0, [pc, #36]	@ (8012508 <_Bfree+0x40>)
 80124e2:	218f      	movs	r1, #143	@ 0x8f
 80124e4:	f000 fd58 	bl	8012f98 <__assert_func>
 80124e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124ec:	6006      	str	r6, [r0, #0]
 80124ee:	60c6      	str	r6, [r0, #12]
 80124f0:	b13c      	cbz	r4, 8012502 <_Bfree+0x3a>
 80124f2:	69eb      	ldr	r3, [r5, #28]
 80124f4:	6862      	ldr	r2, [r4, #4]
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80124fc:	6021      	str	r1, [r4, #0]
 80124fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012502:	bd70      	pop	{r4, r5, r6, pc}
 8012504:	080139d5 	.word	0x080139d5
 8012508:	08013a55 	.word	0x08013a55

0801250c <__multadd>:
 801250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012510:	690d      	ldr	r5, [r1, #16]
 8012512:	4607      	mov	r7, r0
 8012514:	460c      	mov	r4, r1
 8012516:	461e      	mov	r6, r3
 8012518:	f101 0c14 	add.w	ip, r1, #20
 801251c:	2000      	movs	r0, #0
 801251e:	f8dc 3000 	ldr.w	r3, [ip]
 8012522:	b299      	uxth	r1, r3
 8012524:	fb02 6101 	mla	r1, r2, r1, r6
 8012528:	0c1e      	lsrs	r6, r3, #16
 801252a:	0c0b      	lsrs	r3, r1, #16
 801252c:	fb02 3306 	mla	r3, r2, r6, r3
 8012530:	b289      	uxth	r1, r1
 8012532:	3001      	adds	r0, #1
 8012534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012538:	4285      	cmp	r5, r0
 801253a:	f84c 1b04 	str.w	r1, [ip], #4
 801253e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012542:	dcec      	bgt.n	801251e <__multadd+0x12>
 8012544:	b30e      	cbz	r6, 801258a <__multadd+0x7e>
 8012546:	68a3      	ldr	r3, [r4, #8]
 8012548:	42ab      	cmp	r3, r5
 801254a:	dc19      	bgt.n	8012580 <__multadd+0x74>
 801254c:	6861      	ldr	r1, [r4, #4]
 801254e:	4638      	mov	r0, r7
 8012550:	3101      	adds	r1, #1
 8012552:	f7ff ff79 	bl	8012448 <_Balloc>
 8012556:	4680      	mov	r8, r0
 8012558:	b928      	cbnz	r0, 8012566 <__multadd+0x5a>
 801255a:	4602      	mov	r2, r0
 801255c:	4b0c      	ldr	r3, [pc, #48]	@ (8012590 <__multadd+0x84>)
 801255e:	480d      	ldr	r0, [pc, #52]	@ (8012594 <__multadd+0x88>)
 8012560:	21ba      	movs	r1, #186	@ 0xba
 8012562:	f000 fd19 	bl	8012f98 <__assert_func>
 8012566:	6922      	ldr	r2, [r4, #16]
 8012568:	3202      	adds	r2, #2
 801256a:	f104 010c 	add.w	r1, r4, #12
 801256e:	0092      	lsls	r2, r2, #2
 8012570:	300c      	adds	r0, #12
 8012572:	f7ff f800 	bl	8011576 <memcpy>
 8012576:	4621      	mov	r1, r4
 8012578:	4638      	mov	r0, r7
 801257a:	f7ff ffa5 	bl	80124c8 <_Bfree>
 801257e:	4644      	mov	r4, r8
 8012580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012584:	3501      	adds	r5, #1
 8012586:	615e      	str	r6, [r3, #20]
 8012588:	6125      	str	r5, [r4, #16]
 801258a:	4620      	mov	r0, r4
 801258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012590:	08013a44 	.word	0x08013a44
 8012594:	08013a55 	.word	0x08013a55

08012598 <__hi0bits>:
 8012598:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801259c:	4603      	mov	r3, r0
 801259e:	bf36      	itet	cc
 80125a0:	0403      	lslcc	r3, r0, #16
 80125a2:	2000      	movcs	r0, #0
 80125a4:	2010      	movcc	r0, #16
 80125a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80125aa:	bf3c      	itt	cc
 80125ac:	021b      	lslcc	r3, r3, #8
 80125ae:	3008      	addcc	r0, #8
 80125b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80125b4:	bf3c      	itt	cc
 80125b6:	011b      	lslcc	r3, r3, #4
 80125b8:	3004      	addcc	r0, #4
 80125ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125be:	bf3c      	itt	cc
 80125c0:	009b      	lslcc	r3, r3, #2
 80125c2:	3002      	addcc	r0, #2
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	db05      	blt.n	80125d4 <__hi0bits+0x3c>
 80125c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80125cc:	f100 0001 	add.w	r0, r0, #1
 80125d0:	bf08      	it	eq
 80125d2:	2020      	moveq	r0, #32
 80125d4:	4770      	bx	lr

080125d6 <__lo0bits>:
 80125d6:	6803      	ldr	r3, [r0, #0]
 80125d8:	4602      	mov	r2, r0
 80125da:	f013 0007 	ands.w	r0, r3, #7
 80125de:	d00b      	beq.n	80125f8 <__lo0bits+0x22>
 80125e0:	07d9      	lsls	r1, r3, #31
 80125e2:	d421      	bmi.n	8012628 <__lo0bits+0x52>
 80125e4:	0798      	lsls	r0, r3, #30
 80125e6:	bf49      	itett	mi
 80125e8:	085b      	lsrmi	r3, r3, #1
 80125ea:	089b      	lsrpl	r3, r3, #2
 80125ec:	2001      	movmi	r0, #1
 80125ee:	6013      	strmi	r3, [r2, #0]
 80125f0:	bf5c      	itt	pl
 80125f2:	6013      	strpl	r3, [r2, #0]
 80125f4:	2002      	movpl	r0, #2
 80125f6:	4770      	bx	lr
 80125f8:	b299      	uxth	r1, r3
 80125fa:	b909      	cbnz	r1, 8012600 <__lo0bits+0x2a>
 80125fc:	0c1b      	lsrs	r3, r3, #16
 80125fe:	2010      	movs	r0, #16
 8012600:	b2d9      	uxtb	r1, r3
 8012602:	b909      	cbnz	r1, 8012608 <__lo0bits+0x32>
 8012604:	3008      	adds	r0, #8
 8012606:	0a1b      	lsrs	r3, r3, #8
 8012608:	0719      	lsls	r1, r3, #28
 801260a:	bf04      	itt	eq
 801260c:	091b      	lsreq	r3, r3, #4
 801260e:	3004      	addeq	r0, #4
 8012610:	0799      	lsls	r1, r3, #30
 8012612:	bf04      	itt	eq
 8012614:	089b      	lsreq	r3, r3, #2
 8012616:	3002      	addeq	r0, #2
 8012618:	07d9      	lsls	r1, r3, #31
 801261a:	d403      	bmi.n	8012624 <__lo0bits+0x4e>
 801261c:	085b      	lsrs	r3, r3, #1
 801261e:	f100 0001 	add.w	r0, r0, #1
 8012622:	d003      	beq.n	801262c <__lo0bits+0x56>
 8012624:	6013      	str	r3, [r2, #0]
 8012626:	4770      	bx	lr
 8012628:	2000      	movs	r0, #0
 801262a:	4770      	bx	lr
 801262c:	2020      	movs	r0, #32
 801262e:	4770      	bx	lr

08012630 <__i2b>:
 8012630:	b510      	push	{r4, lr}
 8012632:	460c      	mov	r4, r1
 8012634:	2101      	movs	r1, #1
 8012636:	f7ff ff07 	bl	8012448 <_Balloc>
 801263a:	4602      	mov	r2, r0
 801263c:	b928      	cbnz	r0, 801264a <__i2b+0x1a>
 801263e:	4b05      	ldr	r3, [pc, #20]	@ (8012654 <__i2b+0x24>)
 8012640:	4805      	ldr	r0, [pc, #20]	@ (8012658 <__i2b+0x28>)
 8012642:	f240 1145 	movw	r1, #325	@ 0x145
 8012646:	f000 fca7 	bl	8012f98 <__assert_func>
 801264a:	2301      	movs	r3, #1
 801264c:	6144      	str	r4, [r0, #20]
 801264e:	6103      	str	r3, [r0, #16]
 8012650:	bd10      	pop	{r4, pc}
 8012652:	bf00      	nop
 8012654:	08013a44 	.word	0x08013a44
 8012658:	08013a55 	.word	0x08013a55

0801265c <__multiply>:
 801265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012660:	4617      	mov	r7, r2
 8012662:	690a      	ldr	r2, [r1, #16]
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	429a      	cmp	r2, r3
 8012668:	bfa8      	it	ge
 801266a:	463b      	movge	r3, r7
 801266c:	4689      	mov	r9, r1
 801266e:	bfa4      	itt	ge
 8012670:	460f      	movge	r7, r1
 8012672:	4699      	movge	r9, r3
 8012674:	693d      	ldr	r5, [r7, #16]
 8012676:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	6879      	ldr	r1, [r7, #4]
 801267e:	eb05 060a 	add.w	r6, r5, sl
 8012682:	42b3      	cmp	r3, r6
 8012684:	b085      	sub	sp, #20
 8012686:	bfb8      	it	lt
 8012688:	3101      	addlt	r1, #1
 801268a:	f7ff fedd 	bl	8012448 <_Balloc>
 801268e:	b930      	cbnz	r0, 801269e <__multiply+0x42>
 8012690:	4602      	mov	r2, r0
 8012692:	4b41      	ldr	r3, [pc, #260]	@ (8012798 <__multiply+0x13c>)
 8012694:	4841      	ldr	r0, [pc, #260]	@ (801279c <__multiply+0x140>)
 8012696:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801269a:	f000 fc7d 	bl	8012f98 <__assert_func>
 801269e:	f100 0414 	add.w	r4, r0, #20
 80126a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80126a6:	4623      	mov	r3, r4
 80126a8:	2200      	movs	r2, #0
 80126aa:	4573      	cmp	r3, lr
 80126ac:	d320      	bcc.n	80126f0 <__multiply+0x94>
 80126ae:	f107 0814 	add.w	r8, r7, #20
 80126b2:	f109 0114 	add.w	r1, r9, #20
 80126b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80126ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80126be:	9302      	str	r3, [sp, #8]
 80126c0:	1beb      	subs	r3, r5, r7
 80126c2:	3b15      	subs	r3, #21
 80126c4:	f023 0303 	bic.w	r3, r3, #3
 80126c8:	3304      	adds	r3, #4
 80126ca:	3715      	adds	r7, #21
 80126cc:	42bd      	cmp	r5, r7
 80126ce:	bf38      	it	cc
 80126d0:	2304      	movcc	r3, #4
 80126d2:	9301      	str	r3, [sp, #4]
 80126d4:	9b02      	ldr	r3, [sp, #8]
 80126d6:	9103      	str	r1, [sp, #12]
 80126d8:	428b      	cmp	r3, r1
 80126da:	d80c      	bhi.n	80126f6 <__multiply+0x9a>
 80126dc:	2e00      	cmp	r6, #0
 80126de:	dd03      	ble.n	80126e8 <__multiply+0x8c>
 80126e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d055      	beq.n	8012794 <__multiply+0x138>
 80126e8:	6106      	str	r6, [r0, #16]
 80126ea:	b005      	add	sp, #20
 80126ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f0:	f843 2b04 	str.w	r2, [r3], #4
 80126f4:	e7d9      	b.n	80126aa <__multiply+0x4e>
 80126f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80126fa:	f1ba 0f00 	cmp.w	sl, #0
 80126fe:	d01f      	beq.n	8012740 <__multiply+0xe4>
 8012700:	46c4      	mov	ip, r8
 8012702:	46a1      	mov	r9, r4
 8012704:	2700      	movs	r7, #0
 8012706:	f85c 2b04 	ldr.w	r2, [ip], #4
 801270a:	f8d9 3000 	ldr.w	r3, [r9]
 801270e:	fa1f fb82 	uxth.w	fp, r2
 8012712:	b29b      	uxth	r3, r3
 8012714:	fb0a 330b 	mla	r3, sl, fp, r3
 8012718:	443b      	add	r3, r7
 801271a:	f8d9 7000 	ldr.w	r7, [r9]
 801271e:	0c12      	lsrs	r2, r2, #16
 8012720:	0c3f      	lsrs	r7, r7, #16
 8012722:	fb0a 7202 	mla	r2, sl, r2, r7
 8012726:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801272a:	b29b      	uxth	r3, r3
 801272c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012730:	4565      	cmp	r5, ip
 8012732:	f849 3b04 	str.w	r3, [r9], #4
 8012736:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801273a:	d8e4      	bhi.n	8012706 <__multiply+0xaa>
 801273c:	9b01      	ldr	r3, [sp, #4]
 801273e:	50e7      	str	r7, [r4, r3]
 8012740:	9b03      	ldr	r3, [sp, #12]
 8012742:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012746:	3104      	adds	r1, #4
 8012748:	f1b9 0f00 	cmp.w	r9, #0
 801274c:	d020      	beq.n	8012790 <__multiply+0x134>
 801274e:	6823      	ldr	r3, [r4, #0]
 8012750:	4647      	mov	r7, r8
 8012752:	46a4      	mov	ip, r4
 8012754:	f04f 0a00 	mov.w	sl, #0
 8012758:	f8b7 b000 	ldrh.w	fp, [r7]
 801275c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012760:	fb09 220b 	mla	r2, r9, fp, r2
 8012764:	4452      	add	r2, sl
 8012766:	b29b      	uxth	r3, r3
 8012768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801276c:	f84c 3b04 	str.w	r3, [ip], #4
 8012770:	f857 3b04 	ldr.w	r3, [r7], #4
 8012774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012778:	f8bc 3000 	ldrh.w	r3, [ip]
 801277c:	fb09 330a 	mla	r3, r9, sl, r3
 8012780:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012784:	42bd      	cmp	r5, r7
 8012786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801278a:	d8e5      	bhi.n	8012758 <__multiply+0xfc>
 801278c:	9a01      	ldr	r2, [sp, #4]
 801278e:	50a3      	str	r3, [r4, r2]
 8012790:	3404      	adds	r4, #4
 8012792:	e79f      	b.n	80126d4 <__multiply+0x78>
 8012794:	3e01      	subs	r6, #1
 8012796:	e7a1      	b.n	80126dc <__multiply+0x80>
 8012798:	08013a44 	.word	0x08013a44
 801279c:	08013a55 	.word	0x08013a55

080127a0 <__pow5mult>:
 80127a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127a4:	4615      	mov	r5, r2
 80127a6:	f012 0203 	ands.w	r2, r2, #3
 80127aa:	4607      	mov	r7, r0
 80127ac:	460e      	mov	r6, r1
 80127ae:	d007      	beq.n	80127c0 <__pow5mult+0x20>
 80127b0:	4c25      	ldr	r4, [pc, #148]	@ (8012848 <__pow5mult+0xa8>)
 80127b2:	3a01      	subs	r2, #1
 80127b4:	2300      	movs	r3, #0
 80127b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80127ba:	f7ff fea7 	bl	801250c <__multadd>
 80127be:	4606      	mov	r6, r0
 80127c0:	10ad      	asrs	r5, r5, #2
 80127c2:	d03d      	beq.n	8012840 <__pow5mult+0xa0>
 80127c4:	69fc      	ldr	r4, [r7, #28]
 80127c6:	b97c      	cbnz	r4, 80127e8 <__pow5mult+0x48>
 80127c8:	2010      	movs	r0, #16
 80127ca:	f7ff fd87 	bl	80122dc <malloc>
 80127ce:	4602      	mov	r2, r0
 80127d0:	61f8      	str	r0, [r7, #28]
 80127d2:	b928      	cbnz	r0, 80127e0 <__pow5mult+0x40>
 80127d4:	4b1d      	ldr	r3, [pc, #116]	@ (801284c <__pow5mult+0xac>)
 80127d6:	481e      	ldr	r0, [pc, #120]	@ (8012850 <__pow5mult+0xb0>)
 80127d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80127dc:	f000 fbdc 	bl	8012f98 <__assert_func>
 80127e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80127e4:	6004      	str	r4, [r0, #0]
 80127e6:	60c4      	str	r4, [r0, #12]
 80127e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80127ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80127f0:	b94c      	cbnz	r4, 8012806 <__pow5mult+0x66>
 80127f2:	f240 2171 	movw	r1, #625	@ 0x271
 80127f6:	4638      	mov	r0, r7
 80127f8:	f7ff ff1a 	bl	8012630 <__i2b>
 80127fc:	2300      	movs	r3, #0
 80127fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8012802:	4604      	mov	r4, r0
 8012804:	6003      	str	r3, [r0, #0]
 8012806:	f04f 0900 	mov.w	r9, #0
 801280a:	07eb      	lsls	r3, r5, #31
 801280c:	d50a      	bpl.n	8012824 <__pow5mult+0x84>
 801280e:	4631      	mov	r1, r6
 8012810:	4622      	mov	r2, r4
 8012812:	4638      	mov	r0, r7
 8012814:	f7ff ff22 	bl	801265c <__multiply>
 8012818:	4631      	mov	r1, r6
 801281a:	4680      	mov	r8, r0
 801281c:	4638      	mov	r0, r7
 801281e:	f7ff fe53 	bl	80124c8 <_Bfree>
 8012822:	4646      	mov	r6, r8
 8012824:	106d      	asrs	r5, r5, #1
 8012826:	d00b      	beq.n	8012840 <__pow5mult+0xa0>
 8012828:	6820      	ldr	r0, [r4, #0]
 801282a:	b938      	cbnz	r0, 801283c <__pow5mult+0x9c>
 801282c:	4622      	mov	r2, r4
 801282e:	4621      	mov	r1, r4
 8012830:	4638      	mov	r0, r7
 8012832:	f7ff ff13 	bl	801265c <__multiply>
 8012836:	6020      	str	r0, [r4, #0]
 8012838:	f8c0 9000 	str.w	r9, [r0]
 801283c:	4604      	mov	r4, r0
 801283e:	e7e4      	b.n	801280a <__pow5mult+0x6a>
 8012840:	4630      	mov	r0, r6
 8012842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012846:	bf00      	nop
 8012848:	08013b08 	.word	0x08013b08
 801284c:	080139d5 	.word	0x080139d5
 8012850:	08013a55 	.word	0x08013a55

08012854 <__lshift>:
 8012854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012858:	460c      	mov	r4, r1
 801285a:	6849      	ldr	r1, [r1, #4]
 801285c:	6923      	ldr	r3, [r4, #16]
 801285e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012862:	68a3      	ldr	r3, [r4, #8]
 8012864:	4607      	mov	r7, r0
 8012866:	4691      	mov	r9, r2
 8012868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801286c:	f108 0601 	add.w	r6, r8, #1
 8012870:	42b3      	cmp	r3, r6
 8012872:	db0b      	blt.n	801288c <__lshift+0x38>
 8012874:	4638      	mov	r0, r7
 8012876:	f7ff fde7 	bl	8012448 <_Balloc>
 801287a:	4605      	mov	r5, r0
 801287c:	b948      	cbnz	r0, 8012892 <__lshift+0x3e>
 801287e:	4602      	mov	r2, r0
 8012880:	4b28      	ldr	r3, [pc, #160]	@ (8012924 <__lshift+0xd0>)
 8012882:	4829      	ldr	r0, [pc, #164]	@ (8012928 <__lshift+0xd4>)
 8012884:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012888:	f000 fb86 	bl	8012f98 <__assert_func>
 801288c:	3101      	adds	r1, #1
 801288e:	005b      	lsls	r3, r3, #1
 8012890:	e7ee      	b.n	8012870 <__lshift+0x1c>
 8012892:	2300      	movs	r3, #0
 8012894:	f100 0114 	add.w	r1, r0, #20
 8012898:	f100 0210 	add.w	r2, r0, #16
 801289c:	4618      	mov	r0, r3
 801289e:	4553      	cmp	r3, sl
 80128a0:	db33      	blt.n	801290a <__lshift+0xb6>
 80128a2:	6920      	ldr	r0, [r4, #16]
 80128a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80128a8:	f104 0314 	add.w	r3, r4, #20
 80128ac:	f019 091f 	ands.w	r9, r9, #31
 80128b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80128b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80128b8:	d02b      	beq.n	8012912 <__lshift+0xbe>
 80128ba:	f1c9 0e20 	rsb	lr, r9, #32
 80128be:	468a      	mov	sl, r1
 80128c0:	2200      	movs	r2, #0
 80128c2:	6818      	ldr	r0, [r3, #0]
 80128c4:	fa00 f009 	lsl.w	r0, r0, r9
 80128c8:	4310      	orrs	r0, r2
 80128ca:	f84a 0b04 	str.w	r0, [sl], #4
 80128ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80128d2:	459c      	cmp	ip, r3
 80128d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80128d8:	d8f3      	bhi.n	80128c2 <__lshift+0x6e>
 80128da:	ebac 0304 	sub.w	r3, ip, r4
 80128de:	3b15      	subs	r3, #21
 80128e0:	f023 0303 	bic.w	r3, r3, #3
 80128e4:	3304      	adds	r3, #4
 80128e6:	f104 0015 	add.w	r0, r4, #21
 80128ea:	4560      	cmp	r0, ip
 80128ec:	bf88      	it	hi
 80128ee:	2304      	movhi	r3, #4
 80128f0:	50ca      	str	r2, [r1, r3]
 80128f2:	b10a      	cbz	r2, 80128f8 <__lshift+0xa4>
 80128f4:	f108 0602 	add.w	r6, r8, #2
 80128f8:	3e01      	subs	r6, #1
 80128fa:	4638      	mov	r0, r7
 80128fc:	612e      	str	r6, [r5, #16]
 80128fe:	4621      	mov	r1, r4
 8012900:	f7ff fde2 	bl	80124c8 <_Bfree>
 8012904:	4628      	mov	r0, r5
 8012906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801290a:	f842 0f04 	str.w	r0, [r2, #4]!
 801290e:	3301      	adds	r3, #1
 8012910:	e7c5      	b.n	801289e <__lshift+0x4a>
 8012912:	3904      	subs	r1, #4
 8012914:	f853 2b04 	ldr.w	r2, [r3], #4
 8012918:	f841 2f04 	str.w	r2, [r1, #4]!
 801291c:	459c      	cmp	ip, r3
 801291e:	d8f9      	bhi.n	8012914 <__lshift+0xc0>
 8012920:	e7ea      	b.n	80128f8 <__lshift+0xa4>
 8012922:	bf00      	nop
 8012924:	08013a44 	.word	0x08013a44
 8012928:	08013a55 	.word	0x08013a55

0801292c <__mcmp>:
 801292c:	690a      	ldr	r2, [r1, #16]
 801292e:	4603      	mov	r3, r0
 8012930:	6900      	ldr	r0, [r0, #16]
 8012932:	1a80      	subs	r0, r0, r2
 8012934:	b530      	push	{r4, r5, lr}
 8012936:	d10e      	bne.n	8012956 <__mcmp+0x2a>
 8012938:	3314      	adds	r3, #20
 801293a:	3114      	adds	r1, #20
 801293c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012940:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012944:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012948:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801294c:	4295      	cmp	r5, r2
 801294e:	d003      	beq.n	8012958 <__mcmp+0x2c>
 8012950:	d205      	bcs.n	801295e <__mcmp+0x32>
 8012952:	f04f 30ff 	mov.w	r0, #4294967295
 8012956:	bd30      	pop	{r4, r5, pc}
 8012958:	42a3      	cmp	r3, r4
 801295a:	d3f3      	bcc.n	8012944 <__mcmp+0x18>
 801295c:	e7fb      	b.n	8012956 <__mcmp+0x2a>
 801295e:	2001      	movs	r0, #1
 8012960:	e7f9      	b.n	8012956 <__mcmp+0x2a>
	...

08012964 <__mdiff>:
 8012964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012968:	4689      	mov	r9, r1
 801296a:	4606      	mov	r6, r0
 801296c:	4611      	mov	r1, r2
 801296e:	4648      	mov	r0, r9
 8012970:	4614      	mov	r4, r2
 8012972:	f7ff ffdb 	bl	801292c <__mcmp>
 8012976:	1e05      	subs	r5, r0, #0
 8012978:	d112      	bne.n	80129a0 <__mdiff+0x3c>
 801297a:	4629      	mov	r1, r5
 801297c:	4630      	mov	r0, r6
 801297e:	f7ff fd63 	bl	8012448 <_Balloc>
 8012982:	4602      	mov	r2, r0
 8012984:	b928      	cbnz	r0, 8012992 <__mdiff+0x2e>
 8012986:	4b3f      	ldr	r3, [pc, #252]	@ (8012a84 <__mdiff+0x120>)
 8012988:	f240 2137 	movw	r1, #567	@ 0x237
 801298c:	483e      	ldr	r0, [pc, #248]	@ (8012a88 <__mdiff+0x124>)
 801298e:	f000 fb03 	bl	8012f98 <__assert_func>
 8012992:	2301      	movs	r3, #1
 8012994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012998:	4610      	mov	r0, r2
 801299a:	b003      	add	sp, #12
 801299c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a0:	bfbc      	itt	lt
 80129a2:	464b      	movlt	r3, r9
 80129a4:	46a1      	movlt	r9, r4
 80129a6:	4630      	mov	r0, r6
 80129a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80129ac:	bfba      	itte	lt
 80129ae:	461c      	movlt	r4, r3
 80129b0:	2501      	movlt	r5, #1
 80129b2:	2500      	movge	r5, #0
 80129b4:	f7ff fd48 	bl	8012448 <_Balloc>
 80129b8:	4602      	mov	r2, r0
 80129ba:	b918      	cbnz	r0, 80129c4 <__mdiff+0x60>
 80129bc:	4b31      	ldr	r3, [pc, #196]	@ (8012a84 <__mdiff+0x120>)
 80129be:	f240 2145 	movw	r1, #581	@ 0x245
 80129c2:	e7e3      	b.n	801298c <__mdiff+0x28>
 80129c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80129c8:	6926      	ldr	r6, [r4, #16]
 80129ca:	60c5      	str	r5, [r0, #12]
 80129cc:	f109 0310 	add.w	r3, r9, #16
 80129d0:	f109 0514 	add.w	r5, r9, #20
 80129d4:	f104 0e14 	add.w	lr, r4, #20
 80129d8:	f100 0b14 	add.w	fp, r0, #20
 80129dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80129e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80129e4:	9301      	str	r3, [sp, #4]
 80129e6:	46d9      	mov	r9, fp
 80129e8:	f04f 0c00 	mov.w	ip, #0
 80129ec:	9b01      	ldr	r3, [sp, #4]
 80129ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80129f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80129f6:	9301      	str	r3, [sp, #4]
 80129f8:	fa1f f38a 	uxth.w	r3, sl
 80129fc:	4619      	mov	r1, r3
 80129fe:	b283      	uxth	r3, r0
 8012a00:	1acb      	subs	r3, r1, r3
 8012a02:	0c00      	lsrs	r0, r0, #16
 8012a04:	4463      	add	r3, ip
 8012a06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012a0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012a14:	4576      	cmp	r6, lr
 8012a16:	f849 3b04 	str.w	r3, [r9], #4
 8012a1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a1e:	d8e5      	bhi.n	80129ec <__mdiff+0x88>
 8012a20:	1b33      	subs	r3, r6, r4
 8012a22:	3b15      	subs	r3, #21
 8012a24:	f023 0303 	bic.w	r3, r3, #3
 8012a28:	3415      	adds	r4, #21
 8012a2a:	3304      	adds	r3, #4
 8012a2c:	42a6      	cmp	r6, r4
 8012a2e:	bf38      	it	cc
 8012a30:	2304      	movcc	r3, #4
 8012a32:	441d      	add	r5, r3
 8012a34:	445b      	add	r3, fp
 8012a36:	461e      	mov	r6, r3
 8012a38:	462c      	mov	r4, r5
 8012a3a:	4544      	cmp	r4, r8
 8012a3c:	d30e      	bcc.n	8012a5c <__mdiff+0xf8>
 8012a3e:	f108 0103 	add.w	r1, r8, #3
 8012a42:	1b49      	subs	r1, r1, r5
 8012a44:	f021 0103 	bic.w	r1, r1, #3
 8012a48:	3d03      	subs	r5, #3
 8012a4a:	45a8      	cmp	r8, r5
 8012a4c:	bf38      	it	cc
 8012a4e:	2100      	movcc	r1, #0
 8012a50:	440b      	add	r3, r1
 8012a52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a56:	b191      	cbz	r1, 8012a7e <__mdiff+0x11a>
 8012a58:	6117      	str	r7, [r2, #16]
 8012a5a:	e79d      	b.n	8012998 <__mdiff+0x34>
 8012a5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012a60:	46e6      	mov	lr, ip
 8012a62:	0c08      	lsrs	r0, r1, #16
 8012a64:	fa1c fc81 	uxtah	ip, ip, r1
 8012a68:	4471      	add	r1, lr
 8012a6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012a6e:	b289      	uxth	r1, r1
 8012a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012a74:	f846 1b04 	str.w	r1, [r6], #4
 8012a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a7c:	e7dd      	b.n	8012a3a <__mdiff+0xd6>
 8012a7e:	3f01      	subs	r7, #1
 8012a80:	e7e7      	b.n	8012a52 <__mdiff+0xee>
 8012a82:	bf00      	nop
 8012a84:	08013a44 	.word	0x08013a44
 8012a88:	08013a55 	.word	0x08013a55

08012a8c <__d2b>:
 8012a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a90:	460f      	mov	r7, r1
 8012a92:	2101      	movs	r1, #1
 8012a94:	ec59 8b10 	vmov	r8, r9, d0
 8012a98:	4616      	mov	r6, r2
 8012a9a:	f7ff fcd5 	bl	8012448 <_Balloc>
 8012a9e:	4604      	mov	r4, r0
 8012aa0:	b930      	cbnz	r0, 8012ab0 <__d2b+0x24>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	4b23      	ldr	r3, [pc, #140]	@ (8012b34 <__d2b+0xa8>)
 8012aa6:	4824      	ldr	r0, [pc, #144]	@ (8012b38 <__d2b+0xac>)
 8012aa8:	f240 310f 	movw	r1, #783	@ 0x30f
 8012aac:	f000 fa74 	bl	8012f98 <__assert_func>
 8012ab0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ab4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ab8:	b10d      	cbz	r5, 8012abe <__d2b+0x32>
 8012aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012abe:	9301      	str	r3, [sp, #4]
 8012ac0:	f1b8 0300 	subs.w	r3, r8, #0
 8012ac4:	d023      	beq.n	8012b0e <__d2b+0x82>
 8012ac6:	4668      	mov	r0, sp
 8012ac8:	9300      	str	r3, [sp, #0]
 8012aca:	f7ff fd84 	bl	80125d6 <__lo0bits>
 8012ace:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ad2:	b1d0      	cbz	r0, 8012b0a <__d2b+0x7e>
 8012ad4:	f1c0 0320 	rsb	r3, r0, #32
 8012ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8012adc:	430b      	orrs	r3, r1
 8012ade:	40c2      	lsrs	r2, r0
 8012ae0:	6163      	str	r3, [r4, #20]
 8012ae2:	9201      	str	r2, [sp, #4]
 8012ae4:	9b01      	ldr	r3, [sp, #4]
 8012ae6:	61a3      	str	r3, [r4, #24]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	bf0c      	ite	eq
 8012aec:	2201      	moveq	r2, #1
 8012aee:	2202      	movne	r2, #2
 8012af0:	6122      	str	r2, [r4, #16]
 8012af2:	b1a5      	cbz	r5, 8012b1e <__d2b+0x92>
 8012af4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012af8:	4405      	add	r5, r0
 8012afa:	603d      	str	r5, [r7, #0]
 8012afc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012b00:	6030      	str	r0, [r6, #0]
 8012b02:	4620      	mov	r0, r4
 8012b04:	b003      	add	sp, #12
 8012b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b0a:	6161      	str	r1, [r4, #20]
 8012b0c:	e7ea      	b.n	8012ae4 <__d2b+0x58>
 8012b0e:	a801      	add	r0, sp, #4
 8012b10:	f7ff fd61 	bl	80125d6 <__lo0bits>
 8012b14:	9b01      	ldr	r3, [sp, #4]
 8012b16:	6163      	str	r3, [r4, #20]
 8012b18:	3020      	adds	r0, #32
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	e7e8      	b.n	8012af0 <__d2b+0x64>
 8012b1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012b26:	6038      	str	r0, [r7, #0]
 8012b28:	6918      	ldr	r0, [r3, #16]
 8012b2a:	f7ff fd35 	bl	8012598 <__hi0bits>
 8012b2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b32:	e7e5      	b.n	8012b00 <__d2b+0x74>
 8012b34:	08013a44 	.word	0x08013a44
 8012b38:	08013a55 	.word	0x08013a55

08012b3c <__ssputs_r>:
 8012b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b40:	688e      	ldr	r6, [r1, #8]
 8012b42:	461f      	mov	r7, r3
 8012b44:	42be      	cmp	r6, r7
 8012b46:	680b      	ldr	r3, [r1, #0]
 8012b48:	4682      	mov	sl, r0
 8012b4a:	460c      	mov	r4, r1
 8012b4c:	4690      	mov	r8, r2
 8012b4e:	d82d      	bhi.n	8012bac <__ssputs_r+0x70>
 8012b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012b58:	d026      	beq.n	8012ba8 <__ssputs_r+0x6c>
 8012b5a:	6965      	ldr	r5, [r4, #20]
 8012b5c:	6909      	ldr	r1, [r1, #16]
 8012b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b62:	eba3 0901 	sub.w	r9, r3, r1
 8012b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b6a:	1c7b      	adds	r3, r7, #1
 8012b6c:	444b      	add	r3, r9
 8012b6e:	106d      	asrs	r5, r5, #1
 8012b70:	429d      	cmp	r5, r3
 8012b72:	bf38      	it	cc
 8012b74:	461d      	movcc	r5, r3
 8012b76:	0553      	lsls	r3, r2, #21
 8012b78:	d527      	bpl.n	8012bca <__ssputs_r+0x8e>
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	f7ff fbd8 	bl	8012330 <_malloc_r>
 8012b80:	4606      	mov	r6, r0
 8012b82:	b360      	cbz	r0, 8012bde <__ssputs_r+0xa2>
 8012b84:	6921      	ldr	r1, [r4, #16]
 8012b86:	464a      	mov	r2, r9
 8012b88:	f7fe fcf5 	bl	8011576 <memcpy>
 8012b8c:	89a3      	ldrh	r3, [r4, #12]
 8012b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b96:	81a3      	strh	r3, [r4, #12]
 8012b98:	6126      	str	r6, [r4, #16]
 8012b9a:	6165      	str	r5, [r4, #20]
 8012b9c:	444e      	add	r6, r9
 8012b9e:	eba5 0509 	sub.w	r5, r5, r9
 8012ba2:	6026      	str	r6, [r4, #0]
 8012ba4:	60a5      	str	r5, [r4, #8]
 8012ba6:	463e      	mov	r6, r7
 8012ba8:	42be      	cmp	r6, r7
 8012baa:	d900      	bls.n	8012bae <__ssputs_r+0x72>
 8012bac:	463e      	mov	r6, r7
 8012bae:	6820      	ldr	r0, [r4, #0]
 8012bb0:	4632      	mov	r2, r6
 8012bb2:	4641      	mov	r1, r8
 8012bb4:	f000 f9c6 	bl	8012f44 <memmove>
 8012bb8:	68a3      	ldr	r3, [r4, #8]
 8012bba:	1b9b      	subs	r3, r3, r6
 8012bbc:	60a3      	str	r3, [r4, #8]
 8012bbe:	6823      	ldr	r3, [r4, #0]
 8012bc0:	4433      	add	r3, r6
 8012bc2:	6023      	str	r3, [r4, #0]
 8012bc4:	2000      	movs	r0, #0
 8012bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bca:	462a      	mov	r2, r5
 8012bcc:	f000 fa28 	bl	8013020 <_realloc_r>
 8012bd0:	4606      	mov	r6, r0
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d1e0      	bne.n	8012b98 <__ssputs_r+0x5c>
 8012bd6:	6921      	ldr	r1, [r4, #16]
 8012bd8:	4650      	mov	r0, sl
 8012bda:	f7ff fb35 	bl	8012248 <_free_r>
 8012bde:	230c      	movs	r3, #12
 8012be0:	f8ca 3000 	str.w	r3, [sl]
 8012be4:	89a3      	ldrh	r3, [r4, #12]
 8012be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bea:	81a3      	strh	r3, [r4, #12]
 8012bec:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf0:	e7e9      	b.n	8012bc6 <__ssputs_r+0x8a>
	...

08012bf4 <_svfiprintf_r>:
 8012bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf8:	4698      	mov	r8, r3
 8012bfa:	898b      	ldrh	r3, [r1, #12]
 8012bfc:	061b      	lsls	r3, r3, #24
 8012bfe:	b09d      	sub	sp, #116	@ 0x74
 8012c00:	4607      	mov	r7, r0
 8012c02:	460d      	mov	r5, r1
 8012c04:	4614      	mov	r4, r2
 8012c06:	d510      	bpl.n	8012c2a <_svfiprintf_r+0x36>
 8012c08:	690b      	ldr	r3, [r1, #16]
 8012c0a:	b973      	cbnz	r3, 8012c2a <_svfiprintf_r+0x36>
 8012c0c:	2140      	movs	r1, #64	@ 0x40
 8012c0e:	f7ff fb8f 	bl	8012330 <_malloc_r>
 8012c12:	6028      	str	r0, [r5, #0]
 8012c14:	6128      	str	r0, [r5, #16]
 8012c16:	b930      	cbnz	r0, 8012c26 <_svfiprintf_r+0x32>
 8012c18:	230c      	movs	r3, #12
 8012c1a:	603b      	str	r3, [r7, #0]
 8012c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c20:	b01d      	add	sp, #116	@ 0x74
 8012c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c26:	2340      	movs	r3, #64	@ 0x40
 8012c28:	616b      	str	r3, [r5, #20]
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c2e:	2320      	movs	r3, #32
 8012c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c38:	2330      	movs	r3, #48	@ 0x30
 8012c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012dd8 <_svfiprintf_r+0x1e4>
 8012c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c42:	f04f 0901 	mov.w	r9, #1
 8012c46:	4623      	mov	r3, r4
 8012c48:	469a      	mov	sl, r3
 8012c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c4e:	b10a      	cbz	r2, 8012c54 <_svfiprintf_r+0x60>
 8012c50:	2a25      	cmp	r2, #37	@ 0x25
 8012c52:	d1f9      	bne.n	8012c48 <_svfiprintf_r+0x54>
 8012c54:	ebba 0b04 	subs.w	fp, sl, r4
 8012c58:	d00b      	beq.n	8012c72 <_svfiprintf_r+0x7e>
 8012c5a:	465b      	mov	r3, fp
 8012c5c:	4622      	mov	r2, r4
 8012c5e:	4629      	mov	r1, r5
 8012c60:	4638      	mov	r0, r7
 8012c62:	f7ff ff6b 	bl	8012b3c <__ssputs_r>
 8012c66:	3001      	adds	r0, #1
 8012c68:	f000 80a7 	beq.w	8012dba <_svfiprintf_r+0x1c6>
 8012c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c6e:	445a      	add	r2, fp
 8012c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c72:	f89a 3000 	ldrb.w	r3, [sl]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 809f 	beq.w	8012dba <_svfiprintf_r+0x1c6>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c86:	f10a 0a01 	add.w	sl, sl, #1
 8012c8a:	9304      	str	r3, [sp, #16]
 8012c8c:	9307      	str	r3, [sp, #28]
 8012c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c94:	4654      	mov	r4, sl
 8012c96:	2205      	movs	r2, #5
 8012c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c9c:	484e      	ldr	r0, [pc, #312]	@ (8012dd8 <_svfiprintf_r+0x1e4>)
 8012c9e:	f7ed fa97 	bl	80001d0 <memchr>
 8012ca2:	9a04      	ldr	r2, [sp, #16]
 8012ca4:	b9d8      	cbnz	r0, 8012cde <_svfiprintf_r+0xea>
 8012ca6:	06d0      	lsls	r0, r2, #27
 8012ca8:	bf44      	itt	mi
 8012caa:	2320      	movmi	r3, #32
 8012cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cb0:	0711      	lsls	r1, r2, #28
 8012cb2:	bf44      	itt	mi
 8012cb4:	232b      	movmi	r3, #43	@ 0x2b
 8012cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cba:	f89a 3000 	ldrb.w	r3, [sl]
 8012cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cc0:	d015      	beq.n	8012cee <_svfiprintf_r+0xfa>
 8012cc2:	9a07      	ldr	r2, [sp, #28]
 8012cc4:	4654      	mov	r4, sl
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	f04f 0c0a 	mov.w	ip, #10
 8012ccc:	4621      	mov	r1, r4
 8012cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cd2:	3b30      	subs	r3, #48	@ 0x30
 8012cd4:	2b09      	cmp	r3, #9
 8012cd6:	d94b      	bls.n	8012d70 <_svfiprintf_r+0x17c>
 8012cd8:	b1b0      	cbz	r0, 8012d08 <_svfiprintf_r+0x114>
 8012cda:	9207      	str	r2, [sp, #28]
 8012cdc:	e014      	b.n	8012d08 <_svfiprintf_r+0x114>
 8012cde:	eba0 0308 	sub.w	r3, r0, r8
 8012ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	9304      	str	r3, [sp, #16]
 8012cea:	46a2      	mov	sl, r4
 8012cec:	e7d2      	b.n	8012c94 <_svfiprintf_r+0xa0>
 8012cee:	9b03      	ldr	r3, [sp, #12]
 8012cf0:	1d19      	adds	r1, r3, #4
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	9103      	str	r1, [sp, #12]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	bfbb      	ittet	lt
 8012cfa:	425b      	neglt	r3, r3
 8012cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8012d00:	9307      	strge	r3, [sp, #28]
 8012d02:	9307      	strlt	r3, [sp, #28]
 8012d04:	bfb8      	it	lt
 8012d06:	9204      	strlt	r2, [sp, #16]
 8012d08:	7823      	ldrb	r3, [r4, #0]
 8012d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d0c:	d10a      	bne.n	8012d24 <_svfiprintf_r+0x130>
 8012d0e:	7863      	ldrb	r3, [r4, #1]
 8012d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d12:	d132      	bne.n	8012d7a <_svfiprintf_r+0x186>
 8012d14:	9b03      	ldr	r3, [sp, #12]
 8012d16:	1d1a      	adds	r2, r3, #4
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	9203      	str	r2, [sp, #12]
 8012d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d20:	3402      	adds	r4, #2
 8012d22:	9305      	str	r3, [sp, #20]
 8012d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012de8 <_svfiprintf_r+0x1f4>
 8012d28:	7821      	ldrb	r1, [r4, #0]
 8012d2a:	2203      	movs	r2, #3
 8012d2c:	4650      	mov	r0, sl
 8012d2e:	f7ed fa4f 	bl	80001d0 <memchr>
 8012d32:	b138      	cbz	r0, 8012d44 <_svfiprintf_r+0x150>
 8012d34:	9b04      	ldr	r3, [sp, #16]
 8012d36:	eba0 000a 	sub.w	r0, r0, sl
 8012d3a:	2240      	movs	r2, #64	@ 0x40
 8012d3c:	4082      	lsls	r2, r0
 8012d3e:	4313      	orrs	r3, r2
 8012d40:	3401      	adds	r4, #1
 8012d42:	9304      	str	r3, [sp, #16]
 8012d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d48:	4824      	ldr	r0, [pc, #144]	@ (8012ddc <_svfiprintf_r+0x1e8>)
 8012d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d4e:	2206      	movs	r2, #6
 8012d50:	f7ed fa3e 	bl	80001d0 <memchr>
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d036      	beq.n	8012dc6 <_svfiprintf_r+0x1d2>
 8012d58:	4b21      	ldr	r3, [pc, #132]	@ (8012de0 <_svfiprintf_r+0x1ec>)
 8012d5a:	bb1b      	cbnz	r3, 8012da4 <_svfiprintf_r+0x1b0>
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	3307      	adds	r3, #7
 8012d60:	f023 0307 	bic.w	r3, r3, #7
 8012d64:	3308      	adds	r3, #8
 8012d66:	9303      	str	r3, [sp, #12]
 8012d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d6a:	4433      	add	r3, r6
 8012d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d6e:	e76a      	b.n	8012c46 <_svfiprintf_r+0x52>
 8012d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d74:	460c      	mov	r4, r1
 8012d76:	2001      	movs	r0, #1
 8012d78:	e7a8      	b.n	8012ccc <_svfiprintf_r+0xd8>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	3401      	adds	r4, #1
 8012d7e:	9305      	str	r3, [sp, #20]
 8012d80:	4619      	mov	r1, r3
 8012d82:	f04f 0c0a 	mov.w	ip, #10
 8012d86:	4620      	mov	r0, r4
 8012d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d8c:	3a30      	subs	r2, #48	@ 0x30
 8012d8e:	2a09      	cmp	r2, #9
 8012d90:	d903      	bls.n	8012d9a <_svfiprintf_r+0x1a6>
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d0c6      	beq.n	8012d24 <_svfiprintf_r+0x130>
 8012d96:	9105      	str	r1, [sp, #20]
 8012d98:	e7c4      	b.n	8012d24 <_svfiprintf_r+0x130>
 8012d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d9e:	4604      	mov	r4, r0
 8012da0:	2301      	movs	r3, #1
 8012da2:	e7f0      	b.n	8012d86 <_svfiprintf_r+0x192>
 8012da4:	ab03      	add	r3, sp, #12
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	462a      	mov	r2, r5
 8012daa:	4b0e      	ldr	r3, [pc, #56]	@ (8012de4 <_svfiprintf_r+0x1f0>)
 8012dac:	a904      	add	r1, sp, #16
 8012dae:	4638      	mov	r0, r7
 8012db0:	f7fd fe46 	bl	8010a40 <_printf_float>
 8012db4:	1c42      	adds	r2, r0, #1
 8012db6:	4606      	mov	r6, r0
 8012db8:	d1d6      	bne.n	8012d68 <_svfiprintf_r+0x174>
 8012dba:	89ab      	ldrh	r3, [r5, #12]
 8012dbc:	065b      	lsls	r3, r3, #25
 8012dbe:	f53f af2d 	bmi.w	8012c1c <_svfiprintf_r+0x28>
 8012dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dc4:	e72c      	b.n	8012c20 <_svfiprintf_r+0x2c>
 8012dc6:	ab03      	add	r3, sp, #12
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	462a      	mov	r2, r5
 8012dcc:	4b05      	ldr	r3, [pc, #20]	@ (8012de4 <_svfiprintf_r+0x1f0>)
 8012dce:	a904      	add	r1, sp, #16
 8012dd0:	4638      	mov	r0, r7
 8012dd2:	f7fe f8cd 	bl	8010f70 <_printf_i>
 8012dd6:	e7ed      	b.n	8012db4 <_svfiprintf_r+0x1c0>
 8012dd8:	08013aae 	.word	0x08013aae
 8012ddc:	08013ab8 	.word	0x08013ab8
 8012de0:	08010a41 	.word	0x08010a41
 8012de4:	08012b3d 	.word	0x08012b3d
 8012de8:	08013ab4 	.word	0x08013ab4

08012dec <__sflush_r>:
 8012dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df4:	0716      	lsls	r6, r2, #28
 8012df6:	4605      	mov	r5, r0
 8012df8:	460c      	mov	r4, r1
 8012dfa:	d454      	bmi.n	8012ea6 <__sflush_r+0xba>
 8012dfc:	684b      	ldr	r3, [r1, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	dc02      	bgt.n	8012e08 <__sflush_r+0x1c>
 8012e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	dd48      	ble.n	8012e9a <__sflush_r+0xae>
 8012e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e0a:	2e00      	cmp	r6, #0
 8012e0c:	d045      	beq.n	8012e9a <__sflush_r+0xae>
 8012e0e:	2300      	movs	r3, #0
 8012e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e14:	682f      	ldr	r7, [r5, #0]
 8012e16:	6a21      	ldr	r1, [r4, #32]
 8012e18:	602b      	str	r3, [r5, #0]
 8012e1a:	d030      	beq.n	8012e7e <__sflush_r+0x92>
 8012e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e1e:	89a3      	ldrh	r3, [r4, #12]
 8012e20:	0759      	lsls	r1, r3, #29
 8012e22:	d505      	bpl.n	8012e30 <__sflush_r+0x44>
 8012e24:	6863      	ldr	r3, [r4, #4]
 8012e26:	1ad2      	subs	r2, r2, r3
 8012e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e2a:	b10b      	cbz	r3, 8012e30 <__sflush_r+0x44>
 8012e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e2e:	1ad2      	subs	r2, r2, r3
 8012e30:	2300      	movs	r3, #0
 8012e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e34:	6a21      	ldr	r1, [r4, #32]
 8012e36:	4628      	mov	r0, r5
 8012e38:	47b0      	blx	r6
 8012e3a:	1c43      	adds	r3, r0, #1
 8012e3c:	89a3      	ldrh	r3, [r4, #12]
 8012e3e:	d106      	bne.n	8012e4e <__sflush_r+0x62>
 8012e40:	6829      	ldr	r1, [r5, #0]
 8012e42:	291d      	cmp	r1, #29
 8012e44:	d82b      	bhi.n	8012e9e <__sflush_r+0xb2>
 8012e46:	4a2a      	ldr	r2, [pc, #168]	@ (8012ef0 <__sflush_r+0x104>)
 8012e48:	40ca      	lsrs	r2, r1
 8012e4a:	07d6      	lsls	r6, r2, #31
 8012e4c:	d527      	bpl.n	8012e9e <__sflush_r+0xb2>
 8012e4e:	2200      	movs	r2, #0
 8012e50:	6062      	str	r2, [r4, #4]
 8012e52:	04d9      	lsls	r1, r3, #19
 8012e54:	6922      	ldr	r2, [r4, #16]
 8012e56:	6022      	str	r2, [r4, #0]
 8012e58:	d504      	bpl.n	8012e64 <__sflush_r+0x78>
 8012e5a:	1c42      	adds	r2, r0, #1
 8012e5c:	d101      	bne.n	8012e62 <__sflush_r+0x76>
 8012e5e:	682b      	ldr	r3, [r5, #0]
 8012e60:	b903      	cbnz	r3, 8012e64 <__sflush_r+0x78>
 8012e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e66:	602f      	str	r7, [r5, #0]
 8012e68:	b1b9      	cbz	r1, 8012e9a <__sflush_r+0xae>
 8012e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e6e:	4299      	cmp	r1, r3
 8012e70:	d002      	beq.n	8012e78 <__sflush_r+0x8c>
 8012e72:	4628      	mov	r0, r5
 8012e74:	f7ff f9e8 	bl	8012248 <_free_r>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e7c:	e00d      	b.n	8012e9a <__sflush_r+0xae>
 8012e7e:	2301      	movs	r3, #1
 8012e80:	4628      	mov	r0, r5
 8012e82:	47b0      	blx	r6
 8012e84:	4602      	mov	r2, r0
 8012e86:	1c50      	adds	r0, r2, #1
 8012e88:	d1c9      	bne.n	8012e1e <__sflush_r+0x32>
 8012e8a:	682b      	ldr	r3, [r5, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d0c6      	beq.n	8012e1e <__sflush_r+0x32>
 8012e90:	2b1d      	cmp	r3, #29
 8012e92:	d001      	beq.n	8012e98 <__sflush_r+0xac>
 8012e94:	2b16      	cmp	r3, #22
 8012e96:	d11e      	bne.n	8012ed6 <__sflush_r+0xea>
 8012e98:	602f      	str	r7, [r5, #0]
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	e022      	b.n	8012ee4 <__sflush_r+0xf8>
 8012e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ea2:	b21b      	sxth	r3, r3
 8012ea4:	e01b      	b.n	8012ede <__sflush_r+0xf2>
 8012ea6:	690f      	ldr	r7, [r1, #16]
 8012ea8:	2f00      	cmp	r7, #0
 8012eaa:	d0f6      	beq.n	8012e9a <__sflush_r+0xae>
 8012eac:	0793      	lsls	r3, r2, #30
 8012eae:	680e      	ldr	r6, [r1, #0]
 8012eb0:	bf08      	it	eq
 8012eb2:	694b      	ldreq	r3, [r1, #20]
 8012eb4:	600f      	str	r7, [r1, #0]
 8012eb6:	bf18      	it	ne
 8012eb8:	2300      	movne	r3, #0
 8012eba:	eba6 0807 	sub.w	r8, r6, r7
 8012ebe:	608b      	str	r3, [r1, #8]
 8012ec0:	f1b8 0f00 	cmp.w	r8, #0
 8012ec4:	dde9      	ble.n	8012e9a <__sflush_r+0xae>
 8012ec6:	6a21      	ldr	r1, [r4, #32]
 8012ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012eca:	4643      	mov	r3, r8
 8012ecc:	463a      	mov	r2, r7
 8012ece:	4628      	mov	r0, r5
 8012ed0:	47b0      	blx	r6
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	dc08      	bgt.n	8012ee8 <__sflush_r+0xfc>
 8012ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ede:	81a3      	strh	r3, [r4, #12]
 8012ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ee8:	4407      	add	r7, r0
 8012eea:	eba8 0800 	sub.w	r8, r8, r0
 8012eee:	e7e7      	b.n	8012ec0 <__sflush_r+0xd4>
 8012ef0:	20400001 	.word	0x20400001

08012ef4 <_fflush_r>:
 8012ef4:	b538      	push	{r3, r4, r5, lr}
 8012ef6:	690b      	ldr	r3, [r1, #16]
 8012ef8:	4605      	mov	r5, r0
 8012efa:	460c      	mov	r4, r1
 8012efc:	b913      	cbnz	r3, 8012f04 <_fflush_r+0x10>
 8012efe:	2500      	movs	r5, #0
 8012f00:	4628      	mov	r0, r5
 8012f02:	bd38      	pop	{r3, r4, r5, pc}
 8012f04:	b118      	cbz	r0, 8012f0e <_fflush_r+0x1a>
 8012f06:	6a03      	ldr	r3, [r0, #32]
 8012f08:	b90b      	cbnz	r3, 8012f0e <_fflush_r+0x1a>
 8012f0a:	f7fe f9db 	bl	80112c4 <__sinit>
 8012f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d0f3      	beq.n	8012efe <_fflush_r+0xa>
 8012f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f18:	07d0      	lsls	r0, r2, #31
 8012f1a:	d404      	bmi.n	8012f26 <_fflush_r+0x32>
 8012f1c:	0599      	lsls	r1, r3, #22
 8012f1e:	d402      	bmi.n	8012f26 <_fflush_r+0x32>
 8012f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f22:	f7fe fb1e 	bl	8011562 <__retarget_lock_acquire_recursive>
 8012f26:	4628      	mov	r0, r5
 8012f28:	4621      	mov	r1, r4
 8012f2a:	f7ff ff5f 	bl	8012dec <__sflush_r>
 8012f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f30:	07da      	lsls	r2, r3, #31
 8012f32:	4605      	mov	r5, r0
 8012f34:	d4e4      	bmi.n	8012f00 <_fflush_r+0xc>
 8012f36:	89a3      	ldrh	r3, [r4, #12]
 8012f38:	059b      	lsls	r3, r3, #22
 8012f3a:	d4e1      	bmi.n	8012f00 <_fflush_r+0xc>
 8012f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f3e:	f7fe fb11 	bl	8011564 <__retarget_lock_release_recursive>
 8012f42:	e7dd      	b.n	8012f00 <_fflush_r+0xc>

08012f44 <memmove>:
 8012f44:	4288      	cmp	r0, r1
 8012f46:	b510      	push	{r4, lr}
 8012f48:	eb01 0402 	add.w	r4, r1, r2
 8012f4c:	d902      	bls.n	8012f54 <memmove+0x10>
 8012f4e:	4284      	cmp	r4, r0
 8012f50:	4623      	mov	r3, r4
 8012f52:	d807      	bhi.n	8012f64 <memmove+0x20>
 8012f54:	1e43      	subs	r3, r0, #1
 8012f56:	42a1      	cmp	r1, r4
 8012f58:	d008      	beq.n	8012f6c <memmove+0x28>
 8012f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f62:	e7f8      	b.n	8012f56 <memmove+0x12>
 8012f64:	4402      	add	r2, r0
 8012f66:	4601      	mov	r1, r0
 8012f68:	428a      	cmp	r2, r1
 8012f6a:	d100      	bne.n	8012f6e <memmove+0x2a>
 8012f6c:	bd10      	pop	{r4, pc}
 8012f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f76:	e7f7      	b.n	8012f68 <memmove+0x24>

08012f78 <_sbrk_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	4d06      	ldr	r5, [pc, #24]	@ (8012f94 <_sbrk_r+0x1c>)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	602b      	str	r3, [r5, #0]
 8012f84:	f7ef fe78 	bl	8002c78 <_sbrk>
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	d102      	bne.n	8012f92 <_sbrk_r+0x1a>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	b103      	cbz	r3, 8012f92 <_sbrk_r+0x1a>
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	2000836c 	.word	0x2000836c

08012f98 <__assert_func>:
 8012f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f9a:	4614      	mov	r4, r2
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	4b09      	ldr	r3, [pc, #36]	@ (8012fc4 <__assert_func+0x2c>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	4605      	mov	r5, r0
 8012fa4:	68d8      	ldr	r0, [r3, #12]
 8012fa6:	b14c      	cbz	r4, 8012fbc <__assert_func+0x24>
 8012fa8:	4b07      	ldr	r3, [pc, #28]	@ (8012fc8 <__assert_func+0x30>)
 8012faa:	9100      	str	r1, [sp, #0]
 8012fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fb0:	4906      	ldr	r1, [pc, #24]	@ (8012fcc <__assert_func+0x34>)
 8012fb2:	462b      	mov	r3, r5
 8012fb4:	f000 f870 	bl	8013098 <fiprintf>
 8012fb8:	f000 f880 	bl	80130bc <abort>
 8012fbc:	4b04      	ldr	r3, [pc, #16]	@ (8012fd0 <__assert_func+0x38>)
 8012fbe:	461c      	mov	r4, r3
 8012fc0:	e7f3      	b.n	8012faa <__assert_func+0x12>
 8012fc2:	bf00      	nop
 8012fc4:	2000010c 	.word	0x2000010c
 8012fc8:	08013ac9 	.word	0x08013ac9
 8012fcc:	08013ad6 	.word	0x08013ad6
 8012fd0:	08013b04 	.word	0x08013b04

08012fd4 <_calloc_r>:
 8012fd4:	b570      	push	{r4, r5, r6, lr}
 8012fd6:	fba1 5402 	umull	r5, r4, r1, r2
 8012fda:	b934      	cbnz	r4, 8012fea <_calloc_r+0x16>
 8012fdc:	4629      	mov	r1, r5
 8012fde:	f7ff f9a7 	bl	8012330 <_malloc_r>
 8012fe2:	4606      	mov	r6, r0
 8012fe4:	b928      	cbnz	r0, 8012ff2 <_calloc_r+0x1e>
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	bd70      	pop	{r4, r5, r6, pc}
 8012fea:	220c      	movs	r2, #12
 8012fec:	6002      	str	r2, [r0, #0]
 8012fee:	2600      	movs	r6, #0
 8012ff0:	e7f9      	b.n	8012fe6 <_calloc_r+0x12>
 8012ff2:	462a      	mov	r2, r5
 8012ff4:	4621      	mov	r1, r4
 8012ff6:	f7fe fa36 	bl	8011466 <memset>
 8012ffa:	e7f4      	b.n	8012fe6 <_calloc_r+0x12>

08012ffc <__ascii_mbtowc>:
 8012ffc:	b082      	sub	sp, #8
 8012ffe:	b901      	cbnz	r1, 8013002 <__ascii_mbtowc+0x6>
 8013000:	a901      	add	r1, sp, #4
 8013002:	b142      	cbz	r2, 8013016 <__ascii_mbtowc+0x1a>
 8013004:	b14b      	cbz	r3, 801301a <__ascii_mbtowc+0x1e>
 8013006:	7813      	ldrb	r3, [r2, #0]
 8013008:	600b      	str	r3, [r1, #0]
 801300a:	7812      	ldrb	r2, [r2, #0]
 801300c:	1e10      	subs	r0, r2, #0
 801300e:	bf18      	it	ne
 8013010:	2001      	movne	r0, #1
 8013012:	b002      	add	sp, #8
 8013014:	4770      	bx	lr
 8013016:	4610      	mov	r0, r2
 8013018:	e7fb      	b.n	8013012 <__ascii_mbtowc+0x16>
 801301a:	f06f 0001 	mvn.w	r0, #1
 801301e:	e7f8      	b.n	8013012 <__ascii_mbtowc+0x16>

08013020 <_realloc_r>:
 8013020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013024:	4607      	mov	r7, r0
 8013026:	4614      	mov	r4, r2
 8013028:	460d      	mov	r5, r1
 801302a:	b921      	cbnz	r1, 8013036 <_realloc_r+0x16>
 801302c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013030:	4611      	mov	r1, r2
 8013032:	f7ff b97d 	b.w	8012330 <_malloc_r>
 8013036:	b92a      	cbnz	r2, 8013044 <_realloc_r+0x24>
 8013038:	f7ff f906 	bl	8012248 <_free_r>
 801303c:	4625      	mov	r5, r4
 801303e:	4628      	mov	r0, r5
 8013040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013044:	f000 f841 	bl	80130ca <_malloc_usable_size_r>
 8013048:	4284      	cmp	r4, r0
 801304a:	4606      	mov	r6, r0
 801304c:	d802      	bhi.n	8013054 <_realloc_r+0x34>
 801304e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013052:	d8f4      	bhi.n	801303e <_realloc_r+0x1e>
 8013054:	4621      	mov	r1, r4
 8013056:	4638      	mov	r0, r7
 8013058:	f7ff f96a 	bl	8012330 <_malloc_r>
 801305c:	4680      	mov	r8, r0
 801305e:	b908      	cbnz	r0, 8013064 <_realloc_r+0x44>
 8013060:	4645      	mov	r5, r8
 8013062:	e7ec      	b.n	801303e <_realloc_r+0x1e>
 8013064:	42b4      	cmp	r4, r6
 8013066:	4622      	mov	r2, r4
 8013068:	4629      	mov	r1, r5
 801306a:	bf28      	it	cs
 801306c:	4632      	movcs	r2, r6
 801306e:	f7fe fa82 	bl	8011576 <memcpy>
 8013072:	4629      	mov	r1, r5
 8013074:	4638      	mov	r0, r7
 8013076:	f7ff f8e7 	bl	8012248 <_free_r>
 801307a:	e7f1      	b.n	8013060 <_realloc_r+0x40>

0801307c <__ascii_wctomb>:
 801307c:	4603      	mov	r3, r0
 801307e:	4608      	mov	r0, r1
 8013080:	b141      	cbz	r1, 8013094 <__ascii_wctomb+0x18>
 8013082:	2aff      	cmp	r2, #255	@ 0xff
 8013084:	d904      	bls.n	8013090 <__ascii_wctomb+0x14>
 8013086:	228a      	movs	r2, #138	@ 0x8a
 8013088:	601a      	str	r2, [r3, #0]
 801308a:	f04f 30ff 	mov.w	r0, #4294967295
 801308e:	4770      	bx	lr
 8013090:	700a      	strb	r2, [r1, #0]
 8013092:	2001      	movs	r0, #1
 8013094:	4770      	bx	lr
	...

08013098 <fiprintf>:
 8013098:	b40e      	push	{r1, r2, r3}
 801309a:	b503      	push	{r0, r1, lr}
 801309c:	4601      	mov	r1, r0
 801309e:	ab03      	add	r3, sp, #12
 80130a0:	4805      	ldr	r0, [pc, #20]	@ (80130b8 <fiprintf+0x20>)
 80130a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80130a6:	6800      	ldr	r0, [r0, #0]
 80130a8:	9301      	str	r3, [sp, #4]
 80130aa:	f000 f83f 	bl	801312c <_vfiprintf_r>
 80130ae:	b002      	add	sp, #8
 80130b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80130b4:	b003      	add	sp, #12
 80130b6:	4770      	bx	lr
 80130b8:	2000010c 	.word	0x2000010c

080130bc <abort>:
 80130bc:	b508      	push	{r3, lr}
 80130be:	2006      	movs	r0, #6
 80130c0:	f000 fa08 	bl	80134d4 <raise>
 80130c4:	2001      	movs	r0, #1
 80130c6:	f7ef fd5f 	bl	8002b88 <_exit>

080130ca <_malloc_usable_size_r>:
 80130ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130ce:	1f18      	subs	r0, r3, #4
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	bfbc      	itt	lt
 80130d4:	580b      	ldrlt	r3, [r1, r0]
 80130d6:	18c0      	addlt	r0, r0, r3
 80130d8:	4770      	bx	lr

080130da <__sfputc_r>:
 80130da:	6893      	ldr	r3, [r2, #8]
 80130dc:	3b01      	subs	r3, #1
 80130de:	2b00      	cmp	r3, #0
 80130e0:	b410      	push	{r4}
 80130e2:	6093      	str	r3, [r2, #8]
 80130e4:	da08      	bge.n	80130f8 <__sfputc_r+0x1e>
 80130e6:	6994      	ldr	r4, [r2, #24]
 80130e8:	42a3      	cmp	r3, r4
 80130ea:	db01      	blt.n	80130f0 <__sfputc_r+0x16>
 80130ec:	290a      	cmp	r1, #10
 80130ee:	d103      	bne.n	80130f8 <__sfputc_r+0x1e>
 80130f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130f4:	f000 b932 	b.w	801335c <__swbuf_r>
 80130f8:	6813      	ldr	r3, [r2, #0]
 80130fa:	1c58      	adds	r0, r3, #1
 80130fc:	6010      	str	r0, [r2, #0]
 80130fe:	7019      	strb	r1, [r3, #0]
 8013100:	4608      	mov	r0, r1
 8013102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013106:	4770      	bx	lr

08013108 <__sfputs_r>:
 8013108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801310a:	4606      	mov	r6, r0
 801310c:	460f      	mov	r7, r1
 801310e:	4614      	mov	r4, r2
 8013110:	18d5      	adds	r5, r2, r3
 8013112:	42ac      	cmp	r4, r5
 8013114:	d101      	bne.n	801311a <__sfputs_r+0x12>
 8013116:	2000      	movs	r0, #0
 8013118:	e007      	b.n	801312a <__sfputs_r+0x22>
 801311a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801311e:	463a      	mov	r2, r7
 8013120:	4630      	mov	r0, r6
 8013122:	f7ff ffda 	bl	80130da <__sfputc_r>
 8013126:	1c43      	adds	r3, r0, #1
 8013128:	d1f3      	bne.n	8013112 <__sfputs_r+0xa>
 801312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801312c <_vfiprintf_r>:
 801312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013130:	460d      	mov	r5, r1
 8013132:	b09d      	sub	sp, #116	@ 0x74
 8013134:	4614      	mov	r4, r2
 8013136:	4698      	mov	r8, r3
 8013138:	4606      	mov	r6, r0
 801313a:	b118      	cbz	r0, 8013144 <_vfiprintf_r+0x18>
 801313c:	6a03      	ldr	r3, [r0, #32]
 801313e:	b90b      	cbnz	r3, 8013144 <_vfiprintf_r+0x18>
 8013140:	f7fe f8c0 	bl	80112c4 <__sinit>
 8013144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013146:	07d9      	lsls	r1, r3, #31
 8013148:	d405      	bmi.n	8013156 <_vfiprintf_r+0x2a>
 801314a:	89ab      	ldrh	r3, [r5, #12]
 801314c:	059a      	lsls	r2, r3, #22
 801314e:	d402      	bmi.n	8013156 <_vfiprintf_r+0x2a>
 8013150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013152:	f7fe fa06 	bl	8011562 <__retarget_lock_acquire_recursive>
 8013156:	89ab      	ldrh	r3, [r5, #12]
 8013158:	071b      	lsls	r3, r3, #28
 801315a:	d501      	bpl.n	8013160 <_vfiprintf_r+0x34>
 801315c:	692b      	ldr	r3, [r5, #16]
 801315e:	b99b      	cbnz	r3, 8013188 <_vfiprintf_r+0x5c>
 8013160:	4629      	mov	r1, r5
 8013162:	4630      	mov	r0, r6
 8013164:	f000 f938 	bl	80133d8 <__swsetup_r>
 8013168:	b170      	cbz	r0, 8013188 <_vfiprintf_r+0x5c>
 801316a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801316c:	07dc      	lsls	r4, r3, #31
 801316e:	d504      	bpl.n	801317a <_vfiprintf_r+0x4e>
 8013170:	f04f 30ff 	mov.w	r0, #4294967295
 8013174:	b01d      	add	sp, #116	@ 0x74
 8013176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801317a:	89ab      	ldrh	r3, [r5, #12]
 801317c:	0598      	lsls	r0, r3, #22
 801317e:	d4f7      	bmi.n	8013170 <_vfiprintf_r+0x44>
 8013180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013182:	f7fe f9ef 	bl	8011564 <__retarget_lock_release_recursive>
 8013186:	e7f3      	b.n	8013170 <_vfiprintf_r+0x44>
 8013188:	2300      	movs	r3, #0
 801318a:	9309      	str	r3, [sp, #36]	@ 0x24
 801318c:	2320      	movs	r3, #32
 801318e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013192:	f8cd 800c 	str.w	r8, [sp, #12]
 8013196:	2330      	movs	r3, #48	@ 0x30
 8013198:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013348 <_vfiprintf_r+0x21c>
 801319c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80131a0:	f04f 0901 	mov.w	r9, #1
 80131a4:	4623      	mov	r3, r4
 80131a6:	469a      	mov	sl, r3
 80131a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131ac:	b10a      	cbz	r2, 80131b2 <_vfiprintf_r+0x86>
 80131ae:	2a25      	cmp	r2, #37	@ 0x25
 80131b0:	d1f9      	bne.n	80131a6 <_vfiprintf_r+0x7a>
 80131b2:	ebba 0b04 	subs.w	fp, sl, r4
 80131b6:	d00b      	beq.n	80131d0 <_vfiprintf_r+0xa4>
 80131b8:	465b      	mov	r3, fp
 80131ba:	4622      	mov	r2, r4
 80131bc:	4629      	mov	r1, r5
 80131be:	4630      	mov	r0, r6
 80131c0:	f7ff ffa2 	bl	8013108 <__sfputs_r>
 80131c4:	3001      	adds	r0, #1
 80131c6:	f000 80a7 	beq.w	8013318 <_vfiprintf_r+0x1ec>
 80131ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80131cc:	445a      	add	r2, fp
 80131ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80131d0:	f89a 3000 	ldrb.w	r3, [sl]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	f000 809f 	beq.w	8013318 <_vfiprintf_r+0x1ec>
 80131da:	2300      	movs	r3, #0
 80131dc:	f04f 32ff 	mov.w	r2, #4294967295
 80131e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131e4:	f10a 0a01 	add.w	sl, sl, #1
 80131e8:	9304      	str	r3, [sp, #16]
 80131ea:	9307      	str	r3, [sp, #28]
 80131ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80131f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80131f2:	4654      	mov	r4, sl
 80131f4:	2205      	movs	r2, #5
 80131f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131fa:	4853      	ldr	r0, [pc, #332]	@ (8013348 <_vfiprintf_r+0x21c>)
 80131fc:	f7ec ffe8 	bl	80001d0 <memchr>
 8013200:	9a04      	ldr	r2, [sp, #16]
 8013202:	b9d8      	cbnz	r0, 801323c <_vfiprintf_r+0x110>
 8013204:	06d1      	lsls	r1, r2, #27
 8013206:	bf44      	itt	mi
 8013208:	2320      	movmi	r3, #32
 801320a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801320e:	0713      	lsls	r3, r2, #28
 8013210:	bf44      	itt	mi
 8013212:	232b      	movmi	r3, #43	@ 0x2b
 8013214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013218:	f89a 3000 	ldrb.w	r3, [sl]
 801321c:	2b2a      	cmp	r3, #42	@ 0x2a
 801321e:	d015      	beq.n	801324c <_vfiprintf_r+0x120>
 8013220:	9a07      	ldr	r2, [sp, #28]
 8013222:	4654      	mov	r4, sl
 8013224:	2000      	movs	r0, #0
 8013226:	f04f 0c0a 	mov.w	ip, #10
 801322a:	4621      	mov	r1, r4
 801322c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013230:	3b30      	subs	r3, #48	@ 0x30
 8013232:	2b09      	cmp	r3, #9
 8013234:	d94b      	bls.n	80132ce <_vfiprintf_r+0x1a2>
 8013236:	b1b0      	cbz	r0, 8013266 <_vfiprintf_r+0x13a>
 8013238:	9207      	str	r2, [sp, #28]
 801323a:	e014      	b.n	8013266 <_vfiprintf_r+0x13a>
 801323c:	eba0 0308 	sub.w	r3, r0, r8
 8013240:	fa09 f303 	lsl.w	r3, r9, r3
 8013244:	4313      	orrs	r3, r2
 8013246:	9304      	str	r3, [sp, #16]
 8013248:	46a2      	mov	sl, r4
 801324a:	e7d2      	b.n	80131f2 <_vfiprintf_r+0xc6>
 801324c:	9b03      	ldr	r3, [sp, #12]
 801324e:	1d19      	adds	r1, r3, #4
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	9103      	str	r1, [sp, #12]
 8013254:	2b00      	cmp	r3, #0
 8013256:	bfbb      	ittet	lt
 8013258:	425b      	neglt	r3, r3
 801325a:	f042 0202 	orrlt.w	r2, r2, #2
 801325e:	9307      	strge	r3, [sp, #28]
 8013260:	9307      	strlt	r3, [sp, #28]
 8013262:	bfb8      	it	lt
 8013264:	9204      	strlt	r2, [sp, #16]
 8013266:	7823      	ldrb	r3, [r4, #0]
 8013268:	2b2e      	cmp	r3, #46	@ 0x2e
 801326a:	d10a      	bne.n	8013282 <_vfiprintf_r+0x156>
 801326c:	7863      	ldrb	r3, [r4, #1]
 801326e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013270:	d132      	bne.n	80132d8 <_vfiprintf_r+0x1ac>
 8013272:	9b03      	ldr	r3, [sp, #12]
 8013274:	1d1a      	adds	r2, r3, #4
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	9203      	str	r2, [sp, #12]
 801327a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801327e:	3402      	adds	r4, #2
 8013280:	9305      	str	r3, [sp, #20]
 8013282:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013358 <_vfiprintf_r+0x22c>
 8013286:	7821      	ldrb	r1, [r4, #0]
 8013288:	2203      	movs	r2, #3
 801328a:	4650      	mov	r0, sl
 801328c:	f7ec ffa0 	bl	80001d0 <memchr>
 8013290:	b138      	cbz	r0, 80132a2 <_vfiprintf_r+0x176>
 8013292:	9b04      	ldr	r3, [sp, #16]
 8013294:	eba0 000a 	sub.w	r0, r0, sl
 8013298:	2240      	movs	r2, #64	@ 0x40
 801329a:	4082      	lsls	r2, r0
 801329c:	4313      	orrs	r3, r2
 801329e:	3401      	adds	r4, #1
 80132a0:	9304      	str	r3, [sp, #16]
 80132a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a6:	4829      	ldr	r0, [pc, #164]	@ (801334c <_vfiprintf_r+0x220>)
 80132a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80132ac:	2206      	movs	r2, #6
 80132ae:	f7ec ff8f 	bl	80001d0 <memchr>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d03f      	beq.n	8013336 <_vfiprintf_r+0x20a>
 80132b6:	4b26      	ldr	r3, [pc, #152]	@ (8013350 <_vfiprintf_r+0x224>)
 80132b8:	bb1b      	cbnz	r3, 8013302 <_vfiprintf_r+0x1d6>
 80132ba:	9b03      	ldr	r3, [sp, #12]
 80132bc:	3307      	adds	r3, #7
 80132be:	f023 0307 	bic.w	r3, r3, #7
 80132c2:	3308      	adds	r3, #8
 80132c4:	9303      	str	r3, [sp, #12]
 80132c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132c8:	443b      	add	r3, r7
 80132ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80132cc:	e76a      	b.n	80131a4 <_vfiprintf_r+0x78>
 80132ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80132d2:	460c      	mov	r4, r1
 80132d4:	2001      	movs	r0, #1
 80132d6:	e7a8      	b.n	801322a <_vfiprintf_r+0xfe>
 80132d8:	2300      	movs	r3, #0
 80132da:	3401      	adds	r4, #1
 80132dc:	9305      	str	r3, [sp, #20]
 80132de:	4619      	mov	r1, r3
 80132e0:	f04f 0c0a 	mov.w	ip, #10
 80132e4:	4620      	mov	r0, r4
 80132e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132ea:	3a30      	subs	r2, #48	@ 0x30
 80132ec:	2a09      	cmp	r2, #9
 80132ee:	d903      	bls.n	80132f8 <_vfiprintf_r+0x1cc>
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d0c6      	beq.n	8013282 <_vfiprintf_r+0x156>
 80132f4:	9105      	str	r1, [sp, #20]
 80132f6:	e7c4      	b.n	8013282 <_vfiprintf_r+0x156>
 80132f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80132fc:	4604      	mov	r4, r0
 80132fe:	2301      	movs	r3, #1
 8013300:	e7f0      	b.n	80132e4 <_vfiprintf_r+0x1b8>
 8013302:	ab03      	add	r3, sp, #12
 8013304:	9300      	str	r3, [sp, #0]
 8013306:	462a      	mov	r2, r5
 8013308:	4b12      	ldr	r3, [pc, #72]	@ (8013354 <_vfiprintf_r+0x228>)
 801330a:	a904      	add	r1, sp, #16
 801330c:	4630      	mov	r0, r6
 801330e:	f7fd fb97 	bl	8010a40 <_printf_float>
 8013312:	4607      	mov	r7, r0
 8013314:	1c78      	adds	r0, r7, #1
 8013316:	d1d6      	bne.n	80132c6 <_vfiprintf_r+0x19a>
 8013318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801331a:	07d9      	lsls	r1, r3, #31
 801331c:	d405      	bmi.n	801332a <_vfiprintf_r+0x1fe>
 801331e:	89ab      	ldrh	r3, [r5, #12]
 8013320:	059a      	lsls	r2, r3, #22
 8013322:	d402      	bmi.n	801332a <_vfiprintf_r+0x1fe>
 8013324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013326:	f7fe f91d 	bl	8011564 <__retarget_lock_release_recursive>
 801332a:	89ab      	ldrh	r3, [r5, #12]
 801332c:	065b      	lsls	r3, r3, #25
 801332e:	f53f af1f 	bmi.w	8013170 <_vfiprintf_r+0x44>
 8013332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013334:	e71e      	b.n	8013174 <_vfiprintf_r+0x48>
 8013336:	ab03      	add	r3, sp, #12
 8013338:	9300      	str	r3, [sp, #0]
 801333a:	462a      	mov	r2, r5
 801333c:	4b05      	ldr	r3, [pc, #20]	@ (8013354 <_vfiprintf_r+0x228>)
 801333e:	a904      	add	r1, sp, #16
 8013340:	4630      	mov	r0, r6
 8013342:	f7fd fe15 	bl	8010f70 <_printf_i>
 8013346:	e7e4      	b.n	8013312 <_vfiprintf_r+0x1e6>
 8013348:	08013aae 	.word	0x08013aae
 801334c:	08013ab8 	.word	0x08013ab8
 8013350:	08010a41 	.word	0x08010a41
 8013354:	08013109 	.word	0x08013109
 8013358:	08013ab4 	.word	0x08013ab4

0801335c <__swbuf_r>:
 801335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801335e:	460e      	mov	r6, r1
 8013360:	4614      	mov	r4, r2
 8013362:	4605      	mov	r5, r0
 8013364:	b118      	cbz	r0, 801336e <__swbuf_r+0x12>
 8013366:	6a03      	ldr	r3, [r0, #32]
 8013368:	b90b      	cbnz	r3, 801336e <__swbuf_r+0x12>
 801336a:	f7fd ffab 	bl	80112c4 <__sinit>
 801336e:	69a3      	ldr	r3, [r4, #24]
 8013370:	60a3      	str	r3, [r4, #8]
 8013372:	89a3      	ldrh	r3, [r4, #12]
 8013374:	071a      	lsls	r2, r3, #28
 8013376:	d501      	bpl.n	801337c <__swbuf_r+0x20>
 8013378:	6923      	ldr	r3, [r4, #16]
 801337a:	b943      	cbnz	r3, 801338e <__swbuf_r+0x32>
 801337c:	4621      	mov	r1, r4
 801337e:	4628      	mov	r0, r5
 8013380:	f000 f82a 	bl	80133d8 <__swsetup_r>
 8013384:	b118      	cbz	r0, 801338e <__swbuf_r+0x32>
 8013386:	f04f 37ff 	mov.w	r7, #4294967295
 801338a:	4638      	mov	r0, r7
 801338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801338e:	6823      	ldr	r3, [r4, #0]
 8013390:	6922      	ldr	r2, [r4, #16]
 8013392:	1a98      	subs	r0, r3, r2
 8013394:	6963      	ldr	r3, [r4, #20]
 8013396:	b2f6      	uxtb	r6, r6
 8013398:	4283      	cmp	r3, r0
 801339a:	4637      	mov	r7, r6
 801339c:	dc05      	bgt.n	80133aa <__swbuf_r+0x4e>
 801339e:	4621      	mov	r1, r4
 80133a0:	4628      	mov	r0, r5
 80133a2:	f7ff fda7 	bl	8012ef4 <_fflush_r>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	d1ed      	bne.n	8013386 <__swbuf_r+0x2a>
 80133aa:	68a3      	ldr	r3, [r4, #8]
 80133ac:	3b01      	subs	r3, #1
 80133ae:	60a3      	str	r3, [r4, #8]
 80133b0:	6823      	ldr	r3, [r4, #0]
 80133b2:	1c5a      	adds	r2, r3, #1
 80133b4:	6022      	str	r2, [r4, #0]
 80133b6:	701e      	strb	r6, [r3, #0]
 80133b8:	6962      	ldr	r2, [r4, #20]
 80133ba:	1c43      	adds	r3, r0, #1
 80133bc:	429a      	cmp	r2, r3
 80133be:	d004      	beq.n	80133ca <__swbuf_r+0x6e>
 80133c0:	89a3      	ldrh	r3, [r4, #12]
 80133c2:	07db      	lsls	r3, r3, #31
 80133c4:	d5e1      	bpl.n	801338a <__swbuf_r+0x2e>
 80133c6:	2e0a      	cmp	r6, #10
 80133c8:	d1df      	bne.n	801338a <__swbuf_r+0x2e>
 80133ca:	4621      	mov	r1, r4
 80133cc:	4628      	mov	r0, r5
 80133ce:	f7ff fd91 	bl	8012ef4 <_fflush_r>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d0d9      	beq.n	801338a <__swbuf_r+0x2e>
 80133d6:	e7d6      	b.n	8013386 <__swbuf_r+0x2a>

080133d8 <__swsetup_r>:
 80133d8:	b538      	push	{r3, r4, r5, lr}
 80133da:	4b29      	ldr	r3, [pc, #164]	@ (8013480 <__swsetup_r+0xa8>)
 80133dc:	4605      	mov	r5, r0
 80133de:	6818      	ldr	r0, [r3, #0]
 80133e0:	460c      	mov	r4, r1
 80133e2:	b118      	cbz	r0, 80133ec <__swsetup_r+0x14>
 80133e4:	6a03      	ldr	r3, [r0, #32]
 80133e6:	b90b      	cbnz	r3, 80133ec <__swsetup_r+0x14>
 80133e8:	f7fd ff6c 	bl	80112c4 <__sinit>
 80133ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133f0:	0719      	lsls	r1, r3, #28
 80133f2:	d422      	bmi.n	801343a <__swsetup_r+0x62>
 80133f4:	06da      	lsls	r2, r3, #27
 80133f6:	d407      	bmi.n	8013408 <__swsetup_r+0x30>
 80133f8:	2209      	movs	r2, #9
 80133fa:	602a      	str	r2, [r5, #0]
 80133fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013400:	81a3      	strh	r3, [r4, #12]
 8013402:	f04f 30ff 	mov.w	r0, #4294967295
 8013406:	e033      	b.n	8013470 <__swsetup_r+0x98>
 8013408:	0758      	lsls	r0, r3, #29
 801340a:	d512      	bpl.n	8013432 <__swsetup_r+0x5a>
 801340c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801340e:	b141      	cbz	r1, 8013422 <__swsetup_r+0x4a>
 8013410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013414:	4299      	cmp	r1, r3
 8013416:	d002      	beq.n	801341e <__swsetup_r+0x46>
 8013418:	4628      	mov	r0, r5
 801341a:	f7fe ff15 	bl	8012248 <_free_r>
 801341e:	2300      	movs	r3, #0
 8013420:	6363      	str	r3, [r4, #52]	@ 0x34
 8013422:	89a3      	ldrh	r3, [r4, #12]
 8013424:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013428:	81a3      	strh	r3, [r4, #12]
 801342a:	2300      	movs	r3, #0
 801342c:	6063      	str	r3, [r4, #4]
 801342e:	6923      	ldr	r3, [r4, #16]
 8013430:	6023      	str	r3, [r4, #0]
 8013432:	89a3      	ldrh	r3, [r4, #12]
 8013434:	f043 0308 	orr.w	r3, r3, #8
 8013438:	81a3      	strh	r3, [r4, #12]
 801343a:	6923      	ldr	r3, [r4, #16]
 801343c:	b94b      	cbnz	r3, 8013452 <__swsetup_r+0x7a>
 801343e:	89a3      	ldrh	r3, [r4, #12]
 8013440:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013448:	d003      	beq.n	8013452 <__swsetup_r+0x7a>
 801344a:	4621      	mov	r1, r4
 801344c:	4628      	mov	r0, r5
 801344e:	f000 f883 	bl	8013558 <__smakebuf_r>
 8013452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013456:	f013 0201 	ands.w	r2, r3, #1
 801345a:	d00a      	beq.n	8013472 <__swsetup_r+0x9a>
 801345c:	2200      	movs	r2, #0
 801345e:	60a2      	str	r2, [r4, #8]
 8013460:	6962      	ldr	r2, [r4, #20]
 8013462:	4252      	negs	r2, r2
 8013464:	61a2      	str	r2, [r4, #24]
 8013466:	6922      	ldr	r2, [r4, #16]
 8013468:	b942      	cbnz	r2, 801347c <__swsetup_r+0xa4>
 801346a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801346e:	d1c5      	bne.n	80133fc <__swsetup_r+0x24>
 8013470:	bd38      	pop	{r3, r4, r5, pc}
 8013472:	0799      	lsls	r1, r3, #30
 8013474:	bf58      	it	pl
 8013476:	6962      	ldrpl	r2, [r4, #20]
 8013478:	60a2      	str	r2, [r4, #8]
 801347a:	e7f4      	b.n	8013466 <__swsetup_r+0x8e>
 801347c:	2000      	movs	r0, #0
 801347e:	e7f7      	b.n	8013470 <__swsetup_r+0x98>
 8013480:	2000010c 	.word	0x2000010c

08013484 <_raise_r>:
 8013484:	291f      	cmp	r1, #31
 8013486:	b538      	push	{r3, r4, r5, lr}
 8013488:	4605      	mov	r5, r0
 801348a:	460c      	mov	r4, r1
 801348c:	d904      	bls.n	8013498 <_raise_r+0x14>
 801348e:	2316      	movs	r3, #22
 8013490:	6003      	str	r3, [r0, #0]
 8013492:	f04f 30ff 	mov.w	r0, #4294967295
 8013496:	bd38      	pop	{r3, r4, r5, pc}
 8013498:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801349a:	b112      	cbz	r2, 80134a2 <_raise_r+0x1e>
 801349c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134a0:	b94b      	cbnz	r3, 80134b6 <_raise_r+0x32>
 80134a2:	4628      	mov	r0, r5
 80134a4:	f000 f830 	bl	8013508 <_getpid_r>
 80134a8:	4622      	mov	r2, r4
 80134aa:	4601      	mov	r1, r0
 80134ac:	4628      	mov	r0, r5
 80134ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134b2:	f000 b817 	b.w	80134e4 <_kill_r>
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d00a      	beq.n	80134d0 <_raise_r+0x4c>
 80134ba:	1c59      	adds	r1, r3, #1
 80134bc:	d103      	bne.n	80134c6 <_raise_r+0x42>
 80134be:	2316      	movs	r3, #22
 80134c0:	6003      	str	r3, [r0, #0]
 80134c2:	2001      	movs	r0, #1
 80134c4:	e7e7      	b.n	8013496 <_raise_r+0x12>
 80134c6:	2100      	movs	r1, #0
 80134c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80134cc:	4620      	mov	r0, r4
 80134ce:	4798      	blx	r3
 80134d0:	2000      	movs	r0, #0
 80134d2:	e7e0      	b.n	8013496 <_raise_r+0x12>

080134d4 <raise>:
 80134d4:	4b02      	ldr	r3, [pc, #8]	@ (80134e0 <raise+0xc>)
 80134d6:	4601      	mov	r1, r0
 80134d8:	6818      	ldr	r0, [r3, #0]
 80134da:	f7ff bfd3 	b.w	8013484 <_raise_r>
 80134de:	bf00      	nop
 80134e0:	2000010c 	.word	0x2000010c

080134e4 <_kill_r>:
 80134e4:	b538      	push	{r3, r4, r5, lr}
 80134e6:	4d07      	ldr	r5, [pc, #28]	@ (8013504 <_kill_r+0x20>)
 80134e8:	2300      	movs	r3, #0
 80134ea:	4604      	mov	r4, r0
 80134ec:	4608      	mov	r0, r1
 80134ee:	4611      	mov	r1, r2
 80134f0:	602b      	str	r3, [r5, #0]
 80134f2:	f7ef fb39 	bl	8002b68 <_kill>
 80134f6:	1c43      	adds	r3, r0, #1
 80134f8:	d102      	bne.n	8013500 <_kill_r+0x1c>
 80134fa:	682b      	ldr	r3, [r5, #0]
 80134fc:	b103      	cbz	r3, 8013500 <_kill_r+0x1c>
 80134fe:	6023      	str	r3, [r4, #0]
 8013500:	bd38      	pop	{r3, r4, r5, pc}
 8013502:	bf00      	nop
 8013504:	2000836c 	.word	0x2000836c

08013508 <_getpid_r>:
 8013508:	f7ef bb26 	b.w	8002b58 <_getpid>

0801350c <__swhatbuf_r>:
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	460c      	mov	r4, r1
 8013510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013514:	2900      	cmp	r1, #0
 8013516:	b096      	sub	sp, #88	@ 0x58
 8013518:	4615      	mov	r5, r2
 801351a:	461e      	mov	r6, r3
 801351c:	da0d      	bge.n	801353a <__swhatbuf_r+0x2e>
 801351e:	89a3      	ldrh	r3, [r4, #12]
 8013520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013524:	f04f 0100 	mov.w	r1, #0
 8013528:	bf14      	ite	ne
 801352a:	2340      	movne	r3, #64	@ 0x40
 801352c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013530:	2000      	movs	r0, #0
 8013532:	6031      	str	r1, [r6, #0]
 8013534:	602b      	str	r3, [r5, #0]
 8013536:	b016      	add	sp, #88	@ 0x58
 8013538:	bd70      	pop	{r4, r5, r6, pc}
 801353a:	466a      	mov	r2, sp
 801353c:	f000 f848 	bl	80135d0 <_fstat_r>
 8013540:	2800      	cmp	r0, #0
 8013542:	dbec      	blt.n	801351e <__swhatbuf_r+0x12>
 8013544:	9901      	ldr	r1, [sp, #4]
 8013546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801354a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801354e:	4259      	negs	r1, r3
 8013550:	4159      	adcs	r1, r3
 8013552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013556:	e7eb      	b.n	8013530 <__swhatbuf_r+0x24>

08013558 <__smakebuf_r>:
 8013558:	898b      	ldrh	r3, [r1, #12]
 801355a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801355c:	079d      	lsls	r5, r3, #30
 801355e:	4606      	mov	r6, r0
 8013560:	460c      	mov	r4, r1
 8013562:	d507      	bpl.n	8013574 <__smakebuf_r+0x1c>
 8013564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013568:	6023      	str	r3, [r4, #0]
 801356a:	6123      	str	r3, [r4, #16]
 801356c:	2301      	movs	r3, #1
 801356e:	6163      	str	r3, [r4, #20]
 8013570:	b003      	add	sp, #12
 8013572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013574:	ab01      	add	r3, sp, #4
 8013576:	466a      	mov	r2, sp
 8013578:	f7ff ffc8 	bl	801350c <__swhatbuf_r>
 801357c:	9f00      	ldr	r7, [sp, #0]
 801357e:	4605      	mov	r5, r0
 8013580:	4639      	mov	r1, r7
 8013582:	4630      	mov	r0, r6
 8013584:	f7fe fed4 	bl	8012330 <_malloc_r>
 8013588:	b948      	cbnz	r0, 801359e <__smakebuf_r+0x46>
 801358a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801358e:	059a      	lsls	r2, r3, #22
 8013590:	d4ee      	bmi.n	8013570 <__smakebuf_r+0x18>
 8013592:	f023 0303 	bic.w	r3, r3, #3
 8013596:	f043 0302 	orr.w	r3, r3, #2
 801359a:	81a3      	strh	r3, [r4, #12]
 801359c:	e7e2      	b.n	8013564 <__smakebuf_r+0xc>
 801359e:	89a3      	ldrh	r3, [r4, #12]
 80135a0:	6020      	str	r0, [r4, #0]
 80135a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135a6:	81a3      	strh	r3, [r4, #12]
 80135a8:	9b01      	ldr	r3, [sp, #4]
 80135aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80135ae:	b15b      	cbz	r3, 80135c8 <__smakebuf_r+0x70>
 80135b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135b4:	4630      	mov	r0, r6
 80135b6:	f000 f81d 	bl	80135f4 <_isatty_r>
 80135ba:	b128      	cbz	r0, 80135c8 <__smakebuf_r+0x70>
 80135bc:	89a3      	ldrh	r3, [r4, #12]
 80135be:	f023 0303 	bic.w	r3, r3, #3
 80135c2:	f043 0301 	orr.w	r3, r3, #1
 80135c6:	81a3      	strh	r3, [r4, #12]
 80135c8:	89a3      	ldrh	r3, [r4, #12]
 80135ca:	431d      	orrs	r5, r3
 80135cc:	81a5      	strh	r5, [r4, #12]
 80135ce:	e7cf      	b.n	8013570 <__smakebuf_r+0x18>

080135d0 <_fstat_r>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	4d07      	ldr	r5, [pc, #28]	@ (80135f0 <_fstat_r+0x20>)
 80135d4:	2300      	movs	r3, #0
 80135d6:	4604      	mov	r4, r0
 80135d8:	4608      	mov	r0, r1
 80135da:	4611      	mov	r1, r2
 80135dc:	602b      	str	r3, [r5, #0]
 80135de:	f7ef fb23 	bl	8002c28 <_fstat>
 80135e2:	1c43      	adds	r3, r0, #1
 80135e4:	d102      	bne.n	80135ec <_fstat_r+0x1c>
 80135e6:	682b      	ldr	r3, [r5, #0]
 80135e8:	b103      	cbz	r3, 80135ec <_fstat_r+0x1c>
 80135ea:	6023      	str	r3, [r4, #0]
 80135ec:	bd38      	pop	{r3, r4, r5, pc}
 80135ee:	bf00      	nop
 80135f0:	2000836c 	.word	0x2000836c

080135f4 <_isatty_r>:
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	4d06      	ldr	r5, [pc, #24]	@ (8013610 <_isatty_r+0x1c>)
 80135f8:	2300      	movs	r3, #0
 80135fa:	4604      	mov	r4, r0
 80135fc:	4608      	mov	r0, r1
 80135fe:	602b      	str	r3, [r5, #0]
 8013600:	f7ef fb22 	bl	8002c48 <_isatty>
 8013604:	1c43      	adds	r3, r0, #1
 8013606:	d102      	bne.n	801360e <_isatty_r+0x1a>
 8013608:	682b      	ldr	r3, [r5, #0]
 801360a:	b103      	cbz	r3, 801360e <_isatty_r+0x1a>
 801360c:	6023      	str	r3, [r4, #0]
 801360e:	bd38      	pop	{r3, r4, r5, pc}
 8013610:	2000836c 	.word	0x2000836c

08013614 <_init>:
 8013614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013616:	bf00      	nop
 8013618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801361a:	bc08      	pop	{r3}
 801361c:	469e      	mov	lr, r3
 801361e:	4770      	bx	lr

08013620 <_fini>:
 8013620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013622:	bf00      	nop
 8013624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013626:	bc08      	pop	{r3}
 8013628:	469e      	mov	lr, r3
 801362a:	4770      	bx	lr
