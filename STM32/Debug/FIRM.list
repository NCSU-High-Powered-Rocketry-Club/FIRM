
FIRM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  08013640  08013640  00014640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140fc  080140fc  000162c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080140fc  080140fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014104  08014104  000162c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014104  08014104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014108  08014108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0801410c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000162c8  2**0
                  CONTENTS
 10 .bss          000064e0  200002c8  200002c8  000162c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200067a8  200067a8  000162c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000162c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f230  00000000  00000000  000162f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005472  00000000  00000000  00035528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a48  00000000  00000000  0003a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013dc  00000000  00000000  0003c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d44  00000000  00000000  0003d7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026b92  00000000  00000000  00064508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7724  00000000  00000000  0008b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001527be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d38  00000000  00000000  00152804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0015a53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013624 	.word	0x08013624

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	08013624 	.word	0x08013624

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <bmp_init>:
static const uint8_t cmd = 0x7E;

// BMP SPI config settings
static BMPSPISettings SPISettings;

int bmp_init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
    if (hspi == NULL || cs_channel == NULL) {
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <bmp_init+0x1a>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d104      	bne.n	8000f98 <bmp_init+0x24>
        serialPrintStr("BMP581 Invalid hspi handle or CS pin parameters");
 8000f8e:	482f      	ldr	r0, [pc, #188]	@ (800104c <bmp_init+0xd8>)
 8000f90:	f001 ffaa 	bl	8002ee8 <serialPrintStr>
        return 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e054      	b.n	8001042 <bmp_init+0xce>
    }
    serialPrintStr("Beginning BMP581 initialization: ");
 8000f98:	482d      	ldr	r0, [pc, #180]	@ (8001050 <bmp_init+0xdc>)
 8000f9a:	f001 ffa5 	bl	8002ee8 <serialPrintStr>
    // set up the SPI settings
    SPISettings.hspi = hspi;
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001054 <bmp_init+0xe0>)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6013      	str	r3, [r2, #0]
    SPISettings.cs_channel = cs_channel;
 8000fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8001054 <bmp_init+0xe0>)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	6053      	str	r3, [r2, #4]
    SPISettings.cs_pin = cs_pin;
 8000faa:	4a2a      	ldr	r2, [pc, #168]	@ (8001054 <bmp_init+0xe0>)
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	8113      	strh	r3, [r2, #8]
    // sets up the BMP in SPI mode and ensures SPI is working
    if (bmp_setup_device(false)) {
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f8bb 	bl	800112c <bmp_setup_device>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <bmp_init+0x4c>
        return 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e040      	b.n	8001042 <bmp_init+0xce>
    }

    serialPrintStr("  Issuing BMP581 software reset...");
 8000fc0:	4825      	ldr	r0, [pc, #148]	@ (8001058 <bmp_init+0xe4>)
 8000fc2:	f001 ff91 	bl	8002ee8 <serialPrintStr>
    bmp_spi_write(cmd, 0b10110110); // do a soft-reset of the sensor's settings
 8000fc6:	237e      	movs	r3, #126	@ 0x7e
 8000fc8:	21b6      	movs	r1, #182	@ 0xb6
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f9c6 	bl	800135c <bmp_spi_write>
    if (bmp_setup_device(true)) { // verify correct setup again
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f000 f8ab 	bl	800112c <bmp_setup_device>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <bmp_init+0x6c>
        return 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e030      	b.n	8001042 <bmp_init+0xce>
    }

    // enable pressure measurements, sets 1x over-sampling (no OSR) for pressure and temperature.

    int error_code = bmp_spi_write(osr_config, 0b01000000);
 8000fe0:	2336      	movs	r3, #54	@ 0x36
 8000fe2:	2140      	movs	r1, #64	@ 0x40
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f9b9 	bl	800135c <bmp_spi_write>
 8000fea:	4603      	mov	r3, r0
 8000fec:	617b      	str	r3, [r7, #20]
    // enable interrupt pin, set to active-low, open-drain, latched mode
    error_code += bmp_spi_write(int_config, 0b00111001);
 8000fee:	2314      	movs	r3, #20
 8000ff0:	2139      	movs	r1, #57	@ 0x39
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9b2 	bl	800135c <bmp_spi_write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4413      	add	r3, r2
 8001000:	617b      	str	r3, [r7, #20]
    // set the source of the interrupt signal to be on data-ready
    error_code += bmp_spi_write(int_source, 0b00000001);
 8001002:	2315      	movs	r3, #21
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f9a8 	bl	800135c <bmp_spi_write>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4413      	add	r3, r2
 8001014:	617b      	str	r3, [r7, #20]
    // disable deep-sleep, set to max ODR, set to continuous mode
    error_code += bmp_spi_write(ord_config, 0b10000011);
 8001016:	2337      	movs	r3, #55	@ 0x37
 8001018:	2183      	movs	r1, #131	@ 0x83
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f99e 	bl	800135c <bmp_spi_write>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	4413      	add	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
    // continuous mode actually ignores the ODR bits that were set, and uses the OSR to determine
    // the ODR (498hz with 1x OSR)
    if (error_code) {
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <bmp_init+0xc6>
        serialPrintStr("  SPI transaction error when writing to config registers");
 8001030:	480a      	ldr	r0, [pc, #40]	@ (800105c <bmp_init+0xe8>)
 8001032:	f001 ff59 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001036:	2301      	movs	r3, #1
 8001038:	e003      	b.n	8001042 <bmp_init+0xce>
    }
    serialPrintStr("  BMP Initialization successful!");
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <bmp_init+0xec>)
 800103c:	f001 ff54 	bl	8002ee8 <serialPrintStr>
    return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08013640 	.word	0x08013640
 8001050:	08013670 	.word	0x08013670
 8001054:	200002e4 	.word	0x200002e4
 8001058:	08013694 	.word	0x08013694
 800105c:	080136b8 	.word	0x080136b8
 8001060:	080136f4 	.word	0x080136f4

08001064 <bmp_read>:

int bmp_read(BMPPacket_t* packet) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    // error checking, packet should never be null
    if (packet == NULL) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d104      	bne.n	800107c <bmp_read+0x18>
        serialPrintStr("BMP581 given null packet");
 8001072:	482b      	ldr	r0, [pc, #172]	@ (8001120 <bmp_read+0xbc>)
 8001074:	f001 ff38 	bl	8002ee8 <serialPrintStr>
        return 3;
 8001078:	2303      	movs	r3, #3
 800107a:	e04d      	b.n	8001118 <bmp_read+0xb4>
    }
    // clear interrupt (pulls interrupt back up high) and verify new data is ready
    uint8_t data_ready = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	74fb      	strb	r3, [r7, #19]
    HAL_StatusTypeDef hal_status = bmp_spi_read(int_status, &data_ready, 1);
 8001080:	2027      	movs	r0, #39	@ 0x27
 8001082:	f107 0313 	add.w	r3, r7, #19
 8001086:	2201      	movs	r2, #1
 8001088:	4619      	mov	r1, r3
 800108a:	f000 f949 	bl	8001320 <bmp_spi_read>
 800108e:	4603      	mov	r3, r0
 8001090:	77fb      	strb	r3, [r7, #31]
    if (hal_status) {
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <bmp_read+0x38>
        // SPI communication failed
        return 2;
 8001098:	2302      	movs	r3, #2
 800109a:	e03d      	b.n	8001118 <bmp_read+0xb4>
    }
    if (data_ready & 0x01) { // bit 0 (LSB) will be 1 if new data is ready
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d037      	beq.n	8001116 <bmp_read+0xb2>
        // temperature and pressure are both 24 bit values, with the data in 3 registers each
        // burst read 6 registers starting from XLSB of temp, to MSB of pressure (0x1D -> 0x22)
        uint8_t raw_data[6];
        hal_status = bmp_spi_read(temp_data_xlsb, raw_data, 6);
 80010a6:	201d      	movs	r0, #29
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2206      	movs	r2, #6
 80010ae:	4619      	mov	r1, r3
 80010b0:	f000 f936 	bl	8001320 <bmp_spi_read>
 80010b4:	4603      	mov	r3, r0
 80010b6:	77fb      	strb	r3, [r7, #31]
        if (hal_status) {
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <bmp_read+0x5e>
            // SPI communication failed
            return 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	e02a      	b.n	8001118 <bmp_read+0xb4>
        }
        // bit shift the raw data, MSB shifts 16 bits left, LSB 8 bits left, and XLSB rightmost
        int32_t raw_temp = ((int32_t)raw_data[2] << 16) | ((int32_t)raw_data[1] << 8) | raw_data[0];
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	4313      	orrs	r3, r2
 80010cc:	7b3a      	ldrb	r2, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        uint32_t raw_pres =
            ((uint32_t)raw_data[5] << 16) | ((uint32_t)raw_data[4] << 8) | raw_data[3];
 80010d2:	7c7b      	ldrb	r3, [r7, #17]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	7c3b      	ldrb	r3, [r7, #16]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	4313      	orrs	r3, r2
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
        uint32_t raw_pres =
 80010de:	4313      	orrs	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]
        // datasheet instructs to divide raw temperature by 2^16 to get value in celcius, and
        // divide raw pressure by 2^6 to get value in Pascals
        packet->temperature = raw_temp / 65536.0f;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ec:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001124 <bmp_read+0xc0>
 80010f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	edc3 7a00 	vstr	s15, [r3]
        packet->pressure = raw_pres / 64.0f;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001104:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001128 <bmp_read+0xc4>
 8001108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edc3 7a01 	vstr	s15, [r3, #4]
        return 0;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <bmp_read+0xb4>
    }
    // data is not ready
    return 1;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08013718 	.word	0x08013718
 8001124:	47800000 	.word	0x47800000
 8001128:	42800000 	.word	0x42800000

0800112c <bmp_setup_device>:

int bmp_setup_device(bool soft_reset_complete) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
    // datasheet says 2ms to powerup, include some factor of safety
    HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f001 ff90 	bl	800305c <HAL_Delay>
    // perform dummy read as required by datasheet
    uint8_t result = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]
    // perform dummy read as required by datasheet
    HAL_StatusTypeDef hal_status = bmp_spi_read(chip_id, &result, 1);
 8001140:	2001      	movs	r0, #1
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	2201      	movs	r2, #1
 8001148:	4619      	mov	r1, r3
 800114a:	f000 f8e9 	bl	8001320 <bmp_spi_read>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
    if (hal_status) {
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d017      	beq.n	8001188 <bmp_setup_device+0x5c>
        switch (hal_status) {
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d009      	beq.n	8001172 <bmp_setup_device+0x46>
 800115e:	2b03      	cmp	r3, #3
 8001160:	dc0f      	bgt.n	8001182 <bmp_setup_device+0x56>
 8001162:	2b01      	cmp	r3, #1
 8001164:	d009      	beq.n	800117a <bmp_setup_device+0x4e>
 8001166:	2b02      	cmp	r3, #2
 8001168:	d10b      	bne.n	8001182 <bmp_setup_device+0x56>
        case HAL_BUSY:
            serialPrintStr("  SPI handle currently busy, unable to read");
 800116a:	485e      	ldr	r0, [pc, #376]	@ (80012e4 <bmp_setup_device+0x1b8>)
 800116c:	f001 febc 	bl	8002ee8 <serialPrintStr>
            break;
 8001170:	e008      	b.n	8001184 <bmp_setup_device+0x58>
        case HAL_TIMEOUT:
            serialPrintStr("  SPI read timed out during dummy read");
 8001172:	485d      	ldr	r0, [pc, #372]	@ (80012e8 <bmp_setup_device+0x1bc>)
 8001174:	f001 feb8 	bl	8002ee8 <serialPrintStr>
            break;
 8001178:	e004      	b.n	8001184 <bmp_setup_device+0x58>
        case HAL_ERROR:
            serialPrintStr("  SPI read transaction failed during dummy read");
 800117a:	485c      	ldr	r0, [pc, #368]	@ (80012ec <bmp_setup_device+0x1c0>)
 800117c:	f001 feb4 	bl	8002ee8 <serialPrintStr>
            break;
 8001180:	e000      	b.n	8001184 <bmp_setup_device+0x58>
        default:
            break;
 8001182:	bf00      	nop
        }
        return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e0a9      	b.n	80012dc <bmp_setup_device+0x1b0>
    }
    HAL_Delay(1); // to ensure device has enough time to switch to SPI mode
 8001188:	2001      	movs	r0, #1
 800118a:	f001 ff67 	bl	800305c <HAL_Delay>

    // ensure that device is set up in SPI mode or autoconfig mode
    bmp_spi_read(chip_status, &result, 1);
 800118e:	2011      	movs	r0, #17
 8001190:	f107 030e 	add.w	r3, r7, #14
 8001194:	2201      	movs	r2, #1
 8001196:	4619      	mov	r1, r3
 8001198:	f000 f8c2 	bl	8001320 <bmp_spi_read>
    if ((result & 0x03) == 0x00) {
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <bmp_setup_device+0x84>
        serialPrintStr("  Device incorrectly initialized in I2C Mode");
 80011a6:	4852      	ldr	r0, [pc, #328]	@ (80012f0 <bmp_setup_device+0x1c4>)
 80011a8:	f001 fe9e 	bl	8002ee8 <serialPrintStr>
        return 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e095      	b.n	80012dc <bmp_setup_device+0x1b0>
    }
    if ((result & 0x03) == 0x01) {
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d104      	bne.n	80011c4 <bmp_setup_device+0x98>
        serialPrintStr("  Device incorrectly initialized in SPI Mode 1/2");
 80011ba:	484e      	ldr	r0, [pc, #312]	@ (80012f4 <bmp_setup_device+0x1c8>)
 80011bc:	f001 fe94 	bl	8002ee8 <serialPrintStr>
        return 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e08b      	b.n	80012dc <bmp_setup_device+0x1b0>
    }
    if (result & 0x0C) {
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <bmp_setup_device+0xa8>
        serialPrintStr("  I3C error, check datasheet register 0x11 for more info.");
 80011ce:	484a      	ldr	r0, [pc, #296]	@ (80012f8 <bmp_setup_device+0x1cc>)
 80011d0:	f001 fe8a 	bl	8002ee8 <serialPrintStr>
    }

    // verify chip ID and asic rev ID read works
    hal_status = bmp_spi_read(chip_id, &result, 1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f107 030e 	add.w	r3, r7, #14
 80011da:	2201      	movs	r2, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	f000 f89f 	bl	8001320 <bmp_spi_read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]
    if (hal_status) {
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <bmp_setup_device+0xca>
        serialPrintStr("  HAL Error reading chip ID");
 80011ec:	4843      	ldr	r0, [pc, #268]	@ (80012fc <bmp_setup_device+0x1d0>)
 80011ee:	f001 fe7b 	bl	8002ee8 <serialPrintStr>
        return 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e072      	b.n	80012dc <bmp_setup_device+0x1b0>
    }
    if (result != 0x50) {
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	2b50      	cmp	r3, #80	@ 0x50
 80011fa:	d004      	beq.n	8001206 <bmp_setup_device+0xda>
        serialPrintStr("  BMP could not read chip ID");
 80011fc:	4840      	ldr	r0, [pc, #256]	@ (8001300 <bmp_setup_device+0x1d4>)
 80011fe:	f001 fe73 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e06a      	b.n	80012dc <bmp_setup_device+0x1b0>
    }
    bmp_spi_read(asic_rev_id, &result, 1);
 8001206:	2002      	movs	r0, #2
 8001208:	f107 030e 	add.w	r3, r7, #14
 800120c:	2201      	movs	r2, #1
 800120e:	4619      	mov	r1, r3
 8001210:	f000 f886 	bl	8001320 <bmp_spi_read>
    if (result != 0x32) {
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	2b32      	cmp	r3, #50	@ 0x32
 8001218:	d004      	beq.n	8001224 <bmp_setup_device+0xf8>
        serialPrintStr("  BMP could not read ASIC revision ID");
 800121a:	483a      	ldr	r0, [pc, #232]	@ (8001304 <bmp_setup_device+0x1d8>)
 800121c:	f001 fe64 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001220:	2301      	movs	r3, #1
 8001222:	e05b      	b.n	80012dc <bmp_setup_device+0x1b0>
    }

    // verify that writes work
    bmp_spi_read(fifo_sel, &result, 1);
 8001224:	2018      	movs	r0, #24
 8001226:	f107 030e 	add.w	r3, r7, #14
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f000 f877 	bl	8001320 <bmp_spi_read>
    if (result) {
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <bmp_setup_device+0x116>
        serialPrintStr("  Could not start write test: wrong expected value for FIFO_SEL");
 8001238:	4833      	ldr	r0, [pc, #204]	@ (8001308 <bmp_setup_device+0x1dc>)
 800123a:	f001 fe55 	bl	8002ee8 <serialPrintStr>
        return 1;
 800123e:	2301      	movs	r3, #1
 8001240:	e04c      	b.n	80012dc <bmp_setup_device+0x1b0>
    }
    bmp_spi_write(fifo_sel, 0b00000100);
 8001242:	2318      	movs	r3, #24
 8001244:	2104      	movs	r1, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f888 	bl	800135c <bmp_spi_write>
    bmp_spi_read(fifo_sel, &result, 1);
 800124c:	2018      	movs	r0, #24
 800124e:	f107 030e 	add.w	r3, r7, #14
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	f000 f863 	bl	8001320 <bmp_spi_read>
    if (result != 0x04) {
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d004      	beq.n	800126a <bmp_setup_device+0x13e>
        serialPrintStr("  BMP SPI Write test failed, wrote to register and did not read expected value back!");
 8001260:	482a      	ldr	r0, [pc, #168]	@ (800130c <bmp_setup_device+0x1e0>)
 8001262:	f001 fe41 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001266:	2301      	movs	r3, #1
 8001268:	e038      	b.n	80012dc <bmp_setup_device+0x1b0>
    }
    bmp_spi_write(fifo_sel, 0b00000000); // set back to default
 800126a:	2318      	movs	r3, #24
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f874 	bl	800135c <bmp_spi_write>

    // verify device is ready to be configured
    bmp_spi_read(status, &result, 1);
 8001274:	2028      	movs	r0, #40	@ 0x28
 8001276:	f107 030e 	add.w	r3, r7, #14
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	f000 f84f 	bl	8001320 <bmp_spi_read>
    if (result != 0x02) {
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d011      	beq.n	80012ac <bmp_setup_device+0x180>
        if (result & 0x04) {
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <bmp_setup_device+0x16c>
            serialPrintStr("  NVM error, refer to datasheet for source of error");
 8001292:	481f      	ldr	r0, [pc, #124]	@ (8001310 <bmp_setup_device+0x1e4>)
 8001294:	f001 fe28 	bl	8002ee8 <serialPrintStr>
        }
        if (result & 0x08) {
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <bmp_setup_device+0x17c>
            serialPrintStr("  NVM error, datasheet just says \"TODO UPDATE ME\"");
 80012a2:	481c      	ldr	r0, [pc, #112]	@ (8001314 <bmp_setup_device+0x1e8>)
 80012a4:	f001 fe20 	bl	8002ee8 <serialPrintStr>
        }
        return 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e017      	b.n	80012dc <bmp_setup_device+0x1b0>
    }

    if (soft_reset_complete) {
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d010      	beq.n	80012d4 <bmp_setup_device+0x1a8>
        // verify software reset is recognized as complete by the interrupt status register
        bmp_spi_read(int_status, &result, 1);
 80012b2:	2027      	movs	r0, #39	@ 0x27
 80012b4:	f107 030e 	add.w	r3, r7, #14
 80012b8:	2201      	movs	r2, #1
 80012ba:	4619      	mov	r1, r3
 80012bc:	f000 f830 	bl	8001320 <bmp_spi_read>
        if (!(result & 0x10)) { // check that bit 4 (POR) is 1
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <bmp_setup_device+0x1a8>
            serialPrintStr("  Software reset interrupt signal not generated!");
 80012ca:	4813      	ldr	r0, [pc, #76]	@ (8001318 <bmp_setup_device+0x1ec>)
 80012cc:	f001 fe0c 	bl	8002ee8 <serialPrintStr>
            return 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e003      	b.n	80012dc <bmp_setup_device+0x1b0>
        }
    }
    serialPrintStr("  BMP startup successful");
 80012d4:	4811      	ldr	r0, [pc, #68]	@ (800131c <bmp_setup_device+0x1f0>)
 80012d6:	f001 fe07 	bl	8002ee8 <serialPrintStr>
    return 0;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08013734 	.word	0x08013734
 80012e8:	08013760 	.word	0x08013760
 80012ec:	08013788 	.word	0x08013788
 80012f0:	080137b8 	.word	0x080137b8
 80012f4:	080137e8 	.word	0x080137e8
 80012f8:	0801381c 	.word	0x0801381c
 80012fc:	08013858 	.word	0x08013858
 8001300:	08013874 	.word	0x08013874
 8001304:	08013894 	.word	0x08013894
 8001308:	080138bc 	.word	0x080138bc
 800130c:	080138fc 	.word	0x080138fc
 8001310:	08013954 	.word	0x08013954
 8001314:	08013988 	.word	0x08013988
 8001318:	080139bc 	.word	0x080139bc
 800131c:	080139f0 	.word	0x080139f0

08001320 <bmp_spi_read>:

HAL_StatusTypeDef bmp_spi_read(uint8_t addr, uint8_t* buffer, size_t len) {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b087      	sub	sp, #28
 8001324:	af02      	add	r7, sp, #8
 8001326:	4603      	mov	r3, r0
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	73fb      	strb	r3, [r7, #15]
    return spi_read(
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <bmp_spi_read+0x38>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <bmp_spi_read+0x38>)
 8001334:	6859      	ldr	r1, [r3, #4]
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <bmp_spi_read+0x38>)
 8001338:	891a      	ldrh	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	7bfc      	ldrb	r4, [r7, #15]
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4623      	mov	r3, r4
 8001348:	f001 f992 	bl	8002670 <spi_read>
 800134c:	4603      	mov	r3, r0
            SPISettings.cs_channel,
            SPISettings.cs_pin,
            addr,
            buffer,
            len);
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	200002e4 	.word	0x200002e4

0800135c <bmp_spi_write>:

HAL_StatusTypeDef bmp_spi_write(uint8_t addr, uint8_t data) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	af02      	add	r7, sp, #8
 8001362:	4603      	mov	r3, r0
 8001364:	460a      	mov	r2, r1
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	4613      	mov	r3, r2
 800136a:	71bb      	strb	r3, [r7, #6]
    return spi_write(
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <bmp_spi_write+0x34>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <bmp_spi_write+0x34>)
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <bmp_spi_write+0x34>)
 8001376:	891a      	ldrh	r2, [r3, #8]
 8001378:	79fc      	ldrb	r4, [r7, #7]
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4623      	mov	r3, r4
 8001380:	f001 f9b4 	bl	80026ec <spi_write>
 8001384:	4603      	mov	r3, r0
            SPISettings.hspi,
            SPISettings.cs_channel,
            SPISettings.cs_pin,
            addr,
            data);
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	bf00      	nop
 8001390:	200002e4 	.word	0x200002e4

08001394 <sign_extend_20bit>:

#include "firm_utils.h"

int16_t twos_complement_16(uint8_t msb, uint8_t lsb) { return (int16_t)((msb << 8) | lsb); }

int32_t sign_extend_20bit(uint32_t val) { return (int32_t)(val << 12) >> 12; }
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	031b      	lsls	r3, r3, #12
 80013a0:	131b      	asrs	r3, r3, #12
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <imu_init>:
static const uint8_t ipreg_sys1_reg_166 = 0xA6; // IPREG_SYS1 register
static const uint8_t ipreg_sys2_reg_123 = 0x7B; // IPREG_SYS2 register

static IMUSPISettings SPISettings;

int imu_init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_channel, uint16_t cs_pin) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	4613      	mov	r3, r2
 80013bc:	80fb      	strh	r3, [r7, #6]
    if (hspi == NULL || cs_channel == NULL) {
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <imu_init+0x1a>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <imu_init+0x2a>
        HAL_Delay(0); // due to serial communication needing a delay
 80013ca:	2000      	movs	r0, #0
 80013cc:	f001 fe46 	bl	800305c <HAL_Delay>
        serialPrintStr("ICM45686 Invalid hspi handle or CS pin parameters");
 80013d0:	4869      	ldr	r0, [pc, #420]	@ (8001578 <imu_init+0x1c8>)
 80013d2:	f001 fd89 	bl	8002ee8 <serialPrintStr>
        return 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0c9      	b.n	800156e <imu_init+0x1be>
    }
    // set SPI settings
    SPISettings.hspi = hspi;
 80013da:	4a68      	ldr	r2, [pc, #416]	@ (800157c <imu_init+0x1cc>)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6013      	str	r3, [r2, #0]
    SPISettings.cs_channel = cs_channel;
 80013e0:	4a66      	ldr	r2, [pc, #408]	@ (800157c <imu_init+0x1cc>)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	6053      	str	r3, [r2, #4]
    SPISettings.cs_pin = cs_pin;
 80013e6:	4a65      	ldr	r2, [pc, #404]	@ (800157c <imu_init+0x1cc>)
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	8113      	strh	r3, [r2, #8]


    HAL_Delay(0); // due to serial communication needing a delay
 80013ec:	2000      	movs	r0, #0
 80013ee:	f001 fe35 	bl	800305c <HAL_Delay>
    serialPrintStr("Beginning BMP581 initialization: ");
 80013f2:	4863      	ldr	r0, [pc, #396]	@ (8001580 <imu_init+0x1d0>)
 80013f4:	f001 fd78 	bl	8002ee8 <serialPrintStr>
    // Do a dummy read
    uint8_t result = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
    if (imu_spi_read(who_am_i, &result, 1)) {
 80013fc:	2072      	movs	r0, #114	@ 0x72
 80013fe:	f107 0317 	add.w	r3, r7, #23
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f000 fa63 	bl	80018d0 <imu_spi_read>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <imu_init+0x6c>
        HAL_Delay(0); // due to serial communication needing a delay
 8001410:	2000      	movs	r0, #0
 8001412:	f001 fe23 	bl	800305c <HAL_Delay>
        serialPrintStr("  Error handling SPI communication");
 8001416:	485b      	ldr	r0, [pc, #364]	@ (8001584 <imu_init+0x1d4>)
 8001418:	f001 fd66 	bl	8002ee8 <serialPrintStr>
    }

    // Verify chip ID is 0xE9
    imu_spi_read(who_am_i, &result, 1);
 800141c:	2072      	movs	r0, #114	@ 0x72
 800141e:	f107 0317 	add.w	r3, r7, #23
 8001422:	2201      	movs	r2, #1
 8001424:	4619      	mov	r1, r3
 8001426:	f000 fa53 	bl	80018d0 <imu_spi_read>
    if (result != 0xE9) {
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2be9      	cmp	r3, #233	@ 0xe9
 800142e:	d004      	beq.n	800143a <imu_init+0x8a>
        serialPrintStr("icm45686 chip ID failed to read");
 8001430:	4855      	ldr	r0, [pc, #340]	@ (8001588 <imu_init+0x1d8>)
 8001432:	f001 fd59 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001436:	2301      	movs	r3, #1
 8001438:	e099      	b.n	800156e <imu_init+0x1be>
    }

    // issues a soft reset
    imu_spi_write(reg_misc2, 0b00000010);
 800143a:	237f      	movs	r3, #127	@ 0x7f
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fa64 	bl	800190c <imu_spi_write>
    HAL_Delay(2); // 3ms delay to allow device to finish reset
 8001444:	2002      	movs	r0, #2
 8001446:	f001 fe09 	bl	800305c <HAL_Delay>
    result = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]

    // Do another dummy read
    imu_spi_read(who_am_i, &result, 1);
 800144e:	2072      	movs	r0, #114	@ 0x72
 8001450:	f107 0317 	add.w	r3, r7, #23
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	f000 fa3a 	bl	80018d0 <imu_spi_read>
    // Verify chip ID is 0xE9
    imu_spi_read(who_am_i, &result, 1);
 800145c:	2072      	movs	r0, #114	@ 0x72
 800145e:	f107 0317 	add.w	r3, r7, #23
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	f000 fa33 	bl	80018d0 <imu_spi_read>
    if (result != 0xE9) {
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2be9      	cmp	r3, #233	@ 0xe9
 800146e:	d004      	beq.n	800147a <imu_init+0xca>
        serialPrintStr("icm45686 chip ID failed to read");
 8001470:	4845      	ldr	r0, [pc, #276]	@ (8001588 <imu_init+0x1d8>)
 8001472:	f001 fd39 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001476:	2301      	movs	r3, #1
 8001478:	e079      	b.n	800156e <imu_init+0x1be>
    }

    // Check bit 1 (soft reset bit) is set back to 0
    imu_spi_read(reg_misc2, &result, 1);
 800147a:	207f      	movs	r0, #127	@ 0x7f
 800147c:	f107 0317 	add.w	r3, r7, #23
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	f000 fa24 	bl	80018d0 <imu_spi_read>
    if ((result & 0x02) != 0) {
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <imu_init+0xec>
        serialPrintStr("icm45686 software reset failed");
 8001492:	483e      	ldr	r0, [pc, #248]	@ (800158c <imu_init+0x1dc>)
 8001494:	f001 fd28 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001498:	2301      	movs	r3, #1
 800149a:	e068      	b.n	800156e <imu_init+0x1be>
    }

    // sets accel range to +/- 32g, and ODR to 800hz
    imu_spi_write(accel_config0, 0b00000110);
 800149c:	231b      	movs	r3, #27
 800149e:	2106      	movs	r1, #6
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fa33 	bl	800190c <imu_spi_write>
    // sets gyro range to 4000dps, and ODR to 800hz
    imu_spi_write(gyro_config0, 0b00000110);
 80014a6:	231c      	movs	r3, #28
 80014a8:	2106      	movs	r1, #6
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fa2e 	bl	800190c <imu_spi_write>
    // fifo set to stream mode, and 2k byte size
    imu_spi_write(fifo_config0, 0b01000111);
 80014b0:	231d      	movs	r3, #29
 80014b2:	2147      	movs	r1, #71	@ 0x47
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fa29 	bl	800190c <imu_spi_write>
    // enable fifo for acceleration and gyroscope
    imu_spi_write(fifo_config3, 0b00001111);
 80014ba:	2321      	movs	r3, #33	@ 0x21
 80014bc:	210f      	movs	r1, #15
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fa24 	bl	800190c <imu_spi_write>
    // disables all interrupts, to allow interrupt settings to be configured
    imu_spi_write(int1_config0, 0b00000000);
 80014c4:	2316      	movs	r3, #22
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fa1f 	bl	800190c <imu_spi_write>
    // sets interrupt pin to push-pull, latching, and active low
    imu_spi_write(int1_config2, 0b00000010);
 80014ce:	2318      	movs	r3, #24
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fa1a 	bl	800190c <imu_spi_write>
    // sets interrupt pin to only trigger when data is ready or reset is complete
    imu_spi_write(int1_config0, 0b10000100);
 80014d8:	2316      	movs	r3, #22
 80014da:	2184      	movs	r1, #132	@ 0x84
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fa15 	bl	800190c <imu_spi_write>

    // big endian mode
    spi_ireg_write(IPREG_TOP1, (uint16_t)sreg_ctrl, 0b00000010);
 80014e2:	2367      	movs	r3, #103	@ 0x67
 80014e4:	2202      	movs	r2, #2
 80014e6:	4619      	mov	r1, r3
 80014e8:	2004      	movs	r0, #4
 80014ea:	f000 f98f 	bl	800180c <spi_ireg_write>
    // turn interpolator and FIR filter off for gyro
    spi_ireg_write(IPREG_SYS1, (uint16_t)ipreg_sys1_reg_166, 0b00001011);
 80014ee:	23a6      	movs	r3, #166	@ 0xa6
 80014f0:	220b      	movs	r2, #11
 80014f2:	4619      	mov	r1, r3
 80014f4:	2002      	movs	r0, #2
 80014f6:	f000 f989 	bl	800180c <spi_ireg_write>
    // turn interpolator and FIR filter off for acceleration
    spi_ireg_write(IPREG_SYS2, (uint16_t)ipreg_sys2_reg_123, 0b00010100);
 80014fa:	237b      	movs	r3, #123	@ 0x7b
 80014fc:	2214      	movs	r2, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f983 	bl	800180c <spi_ireg_write>
    spi_ireg_read(IPREG_SYS2, (uint16_t)ipreg_sys2_reg_123, &result);
 8001506:	237b      	movs	r3, #123	@ 0x7b
 8001508:	4619      	mov	r1, r3
 800150a:	f107 0317 	add.w	r3, r7, #23
 800150e:	461a      	mov	r2, r3
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f917 	bl	8001744 <spi_ireg_read>
    if (result != 0b00010100) {
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b14      	cmp	r3, #20
 800151a:	d004      	beq.n	8001526 <imu_init+0x176>
        serialPrintStr("icm45686 failed to write");
 800151c:	481c      	ldr	r0, [pc, #112]	@ (8001590 <imu_init+0x1e0>)
 800151e:	f001 fce3 	bl	8002ee8 <serialPrintStr>
        return 1;
 8001522:	2301      	movs	r3, #1
 8001524:	e023      	b.n	800156e <imu_init+0x1be>
    }
    // place both accel and gyro in low noise mode
    imu_spi_write(pwr_mgmt0, 0b00001111);
 8001526:	2310      	movs	r3, #16
 8001528:	210f      	movs	r1, #15
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f9ee 	bl	800190c <imu_spi_write>
    // read to clear any interrupts
    imu_spi_read(int1_status0, &result, 1);
 8001530:	2019      	movs	r0, #25
 8001532:	f107 0317 	add.w	r3, r7, #23
 8001536:	2201      	movs	r2, #1
 8001538:	4619      	mov	r1, r3
 800153a:	f000 f9c9 	bl	80018d0 <imu_spi_read>
    imu_spi_read(int1_status1, &result, 1);
 800153e:	201a      	movs	r0, #26
 8001540:	f107 0317 	add.w	r3, r7, #23
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	f000 f9c2 	bl	80018d0 <imu_spi_read>
    // delay for gyro to get ready
    HAL_Delay(74);
 800154c:	204a      	movs	r0, #74	@ 0x4a
 800154e:	f001 fd85 	bl	800305c <HAL_Delay>
    imu_spi_read(int1_status0, &result, 1);
 8001552:	2019      	movs	r0, #25
 8001554:	f107 0317 	add.w	r3, r7, #23
 8001558:	2201      	movs	r2, #1
 800155a:	4619      	mov	r1, r3
 800155c:	f000 f9b8 	bl	80018d0 <imu_spi_read>

    serialPrintStr("ICM45686 setup complete");
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <imu_init+0x1e4>)
 8001562:	f001 fcc1 	bl	8002ee8 <serialPrintStr>
    // using a delay here because for some reason the serial debug skips a line if two
    // messages are back-to-back with no delay, so this allows showing that the setup is complete
    // and also the setup start message on the next sensor
    HAL_Delay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f001 fd78 	bl	800305c <HAL_Delay>
    return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	08013a0c 	.word	0x08013a0c
 800157c:	200002f0 	.word	0x200002f0
 8001580:	08013a40 	.word	0x08013a40
 8001584:	08013a64 	.word	0x08013a64
 8001588:	08013a88 	.word	0x08013a88
 800158c:	08013aa8 	.word	0x08013aa8
 8001590:	08013ac8 	.word	0x08013ac8
 8001594:	08013ae4 	.word	0x08013ae4

08001598 <imu_read>:

int imu_read(IMUPacket_t* packet) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b090      	sub	sp, #64	@ 0x40
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    uint8_t data_ready = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    // checking (and resetting) interrupt status
    imu_spi_read(int1_status0, &data_ready, 1);
 80015a6:	2019      	movs	r0, #25
 80015a8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	f000 f98e 	bl	80018d0 <imu_spi_read>
    if (data_ready & 0x04) { // bit 2 is data_ready flag for UI channel
 80015b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80b6 	beq.w	800172e <imu_read+0x196>
        // each packet from the fifo is 20 bytes
        uint8_t raw_data[20];
        imu_spi_read(fifo_data, raw_data, 20);
 80015c2:	2014      	movs	r0, #20
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2214      	movs	r2, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	f000 f980 	bl	80018d0 <imu_spi_read>

        // refer to the datasheet section 6.1 "packet structure" for information on the packet
        // structure to see which bytes of the FIFO packet go to which data points.
        // Accel X
        uint32_t temp =
            ((uint32_t)raw_data[1] << 12) | ((uint32_t)raw_data[2] << 4) | (raw_data[17] >> 4);
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	031a      	lsls	r2, r3, #12
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4313      	orrs	r3, r2
 80015da:	7f7a      	ldrb	r2, [r7, #29]
 80015dc:	0912      	lsrs	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
        uint32_t temp =
 80015e0:	4313      	orrs	r3, r2
 80015e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t ax = sign_extend_20bit(temp);
 80015e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80015e6:	f7ff fed5 	bl	8001394 <sign_extend_20bit>
 80015ea:	63b8      	str	r0, [r7, #56]	@ 0x38
        // Accel Y
        temp = ((uint32_t)raw_data[3] << 12) | ((uint32_t)raw_data[4] << 4) | (raw_data[18] >> 4);
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	031a      	lsls	r2, r3, #12
 80015f0:	7c3b      	ldrb	r3, [r7, #16]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	4313      	orrs	r3, r2
 80015f6:	7fba      	ldrb	r2, [r7, #30]
 80015f8:	0912      	lsrs	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	4313      	orrs	r3, r2
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t ay = sign_extend_20bit(temp);
 8001600:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001602:	f7ff fec7 	bl	8001394 <sign_extend_20bit>
 8001606:	6378      	str	r0, [r7, #52]	@ 0x34

        // Accel Z
        temp = ((uint32_t)raw_data[5] << 12) | ((uint32_t)raw_data[6] << 4) | (raw_data[19] >> 4);
 8001608:	7c7b      	ldrb	r3, [r7, #17]
 800160a:	031a      	lsls	r2, r3, #12
 800160c:	7cbb      	ldrb	r3, [r7, #18]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4313      	orrs	r3, r2
 8001612:	7ffa      	ldrb	r2, [r7, #31]
 8001614:	0912      	lsrs	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	4313      	orrs	r3, r2
 800161a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t az = sign_extend_20bit(temp);
 800161c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800161e:	f7ff feb9 	bl	8001394 <sign_extend_20bit>
 8001622:	6338      	str	r0, [r7, #48]	@ 0x30

        // Gyro X
        temp = ((uint32_t)raw_data[7] << 12) | ((uint32_t)raw_data[8] << 4) | (raw_data[17] & 0x0F);
 8001624:	7cfb      	ldrb	r3, [r7, #19]
 8001626:	031a      	lsls	r2, r3, #12
 8001628:	7d3b      	ldrb	r3, [r7, #20]
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	431a      	orrs	r2, r3
 800162e:	7f7b      	ldrb	r3, [r7, #29]
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	4313      	orrs	r3, r2
 8001636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t gx = sign_extend_20bit(temp);
 8001638:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800163a:	f7ff feab 	bl	8001394 <sign_extend_20bit>
 800163e:	62f8      	str	r0, [r7, #44]	@ 0x2c

        // Gyro Y
        temp =
            ((uint32_t)raw_data[9] << 12) | ((uint32_t)raw_data[10] << 4) | (raw_data[18] & 0x0F);
 8001640:	7d7b      	ldrb	r3, [r7, #21]
 8001642:	031a      	lsls	r2, r3, #12
 8001644:	7dbb      	ldrb	r3, [r7, #22]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	431a      	orrs	r2, r3
 800164a:	7fbb      	ldrb	r3, [r7, #30]
 800164c:	f003 030f 	and.w	r3, r3, #15
        temp =
 8001650:	4313      	orrs	r3, r2
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t gy = sign_extend_20bit(temp);
 8001654:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001656:	f7ff fe9d 	bl	8001394 <sign_extend_20bit>
 800165a:	62b8      	str	r0, [r7, #40]	@ 0x28

        // Gyro Z
        temp =
            ((uint32_t)raw_data[11] << 12) | ((uint32_t)raw_data[12] << 4) | (raw_data[19] & 0x0F);
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	031a      	lsls	r2, r3, #12
 8001660:	7e3b      	ldrb	r3, [r7, #24]
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	431a      	orrs	r2, r3
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	f003 030f 	and.w	r3, r3, #15
        temp =
 800166c:	4313      	orrs	r3, r2
 800166e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t gz = sign_extend_20bit(temp);
 8001670:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001672:	f7ff fe8f 	bl	8001394 <sign_extend_20bit>
 8001676:	6278      	str	r0, [r7, #36]	@ 0x24

        // TODO: determine whether the data should be logged before or after the scale factor
        // is applied.

        // datasheet lists the scale factor for accelerometer to be 16,384 LSB/g when in FIFO mode
        packet->acc_x = (float)ax / 16384.0f;
 8001678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001682:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001738 <imu_read+0x1a0>
 8001686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edc3 7a00 	vstr	s15, [r3]
        packet->acc_y = (float)ay / 16384.0f;
 8001690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001738 <imu_read+0x1a0>
 800169e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edc3 7a01 	vstr	s15, [r3, #4]
        packet->acc_z = (float)az / 16384.0f;
 80016a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b2:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001738 <imu_read+0x1a0>
 80016b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edc3 7a02 	vstr	s15, [r3, #8]
        // datasheet lists gyroscope scale factor as 131.072 LSB/(deg/s). We will also convert to
        // radians, coming out to 23592.96 / PI
        packet->gyro_x = (float)gx / (23592.96f / pi);
 80016c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ca:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800173c <imu_read+0x1a4>
 80016ce:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8001740 <imu_read+0x1a8>
 80016d2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80016d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	edc3 7a03 	vstr	s15, [r3, #12]
        packet->gyro_y = (float)gy / (23592.96f / pi);
 80016e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ea:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800173c <imu_read+0x1a4>
 80016ee:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8001740 <imu_read+0x1a8>
 80016f2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80016f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	edc3 7a04 	vstr	s15, [r3, #16]
        packet->gyro_z = (float)gz / (23592.96f / pi);
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800170a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800173c <imu_read+0x1a4>
 800170e:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8001740 <imu_read+0x1a8>
 8001712:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	edc3 7a05 	vstr	s15, [r3, #20]

        // flush the fifo
        imu_spi_write(fifo_config2, 0b10100000);
 8001720:	2320      	movs	r3, #32
 8001722:	21a0      	movs	r1, #160	@ 0xa0
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f8f1 	bl	800190c <imu_spi_write>
        return 0;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <imu_read+0x198>
    }
    return 1; // data was not ready, return error
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3740      	adds	r7, #64	@ 0x40
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	46800000 	.word	0x46800000
 800173c:	40490fdb 	.word	0x40490fdb
 8001740:	46b851ec 	.word	0x46b851ec

08001744 <spi_ireg_read>:

int imu_setup_device(bool soft_reset_complete) {
    HAL_Delay(10); // allow device to power on
}

void spi_ireg_read(IREGMap_t register_map, uint16_t ireg_addr, uint8_t* result) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b087      	sub	sp, #28
 8001748:	af02      	add	r7, sp, #8
 800174a:	4603      	mov	r3, r0
 800174c:	603a      	str	r2, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	460b      	mov	r3, r1
 8001752:	80bb      	strh	r3, [r7, #4]
    switch (register_map) {
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b04      	cmp	r3, #4
 8001758:	d852      	bhi.n	8001800 <spi_ireg_read+0xbc>
 800175a:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <spi_ireg_read+0x1c>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017bd 	.word	0x080017bd
 8001764:	08001775 	.word	0x08001775
 8001768:	08001787 	.word	0x08001787
 800176c:	08001799 	.word	0x08001799
 8001770:	080017ab 	.word	0x080017ab
    case IMEM_SRAM:
        ireg_addr |= 0x0000;
        break;
    case IPREG_BAR:
        ireg_addr |= 0xA000;
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800177a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800177e:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8001782:	80bb      	strh	r3, [r7, #4]
        break;
 8001784:	e01b      	b.n	80017be <spi_ireg_read+0x7a>
    case IPREG_SYS1:
        ireg_addr |= 0xA400;
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800178c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001790:	f443 4324 	orr.w	r3, r3, #41984	@ 0xa400
 8001794:	80bb      	strh	r3, [r7, #4]
        break;
 8001796:	e012      	b.n	80017be <spi_ireg_read+0x7a>
    case IPREG_SYS2:
        ireg_addr |= 0xA500;
 8001798:	88bb      	ldrh	r3, [r7, #4]
 800179a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800179e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017a2:	f443 4325 	orr.w	r3, r3, #42240	@ 0xa500
 80017a6:	80bb      	strh	r3, [r7, #4]
        break;
 80017a8:	e009      	b.n	80017be <spi_ireg_read+0x7a>
    case IPREG_TOP1:
        ireg_addr |= 0xA200;
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017b4:	f443 4322 	orr.w	r3, r3, #41472	@ 0xa200
 80017b8:	80bb      	strh	r3, [r7, #4]
        break;
 80017ba:	e000      	b.n	80017be <spi_ireg_read+0x7a>
        break;
 80017bc:	bf00      	nop
    default:
        return;
    }
    uint8_t ireg_regs[2];
    ireg_regs[0] = (uint8_t)(ireg_addr >> 8);
 80017be:	88bb      	ldrh	r3, [r7, #4]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	733b      	strb	r3, [r7, #12]
    ireg_regs[1] = (uint8_t)(ireg_addr & 0x00FF);
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	737b      	strb	r3, [r7, #13]

    // Starting the burst write from IREG_ADDR_15_8 means that IREG_ADDR_7_0 will also be
    // written to, since it is auto-incremented (that's what a SPI burst write does).
    // So here, sending 2 bytes means 2 addresses (IREG_ADDR_15_8 and IREG_ADDR_7_0) are
    // configured at once.
    spi_burst_write(
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <spi_ireg_read+0xc4>)
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <spi_ireg_read+0xc4>)
 80017d4:	6859      	ldr	r1, [r3, #4]
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <spi_ireg_read+0xc4>)
 80017d8:	891a      	ldrh	r2, [r3, #8]
 80017da:	247c      	movs	r4, #124	@ 0x7c
 80017dc:	2302      	movs	r3, #2
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	4623      	mov	r3, r4
 80017e8:	f000 ffaa 	bl	8002740 <spi_burst_write>

    // After the write is over and the CS pin is pulled high, result of the the read
    // will be stored in the IREG_DATA register. The `result` pointer will have the value:
    // NOTE: We must wait for a minimum of 4us before reading IREG_DATA:

    HAL_Delay(0); // can only do millisecond delays, so 1ms is enough
 80017ec:	2000      	movs	r0, #0
 80017ee:	f001 fc35 	bl	800305c <HAL_Delay>

    imu_spi_read(ireg_data, result, 1);
 80017f2:	237e      	movs	r3, #126	@ 0x7e
 80017f4:	2201      	movs	r2, #1
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f869 	bl	80018d0 <imu_spi_read>
 80017fe:	e000      	b.n	8001802 <spi_ireg_read+0xbe>
        return;
 8001800:	bf00      	nop
}
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	200002f0 	.word	0x200002f0

0800180c <spi_ireg_write>:

void spi_ireg_write(IREGMap_t register_map, uint16_t ireg_addr, uint8_t data) {
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b087      	sub	sp, #28
 8001810:	af02      	add	r7, sp, #8
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	460b      	mov	r3, r1
 8001818:	80bb      	strh	r3, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	71bb      	strb	r3, [r7, #6]
    // combine page with address in as 16 bits
    switch (register_map) {
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d84f      	bhi.n	80018c4 <spi_ireg_write+0xb8>
 8001824:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <spi_ireg_write+0x20>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	08001889 	.word	0x08001889
 8001830:	08001841 	.word	0x08001841
 8001834:	08001853 	.word	0x08001853
 8001838:	08001865 	.word	0x08001865
 800183c:	08001877 	.word	0x08001877
    case IMEM_SRAM:
        ireg_addr |= 0x0000;
        break;
    case IPREG_BAR:
        ireg_addr |= 0xA000;
 8001840:	88bb      	ldrh	r3, [r7, #4]
 8001842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800184a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800184e:	80bb      	strh	r3, [r7, #4]
        break;
 8001850:	e01b      	b.n	800188a <spi_ireg_write+0x7e>
    case IPREG_SYS1:
        ireg_addr |= 0xA400;
 8001852:	88bb      	ldrh	r3, [r7, #4]
 8001854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800185c:	f443 4324 	orr.w	r3, r3, #41984	@ 0xa400
 8001860:	80bb      	strh	r3, [r7, #4]
        break;
 8001862:	e012      	b.n	800188a <spi_ireg_write+0x7e>
    case IPREG_SYS2:
        ireg_addr |= 0xA500;
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800186a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800186e:	f443 4325 	orr.w	r3, r3, #42240	@ 0xa500
 8001872:	80bb      	strh	r3, [r7, #4]
        break;
 8001874:	e009      	b.n	800188a <spi_ireg_write+0x7e>
    case IPREG_TOP1:
        ireg_addr |= 0xA200;
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800187c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001880:	f443 4322 	orr.w	r3, r3, #41472	@ 0xa200
 8001884:	80bb      	strh	r3, [r7, #4]
        break;
 8001886:	e000      	b.n	800188a <spi_ireg_write+0x7e>
        break;
 8001888:	bf00      	nop
        return;
    }

    // save the page, register, and data into an array
    uint8_t ireg_regs[3];
    ireg_regs[0] = (uint8_t)(ireg_addr >> 8);
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	b29b      	uxth	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	733b      	strb	r3, [r7, #12]
    ireg_regs[1] = (uint8_t)(ireg_addr & 0x00FF);
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	737b      	strb	r3, [r7, #13]
    ireg_regs[2] = data;
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	73bb      	strb	r3, [r7, #14]

    // burst write page,register, and data starting at ireg_addr_15_8
    spi_burst_write(
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <spi_ireg_write+0xc0>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <spi_ireg_write+0xc0>)
 80018a4:	6859      	ldr	r1, [r3, #4]
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <spi_ireg_write+0xc0>)
 80018a8:	891a      	ldrh	r2, [r3, #8]
 80018aa:	247c      	movs	r4, #124	@ 0x7c
 80018ac:	2303      	movs	r3, #3
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4623      	mov	r3, r4
 80018b8:	f000 ff42 	bl	8002740 <spi_burst_write>
            SPISettings.cs_pin,
            ireg_addr_15_8,
            ireg_regs,
            3);
    // must wait before next ireg operation
    HAL_Delay(0);
 80018bc:	2000      	movs	r0, #0
 80018be:	f001 fbcd 	bl	800305c <HAL_Delay>
 80018c2:	e000      	b.n	80018c6 <spi_ireg_write+0xba>
        return;
 80018c4:	bf00      	nop
}
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}
 80018cc:	200002f0 	.word	0x200002f0

080018d0 <imu_spi_read>:

HAL_StatusTypeDef imu_spi_read(uint8_t addr, uint8_t* buffer, size_t len) {
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	73fb      	strb	r3, [r7, #15]
    return spi_read(
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <imu_spi_read+0x38>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <imu_spi_read+0x38>)
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <imu_spi_read+0x38>)
 80018e8:	891a      	ldrh	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	7bfc      	ldrb	r4, [r7, #15]
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4623      	mov	r3, r4
 80018f8:	f000 feba 	bl	8002670 <spi_read>
 80018fc:	4603      	mov	r3, r0
            SPISettings.cs_channel,
            SPISettings.cs_pin,
            addr,
            buffer,
            len);
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	bf00      	nop
 8001908:	200002f0 	.word	0x200002f0

0800190c <imu_spi_write>:

HAL_StatusTypeDef imu_spi_write(uint8_t addr, uint8_t data) {
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b085      	sub	sp, #20
 8001910:	af02      	add	r7, sp, #8
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	71bb      	strb	r3, [r7, #6]
    return spi_write(
 800191c:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <imu_spi_write+0x34>)
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <imu_spi_write+0x34>)
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <imu_spi_write+0x34>)
 8001926:	891a      	ldrh	r2, [r3, #8]
 8001928:	79fc      	ldrb	r4, [r7, #7]
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	4623      	mov	r3, r4
 8001930:	f000 fedc 	bl	80026ec <spi_write>
 8001934:	4603      	mov	r3, r0
            SPISettings.hspi,
            SPISettings.cs_channel,
            SPISettings.cs_pin,
            addr,
            data);
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	200002f0 	.word	0x200002f0

08001944 <logger_write>:

extern DMA_HandleTypeDef hdma_sdio_tx; // Link to the DMA handler to check if busy

TCHAR file_name[32] = {'\0'};

FRESULT logger_write() {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
    if (HAL_DMA_GetState(&hdma_sdio_tx) != HAL_DMA_STATE_READY) {
 800194a:	481f      	ldr	r0, [pc, #124]	@ (80019c8 <logger_write+0x84>)
 800194c:	f001 ff6e 	bl	800382c <HAL_DMA_GetState>
 8001950:	4603      	mov	r3, r0
 8001952:	2b01      	cmp	r3, #1
 8001954:	d004      	beq.n	8001960 <logger_write+0x1c>
        serialPrintStr("Full");
 8001956:	481d      	ldr	r0, [pc, #116]	@ (80019cc <logger_write+0x88>)
 8001958:	f001 fac6 	bl	8002ee8 <serialPrintStr>
        return FR_DISK_ERR;
 800195c:	2301      	movs	r3, #1
 800195e:	e02e      	b.n	80019be <logger_write+0x7a>
    }

    // Pad the buffer
    for (int i = current_offset; i < BUFFER_SIZE; i++) {
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <logger_write+0x8c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e008      	b.n	800197a <logger_write+0x36>
        current_buffer[i] = 0;
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <logger_write+0x90>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
    for (int i = current_offset; i < BUFFER_SIZE; i++) {
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001980:	dbf2      	blt.n	8001968 <logger_write+0x24>
    }

    UINT bytes_written = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]

    // Set fast write so that it doesn't block on the dma request
    // See SD_write for fast implementation
    // We need to set it back because some of the internal SD card functions (like f_expand and
    // f_sync) need the old behavior
    sd_FastWriteFlag = 1;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <logger_write+0x94>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    // We need to log exactly BUFFER_SIZE = sector size in order for this to work in future writes.
    FRESULT fr = f_write(&log_file, current_buffer, BUFFER_SIZE, &bytes_written);
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <logger_write+0x90>)
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001996:	4811      	ldr	r0, [pc, #68]	@ (80019dc <logger_write+0x98>)
 8001998:	f00d fd92 	bl	800f4c0 <f_write>
 800199c:	4603      	mov	r3, r0
 800199e:	72fb      	strb	r3, [r7, #11]
    sd_FastWriteFlag = 0;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <logger_write+0x94>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

    if (fr != FR_OK) {
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <logger_write+0x72>
        serialPrintStr("ERR logger_write");
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <logger_write+0x9c>)
 80019ae:	f001 fa9b 	bl	8002ee8 <serialPrintStr>
        return fr;
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	e003      	b.n	80019be <logger_write+0x7a>
    } else {
        serialPrintStr(file_name);
 80019b6:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <logger_write+0xa0>)
 80019b8:	f001 fa96 	bl	8002ee8 <serialPrintStr>
    }

    return fr;
 80019bc:	7afb      	ldrb	r3, [r7, #11]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000490c 	.word	0x2000490c
 80019cc:	08013afc 	.word	0x08013afc
 80019d0:	200042fc 	.word	0x200042fc
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20004a38 	.word	0x20004a38
 80019dc:	20004300 	.word	0x20004300
 80019e0:	08013b04 	.word	0x08013b04
 80019e4:	20004760 	.word	0x20004760

080019e8 <logger_swap_buffers>:

void logger_swap_buffers() {
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
    if (current_buffer == buffer0) {
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <logger_swap_buffers+0x2c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <logger_swap_buffers+0x30>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d103      	bne.n	80019fe <logger_swap_buffers+0x16>
        current_buffer = buffer1;
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <logger_swap_buffers+0x2c>)
 80019f8:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <logger_swap_buffers+0x34>)
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e002      	b.n	8001a04 <logger_swap_buffers+0x1c>
    } else {
        current_buffer = buffer0;
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <logger_swap_buffers+0x2c>)
 8001a00:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <logger_swap_buffers+0x30>)
 8001a02:	601a      	str	r2, [r3, #0]
    }

    current_offset = 0;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <logger_swap_buffers+0x38>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	20000000 	.word	0x20000000
 8001a18:	200002fc 	.word	0x200002fc
 8001a1c:	200022fc 	.word	0x200022fc
 8001a20:	200042fc 	.word	0x200042fc

08001a24 <logger_write_header>:

// Writes the header to the log file
void logger_write_header() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
    // The length needs to be 4 byte aligned because the struts we are logging are 4 byte aligned
    // (they have floats).
    const char* header = "FIRM LOG v0.1\n";
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <logger_write_header+0x70>)
 8001a2c:	60bb      	str	r3, [r7, #8]
    size_t len = strlen(header);
 8001a2e:	68b8      	ldr	r0, [r7, #8]
 8001a30:	f7fe fc1e 	bl	8000270 <strlen>
 8001a34:	6078      	str	r0, [r7, #4]
    int padded_len = ((len + 3) / 4) * 4;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3303      	adds	r3, #3
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	603b      	str	r3, [r7, #0]

    logger_ensure_capacity(padded_len);
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	f000 f8d1 	bl	8001be8 <logger_ensure_capacity>

    strcpy(current_buffer + current_offset, header);
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <logger_write_header+0x74>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <logger_write_header+0x78>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f00f fd8f 	bl	8011576 <strcpy>

    // Fill the remaining space with zeros
    for (int i = len; i < padded_len; i++) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e00b      	b.n	8001a76 <logger_write_header+0x52>
        current_buffer[current_offset + i] = 0;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <logger_write_header+0x74>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <logger_write_header+0x78>)
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	440b      	add	r3, r1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
    for (int i = len; i < padded_len; i++) {
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3301      	adds	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbef      	blt.n	8001a5e <logger_write_header+0x3a>
    }

    current_offset += padded_len;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <logger_write_header+0x78>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <logger_write_header+0x78>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	08013b18 	.word	0x08013b18
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	200042fc 	.word	0x200042fc

08001aa0 <logger_init>:

FRESULT logger_init() {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b094      	sub	sp, #80	@ 0x50
 8001aa4:	af00      	add	r7, sp, #0
    // Re-initialize SD
    if (BSP_SD_Init() != MSD_OK) {
 8001aa6:	f009 fa55 	bl	800af54 <BSP_SD_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <logger_init+0x14>
        return FR_NOT_READY;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e085      	b.n	8001bc0 <logger_init+0x120>
    }

    // Re-initialize FATFS
    if (FATFS_UnLinkDriver(SDPath) != 0) {
 8001ab4:	4844      	ldr	r0, [pc, #272]	@ (8001bc8 <logger_init+0x128>)
 8001ab6:	f00e fa03 	bl	800fec0 <FATFS_UnLinkDriver>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <logger_init+0x24>
        return FR_NOT_READY;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e07d      	b.n	8001bc0 <logger_init+0x120>
    }
    if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) {
 8001ac4:	4940      	ldr	r1, [pc, #256]	@ (8001bc8 <logger_init+0x128>)
 8001ac6:	4841      	ldr	r0, [pc, #260]	@ (8001bcc <logger_init+0x12c>)
 8001ac8:	f00e f9b2 	bl	800fe30 <FATFS_LinkDriver>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <logger_init+0x36>
        return FR_NOT_READY;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e074      	b.n	8001bc0 <logger_init+0x120>
    }

    // Mount file system
    FRESULT fr = f_mount(&fs, SDPath, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	493b      	ldr	r1, [pc, #236]	@ (8001bc8 <logger_init+0x128>)
 8001ada:	483d      	ldr	r0, [pc, #244]	@ (8001bd0 <logger_init+0x130>)
 8001adc:	f00d faf0 	bl	800f0c0 <f_mount>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    if (fr != FR_OK) {
 8001ae6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <logger_init+0x5e>
        f_mount(NULL, SDPath, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	4935      	ldr	r1, [pc, #212]	@ (8001bc8 <logger_init+0x128>)
 8001af2:	2000      	movs	r0, #0
 8001af4:	f00d fae4 	bl	800f0c0 <f_mount>
        return fr;
 8001af8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001afc:	e060      	b.n	8001bc0 <logger_init+0x120>
    }

    uint8_t file_index = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    DIR dj;
    FILINFO fno;

    // Find the next available log file
    do {
        file_index++;
 8001b04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        sprintf(file_name, "log%i.txt", file_index);
 8001b0e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b12:	461a      	mov	r2, r3
 8001b14:	492f      	ldr	r1, [pc, #188]	@ (8001bd4 <logger_init+0x134>)
 8001b16:	4830      	ldr	r0, [pc, #192]	@ (8001bd8 <logger_init+0x138>)
 8001b18:	f00f fc48 	bl	80113ac <siprintf>
        fr = f_findfirst(&dj, &fno, "/", file_name);
 8001b1c:	4639      	mov	r1, r7
 8001b1e:	f107 0018 	add.w	r0, r7, #24
 8001b22:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <logger_init+0x138>)
 8001b24:	4a2d      	ldr	r2, [pc, #180]	@ (8001bdc <logger_init+0x13c>)
 8001b26:	f00d ff96 	bl	800fa56 <f_findfirst>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    } while (fr == FR_OK && fno.fname[0]);
 8001b30:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <logger_init+0x9e>
 8001b38:	7a7b      	ldrb	r3, [r7, #9]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e2      	bne.n	8001b04 <logger_init+0x64>

    if (fr != FR_OK) {
 8001b3e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <logger_init+0xac>
        return fr;
 8001b46:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b4a:	e039      	b.n	8001bc0 <logger_init+0x120>
    }

    // Open the file
    fr = f_open(&log_file, file_name, FA_CREATE_NEW | FA_WRITE);
 8001b4c:	2206      	movs	r2, #6
 8001b4e:	4922      	ldr	r1, [pc, #136]	@ (8001bd8 <logger_init+0x138>)
 8001b50:	4823      	ldr	r0, [pc, #140]	@ (8001be0 <logger_init+0x140>)
 8001b52:	f00d fafb 	bl	800f14c <f_open>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    if (fr != FR_OK) {
 8001b5c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <logger_init+0xd4>
        f_mount(0, SDPath, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	4918      	ldr	r1, [pc, #96]	@ (8001bc8 <logger_init+0x128>)
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f00d faa9 	bl	800f0c0 <f_mount>
        return fr;
 8001b6e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b72:	e025      	b.n	8001bc0 <logger_init+0x120>
    }

    // Allocate a contiguous area to the file
    // We need to do this to avoid f_sync (slow!)
    {
        fr = f_truncate(&log_file);
 8001b74:	481a      	ldr	r0, [pc, #104]	@ (8001be0 <logger_init+0x140>)
 8001b76:	f00d ff8c 	bl	800fa92 <f_truncate>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        HAL_Delay(10);
 8001b80:	200a      	movs	r0, #10
 8001b82:	f001 fa6b 	bl	800305c <HAL_Delay>
        if (fr != FR_OK) {
 8001b86:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <logger_init+0xf4>
            return fr;
 8001b8e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b92:	e015      	b.n	8001bc0 <logger_init+0x120>
        }

        // 2e8 bytes = (1 hour * ((8192 bytes * 4.4hz) * 1.5))
        fr = f_expand(&log_file, 2e8, 1);
 8001b94:	2201      	movs	r2, #1
 8001b96:	4913      	ldr	r1, [pc, #76]	@ (8001be4 <logger_init+0x144>)
 8001b98:	4811      	ldr	r0, [pc, #68]	@ (8001be0 <logger_init+0x140>)
 8001b9a:	f00e f80e 	bl	800fbba <f_expand>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        if (fr != FR_OK) {
 8001ba4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <logger_init+0x112>
            return fr;
 8001bac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001bb0:	e006      	b.n	8001bc0 <logger_init+0x120>
        }
    }
    f_sync(&log_file);
 8001bb2:	480b      	ldr	r0, [pc, #44]	@ (8001be0 <logger_init+0x140>)
 8001bb4:	f00d fdf9 	bl	800f7aa <f_sync>

    logger_write_header();
 8001bb8:	f7ff ff34 	bl	8001a24 <logger_write_header>

    return fr;
 8001bbc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3750      	adds	r7, #80	@ 0x50
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20004a34 	.word	0x20004a34
 8001bcc:	08013cf0 	.word	0x08013cf0
 8001bd0:	20004530 	.word	0x20004530
 8001bd4:	08013b28 	.word	0x08013b28
 8001bd8:	20004760 	.word	0x20004760
 8001bdc:	08013b34 	.word	0x08013b34
 8001be0:	20004300 	.word	0x20004300
 8001be4:	0bebc200 	.word	0x0bebc200

08001be8 <logger_ensure_capacity>:

FRESULT logger_ensure_capacity(int capacity) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    if (current_offset + capacity > BUFFER_SIZE) {
 8001bf0:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <logger_ensure_capacity+0x28>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bfc:	d903      	bls.n	8001c06 <logger_ensure_capacity+0x1e>
        logger_write();
 8001bfe:	f7ff fea1 	bl	8001944 <logger_write>

        logger_swap_buffers();
 8001c02:	f7ff fef1 	bl	80019e8 <logger_swap_buffers>
    }

    // TODO error handling
    return FR_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200042fc 	.word	0x200042fc

08001c14 <logger_log_type_timestamp>:

void logger_log_type_timestamp(char type) {
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
    // This should advance by TYPE_TIMESTAMP_SIZE
    current_buffer[current_offset++] = type;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <logger_log_type_timestamp+0x74>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1c59      	adds	r1, r3, #1
 8001c28:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c2a:	6001      	str	r1, [r0, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	701a      	strb	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 8001c32:	f001 fa07 	bl	8003044 <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]
    current_buffer[current_offset++] = (current_time >> 16) & 0xFF;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0c1c      	lsrs	r4, r3, #16
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <logger_log_type_timestamp+0x74>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1c59      	adds	r1, r3, #1
 8001c46:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c48:	6001      	str	r1, [r0, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2e2      	uxtb	r2, r4
 8001c4e:	701a      	strb	r2, [r3, #0]
    current_buffer[current_offset++] = (current_time >> 8) & 0xFF;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	0a1c      	lsrs	r4, r3, #8
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <logger_log_type_timestamp+0x74>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1c59      	adds	r1, r3, #1
 8001c5e:	480b      	ldr	r0, [pc, #44]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c60:	6001      	str	r1, [r0, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	b2e2      	uxtb	r2, r4
 8001c66:	701a      	strb	r2, [r3, #0]
    current_buffer[current_offset++] = current_time & 0xFF;
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <logger_log_type_timestamp+0x74>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1c59      	adds	r1, r3, #1
 8001c72:	4806      	ldr	r0, [pc, #24]	@ (8001c8c <logger_log_type_timestamp+0x78>)
 8001c74:	6001      	str	r1, [r0, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	200042fc 	.word	0x200042fc

08001c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c96:	f001 f96f 	bl	8002f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9a:	f000 f8c5 	bl	8001e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c9e:	f000 fa3d 	bl	800211c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ca2:	f000 fa13 	bl	80020cc <MX_DMA_Init>
  MX_I2C1_Init();
 8001ca6:	f000 f929 	bl	8001efc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001caa:	f000 f955 	bl	8001f58 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001cae:	f000 f981 	bl	8001fb4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001cb2:	f009 f935 	bl	800af20 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001cb6:	f000 f99d 	bl	8001ff4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001cba:	f000 f9d1 	bl	8002060 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 8001cbe:	f00e f90d 	bl	800fedc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

    // Setup the SD card
    FRESULT res = logger_init();
 8001cc2:	f7ff feed 	bl	8001aa0 <logger_init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	75fb      	strb	r3, [r7, #23]
    if (res) {
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <main+0x4a>
        serialPrintStr("Failed to initialized the logger (SD card)");
 8001cd0:	484b      	ldr	r0, [pc, #300]	@ (8001e00 <main+0x170>)
 8001cd2:	f001 f909 	bl	8002ee8 <serialPrintStr>
        Error_Handler();
 8001cd6:	f000 fb0f 	bl	80022f8 <Error_Handler>
    }

    // drive chip select pins high
    // Note: We can't have these in the bmp581/imu init functions, because those somehow mess up
    // with the initialization.
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // bmp581 pin
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2104      	movs	r1, #4
 8001cde:	4849      	ldr	r0, [pc, #292]	@ (8001e04 <main+0x174>)
 8001ce0:	f002 f852 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // imu pin
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cea:	4847      	ldr	r0, [pc, #284]	@ (8001e08 <main+0x178>)
 8001cec:	f002 f84c 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_Delay(1000); // purely for debug purposes, allows time to connect to USB serial terminal
 8001cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cf4:	f001 f9b2 	bl	800305c <HAL_Delay>

    if (imu_init(&hspi2, GPIOB, GPIO_PIN_9)) {
 8001cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfc:	4942      	ldr	r1, [pc, #264]	@ (8001e08 <main+0x178>)
 8001cfe:	4843      	ldr	r0, [pc, #268]	@ (8001e0c <main+0x17c>)
 8001d00:	f7ff fb56 	bl	80013b0 <imu_init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <main+0x7e>
        Error_Handler();
 8001d0a:	f000 faf5 	bl	80022f8 <Error_Handler>
    }
    if (bmp_init(&hspi2, GPIOC, GPIO_PIN_2)) {
 8001d0e:	2204      	movs	r2, #4
 8001d10:	493c      	ldr	r1, [pc, #240]	@ (8001e04 <main+0x174>)
 8001d12:	483e      	ldr	r0, [pc, #248]	@ (8001e0c <main+0x17c>)
 8001d14:	f7ff f92e 	bl	8000f74 <bmp_init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <main+0x92>
            Error_Handler();
 8001d1e:	f000 faeb 	bl	80022f8 <Error_Handler>
    }
    if (mag_init(&hi2c1, 0x30)) { // 0x30 is magnetometer device i2c address
 8001d22:	2130      	movs	r1, #48	@ 0x30
 8001d24:	483a      	ldr	r0, [pc, #232]	@ (8001e10 <main+0x180>)
 8001d26:	f000 faed 	bl	8002304 <mag_init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <main+0xa4>
        Error_Handler();
 8001d30:	f000 fae2 	bl	80022f8 <Error_Handler>
    }

    // incrementing value for magnetometer calibration
    uint8_t mag_flip = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	71fb      	strb	r3, [r7, #7]

    // Toggle LED:
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4832      	ldr	r0, [pc, #200]	@ (8001e04 <main+0x174>)
 8001d3c:	f002 f83d 	bl	8003dba <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
        if (bmp_ready) {
 8001d40:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <main+0x184>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01a      	beq.n	8001d7e <main+0xee>
            logger_ensure_capacity(sizeof(BMPPacket_t) + TYPE_TIMESTAMP_SIZE);
 8001d48:	200c      	movs	r0, #12
 8001d4a:	f7ff ff4d 	bl	8001be8 <logger_ensure_capacity>
            BMPPacket_t* bmp_packet =
                (BMPPacket_t*)&current_buffer[current_offset + TYPE_TIMESTAMP_SIZE];
 8001d4e:	4b32      	ldr	r3, [pc, #200]	@ (8001e18 <main+0x188>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b32      	ldr	r3, [pc, #200]	@ (8001e1c <main+0x18c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3304      	adds	r3, #4
            BMPPacket_t* bmp_packet =
 8001d58:	4413      	add	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
            if (bmp_read(bmp_packet) == 0) {
 8001d5c:	6938      	ldr	r0, [r7, #16]
 8001d5e:	f7ff f981 	bl	8001064 <bmp_read>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <main+0xee>
                // only reset flag if the new data was collected
                bmp_ready = false;
 8001d68:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <main+0x184>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
                logger_log_type_timestamp('B');
 8001d6e:	2042      	movs	r0, #66	@ 0x42
 8001d70:	f7ff ff50 	bl	8001c14 <logger_log_type_timestamp>
                current_offset += sizeof(BMPPacket_t);
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <main+0x18c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3308      	adds	r3, #8
 8001d7a:	4a28      	ldr	r2, [pc, #160]	@ (8001e1c <main+0x18c>)
 8001d7c:	6013      	str	r3, [r2, #0]
            }
        }
        if (imu_ready) {
 8001d7e:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <main+0x190>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01a      	beq.n	8001dbc <main+0x12c>
            logger_ensure_capacity(sizeof(IMUPacket_t) + TYPE_TIMESTAMP_SIZE);
 8001d86:	201c      	movs	r0, #28
 8001d88:	f7ff ff2e 	bl	8001be8 <logger_ensure_capacity>
            IMUPacket_t* imu_packet =
                (IMUPacket_t*)&current_buffer[current_offset + TYPE_TIMESTAMP_SIZE];
 8001d8c:	4b22      	ldr	r3, [pc, #136]	@ (8001e18 <main+0x188>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <main+0x18c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3304      	adds	r3, #4
            IMUPacket_t* imu_packet =
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
            if (imu_read(imu_packet) == 0) {
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7ff fbfc 	bl	8001598 <imu_read>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10a      	bne.n	8001dbc <main+0x12c>
                // only reset flag if the new data was collected
                imu_ready = false;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <main+0x190>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
                logger_log_type_timestamp('I');
 8001dac:	2049      	movs	r0, #73	@ 0x49
 8001dae:	f7ff ff31 	bl	8001c14 <logger_log_type_timestamp>
                current_offset += sizeof(IMUPacket_t);
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <main+0x18c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3318      	adds	r3, #24
 8001db8:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <main+0x18c>)
 8001dba:	6013      	str	r3, [r2, #0]
            }
        }
        if (mag_ready) {
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <main+0x194>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0bd      	beq.n	8001d40 <main+0xb0>
            logger_ensure_capacity(sizeof(MMCPacket_t) + TYPE_TIMESTAMP_SIZE);
 8001dc4:	2010      	movs	r0, #16
 8001dc6:	f7ff ff0f 	bl	8001be8 <logger_ensure_capacity>
            MMCPacket_t* mmc_packet =
                (MMCPacket_t*)&current_buffer[current_offset + TYPE_TIMESTAMP_SIZE];
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <main+0x188>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <main+0x18c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3304      	adds	r3, #4
            MMCPacket_t* mmc_packet =
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
            if (mag_read(mmc_packet, &mag_flip) == 0) {
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	68b8      	ldr	r0, [r7, #8]
 8001dde:	f000 fb15 	bl	800240c <mag_read>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ab      	bne.n	8001d40 <main+0xb0>
                // only reset flag if the new data was collected
                mag_ready = false;
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <main+0x194>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
                logger_log_type_timestamp('M');
 8001dee:	204d      	movs	r0, #77	@ 0x4d
 8001df0:	f7ff ff10 	bl	8001c14 <logger_log_type_timestamp>
                current_offset += sizeof(MMCPacket_t);
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <main+0x18c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <main+0x18c>)
 8001dfc:	6013      	str	r3, [r2, #0]
        if (bmp_ready) {
 8001dfe:	e79f      	b.n	8001d40 <main+0xb0>
 8001e00:	08013b38 	.word	0x08013b38
 8001e04:	40020800 	.word	0x40020800
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	2000496c 	.word	0x2000496c
 8001e10:	20004780 	.word	0x20004780
 8001e14:	20004a1c 	.word	0x20004a1c
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	200042fc 	.word	0x200042fc
 8001e20:	20004a1d 	.word	0x20004a1d
 8001e24:	20004a1e 	.word	0x20004a1e

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b094      	sub	sp, #80	@ 0x50
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	2230      	movs	r2, #48	@ 0x30
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00f fb1d 	bl	8011476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <SystemClock_Config+0xcc>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <SystemClock_Config+0xcc>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <SystemClock_Config+0xcc>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <SystemClock_Config+0xd0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <SystemClock_Config+0xd0>)
 8001e72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <SystemClock_Config+0xd0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001e98:	2306      	movs	r3, #6
 8001e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e9c:	23a8      	movs	r3, #168	@ 0xa8
 8001e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 fa2d 	bl	800630c <HAL_RCC_OscConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001eb8:	f000 fa1e 	bl	80022f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ec8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2105      	movs	r1, #5
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fc8e 	bl	80067fc <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ee6:	f000 fa07 	bl	80022f8 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	@ 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <MX_I2C1_Init+0x54>)
 8001f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <MX_I2C1_Init+0x58>)
 8001f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f3a:	f001 ff71 	bl	8003e20 <HAL_I2C_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f44:	f000 f9d8 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20004780 	.word	0x20004780
 8001f50:	40005400 	.word	0x40005400
 8001f54:	00061a80 	.word	0x00061a80

08001f58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f5e:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <MX_I2C2_Init+0x54>)
 8001f60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f64:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_I2C2_Init+0x58>)
 8001f66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <MX_I2C2_Init+0x50>)
 8001f96:	f001 ff43 	bl	8003e20 <HAL_I2C_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fa0:	f000 f9aa 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200047d4 	.word	0x200047d4
 8001fac:	40005800 	.word	0x40005800
 8001fb0:	000186a0 	.word	0x000186a0

08001fb4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_SDIO_SD_Init+0x38>)
 8001fba:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <MX_SDIO_SD_Init+0x3c>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <MX_SDIO_SD_Init+0x38>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <MX_SDIO_SD_Init+0x38>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <MX_SDIO_SD_Init+0x38>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <MX_SDIO_SD_Init+0x38>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fd6:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <MX_SDIO_SD_Init+0x38>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <MX_SDIO_SD_Init+0x38>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	20004828 	.word	0x20004828
 8001ff0:	40012c00 	.word	0x40012c00

08001ff4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <MX_SPI2_Init+0x64>)
 8001ffa:	4a18      	ldr	r2, [pc, #96]	@ (800205c <MX_SPI2_Init+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_SPI2_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002024:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002028:	2208      	movs	r2, #8
 800202a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202c:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <MX_SPI2_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <MX_SPI2_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002040:	220a      	movs	r2, #10
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <MX_SPI2_Init+0x64>)
 8002046:	f006 f8d7 	bl	80081f8 <HAL_SPI_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002050:	f000 f952 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000496c 	.word	0x2000496c
 800205c:	40003800 	.word	0x40003800

08002060 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_SPI3_Init+0x64>)
 8002066:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <MX_SPI3_Init+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_SPI3_Init+0x64>)
 800206c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002070:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002072:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <MX_SPI3_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <MX_SPI3_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207e:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <MX_SPI3_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <MX_SPI3_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <MX_SPI3_Init+0x64>)
 800208c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002090:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002092:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <MX_SPI3_Init+0x64>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <MX_SPI3_Init+0x64>)
 800209a:	2200      	movs	r2, #0
 800209c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <MX_SPI3_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a4:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <MX_SPI3_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <MX_SPI3_Init+0x64>)
 80020ac:	220a      	movs	r2, #10
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	@ (80020c4 <MX_SPI3_Init+0x64>)
 80020b2:	f006 f8a1 	bl	80081f8 <HAL_SPI_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80020bc:	f000 f91c 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200049c4 	.word	0x200049c4
 80020c8:	40003c00 	.word	0x40003c00

080020cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <MX_DMA_Init+0x4c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a0f      	ldr	r2, [pc, #60]	@ (8002118 <MX_DMA_Init+0x4c>)
 80020dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <MX_DMA_Init+0x4c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	203b      	movs	r0, #59	@ 0x3b
 80020f4:	f001 f8b1 	bl	800325a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020f8:	203b      	movs	r0, #59	@ 0x3b
 80020fa:	f001 f8ca 	bl	8003292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2045      	movs	r0, #69	@ 0x45
 8002104:	f001 f8a9 	bl	800325a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002108:	2045      	movs	r0, #69	@ 0x45
 800210a:	f001 f8c2 	bl	8003292 <HAL_NVIC_EnableIRQ>

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b5b      	ldr	r3, [pc, #364]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a5a      	ldr	r2, [pc, #360]	@ (80022a4 <MX_GPIO_Init+0x188>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b58      	ldr	r3, [pc, #352]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b54      	ldr	r3, [pc, #336]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a53      	ldr	r2, [pc, #332]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b4d      	ldr	r3, [pc, #308]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a4c      	ldr	r2, [pc, #304]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b4a      	ldr	r3, [pc, #296]	@ (80022a4 <MX_GPIO_Init+0x188>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b46      	ldr	r3, [pc, #280]	@ (80022a4 <MX_GPIO_Init+0x188>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a45      	ldr	r2, [pc, #276]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b43      	ldr	r3, [pc, #268]	@ (80022a4 <MX_GPIO_Init+0x188>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b3f      	ldr	r3, [pc, #252]	@ (80022a4 <MX_GPIO_Init+0x188>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a3e      	ldr	r2, [pc, #248]	@ (80022a4 <MX_GPIO_Init+0x188>)
 80021ac:	f043 0308 	orr.w	r3, r3, #8
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b3c      	ldr	r3, [pc, #240]	@ (80022a4 <MX_GPIO_Init+0x188>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|BMP581_CS_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2107      	movs	r1, #7
 80021c2:	4839      	ldr	r0, [pc, #228]	@ (80022a8 <MX_GPIO_Init+0x18c>)
 80021c4:	f001 fde0 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ce:	4837      	ldr	r0, [pc, #220]	@ (80022ac <MX_GPIO_Init+0x190>)
 80021d0:	f001 fdda 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021d4:	2303      	movs	r3, #3
 80021d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	482f      	ldr	r0, [pc, #188]	@ (80022a8 <MX_GPIO_Init+0x18c>)
 80021ec:	f001 fc18 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP581_CS_Pin */
  GPIO_InitStruct.Pin = BMP581_CS_Pin;
 80021f0:	2304      	movs	r3, #4
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP581_CS_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4828      	ldr	r0, [pc, #160]	@ (80022a8 <MX_GPIO_Init+0x18c>)
 8002208:	f001 fc0a 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMP581_Interrupt_Pin IMU_Interrupt_Pin */
  GPIO_InitStruct.Pin = BMP581_Interrupt_Pin|IMU_Interrupt_Pin;
 800220c:	2348      	movs	r3, #72	@ 0x48
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002210:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4821      	ldr	r0, [pc, #132]	@ (80022a8 <MX_GPIO_Init+0x18c>)
 8002222:	f001 fbfd 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	481c      	ldr	r0, [pc, #112]	@ (80022ac <MX_GPIO_Init+0x190>)
 800223c:	f001 fbf0 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mag_Interrupt_Pin */
  GPIO_InitStruct.Pin = Mag_Interrupt_Pin;
 8002240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002246:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800224a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mag_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4815      	ldr	r0, [pc, #84]	@ (80022ac <MX_GPIO_Init+0x190>)
 8002258:	f001 fbe2 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800225c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002262:	2301      	movs	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002266:	2301      	movs	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_GPIO_Init+0x190>)
 8002276:	f001 fbd3 	bl	8003a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2009      	movs	r0, #9
 8002280:	f000 ffeb 	bl	800325a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002284:	2009      	movs	r0, #9
 8002286:	f001 f804 	bl	8003292 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2017      	movs	r0, #23
 8002290:	f000 ffe3 	bl	800325a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002294:	2017      	movs	r0, #23
 8002296:	f000 fffc 	bl	8003292 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020400 	.word	0x40020400

080022b0 <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for interrupt pins
 * @note all ISR signals use this function, must check which pin before setting data ready flags
 * @param GPIO_Pin the EXTI pin that triggered the interrupt signal
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BMP581_Interrupt_Pin) {
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d102      	bne.n	80022c6 <HAL_GPIO_EXTI_Callback+0x16>
        bmp_ready = true;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == IMU_Interrupt_Pin) {
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	2b40      	cmp	r3, #64	@ 0x40
 80022ca:	d102      	bne.n	80022d2 <HAL_GPIO_EXTI_Callback+0x22>
        imu_ready = true;
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_GPIO_EXTI_Callback+0x40>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == Mag_Interrupt_Pin) {
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022d8:	d102      	bne.n	80022e0 <HAL_GPIO_EXTI_Callback+0x30>
        mag_ready = true;
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_GPIO_EXTI_Callback+0x44>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    }
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	20004a1c 	.word	0x20004a1c
 80022f0:	20004a1d 	.word	0x20004a1d
 80022f4:	20004a1e 	.word	0x20004a1e

080022f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <Error_Handler+0x8>

08002304 <mag_init>:

// BMP SPI config settings
static MMCI2CSettings I2CSettings;


int mag_init(I2C_HandleTypeDef* hi2c, uint8_t device_i2c_address) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
    // configure i2c settings
    I2CSettings.dev_addr = device_i2c_address;
 8002310:	4a38      	ldr	r2, [pc, #224]	@ (80023f4 <mag_init+0xf0>)
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	7113      	strb	r3, [r2, #4]
    I2CSettings.hi2c = hi2c;
 8002316:	4a37      	ldr	r2, [pc, #220]	@ (80023f4 <mag_init+0xf0>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6013      	str	r3, [r2, #0]

    HAL_Delay(14); // 15ms power-on time
 800231c:	200e      	movs	r0, #14
 800231e:	f000 fe9d 	bl	800305c <HAL_Delay>

    uint8_t result = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
    // dummy read, ignore result
    if (mag_i2c_read(product_id1, &result, 1) == HAL_ERROR) {
 8002326:	202f      	movs	r0, #47	@ 0x2f
 8002328:	f107 030f 	add.w	r3, r7, #15
 800232c:	2201      	movs	r2, #1
 800232e:	4619      	mov	r1, r3
 8002330:	f000 f95e 	bl	80025f0 <mag_i2c_read>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d104      	bne.n	8002344 <mag_init+0x40>
        serialPrintStr("I2C read failed HAL ERROR");
 800233a:	482f      	ldr	r0, [pc, #188]	@ (80023f8 <mag_init+0xf4>)
 800233c:	f000 fdd4 	bl	8002ee8 <serialPrintStr>
        return 1;
 8002340:	2301      	movs	r3, #1
 8002342:	e053      	b.n	80023ec <mag_init+0xe8>
    }
    // read product ID, check that result is the expected Product ID byte
    result = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
    mag_i2c_read(product_id1, &result, 1);
 8002348:	202f      	movs	r0, #47	@ 0x2f
 800234a:	f107 030f 	add.w	r3, r7, #15
 800234e:	2201      	movs	r2, #1
 8002350:	4619      	mov	r1, r3
 8002352:	f000 f94d 	bl	80025f0 <mag_i2c_read>
    if (result != product_id_val) {
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2230      	movs	r2, #48	@ 0x30
 800235a:	4293      	cmp	r3, r2
 800235c:	d004      	beq.n	8002368 <mag_init+0x64>
        serialPrintStr("MMC5983MA could not read Product ID");
 800235e:	4827      	ldr	r0, [pc, #156]	@ (80023fc <mag_init+0xf8>)
 8002360:	f000 fdc2 	bl	8002ee8 <serialPrintStr>
        return 1;
 8002364:	2301      	movs	r3, #1
 8002366:	e041      	b.n	80023ec <mag_init+0xe8>
    }
    // initiating a software reset
    mag_i2c_write(internal_control1, 0b10000000);
 8002368:	230a      	movs	r3, #10
 800236a:	2180      	movs	r1, #128	@ 0x80
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f95f 	bl	8002630 <mag_i2c_write>
    HAL_Delay(14); // 15ms power-on time
 8002372:	200e      	movs	r0, #14
 8002374:	f000 fe72 	bl	800305c <HAL_Delay>
    // do dummy read after reset
    mag_i2c_read(product_id1, &result, 1);
 8002378:	202f      	movs	r0, #47	@ 0x2f
 800237a:	f107 030f 	add.w	r3, r7, #15
 800237e:	2201      	movs	r2, #1
 8002380:	4619      	mov	r1, r3
 8002382:	f000 f935 	bl	80025f0 <mag_i2c_read>
    // read product ID, check that result is the expected Product ID byte
    mag_i2c_read(product_id1, &result, 1);
 8002386:	202f      	movs	r0, #47	@ 0x2f
 8002388:	f107 030f 	add.w	r3, r7, #15
 800238c:	2201      	movs	r2, #1
 800238e:	4619      	mov	r1, r3
 8002390:	f000 f92e 	bl	80025f0 <mag_i2c_read>
    if (result != product_id_val) {
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2230      	movs	r2, #48	@ 0x30
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <mag_init+0xa2>
        serialPrintStr("MMC5983MA could not read Product ID after reset");
 800239c:	4818      	ldr	r0, [pc, #96]	@ (8002400 <mag_init+0xfc>)
 800239e:	f000 fda3 	bl	8002ee8 <serialPrintStr>
        return 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e022      	b.n	80023ec <mag_init+0xe8>
    }

    // check that bit 7 (sw_rst) is back to 0
    mag_i2c_read(internal_control1, &result, 1);
 80023a6:	200a      	movs	r0, #10
 80023a8:	f107 030f 	add.w	r3, r7, #15
 80023ac:	2201      	movs	r2, #1
 80023ae:	4619      	mov	r1, r3
 80023b0:	f000 f91e 	bl	80025f0 <mag_i2c_read>
    if (result & 0x80) {
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da04      	bge.n	80023c6 <mag_init+0xc2>
        serialPrintStr("MMC5983MA could not complete software reset");
 80023bc:	4811      	ldr	r0, [pc, #68]	@ (8002404 <mag_init+0x100>)
 80023be:	f000 fd93 	bl	8002ee8 <serialPrintStr>
        return 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e012      	b.n	80023ec <mag_init+0xe8>
    }
    // enable interrupt pin
    mag_i2c_write(internal_control0, 0b00000100);
 80023c6:	2309      	movs	r3, #9
 80023c8:	2104      	movs	r1, #4
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f930 	bl	8002630 <mag_i2c_write>
    // set bandwidth to 200hz (4ms measurement time)
    mag_i2c_write(internal_control1, 0b00000001);
 80023d0:	230a      	movs	r3, #10
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f92b 	bl	8002630 <mag_i2c_write>
    // enable continuous measurement mode at 200hz
    mag_i2c_write(internal_control2, 0b00001110);
 80023da:	230b      	movs	r3, #11
 80023dc:	210e      	movs	r1, #14
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f926 	bl	8002630 <mag_i2c_write>

    serialPrintStr("MMC5983MA startup successful");
 80023e4:	4808      	ldr	r0, [pc, #32]	@ (8002408 <mag_init+0x104>)
 80023e6:	f000 fd7f 	bl	8002ee8 <serialPrintStr>
    return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20004a20 	.word	0x20004a20
 80023f8:	08013b64 	.word	0x08013b64
 80023fc:	08013b80 	.word	0x08013b80
 8002400:	08013ba4 	.word	0x08013ba4
 8002404:	08013bd4 	.word	0x08013bd4
 8002408:	08013c00 	.word	0x08013c00

0800240c <mag_read>:

int mag_read(MMCPacket_t* packet, uint8_t* flip) {
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
    uint8_t data_ready = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    // read status register to make sure data is ready
    mag_i2c_read(status, &data_ready, 1);
 800241c:	2008      	movs	r0, #8
 800241e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8002422:	2201      	movs	r2, #1
 8002424:	4619      	mov	r1, r3
 8002426:	f000 f8e3 	bl	80025f0 <mag_i2c_read>
    if (data_ready & 0x01) { // data ready bit is 0x01
 800242a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80d5 	beq.w	80025e2 <mag_read+0x1d6>
        // manually clear the interrupt signal
        mag_i2c_write(status, 0b00000001);
 8002438:	2308      	movs	r3, #8
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f8f7 	bl	8002630 <mag_i2c_write>
        uint8_t raw_data[7];
        uint32_t mag_data_binary[3];
        float mag_data[3];
        // every flip_interval read cycles, flip the polarity of the magnetometer values
        // to calibrate the sensor properly
        if (*flip % flip_interval == 0) {
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	230a      	movs	r3, #10
 800244a:	fb92 f1f3 	sdiv	r1, r2, r3
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <mag_read+0x56>
            mag_i2c_write(internal_control0, 0b00010100);
 8002458:	2309      	movs	r3, #9
 800245a:	2114      	movs	r1, #20
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f8e7 	bl	8002630 <mag_i2c_write>
        }
        if ((*flip - 1) % flip_interval == 0) {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	3b01      	subs	r3, #1
 8002468:	220a      	movs	r2, #10
 800246a:	fb93 f1f2 	sdiv	r1, r3, r2
 800246e:	fb01 f202 	mul.w	r2, r1, r2
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <mag_read+0x76>
            mag_i2c_write(internal_control0, 0b00001100);
 8002478:	2309      	movs	r3, #9
 800247a:	210c      	movs	r1, #12
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f8d7 	bl	8002630 <mag_i2c_write>
        }

        mag_i2c_read(x_out0, raw_data, 7);
 8002482:	2000      	movs	r0, #0
 8002484:	f107 0320 	add.w	r3, r7, #32
 8002488:	2207      	movs	r2, #7
 800248a:	4619      	mov	r1, r3
 800248c:	f000 f8b0 	bl	80025f0 <mag_i2c_read>
        mag_data_binary[0] =
            (uint32_t)(raw_data[0] << 10 | raw_data[1] << 2 | (raw_data[6] & 0xC0) >> 6);
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	029a      	lsls	r2, r3, #10
 8002496:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4313      	orrs	r3, r2
 800249e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80024a2:	0992      	lsrs	r2, r2, #6
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	4313      	orrs	r3, r2
        mag_data_binary[0] =
 80024a8:	617b      	str	r3, [r7, #20]
        mag_data_binary[1] =
            (uint32_t)(raw_data[2] << 10 | raw_data[3] << 2 | (raw_data[6] & 0x30) >> 4);
 80024aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80024ae:	029a      	lsls	r2, r3, #10
 80024b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	431a      	orrs	r2, r3
 80024b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024bc:	111b      	asrs	r3, r3, #4
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	4313      	orrs	r3, r2
        mag_data_binary[1] =
 80024c4:	61bb      	str	r3, [r7, #24]
        mag_data_binary[2] =
            (uint32_t)(raw_data[4] << 10 | raw_data[5] << 2 | (raw_data[6] & 0x0C) >> 2);
 80024c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024ca:	029a      	lsls	r2, r3, #10
 80024cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	431a      	orrs	r2, r3
 80024d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024d8:	109b      	asrs	r3, r3, #2
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	4313      	orrs	r3, r2
        mag_data_binary[2] =
 80024e0:	61fb      	str	r3, [r7, #28]
        mag_data[0] = (((float)mag_data_binary[0]) - 131072.0) / scaling_factor;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
 80024f0:	f7fe f82a 	bl	8000548 <__aeabi_f2d>
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80024fc:	f7fd fec4 	bl	8000288 <__aeabi_dsub>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4614      	mov	r4, r2
 8002506:	461d      	mov	r5, r3
 8002508:	4b38      	ldr	r3, [pc, #224]	@ (80025ec <mag_read+0x1e0>)
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f81c 	bl	8000548 <__aeabi_f2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f7fe f998 	bl	800084c <__aeabi_ddiv>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb40 	bl	8000ba8 <__aeabi_d2f>
 8002528:	4603      	mov	r3, r0
 800252a:	60bb      	str	r3, [r7, #8]
        mag_data[1] = (((float)mag_data_binary[1]) - 131072.0) / scaling_factor;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002536:	ee17 0a90 	vmov	r0, s15
 800253a:	f7fe f805 	bl	8000548 <__aeabi_f2d>
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002546:	f7fd fe9f 	bl	8000288 <__aeabi_dsub>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4614      	mov	r4, r2
 8002550:	461d      	mov	r5, r3
 8002552:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <mag_read+0x1e0>)
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd fff7 	bl	8000548 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4620      	mov	r0, r4
 8002560:	4629      	mov	r1, r5
 8002562:	f7fe f973 	bl	800084c <__aeabi_ddiv>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb1b 	bl	8000ba8 <__aeabi_d2f>
 8002572:	4603      	mov	r3, r0
 8002574:	60fb      	str	r3, [r7, #12]
        mag_data[2] = (((float)mag_data_binary[2]) - 131072.0) / scaling_factor;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002580:	ee17 0a90 	vmov	r0, s15
 8002584:	f7fd ffe0 	bl	8000548 <__aeabi_f2d>
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002590:	f7fd fe7a 	bl	8000288 <__aeabi_dsub>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
 800259c:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <mag_read+0x1e0>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffd2 	bl	8000548 <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fe f94e 	bl	800084c <__aeabi_ddiv>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7fe faf6 	bl	8000ba8 <__aeabi_d2f>
 80025bc:	4603      	mov	r3, r0
 80025be:	613b      	str	r3, [r7, #16]
        packet->mag_x = mag_data[0];
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
        packet->mag_y = mag_data[1];
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	605a      	str	r2, [r3, #4]
        packet->mag_z = mag_data[2];
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]
        (*flip)++; // incrememt the flip counter
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
        return 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <mag_read+0x1d8>
    }
    return 1;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3728      	adds	r7, #40	@ 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bdb0      	pop	{r4, r5, r7, pc}
 80025ec:	4323d70a 	.word	0x4323d70a

080025f0 <mag_i2c_read>:

HAL_StatusTypeDef mag_i2c_read(uint8_t reg_addr, uint8_t* buffer, size_t len) {
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	4603      	mov	r3, r0
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Mem_Read(
 80025fe:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <mag_i2c_read+0x3c>)
 8002600:	6818      	ldr	r0, [r3, #0]
            I2CSettings.hi2c,
            (uint16_t)(I2CSettings.dev_addr << 1),
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <mag_i2c_read+0x3c>)
 8002604:	791b      	ldrb	r3, [r3, #4]
    return HAL_I2C_Mem_Read(
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	b299      	uxth	r1, r3
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	b29a      	uxth	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	b29b      	uxth	r3, r3
 8002612:	2464      	movs	r4, #100	@ 0x64
 8002614:	9402      	str	r4, [sp, #8]
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2301      	movs	r3, #1
 800261e:	f001 fe3d 	bl	800429c <HAL_I2C_Mem_Read>
 8002622:	4603      	mov	r3, r0
            (uint16_t)reg_addr,
            I2C_MEMADD_SIZE_8BIT,
            buffer,
            len,
            100);
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	20004a20 	.word	0x20004a20

08002630 <mag_i2c_write>:

HAL_StatusTypeDef mag_i2c_write(uint8_t reg_addr, uint8_t data) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af04      	add	r7, sp, #16
 8002636:	4603      	mov	r3, r0
 8002638:	460a      	mov	r2, r1
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	4613      	mov	r3, r2
 800263e:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <mag_i2c_write+0x3c>)
 8002642:	6818      	ldr	r0, [r3, #0]
            I2CSettings.hi2c,
            (uint16_t)(I2CSettings.dev_addr << 1),
 8002644:	4b09      	ldr	r3, [pc, #36]	@ (800266c <mag_i2c_write+0x3c>)
 8002646:	791b      	ldrb	r3, [r3, #4]
    return HAL_I2C_Mem_Write(
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	b299      	uxth	r1, r3
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	b29a      	uxth	r2, r3
 8002650:	2364      	movs	r3, #100	@ 0x64
 8002652:	9302      	str	r3, [sp, #8]
 8002654:	2301      	movs	r3, #1
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2301      	movs	r3, #1
 800265e:	f001 fd23 	bl	80040a8 <HAL_I2C_Mem_Write>
 8002662:	4603      	mov	r3, r0
            (uint16_t)reg_addr,
            I2C_MEMADD_SIZE_8BIT,
            &data,
            1,
            100);
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20004a20 	.word	0x20004a20

08002670 <spi_read>:
 *      Author: Wlsan
 */
#include "spi_utils.h"

HAL_StatusTypeDef spi_read(SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t addr,
              uint8_t* buffer, uint8_t len) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	460b      	mov	r3, r1
 8002680:	80fb      	strh	r3, [r7, #6]
 8002682:	4613      	mov	r3, r2
 8002684:	717b      	strb	r3, [r7, #5]
    addr |= 0x80;
 8002686:	797b      	ldrb	r3, [r7, #5]
 8002688:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800268c:	b2db      	uxtb	r3, r3
 800268e:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET); // pull CS pin low
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	2200      	movs	r2, #0
 8002694:	4619      	mov	r1, r3
 8002696:	68b8      	ldr	r0, [r7, #8]
 8002698:	f001 fb76 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(hspi, &addr, 1, 100); // send the address that you want data from
 800269c:	1d79      	adds	r1, r7, #5
 800269e:	2364      	movs	r3, #100	@ 0x64
 80026a0:	2201      	movs	r2, #1
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f005 fe31 	bl	800830a <HAL_SPI_Transmit>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]
    if (ret) {
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <spi_read+0x52>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET); // still want to make sure to write pin low on failure
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4619      	mov	r1, r3
 80026b8:	68b8      	ldr	r0, [r7, #8]
 80026ba:	f001 fb65 	bl	8003d88 <HAL_GPIO_WritePin>
        return ret;
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	e010      	b.n	80026e4 <spi_read+0x74>
    }
    ret = HAL_SPI_Receive(hspi, buffer, len, 100); // read data and store into buffer
 80026c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	2364      	movs	r3, #100	@ 0x64
 80026ca:	6a39      	ldr	r1, [r7, #32]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f005 ff60 	bl	8008592 <HAL_SPI_Receive>
 80026d2:	4603      	mov	r3, r0
 80026d4:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2201      	movs	r2, #1
 80026da:	4619      	mov	r1, r3
 80026dc:	68b8      	ldr	r0, [r7, #8]
 80026de:	f001 fb53 	bl	8003d88 <HAL_GPIO_WritePin>
    return ret;
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <spi_write>:

HAL_StatusTypeDef spi_write(SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t addr,
               uint8_t data) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	460b      	mov	r3, r1
 80026fc:	80fb      	strh	r3, [r7, #6]
 80026fe:	4613      	mov	r3, r2
 8002700:	717b      	strb	r3, [r7, #5]
    uint8_t tx_buffer[2] = {addr, data};
 8002702:	797b      	ldrb	r3, [r7, #5]
 8002704:	753b      	strb	r3, [r7, #20]
 8002706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800270a:	757b      	strb	r3, [r7, #21]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	2200      	movs	r2, #0
 8002710:	4619      	mov	r1, r3
 8002712:	68b8      	ldr	r0, [r7, #8]
 8002714:	f001 fb38 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(hspi, tx_buffer, 2, 100);
 8002718:	f107 0114 	add.w	r1, r7, #20
 800271c:	2364      	movs	r3, #100	@ 0x64
 800271e:	2202      	movs	r2, #2
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f005 fdf2 	bl	800830a <HAL_SPI_Transmit>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2201      	movs	r2, #1
 800272e:	4619      	mov	r1, r3
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f001 fb29 	bl	8003d88 <HAL_GPIO_WritePin>
    return ret;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <spi_burst_write>:

HAL_StatusTypeDef spi_burst_write(SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t addr,
                     uint8_t* data, uint8_t len) {
 8002740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002744:	b089      	sub	sp, #36	@ 0x24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	4611      	mov	r1, r2
 800274e:	461a      	mov	r2, r3
 8002750:	460b      	mov	r3, r1
 8002752:	80fb      	strh	r3, [r7, #6]
 8002754:	4613      	mov	r3, r2
 8002756:	717b      	strb	r3, [r7, #5]
 8002758:	466b      	mov	r3, sp
 800275a:	461e      	mov	r6, r3
    uint8_t tx_buffer[len + 1];
 800275c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002760:	1c59      	adds	r1, r3, #1
 8002762:	1e4b      	subs	r3, r1, #1
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	460a      	mov	r2, r1
 8002768:	2300      	movs	r3, #0
 800276a:	4690      	mov	r8, r2
 800276c:	4699      	mov	r9, r3
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800277a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800277e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002782:	460a      	mov	r2, r1
 8002784:	2300      	movs	r3, #0
 8002786:	4614      	mov	r4, r2
 8002788:	461d      	mov	r5, r3
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	00eb      	lsls	r3, r5, #3
 8002794:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002798:	00e2      	lsls	r2, r4, #3
 800279a:	460b      	mov	r3, r1
 800279c:	3307      	adds	r3, #7
 800279e:	08db      	lsrs	r3, r3, #3
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	ebad 0d03 	sub.w	sp, sp, r3
 80027a6:	466b      	mov	r3, sp
 80027a8:	3300      	adds	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
    tx_buffer[0] = addr;              // first byte is register address
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	797a      	ldrb	r2, [r7, #5]
 80027b0:	701a      	strb	r2, [r3, #0]
    memcpy(&tx_buffer[1], data, len); // copy data bytes into buffer
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	3301      	adds	r3, #1
 80027b6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80027ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80027bc:	4618      	mov	r0, r3
 80027be:	f00e fee2 	bl	8011586 <memcpy>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	68b8      	ldr	r0, [r7, #8]
 80027ca:	f001 fadd 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(hspi, tx_buffer, len + 1, 100);
 80027ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2364      	movs	r3, #100	@ 0x64
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f005 fd94 	bl	800830a <HAL_SPI_Transmit>
 80027e2:	4603      	mov	r3, r0
 80027e4:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2201      	movs	r2, #1
 80027ea:	4619      	mov	r1, r3
 80027ec:	68b8      	ldr	r0, [r7, #8]
 80027ee:	f001 facb 	bl	8003d88 <HAL_GPIO_WritePin>
    return ret;
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	46b5      	mov	sp, r6
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	@ 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b10      	ldr	r3, [pc, #64]	@ (800284c <HAL_MspInit+0x4c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	4a0f      	ldr	r2, [pc, #60]	@ (800284c <HAL_MspInit+0x4c>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002814:	6453      	str	r3, [r2, #68]	@ 0x44
 8002816:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_MspInit+0x4c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_MspInit+0x4c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	4a08      	ldr	r2, [pc, #32]	@ (800284c <HAL_MspInit+0x4c>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	@ 0x40
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_MspInit+0x4c>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	@ 0x30
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a32      	ldr	r2, [pc, #200]	@ (8002938 <HAL_I2C_MspInit+0xe8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12c      	bne.n	80028cc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	4b31      	ldr	r3, [pc, #196]	@ (800293c <HAL_I2C_MspInit+0xec>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	4a30      	ldr	r2, [pc, #192]	@ (800293c <HAL_I2C_MspInit+0xec>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	@ 0x30
 8002882:	4b2e      	ldr	r3, [pc, #184]	@ (800293c <HAL_I2C_MspInit+0xec>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800288e:	23c0      	movs	r3, #192	@ 0xc0
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002892:	2312      	movs	r3, #18
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002896:	2301      	movs	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800289e:	2304      	movs	r3, #4
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4825      	ldr	r0, [pc, #148]	@ (8002940 <HAL_I2C_MspInit+0xf0>)
 80028aa:	f001 f8b9 	bl	8003a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4b22      	ldr	r3, [pc, #136]	@ (800293c <HAL_I2C_MspInit+0xec>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	4a21      	ldr	r2, [pc, #132]	@ (800293c <HAL_I2C_MspInit+0xec>)
 80028b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028be:	4b1f      	ldr	r3, [pc, #124]	@ (800293c <HAL_I2C_MspInit+0xec>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028ca:	e031      	b.n	8002930 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002944 <HAL_I2C_MspInit+0xf4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d12c      	bne.n	8002930 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_I2C_MspInit+0xec>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a17      	ldr	r2, [pc, #92]	@ (800293c <HAL_I2C_MspInit+0xec>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_I2C_MspInit+0xec>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f8:	2312      	movs	r3, #18
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002904:	2304      	movs	r3, #4
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	480c      	ldr	r0, [pc, #48]	@ (8002940 <HAL_I2C_MspInit+0xf0>)
 8002910:	f001 f886 	bl	8003a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b08      	ldr	r3, [pc, #32]	@ (800293c <HAL_I2C_MspInit+0xec>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	4a07      	ldr	r2, [pc, #28]	@ (800293c <HAL_I2C_MspInit+0xec>)
 800291e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002922:	6413      	str	r3, [r2, #64]	@ 0x40
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_I2C_MspInit+0xec>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	bf00      	nop
 8002932:	3730      	adds	r7, #48	@ 0x30
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40005400 	.word	0x40005400
 800293c:	40023800 	.word	0x40023800
 8002940:	40020400 	.word	0x40020400
 8002944:	40005800 	.word	0x40005800

08002948 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	@ 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a70      	ldr	r2, [pc, #448]	@ (8002b28 <HAL_SD_MspInit+0x1e0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 80da 	bne.w	8002b20 <HAL_SD_MspInit+0x1d8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	4a6d      	ldr	r2, [pc, #436]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 8002976:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800297a:	6453      	str	r3, [r2, #68]	@ 0x44
 800297c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	4b67      	ldr	r3, [pc, #412]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	4a66      	ldr	r2, [pc, #408]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6313      	str	r3, [r2, #48]	@ 0x30
 8002998:	4b64      	ldr	r3, [pc, #400]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	4b60      	ldr	r3, [pc, #384]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	4a5f      	ldr	r2, [pc, #380]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b2c <HAL_SD_MspInit+0x1e4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80029c0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029d2:	230c      	movs	r3, #12
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4854      	ldr	r0, [pc, #336]	@ (8002b30 <HAL_SD_MspInit+0x1e8>)
 80029de:	f001 f81f 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029f4:	230c      	movs	r3, #12
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	484c      	ldr	r0, [pc, #304]	@ (8002b30 <HAL_SD_MspInit+0x1e8>)
 8002a00:	f001 f80e 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a04:	2304      	movs	r3, #4
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a14:	230c      	movs	r3, #12
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4845      	ldr	r0, [pc, #276]	@ (8002b34 <HAL_SD_MspInit+0x1ec>)
 8002a20:	f000 fffe 	bl	8003a20 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002a24:	4b44      	ldr	r3, [pc, #272]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a26:	4a45      	ldr	r2, [pc, #276]	@ (8002b3c <HAL_SD_MspInit+0x1f4>)
 8002a28:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002a2a:	4b43      	ldr	r3, [pc, #268]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a30:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a32:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a38:	4b3f      	ldr	r3, [pc, #252]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a44:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a46:	4b3c      	ldr	r3, [pc, #240]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a4c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a50:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a54:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002a56:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a58:	2220      	movs	r2, #32
 8002a5a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5c:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a62:	4b35      	ldr	r3, [pc, #212]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a64:	2204      	movs	r2, #4
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a68:	4b33      	ldr	r3, [pc, #204]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002a6e:	4b32      	ldr	r3, [pc, #200]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a76:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a78:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002a7e:	482e      	ldr	r0, [pc, #184]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a80:	f000 fc22 	bl	80032c8 <HAL_DMA_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002a8a:	f7ff fc35 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a29      	ldr	r2, [pc, #164]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a94:	4a28      	ldr	r2, [pc, #160]	@ (8002b38 <HAL_SD_MspInit+0x1f0>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002a9a:	4b29      	ldr	r3, [pc, #164]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002a9c:	4a29      	ldr	r2, [pc, #164]	@ (8002b44 <HAL_SD_MspInit+0x1fc>)
 8002a9e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002aa0:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002aa2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002aa6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aae:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aba:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002abe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ac2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aca:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ace:	2220      	movs	r2, #32
 8002ad0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ada:	2204      	movs	r2, #4
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ade:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002ae4:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002ae6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002aee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002af4:	4812      	ldr	r0, [pc, #72]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002af6:	f000 fbe7 	bl	80032c8 <HAL_DMA_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002b00:	f7ff fbfa 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0e      	ldr	r2, [pc, #56]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002b08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <HAL_SD_MspInit+0x1f8>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2100      	movs	r1, #0
 8002b14:	2031      	movs	r0, #49	@ 0x31
 8002b16:	f000 fba0 	bl	800325a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002b1a:	2031      	movs	r0, #49	@ 0x31
 8002b1c:	f000 fbb9 	bl	8003292 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002b20:	bf00      	nop
 8002b22:	3728      	adds	r7, #40	@ 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	200048ac 	.word	0x200048ac
 8002b3c:	40026458 	.word	0x40026458
 8002b40:	2000490c 	.word	0x2000490c
 8002b44:	400264a0 	.word	0x400264a0

08002b48 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	@ 0x30
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3b      	ldr	r2, [pc, #236]	@ (8002c54 <HAL_SPI_MspInit+0x10c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d13e      	bne.n	8002be8 <HAL_SPI_MspInit+0xa0>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	4a39      	ldr	r2, [pc, #228]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7a:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	4b33      	ldr	r3, [pc, #204]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a32      	ldr	r2, [pc, #200]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b30      	ldr	r3, [pc, #192]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002ba2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bac:	2302      	movs	r3, #2
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bb4:	2305      	movs	r3, #5
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4827      	ldr	r0, [pc, #156]	@ (8002c5c <HAL_SPI_MspInit+0x114>)
 8002bc0:	f000 ff2e 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bda:	f107 031c 	add.w	r3, r7, #28
 8002bde:	4619      	mov	r1, r3
 8002be0:	481e      	ldr	r0, [pc, #120]	@ (8002c5c <HAL_SPI_MspInit+0x114>)
 8002be2:	f000 ff1d 	bl	8003a20 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002be6:	e030      	b.n	8002c4a <HAL_SPI_MspInit+0x102>
  else if(hspi->Instance==SPI3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <HAL_SPI_MspInit+0x118>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d12b      	bne.n	8002c4a <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	4a17      	ldr	r2, [pc, #92]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_SPI_MspInit+0x110>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c2a:	2338      	movs	r3, #56	@ 0x38
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c36:	2303      	movs	r3, #3
 8002c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <HAL_SPI_MspInit+0x114>)
 8002c46:	f000 feeb 	bl	8003a20 <HAL_GPIO_Init>
}
 8002c4a:	bf00      	nop
 8002c4c:	3730      	adds	r7, #48	@ 0x30
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40003800 	.word	0x40003800
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40003c00 	.word	0x40003c00

08002c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <NMI_Handler+0x4>

08002c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cba:	f000 f9af 	bl	800301c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BMP581_Interrupt_Pin);
 8002cc6:	2008      	movs	r0, #8
 8002cc8:	f001 f892 	bl	8003df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_Interrupt_Pin);
 8002cd4:	2040      	movs	r0, #64	@ 0x40
 8002cd6:	f001 f88b 	bl	8003df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Mag_Interrupt_Pin);
 8002cda:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002cde:	f001 f887 	bl	8003df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002cec:	4802      	ldr	r0, [pc, #8]	@ (8002cf8 <SDIO_IRQHandler+0x10>)
 8002cee:	f004 f9c1 	bl	8007074 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20004828 	.word	0x20004828

08002cfc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002d00:	4802      	ldr	r0, [pc, #8]	@ (8002d0c <DMA2_Stream3_IRQHandler+0x10>)
 8002d02:	f000 fc09 	bl	8003518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200048ac 	.word	0x200048ac

08002d10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <OTG_FS_IRQHandler+0x10>)
 8002d16:	f002 f9eb 	bl	80050f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20005f58 	.word	0x20005f58

08002d24 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <DMA2_Stream6_IRQHandler+0x10>)
 8002d2a:	f000 fbf5 	bl	8003518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2000490c 	.word	0x2000490c

08002d38 <_getpid>:
char** environ = __env;

/* Functions */
void initialise_monitor_handles() {}

int _getpid(void) { return 1; }
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_kill>:

int _kill(int pid, int sig) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002d52:	f00e fbe3 	bl	801151c <__errno>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2216      	movs	r2, #22
 8002d5a:	601a      	str	r2, [r3, #0]
    return -1;
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_exit>:

void _exit(int status) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ffe7 	bl	8002d48 <_kill>
    while (1) {
 8002d7a:	bf00      	nop
 8002d7c:	e7fd      	b.n	8002d7a <_exit+0x12>

08002d7e <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char* ptr, int len) {
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e00a      	b.n	8002da6 <_read+0x28>
        *ptr++ = __io_getchar();
 8002d90:	f3af 8000 	nop.w
 8002d94:	4601      	mov	r1, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	60ba      	str	r2, [r7, #8]
 8002d9c:	b2ca      	uxtb	r2, r1
 8002d9e:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3301      	adds	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dbf0      	blt.n	8002d90 <_read+0x12>
    }

    return len;
 8002dae:	687b      	ldr	r3, [r7, #4]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_write>:

__attribute__((weak)) int _write(int file, char* ptr, int len) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e009      	b.n	8002dde <_write+0x26>
        __io_putchar(*ptr++);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	60ba      	str	r2, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	dbf1      	blt.n	8002dca <_write+0x12>
    }
    return len;
 8002de6:	687b      	ldr	r3, [r7, #4]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_close>:

int _close(int file) {
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_fstat>:

int _fstat(int file, struct stat* st) {
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e18:	605a      	str	r2, [r3, #4]
    return 0;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <_isatty>:

int _isatty(int file) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e60:	4a14      	ldr	r2, [pc, #80]	@ (8002eb4 <_sbrk+0x5c>)
 8002e62:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <_sbrk+0x60>)
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	617b      	str	r3, [r7, #20]
    const uint8_t* max_heap = (uint8_t*)stack_limit;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	613b      	str	r3, [r7, #16]
    uint8_t* prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <_sbrk+0x64>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002e74:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <_sbrk+0x64>)
 8002e76:	4a12      	ldr	r2, [pc, #72]	@ (8002ec0 <_sbrk+0x68>)
 8002e78:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <_sbrk+0x64>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d207      	bcs.n	8002e98 <_sbrk+0x40>
        errno = ENOMEM;
 8002e88:	f00e fb48 	bl	801151c <__errno>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	220c      	movs	r2, #12
 8002e90:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e009      	b.n	8002eac <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002e98:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <_sbrk+0x64>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8002e9e:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <_sbrk+0x64>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <_sbrk+0x64>)
 8002ea8:	6013      	str	r3, [r2, #0]

    return (void*)prev_heap_end;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20020000 	.word	0x20020000
 8002eb8:	00000400 	.word	0x00000400
 8002ebc:	20004a28 	.word	0x20004a28
 8002ec0:	200067a8 	.word	0x200067a8

08002ec4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <SystemInit+0x20>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ece:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <SystemInit+0x20>)
 8002ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <serialPrintStr>:
 *  Created on: Aug 21, 2025
 *      Author: Wlsan
 */
#include "usb_print_debug.h"

void serialPrintStr(const char* s) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0a2      	sub	sp, #136	@ 0x88
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%s\r\n", s);
 8002ef0:	f107 0008 	add.w	r0, r7, #8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <serialPrintStr+0x38>)
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	f00e fa21 	bl	8011340 <sniprintf>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd f9b4 	bl	8000270 <strlen>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f00d f8a0 	bl	8010058 <CDC_Transmit_FS>
}
 8002f18:	bf00      	nop
 8002f1a:	3788      	adds	r7, #136	@ 0x88
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	08013c20 	.word	0x08013c20

08002f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f28:	f7ff ffcc 	bl	8002ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f2c:	480c      	ldr	r0, [pc, #48]	@ (8002f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f2e:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f44:	4c0a      	ldr	r4, [pc, #40]	@ (8002f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002f52:	f00e fae9 	bl	8011528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f56:	f7fe fe9b 	bl	8001c90 <main>
  bx  lr    
 8002f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f64:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8002f68:	0801410c 	.word	0x0801410c
  ldr r2, =_sbss
 8002f6c:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002f70:	200067a8 	.word	0x200067a8

08002f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC_IRQHandler>
	...

08002f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <HAL_Init+0x40>)
 8002f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <HAL_Init+0x40>)
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f94:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a07      	ldr	r2, [pc, #28]	@ (8002fb8 <HAL_Init+0x40>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	f000 f94f 	bl	8003244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa6:	200f      	movs	r0, #15
 8002fa8:	f000 f808 	bl	8002fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fac:	f7ff fc28 	bl	8002800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00

08002fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_InitTick+0x54>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_InitTick+0x58>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f967 	bl	80032ae <HAL_SYSTICK_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00e      	b.n	8003008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d80a      	bhi.n	8003006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f000 f92f 	bl	800325a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ffc:	4a06      	ldr	r2, [pc, #24]	@ (8003018 <HAL_InitTick+0x5c>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000004 	.word	0x20000004
 8003014:	2000000c 	.word	0x2000000c
 8003018:	20000008 	.word	0x20000008

0800301c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_IncTick+0x20>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_IncTick+0x24>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4413      	add	r3, r2
 800302c:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <HAL_IncTick+0x24>)
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	2000000c 	.word	0x2000000c
 8003040:	20004a2c 	.word	0x20004a2c

08003044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return uwTick;
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_GetTick+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20004a2c 	.word	0x20004a2c

0800305c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff ffee 	bl	8003044 <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d005      	beq.n	8003082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003076:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_Delay+0x44>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003082:	bf00      	nop
 8003084:	f7ff ffde 	bl	8003044 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	429a      	cmp	r2, r3
 8003092:	d8f7      	bhi.n	8003084 <HAL_Delay+0x28>
  {
  }
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000000c 	.word	0x2000000c

080030a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b4:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d6:	4a04      	ldr	r2, [pc, #16]	@ (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f0:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <__NVIC_GetPriorityGrouping+0x18>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0307 	and.w	r3, r3, #7
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db0b      	blt.n	8003132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	4907      	ldr	r1, [pc, #28]	@ (8003140 <__NVIC_EnableIRQ+0x38>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2001      	movs	r0, #1
 800312a:	fa00 f202 	lsl.w	r2, r0, r2
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000e100 	.word	0xe000e100

08003144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db0a      	blt.n	800316e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	490c      	ldr	r1, [pc, #48]	@ (8003190 <__NVIC_SetPriority+0x4c>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	440b      	add	r3, r1
 8003168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800316c:	e00a      	b.n	8003184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4908      	ldr	r1, [pc, #32]	@ (8003194 <__NVIC_SetPriority+0x50>)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	3b04      	subs	r3, #4
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	440b      	add	r3, r1
 8003182:	761a      	strb	r2, [r3, #24]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000e100 	.word	0xe000e100
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	bf28      	it	cs
 80031b6:	2304      	movcs	r3, #4
 80031b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3304      	adds	r3, #4
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d902      	bls.n	80031c8 <NVIC_EncodePriority+0x30>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3b03      	subs	r3, #3
 80031c6:	e000      	b.n	80031ca <NVIC_EncodePriority+0x32>
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	401a      	ands	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e0:	f04f 31ff 	mov.w	r1, #4294967295
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	4313      	orrs	r3, r2
         );
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	@ 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003210:	d301      	bcc.n	8003216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003212:	2301      	movs	r3, #1
 8003214:	e00f      	b.n	8003236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003216:	4a0a      	ldr	r2, [pc, #40]	@ (8003240 <SysTick_Config+0x40>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321e:	210f      	movs	r1, #15
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f7ff ff8e 	bl	8003144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003228:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <SysTick_Config+0x40>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322e:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <SysTick_Config+0x40>)
 8003230:	2207      	movs	r2, #7
 8003232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	e000e010 	.word	0xe000e010

08003244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ff29 	bl	80030a4 <__NVIC_SetPriorityGrouping>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	4603      	mov	r3, r0
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800326c:	f7ff ff3e 	bl	80030ec <__NVIC_GetPriorityGrouping>
 8003270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	6978      	ldr	r0, [r7, #20]
 8003278:	f7ff ff8e 	bl	8003198 <NVIC_EncodePriority>
 800327c:	4602      	mov	r2, r0
 800327e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff5d 	bl	8003144 <__NVIC_SetPriority>
}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff31 	bl	8003108 <__NVIC_EnableIRQ>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffa2 	bl	8003200 <SysTick_Config>
 80032bc:	4603      	mov	r3, r0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff feb6 	bl	8003044 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e099      	b.n	8003418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003304:	e00f      	b.n	8003326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003306:	f7ff fe9d 	bl	8003044 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b05      	cmp	r3, #5
 8003312:	d908      	bls.n	8003326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e078      	b.n	8003418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e8      	bne.n	8003306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <HAL_DMA_Init+0x158>)
 8003340:	4013      	ands	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	4313      	orrs	r3, r2
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d117      	bne.n	80033ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 faab 	bl	8003928 <DMA_CheckFifoParam>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2240      	movs	r2, #64	@ 0x40
 80033dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033e6:	2301      	movs	r3, #1
 80033e8:	e016      	b.n	8003418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa62 	bl	80038bc <DMA_CalcBaseAndBitshift>
 80033f8:	4603      	mov	r3, r0
 80033fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003400:	223f      	movs	r2, #63	@ 0x3f
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	f010803f 	.word	0xf010803f

08003424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_DMA_Start_IT+0x26>
 8003446:	2302      	movs	r3, #2
 8003448:	e040      	b.n	80034cc <HAL_DMA_Start_IT+0xa8>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d12f      	bne.n	80034be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f9f4 	bl	8003860 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	223f      	movs	r2, #63	@ 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0216 	orr.w	r2, r2, #22
 8003492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e005      	b.n	80034ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d004      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00c      	b.n	800350c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2205      	movs	r2, #5
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003524:	4b8e      	ldr	r3, [pc, #568]	@ (8003760 <HAL_DMA_IRQHandler+0x248>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a8e      	ldr	r2, [pc, #568]	@ (8003764 <HAL_DMA_IRQHandler+0x24c>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0a9b      	lsrs	r3, r3, #10
 8003530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003542:	2208      	movs	r2, #8
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01a      	beq.n	8003584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003570:	2208      	movs	r2, #8
 8003572:	409a      	lsls	r2, r3
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d012      	beq.n	80035ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	2201      	movs	r2, #1
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	f043 0202 	orr.w	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035be:	2204      	movs	r2, #4
 80035c0:	409a      	lsls	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	2204      	movs	r2, #4
 80035de:	409a      	lsls	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e8:	f043 0204 	orr.w	r2, r3, #4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	2210      	movs	r2, #16
 80035f6:	409a      	lsls	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d043      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d03c      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003612:	2210      	movs	r2, #16
 8003614:	409a      	lsls	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d018      	beq.n	800365a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d024      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
 8003646:	e01f      	b.n	8003688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01b      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
 8003658:	e016      	b.n	8003688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0208 	bic.w	r2, r2, #8
 8003676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	2220      	movs	r2, #32
 800368e:	409a      	lsls	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 808f 	beq.w	80037b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8087 	beq.w	80037b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	2220      	movs	r2, #32
 80036b0:	409a      	lsls	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d136      	bne.n	8003730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0216 	bic.w	r2, r2, #22
 80036d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x1da>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	223f      	movs	r2, #63	@ 0x3f
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003722:	2b00      	cmp	r3, #0
 8003724:	d07e      	beq.n	8003824 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
        }
        return;
 800372e:	e079      	b.n	8003824 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01d      	beq.n	800377a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10d      	bne.n	8003768 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	2b00      	cmp	r3, #0
 8003752:	d031      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
 800375c:	e02c      	b.n	80037b8 <HAL_DMA_IRQHandler+0x2a0>
 800375e:	bf00      	nop
 8003760:	20000004 	.word	0x20000004
 8003764:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d023      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
 8003778:	e01e      	b.n	80037b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10f      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0210 	bic.w	r2, r2, #16
 8003796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d032      	beq.n	8003826 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d022      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2205      	movs	r2, #5
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d307      	bcc.n	8003800 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f2      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x2cc>
 80037fe:	e000      	b.n	8003802 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003800:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
 8003822:	e000      	b.n	8003826 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003824:	bf00      	nop
    }
  }
}
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800383a:	b2db      	uxtb	r3, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800387c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	d108      	bne.n	80038a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800389e:	e007      	b.n	80038b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	3b10      	subs	r3, #16
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <DMA_CalcBaseAndBitshift+0x64>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038d6:	4a13      	ldr	r2, [pc, #76]	@ (8003924 <DMA_CalcBaseAndBitshift+0x68>)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d909      	bls.n	80038fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	1d1a      	adds	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80038fc:	e007      	b.n	800390e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	aaaaaaab 	.word	0xaaaaaaab
 8003924:	08013ce8 	.word	0x08013ce8

08003928 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11f      	bne.n	8003982 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d856      	bhi.n	80039f6 <DMA_CheckFifoParam+0xce>
 8003948:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <DMA_CheckFifoParam+0x28>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	08003973 	.word	0x08003973
 8003958:	08003961 	.word	0x08003961
 800395c:	080039f7 	.word	0x080039f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d046      	beq.n	80039fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e043      	b.n	80039fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800397a:	d140      	bne.n	80039fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003980:	e03d      	b.n	80039fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800398a:	d121      	bne.n	80039d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d837      	bhi.n	8003a02 <DMA_CheckFifoParam+0xda>
 8003992:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <DMA_CheckFifoParam+0x70>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039af 	.word	0x080039af
 80039a0:	080039a9 	.word	0x080039a9
 80039a4:	080039c1 	.word	0x080039c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e030      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d025      	beq.n	8003a06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e022      	b.n	8003a06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039c8:	d11f      	bne.n	8003a0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ce:	e01c      	b.n	8003a0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d903      	bls.n	80039de <DMA_CheckFifoParam+0xb6>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d003      	beq.n	80039e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039dc:	e018      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      break;
 80039e2:	e015      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e00b      	b.n	8003a0e <DMA_CheckFifoParam+0xe6>
      break;
 80039f6:	bf00      	nop
 80039f8:	e00a      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e008      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
 8003a00:	e006      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a02:	bf00      	nop
 8003a04:	e004      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	@ 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e16b      	b.n	8003d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	f040 815a 	bne.w	8003d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d005      	beq.n	8003a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d130      	bne.n	8003ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 0201 	and.w	r2, r3, #1
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d017      	beq.n	8003b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d123      	bne.n	8003b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3208      	adds	r2, #8
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80b4 	beq.w	8003d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b60      	ldr	r3, [pc, #384]	@ (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	4a5f      	ldr	r2, [pc, #380]	@ (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8003d30 <HAL_GPIO_Init+0x310>)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a52      	ldr	r2, [pc, #328]	@ (8003d34 <HAL_GPIO_Init+0x314>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <HAL_GPIO_Init+0x226>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a51      	ldr	r2, [pc, #324]	@ (8003d38 <HAL_GPIO_Init+0x318>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d025      	beq.n	8003c42 <HAL_GPIO_Init+0x222>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a50      	ldr	r2, [pc, #320]	@ (8003d3c <HAL_GPIO_Init+0x31c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01f      	beq.n	8003c3e <HAL_GPIO_Init+0x21e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4f      	ldr	r2, [pc, #316]	@ (8003d40 <HAL_GPIO_Init+0x320>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <HAL_GPIO_Init+0x21a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4e      	ldr	r2, [pc, #312]	@ (8003d44 <HAL_GPIO_Init+0x324>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_GPIO_Init+0x216>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4d      	ldr	r2, [pc, #308]	@ (8003d48 <HAL_GPIO_Init+0x328>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <HAL_GPIO_Init+0x212>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4c      	ldr	r2, [pc, #304]	@ (8003d4c <HAL_GPIO_Init+0x32c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x20e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4b      	ldr	r2, [pc, #300]	@ (8003d50 <HAL_GPIO_Init+0x330>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_GPIO_Init+0x20a>
 8003c26:	2307      	movs	r3, #7
 8003c28:	e00e      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e00c      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e00a      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e008      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e006      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c46:	2300      	movs	r3, #0
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c58:	4935      	ldr	r1, [pc, #212]	@ (8003d30 <HAL_GPIO_Init+0x310>)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c66:	4b3b      	ldr	r3, [pc, #236]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8a:	4a32      	ldr	r2, [pc, #200]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c90:	4b30      	ldr	r3, [pc, #192]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb4:	4a27      	ldr	r2, [pc, #156]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cba:	4b26      	ldr	r3, [pc, #152]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cde:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d08:	4a12      	ldr	r2, [pc, #72]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	f67f ae90 	bls.w	8003a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3724      	adds	r7, #36	@ 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40020000 	.word	0x40020000
 8003d38:	40020400 	.word	0x40020400
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020c00 	.word	0x40020c00
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40021400 	.word	0x40021400
 8003d4c:	40021800 	.word	0x40021800
 8003d50:	40021c00 	.word	0x40021c00
 8003d54:	40013c00 	.word	0x40013c00

08003d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	887b      	ldrh	r3, [r7, #2]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
 8003d74:	e001      	b.n	8003d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	807b      	strh	r3, [r7, #2]
 8003d94:	4613      	mov	r3, r2
 8003d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d98:	787b      	ldrb	r3, [r7, #1]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003da4:	e003      	b.n	8003dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003da6:	887b      	ldrh	r3, [r7, #2]
 8003da8:	041a      	lsls	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	619a      	str	r2, [r3, #24]
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dcc:	887a      	ldrh	r2, [r7, #2]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	041a      	lsls	r2, r3, #16
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43d9      	mvns	r1, r3
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	400b      	ands	r3, r1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	619a      	str	r2, [r3, #24]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dfa:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e06:	4a05      	ldr	r2, [pc, #20]	@ (8003e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e08:	88fb      	ldrh	r3, [r7, #6]
 8003e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fa4e 	bl	80022b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40013c00 	.word	0x40013c00

08003e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e12b      	b.n	800408a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fe fd02 	bl	8002850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	@ 0x24
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e84:	f002 fe72 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4a81      	ldr	r2, [pc, #516]	@ (8004094 <HAL_I2C_Init+0x274>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d807      	bhi.n	8003ea4 <HAL_I2C_Init+0x84>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a80      	ldr	r2, [pc, #512]	@ (8004098 <HAL_I2C_Init+0x278>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bf94      	ite	ls
 8003e9c:	2301      	movls	r3, #1
 8003e9e:	2300      	movhi	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e006      	b.n	8003eb2 <HAL_I2C_Init+0x92>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a7d      	ldr	r2, [pc, #500]	@ (800409c <HAL_I2C_Init+0x27c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bf94      	ite	ls
 8003eac:	2301      	movls	r3, #1
 8003eae:	2300      	movhi	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e0e7      	b.n	800408a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a78      	ldr	r2, [pc, #480]	@ (80040a0 <HAL_I2C_Init+0x280>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	0c9b      	lsrs	r3, r3, #18
 8003ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a6a      	ldr	r2, [pc, #424]	@ (8004094 <HAL_I2C_Init+0x274>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d802      	bhi.n	8003ef4 <HAL_I2C_Init+0xd4>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	e009      	b.n	8003f08 <HAL_I2C_Init+0xe8>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	4a69      	ldr	r2, [pc, #420]	@ (80040a4 <HAL_I2C_Init+0x284>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	3301      	adds	r3, #1
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	495c      	ldr	r1, [pc, #368]	@ (8004094 <HAL_I2C_Init+0x274>)
 8003f24:	428b      	cmp	r3, r1
 8003f26:	d819      	bhi.n	8003f5c <HAL_I2C_Init+0x13c>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1e59      	subs	r1, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f36:	1c59      	adds	r1, r3, #1
 8003f38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_I2C_Init+0x138>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1e59      	subs	r1, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f56:	e051      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	e04f      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d111      	bne.n	8003f88 <HAL_I2C_Init+0x168>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1e58      	subs	r0, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	440b      	add	r3, r1
 8003f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e012      	b.n	8003fae <HAL_I2C_Init+0x18e>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	0099      	lsls	r1, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Init+0x196>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10e      	bne.n	8003fdc <HAL_I2C_Init+0x1bc>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e58      	subs	r0, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	440b      	add	r3, r1
 8003fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fda:	e00f      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e58      	subs	r0, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	0099      	lsls	r1, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	6809      	ldr	r1, [r1, #0]
 8004000:	4313      	orrs	r3, r2
 8004002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800402a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6911      	ldr	r1, [r2, #16]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	4311      	orrs	r1, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	000186a0 	.word	0x000186a0
 8004098:	001e847f 	.word	0x001e847f
 800409c:	003d08ff 	.word	0x003d08ff
 80040a0:	431bde83 	.word	0x431bde83
 80040a4:	10624dd3 	.word	0x10624dd3

080040a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	460b      	mov	r3, r1
 80040bc:	813b      	strh	r3, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040c2:	f7fe ffbf 	bl	8003044 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	f040 80d9 	bne.w	8004288 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2319      	movs	r3, #25
 80040dc:	2201      	movs	r2, #1
 80040de:	496d      	ldr	r1, [pc, #436]	@ (8004294 <HAL_I2C_Mem_Write+0x1ec>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fc8b 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0cc      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_I2C_Mem_Write+0x56>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0c5      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d007      	beq.n	8004124 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	@ 0x21
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2240      	movs	r2, #64	@ 0x40
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004154:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a4d      	ldr	r2, [pc, #308]	@ (8004298 <HAL_I2C_Mem_Write+0x1f0>)
 8004164:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004166:	88f8      	ldrh	r0, [r7, #6]
 8004168:	893a      	ldrh	r2, [r7, #8]
 800416a:	8979      	ldrh	r1, [r7, #10]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	4603      	mov	r3, r0
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fac2 	bl	8004700 <I2C_RequestMemoryWrite>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d052      	beq.n	8004228 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e081      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fd50 	bl	8004c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06b      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d11b      	bne.n	8004228 <HAL_I2C_Mem_Write+0x180>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1aa      	bne.n	8004186 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fd43 	bl	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004256:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e016      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	00100002 	.word	0x00100002
 8004298:	ffff0000 	.word	0xffff0000

0800429c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	@ 0x30
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	461a      	mov	r2, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	817b      	strh	r3, [r7, #10]
 80042ae:	460b      	mov	r3, r1
 80042b0:	813b      	strh	r3, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042b6:	f7fe fec5 	bl	8003044 <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	f040 8214 	bne.w	80046f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2319      	movs	r3, #25
 80042d0:	2201      	movs	r2, #1
 80042d2:	497b      	ldr	r1, [pc, #492]	@ (80044c0 <HAL_I2C_Mem_Read+0x224>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fb91 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
 80042e2:	e207      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x56>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e200      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d007      	beq.n	8004318 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2222      	movs	r2, #34	@ 0x22
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2240      	movs	r2, #64	@ 0x40
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004342:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a5b      	ldr	r2, [pc, #364]	@ (80044c4 <HAL_I2C_Mem_Read+0x228>)
 8004358:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800435a:	88f8      	ldrh	r0, [r7, #6]
 800435c:	893a      	ldrh	r2, [r7, #8]
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	4603      	mov	r3, r0
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa5e 	bl	800482c <I2C_RequestMemoryRead>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e1bc      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d113      	bne.n	80043aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e190      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d11b      	bne.n	80043ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e170      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d11b      	bne.n	800442a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004400:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	e150      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004440:	e144      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004446:	2b03      	cmp	r3, #3
 8004448:	f200 80f1 	bhi.w	800462e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004450:	2b01      	cmp	r3, #1
 8004452:	d123      	bne.n	800449c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004456:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fc79 	bl	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e145      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800449a:	e117      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d14e      	bne.n	8004542 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	2200      	movs	r2, #0
 80044ac:	4906      	ldr	r1, [pc, #24]	@ (80044c8 <HAL_I2C_Mem_Read+0x22c>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 faa4 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e11a      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
 80044be:	bf00      	nop
 80044c0:	00100002 	.word	0x00100002
 80044c4:	ffff0000 	.word	0xffff0000
 80044c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004540:	e0c4      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	2200      	movs	r2, #0
 800454a:	496c      	ldr	r1, [pc, #432]	@ (80046fc <HAL_I2C_Mem_Read+0x460>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fa55 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0cb      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a4:	2200      	movs	r2, #0
 80045a6:	4955      	ldr	r1, [pc, #340]	@ (80046fc <HAL_I2C_Mem_Read+0x460>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fa27 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e09d      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800462c:	e04e      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004630:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fb8c 	bl	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e058      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d124      	bne.n	80046cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	2b03      	cmp	r3, #3
 8004688:	d107      	bne.n	800469a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004698:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f aeb6 	bne.w	8004442 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	@ 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00010004 	.word	0x00010004

08004700 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	461a      	mov	r2, r3
 800470e:	4603      	mov	r3, r0
 8004710:	817b      	strh	r3, [r7, #10]
 8004712:	460b      	mov	r3, r1
 8004714:	813b      	strh	r3, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004728:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2200      	movs	r2, #0
 8004732:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f960 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00d      	beq.n	800475e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004750:	d103      	bne.n	800475a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004758:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e05f      	b.n	800481e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800476c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	492d      	ldr	r1, [pc, #180]	@ (8004828 <I2C_RequestMemoryWrite+0x128>)
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f9bb 	bl	8004af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e04c      	b.n	800481e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479c:	6a39      	ldr	r1, [r7, #32]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fa46 	bl	8004c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d107      	bne.n	80047c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e02b      	b.n	800481e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d105      	bne.n	80047d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047cc:	893b      	ldrh	r3, [r7, #8]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	611a      	str	r2, [r3, #16]
 80047d6:	e021      	b.n	800481c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047d8:	893b      	ldrh	r3, [r7, #8]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	b29b      	uxth	r3, r3
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e8:	6a39      	ldr	r1, [r7, #32]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa20 	bl	8004c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d107      	bne.n	800480e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e005      	b.n	800481e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004812:	893b      	ldrh	r3, [r7, #8]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	00010002 	.word	0x00010002

0800482c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	4608      	mov	r0, r1
 8004836:	4611      	mov	r1, r2
 8004838:	461a      	mov	r2, r3
 800483a:	4603      	mov	r3, r0
 800483c:	817b      	strh	r3, [r7, #10]
 800483e:	460b      	mov	r3, r1
 8004840:	813b      	strh	r3, [r7, #8]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004854:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004864:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	2200      	movs	r2, #0
 800486e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f8c2 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800488c:	d103      	bne.n	8004896 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0aa      	b.n	80049f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800489a:	897b      	ldrh	r3, [r7, #10]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	4952      	ldr	r1, [pc, #328]	@ (80049f8 <I2C_RequestMemoryRead+0x1cc>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f91d 	bl	8004af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e097      	b.n	80049f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d8:	6a39      	ldr	r1, [r7, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f9a8 	bl	8004c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d107      	bne.n	80048fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e076      	b.n	80049f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	611a      	str	r2, [r3, #16]
 8004912:	e021      	b.n	8004958 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004914:	893b      	ldrh	r3, [r7, #8]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	b29b      	uxth	r3, r3
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004924:	6a39      	ldr	r1, [r7, #32]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f982 	bl	8004c30 <I2C_WaitOnTXEFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	2b04      	cmp	r3, #4
 8004938:	d107      	bne.n	800494a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e050      	b.n	80049f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800494e:	893b      	ldrh	r3, [r7, #8]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495a:	6a39      	ldr	r1, [r7, #32]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f967 	bl	8004c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00d      	beq.n	8004984 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	2b04      	cmp	r3, #4
 800496e:	d107      	bne.n	8004980 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e035      	b.n	80049f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004992:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	2200      	movs	r2, #0
 800499c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f82b 	bl	80049fc <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ba:	d103      	bne.n	80049c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e013      	b.n	80049f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049c8:	897b      	ldrh	r3, [r7, #10]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	6a3a      	ldr	r2, [r7, #32]
 80049dc:	4906      	ldr	r1, [pc, #24]	@ (80049f8 <I2C_RequestMemoryRead+0x1cc>)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f886 	bl	8004af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	00010002 	.word	0x00010002

080049fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a0c:	e048      	b.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d044      	beq.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fe fb15 	bl	8003044 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d139      	bne.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	0c1b      	lsrs	r3, r3, #16
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10d      	bne.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	43da      	mvns	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	e00c      	b.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d116      	bne.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e023      	b.n	8004ae8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	0c1b      	lsrs	r3, r3, #16
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d10d      	bne.n	8004ac6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	43da      	mvns	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	e00c      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	43da      	mvns	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d093      	beq.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004afe:	e071      	b.n	8004be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b0e:	d123      	bne.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	f043 0204 	orr.w	r2, r3, #4
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e067      	b.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d041      	beq.n	8004be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b60:	f7fe fa70 	bl	8003044 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d136      	bne.n	8004be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10c      	bne.n	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	43da      	mvns	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf14      	ite	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	2300      	moveq	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e00b      	b.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	43da      	mvns	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e021      	b.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d10c      	bne.n	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	43da      	mvns	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e00b      	b.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4013      	ands	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f47f af6d 	bne.w	8004b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c3c:	e034      	b.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f8e3 	bl	8004e0a <I2C_IsAcknowledgeFailed>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e034      	b.n	8004cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d028      	beq.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fe f9f5 	bl	8003044 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d11d      	bne.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c76:	2b80      	cmp	r3, #128	@ 0x80
 8004c78:	d016      	beq.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e007      	b.n	8004cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb2:	2b80      	cmp	r3, #128	@ 0x80
 8004cb4:	d1c3      	bne.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ccc:	e034      	b.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f89b 	bl	8004e0a <I2C_IsAcknowledgeFailed>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e034      	b.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d028      	beq.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fe f9ad 	bl	8003044 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d11d      	bne.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d016      	beq.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e007      	b.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d1c3      	bne.n	8004cce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d5c:	e049      	b.n	8004df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d119      	bne.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0210 	mvn.w	r2, #16
 8004d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e030      	b.n	8004e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da0:	f7fe f950 	bl	8003044 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d11d      	bne.n	8004df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d016      	beq.n	8004df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e007      	b.n	8004e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfc:	2b40      	cmp	r3, #64	@ 0x40
 8004dfe:	d1ae      	bne.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e20:	d11b      	bne.n	8004e5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	f043 0204 	orr.w	r2, r3, #4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e101      	b.n	800507e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f00b fa27 	bl	80102e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ea8:	d102      	bne.n	8004eb0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f004 fdfc 	bl	8009ab2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7c1a      	ldrb	r2, [r3, #16]
 8004ec2:	f88d 2000 	strb.w	r2, [sp]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eca:	f004 fcdb 	bl	8009884 <USB_CoreInit>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0ce      	b.n	800507e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f004 fdf4 	bl	8009ad4 <USB_SetCurrentMode>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0bf      	b.n	800507e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
 8004f02:	e04a      	b.n	8004f9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f04:	7bfa      	ldrb	r2, [r7, #15]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	3315      	adds	r3, #21
 8004f14:	2201      	movs	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	3314      	adds	r3, #20
 8004f28:	7bfa      	ldrb	r2, [r7, #15]
 8004f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f2c:	7bfa      	ldrb	r2, [r7, #15]
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	b298      	uxth	r0, r3
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	332e      	adds	r3, #46	@ 0x2e
 8004f40:	4602      	mov	r2, r0
 8004f42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	3318      	adds	r3, #24
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	331c      	adds	r3, #28
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	3320      	adds	r3, #32
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3324      	adds	r3, #36	@ 0x24
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	3301      	adds	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	791b      	ldrb	r3, [r3, #4]
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3af      	bcc.n	8004f04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e044      	b.n	8005034 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	3301      	adds	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	791b      	ldrb	r3, [r3, #4]
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	429a      	cmp	r2, r3
 800503c:	d3b5      	bcc.n	8004faa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	7c1a      	ldrb	r2, [r3, #16]
 8005046:	f88d 2000 	strb.w	r2, [sp]
 800504a:	3304      	adds	r3, #4
 800504c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800504e:	f004 fd8d 	bl	8009b6c <USB_DevInit>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e00c      	b.n	800507e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f005 fdd7 	bl	800ac2a <USB_DevDisconnect>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_PCD_Start+0x1c>
 800509e:	2302      	movs	r3, #2
 80050a0:	e022      	b.n	80050e8 <HAL_PCD_Start+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f004 fcde 	bl	8009a90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f005 fd85 	bl	800abe8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b08d      	sub	sp, #52	@ 0x34
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f005 fe43 	bl	800ad92 <USB_GetMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 848c 	bne.w	8005a2c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f005 fda7 	bl	800ac6c <USB_ReadInterrupts>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8482 	beq.w	8005a2a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f005 fd94 	bl	800ac6c <USB_ReadInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d107      	bne.n	800515e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f002 0202 	and.w	r2, r2, #2
 800515c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f005 fd82 	bl	800ac6c <USB_ReadInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b10      	cmp	r3, #16
 8005170:	d161      	bne.n	8005236 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0210 	bic.w	r2, r2, #16
 8005180:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f003 020f 	and.w	r2, r3, #15
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	3304      	adds	r3, #4
 80051a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80051a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ac:	d124      	bne.n	80051f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d035      	beq.n	8005226 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80051c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6a38      	ldr	r0, [r7, #32]
 80051ce:	f005 fbb9 	bl	800a944 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051de:	441a      	add	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051f0:	441a      	add	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	615a      	str	r2, [r3, #20]
 80051f6:	e016      	b.n	8005226 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80051fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005202:	d110      	bne.n	8005226 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800520a:	2208      	movs	r2, #8
 800520c:	4619      	mov	r1, r3
 800520e:	6a38      	ldr	r0, [r7, #32]
 8005210:	f005 fb98 	bl	800a944 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005220:	441a      	add	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0210 	orr.w	r2, r2, #16
 8005234:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f005 fd16 	bl	800ac6c <USB_ReadInterrupts>
 8005240:	4603      	mov	r3, r0
 8005242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005246:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800524a:	f040 80a7 	bne.w	800539c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f005 fd1b 	bl	800ac92 <USB_ReadDevAllOutEpInterrupt>
 800525c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800525e:	e099      	b.n	8005394 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 808e 	beq.w	8005388 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f005 fd3f 	bl	800acfa <USB_ReadDevOutEPInterrupt>
 800527c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005294:	461a      	mov	r2, r3
 8005296:	2301      	movs	r3, #1
 8005298:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800529a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fea3 	bl	8005fe8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00c      	beq.n	80052c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	2308      	movs	r3, #8
 80052bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80052be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 ff79 	bl	80061b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052dc:	461a      	mov	r2, r3
 80052de:	2310      	movs	r3, #16
 80052e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d030      	beq.n	800534e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f4:	2b80      	cmp	r3, #128	@ 0x80
 80052f6:	d109      	bne.n	800530c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800530a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800530c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	3304      	adds	r3, #4
 8005320:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	78db      	ldrb	r3, [r3, #3]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d108      	bne.n	800533c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	b2db      	uxtb	r3, r3
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f00b f8dc 	bl	80104f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005348:	461a      	mov	r2, r3
 800534a:	2302      	movs	r3, #2
 800534c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005364:	461a      	mov	r2, r3
 8005366:	2320      	movs	r3, #32
 8005368:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	461a      	mov	r2, r3
 8005382:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005386:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	3301      	adds	r3, #1
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	f47f af62 	bne.w	8005260 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f005 fc63 	bl	800ac6c <USB_ReadInterrupts>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053b0:	f040 80db 	bne.w	800556a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f005 fc84 	bl	800acc6 <USB_ReadDevAllInEpInterrupt>
 80053be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80053c4:	e0cd      	b.n	8005562 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80c2 	beq.w	8005556 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f005 fcaa 	bl	800ad36 <USB_ReadDevInEPInterrupt>
 80053e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d057      	beq.n	800549e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	2201      	movs	r2, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	43db      	mvns	r3, r3
 8005408:	69f9      	ldr	r1, [r7, #28]
 800540a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800540e:	4013      	ands	r3, r2
 8005410:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800541e:	461a      	mov	r2, r3
 8005420:	2301      	movs	r3, #1
 8005422:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	799b      	ldrb	r3, [r3, #6]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d132      	bne.n	8005492 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005430:	4613      	mov	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	3320      	adds	r3, #32
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	4613      	mov	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4403      	add	r3, r0
 800544c:	331c      	adds	r3, #28
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4419      	add	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4403      	add	r3, r0
 8005460:	3320      	adds	r3, #32
 8005462:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d113      	bne.n	8005492 <HAL_PCD_IRQHandler+0x3a2>
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3324      	adds	r3, #36	@ 0x24
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800548a:	461a      	mov	r2, r3
 800548c:	2101      	movs	r1, #1
 800548e:	f005 fcb1 	bl	800adf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f00a ffa6 	bl	80103ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b4:	461a      	mov	r2, r3
 80054b6:	2308      	movs	r3, #8
 80054b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d0:	461a      	mov	r2, r3
 80054d2:	2310      	movs	r3, #16
 80054d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ec:	461a      	mov	r2, r3
 80054ee:	2340      	movs	r3, #64	@ 0x40
 80054f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d023      	beq.n	8005544 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80054fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054fe:	6a38      	ldr	r0, [r7, #32]
 8005500:	f004 fc98 	bl	8009e34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	3310      	adds	r3, #16
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	3304      	adds	r3, #4
 8005516:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	78db      	ldrb	r3, [r3, #3]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d108      	bne.n	8005532 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2200      	movs	r2, #0
 8005524:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	b2db      	uxtb	r3, r3
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f00a fff3 	bl	8010518 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553e:	461a      	mov	r2, r3
 8005540:	2302      	movs	r3, #2
 8005542:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800554e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fcbd 	bl	8005ed0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	3301      	adds	r3, #1
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	2b00      	cmp	r3, #0
 8005566:	f47f af2e 	bne.w	80053c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f005 fb7c 	bl	800ac6c <USB_ReadInterrupts>
 8005574:	4603      	mov	r3, r0
 8005576:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800557a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800557e:	d122      	bne.n	80055c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800559a:	2b01      	cmp	r3, #1
 800559c:	d108      	bne.n	80055b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fea3 	bl	80062f4 <HAL_PCDEx_LPM_Callback>
 80055ae:	e002      	b.n	80055b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f00a ff91 	bl	80104d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80055c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f005 fb4e 	bl	800ac6c <USB_ReadInterrupts>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055da:	d112      	bne.n	8005602 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d102      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f00a ff4d 	bl	801048c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005600:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f005 fb30 	bl	800ac6c <USB_ReadInterrupts>
 800560c:	4603      	mov	r3, r0
 800560e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005616:	f040 80b7 	bne.w	8005788 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2110      	movs	r1, #16
 8005634:	4618      	mov	r0, r3
 8005636:	f004 fbfd 	bl	8009e34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800563e:	e046      	b.n	80056ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564c:	461a      	mov	r2, r3
 800564e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005652:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800566e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005672:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005680:	461a      	mov	r2, r3
 8005682:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005686:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ca:	3301      	adds	r3, #1
 80056cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	791b      	ldrb	r3, [r3, #4]
 80056d2:	461a      	mov	r2, r3
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d3b2      	bcc.n	8005640 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80056ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	7bdb      	ldrb	r3, [r3, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005706:	f043 030b 	orr.w	r3, r3, #11
 800570a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800571c:	f043 030b 	orr.w	r3, r3, #11
 8005720:	6453      	str	r3, [r2, #68]	@ 0x44
 8005722:	e015      	b.n	8005750 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005732:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005736:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800573a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574a:	f043 030b 	orr.w	r3, r3, #11
 800574e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800575e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005762:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005772:	461a      	mov	r2, r3
 8005774:	f005 fb3e 	bl	800adf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4618      	mov	r0, r3
 800578e:	f005 fa6d 	bl	800ac6c <USB_ReadInterrupts>
 8005792:	4603      	mov	r3, r0
 8005794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800579c:	d123      	bne.n	80057e6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f005 fb03 	bl	800adae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f004 fbba 	bl	8009f26 <USB_GetDevSpeed>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681c      	ldr	r4, [r3, #0]
 80057be:	f001 f9c9 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 80057c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057c8:	461a      	mov	r2, r3
 80057ca:	4620      	mov	r0, r4
 80057cc:	f004 f8be 	bl	800994c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f00a fe32 	bl	801043a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80057e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f005 fa3e 	bl	800ac6c <USB_ReadInterrupts>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d10a      	bne.n	8005810 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f00a fe0f 	bl	801041e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f002 0208 	and.w	r2, r2, #8
 800580e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f005 fa29 	bl	800ac6c <USB_ReadInterrupts>
 800581a:	4603      	mov	r3, r0
 800581c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005820:	2b80      	cmp	r3, #128	@ 0x80
 8005822:	d123      	bne.n	800586c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005830:	2301      	movs	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	@ 0x24
 8005834:	e014      	b.n	8005860 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583a:	4613      	mov	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d105      	bne.n	800585a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	b2db      	uxtb	r3, r3
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb0a 	bl	8005e6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	3301      	adds	r3, #1
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	791b      	ldrb	r3, [r3, #4]
 8005864:	461a      	mov	r2, r3
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	4293      	cmp	r3, r2
 800586a:	d3e4      	bcc.n	8005836 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f005 f9fb 	bl	800ac6c <USB_ReadInterrupts>
 8005876:	4603      	mov	r3, r0
 8005878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800587c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005880:	d13c      	bne.n	80058fc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005882:	2301      	movs	r3, #1
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24
 8005886:	e02b      	b.n	80058e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	3318      	adds	r3, #24
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d115      	bne.n	80058da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80058ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da12      	bge.n	80058da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b8:	4613      	mov	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	3317      	adds	r3, #23
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 faca 	bl	8005e6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	3301      	adds	r3, #1
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	791b      	ldrb	r3, [r3, #4]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d3cd      	bcc.n	8005888 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80058fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f005 f9b3 	bl	800ac6c <USB_ReadInterrupts>
 8005906:	4603      	mov	r3, r0
 8005908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800590c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005910:	d156      	bne.n	80059c0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005912:	2301      	movs	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	e045      	b.n	80059a4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592c:	4613      	mov	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d12e      	bne.n	800599e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005940:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005942:	2b00      	cmp	r3, #0
 8005944:	da2b      	bge.n	800599e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	0c1a      	lsrs	r2, r3, #16
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005950:	4053      	eors	r3, r2
 8005952:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005956:	2b00      	cmp	r3, #0
 8005958:	d121      	bne.n	800599e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800596c:	2201      	movs	r2, #1
 800596e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800599a:	6053      	str	r3, [r2, #4]
            break;
 800599c:	e008      	b.n	80059b0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	3301      	adds	r3, #1
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	791b      	ldrb	r3, [r3, #4]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d3b3      	bcc.n	8005918 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80059be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f005 f951 	bl	800ac6c <USB_ReadInterrupts>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d4:	d10a      	bne.n	80059ec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f00a fdb0 	bl	801053c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80059ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f005 f93b 	bl	800ac6c <USB_ReadInterrupts>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d115      	bne.n	8005a2c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f00a fda0 	bl	8010558 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	e000      	b.n	8005a2c <HAL_PCD_IRQHandler+0x93c>
      return;
 8005a2a:	bf00      	nop
    }
  }
}
 8005a2c:	3734      	adds	r7, #52	@ 0x34
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd90      	pop	{r4, r7, pc}

08005a32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_PCD_SetAddress+0x1a>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e012      	b.n	8005a72 <HAL_PCD_SetAddress+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	78fa      	ldrb	r2, [r7, #3]
 8005a58:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f005 f89a 	bl	800ab9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	461a      	mov	r2, r3
 8005a88:	4603      	mov	r3, r0
 8005a8a:	70fb      	strb	r3, [r7, #3]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	803b      	strh	r3, [r7, #0]
 8005a90:	4613      	mov	r3, r2
 8005a92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	da0f      	bge.n	8005ac0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	f003 020f 	and.w	r2, r3, #15
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	3310      	adds	r3, #16
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	705a      	strb	r2, [r3, #1]
 8005abe:	e00f      	b.n	8005ae0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 020f 	and.w	r2, r3, #15
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005aec:	883b      	ldrh	r3, [r7, #0]
 8005aee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	78ba      	ldrb	r2, [r7, #2]
 8005afa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b0e:	78bb      	ldrb	r3, [r7, #2]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d102      	bne.n	8005b1a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_PCD_EP_Open+0xae>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e00e      	b.n	8005b46 <HAL_PCD_EP_Open+0xcc>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68f9      	ldr	r1, [r7, #12]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f004 fa1a 	bl	8009f70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005b44:	7afb      	ldrb	r3, [r7, #11]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da0f      	bge.n	8005b82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	3310      	adds	r3, #16
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	705a      	strb	r2, [r3, #1]
 8005b80:	e00f      	b.n	8005ba2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	3304      	adds	r3, #4
 8005b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_PCD_EP_Close+0x6e>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e00e      	b.n	8005bda <HAL_PCD_EP_Close+0x8c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68f9      	ldr	r1, [r7, #12]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f004 fa58 	bl	800a080 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	3304      	adds	r3, #4
 8005c0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2200      	movs	r2, #0
 8005c22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c24:	7afb      	ldrb	r3, [r7, #11]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	799b      	ldrb	r3, [r3, #6]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d102      	bne.n	8005c3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	799b      	ldrb	r3, [r3, #6]
 8005c46:	461a      	mov	r2, r3
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	f004 faf5 	bl	800a238 <USB_EPStartXfer>

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 020f 	and.w	r2, r3, #15
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005c7a:	681b      	ldr	r3, [r3, #0]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	460b      	mov	r3, r1
 8005c96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	f003 020f 	and.w	r2, r3, #15
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	3310      	adds	r3, #16
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	3304      	adds	r3, #4
 8005cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	799b      	ldrb	r3, [r3, #6]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d102      	bne.n	8005ce2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	799b      	ldrb	r3, [r3, #6]
 8005cea:	461a      	mov	r2, r3
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	f004 faa3 	bl	800a238 <USB_EPStartXfer>

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	7912      	ldrb	r2, [r2, #4]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e04f      	b.n	8005dba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da0f      	bge.n	8005d42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	3310      	adds	r3, #16
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	3304      	adds	r3, #4
 8005d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	705a      	strb	r2, [r3, #1]
 8005d40:	e00d      	b.n	8005d5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	4613      	mov	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	3304      	adds	r3, #4
 8005d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_PCD_EP_SetStall+0x82>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e01d      	b.n	8005dba <HAL_PCD_EP_SetStall+0xbe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 fe31 	bl	800a9f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	7999      	ldrb	r1, [r3, #6]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005daa:	461a      	mov	r2, r3
 8005dac:	f005 f822 	bl	800adf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	f003 030f 	and.w	r3, r3, #15
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	7912      	ldrb	r2, [r2, #4]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e042      	b.n	8005e66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da0f      	bge.n	8005e08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	f003 020f 	and.w	r2, r3, #15
 8005dee:	4613      	mov	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	3310      	adds	r3, #16
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	705a      	strb	r2, [r3, #1]
 8005e06:	e00f      	b.n	8005e28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	f003 020f 	and.w	r2, r3, #15
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	3304      	adds	r3, #4
 8005e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_PCD_EP_ClrStall+0x86>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e00e      	b.n	8005e66 <HAL_PCD_EP_ClrStall+0xa4>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f004 fe3a 	bl	800aad0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da0c      	bge.n	8005e9c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	4613      	mov	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	3310      	adds	r3, #16
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	3304      	adds	r3, #4
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	e00c      	b.n	8005eb6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f004 fc59 	bl	800a774 <USB_EPStopXfer>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	@ 0x28
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	3310      	adds	r3, #16
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d901      	bls.n	8005f08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e06b      	b.n	8005fe0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d902      	bls.n	8005f24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3303      	adds	r3, #3
 8005f28:	089b      	lsrs	r3, r3, #2
 8005f2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f2c:	e02a      	b.n	8005f84 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d902      	bls.n	8005f4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	3303      	adds	r3, #3
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68d9      	ldr	r1, [r3, #12]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	4603      	mov	r3, r0
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f004 fcae 	bl	800a8c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	441a      	add	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	695a      	ldr	r2, [r3, #20]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	441a      	add	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d809      	bhi.n	8005fae <PCD_WriteEmptyTxFifo+0xde>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d203      	bcs.n	8005fae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1bf      	bne.n	8005f2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d811      	bhi.n	8005fde <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	6939      	ldr	r1, [r7, #16]
 8005fd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fda:	4013      	ands	r3, r2
 8005fdc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	333c      	adds	r3, #60	@ 0x3c
 8006000:	3304      	adds	r3, #4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	799b      	ldrb	r3, [r3, #6]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d17b      	bne.n	8006116 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d015      	beq.n	8006054 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4a61      	ldr	r2, [pc, #388]	@ (80061b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	f240 80b9 	bls.w	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80b3 	beq.w	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604a:	461a      	mov	r2, r3
 800604c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	e0a7      	b.n	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d009      	beq.n	8006072 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606a:	461a      	mov	r2, r3
 800606c:	2320      	movs	r3, #32
 800606e:	6093      	str	r3, [r2, #8]
 8006070:	e098      	b.n	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 8093 	bne.w	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4a4b      	ldr	r2, [pc, #300]	@ (80061b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d90f      	bls.n	80060a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609c:	461a      	mov	r2, r3
 800609e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a2:	6093      	str	r3, [r2, #8]
 80060a4:	e07e      	b.n	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	3304      	adds	r3, #4
 80060ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	0159      	lsls	r1, r3, #5
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	440b      	add	r3, r1
 80060c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d2:	1ad2      	subs	r2, r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d114      	bne.n	8006108 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060f0:	461a      	mov	r2, r3
 80060f2:	2101      	movs	r1, #1
 80060f4:	f004 fe7e 	bl	800adf4 <USB_EP0_OutStart>
 80060f8:	e006      	b.n	8006108 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	441a      	add	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f00a f950 	bl	80103b4 <HAL_PCD_DataOutStageCallback>
 8006114:	e046      	b.n	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	4a26      	ldr	r2, [pc, #152]	@ (80061b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d124      	bne.n	8006168 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	461a      	mov	r2, r3
 8006136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613a:	6093      	str	r3, [r2, #8]
 800613c:	e032      	b.n	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	461a      	mov	r2, r3
 8006156:	2320      	movs	r3, #32
 8006158:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f00a f927 	bl	80103b4 <HAL_PCD_DataOutStageCallback>
 8006166:	e01d      	b.n	80061a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d114      	bne.n	8006198 <PCD_EP_OutXfrComplete_int+0x1b0>
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d108      	bne.n	8006198 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006190:	461a      	mov	r2, r3
 8006192:	2100      	movs	r1, #0
 8006194:	f004 fe2e 	bl	800adf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f00a f908 	bl	80103b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	4f54300a 	.word	0x4f54300a
 80061b4:	4f54310a 	.word	0x4f54310a

080061b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	333c      	adds	r3, #60	@ 0x3c
 80061d0:	3304      	adds	r3, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a15      	ldr	r2, [pc, #84]	@ (8006240 <PCD_EP_OutSetupPacket_int+0x88>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d90e      	bls.n	800620c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f00a f8bf 	bl	8010390 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a0a      	ldr	r2, [pc, #40]	@ (8006240 <PCD_EP_OutSetupPacket_int+0x88>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d90c      	bls.n	8006234 <PCD_EP_OutSetupPacket_int+0x7c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	799b      	ldrb	r3, [r3, #6]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d108      	bne.n	8006234 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800622c:	461a      	mov	r2, r3
 800622e:	2101      	movs	r1, #1
 8006230:	f004 fde0 	bl	800adf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	4f54300a 	.word	0x4f54300a

08006244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
 8006250:	4613      	mov	r3, r2
 8006252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d107      	bne.n	8006272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006262:	883b      	ldrh	r3, [r7, #0]
 8006264:	0419      	lsls	r1, r3, #16
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	430a      	orrs	r2, r1
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006270:	e028      	b.n	80062c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006278:	0c1b      	lsrs	r3, r3, #16
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4413      	add	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e00d      	b.n	80062a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	3340      	adds	r3, #64	@ 0x40
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4413      	add	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	3301      	adds	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	7bfa      	ldrb	r2, [r7, #15]
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d3ec      	bcc.n	8006286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80062ac:	883b      	ldrh	r3, [r7, #0]
 80062ae:	0418      	lsls	r0, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	4302      	orrs	r2, r0
 80062bc:	3340      	adds	r3, #64	@ 0x40
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	887a      	ldrh	r2, [r7, #2]
 80062e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e267      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d075      	beq.n	8006416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800632a:	4b88      	ldr	r3, [pc, #544]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
 8006332:	2b04      	cmp	r3, #4
 8006334:	d00c      	beq.n	8006350 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006336:	4b85      	ldr	r3, [pc, #532]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800633e:	2b08      	cmp	r3, #8
 8006340:	d112      	bne.n	8006368 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006342:	4b82      	ldr	r3, [pc, #520]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800634a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800634e:	d10b      	bne.n	8006368 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006350:	4b7e      	ldr	r3, [pc, #504]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d05b      	beq.n	8006414 <HAL_RCC_OscConfig+0x108>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d157      	bne.n	8006414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e242      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006370:	d106      	bne.n	8006380 <HAL_RCC_OscConfig+0x74>
 8006372:	4b76      	ldr	r3, [pc, #472]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a75      	ldr	r2, [pc, #468]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e01d      	b.n	80063bc <HAL_RCC_OscConfig+0xb0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006388:	d10c      	bne.n	80063a4 <HAL_RCC_OscConfig+0x98>
 800638a:	4b70      	ldr	r3, [pc, #448]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a6f      	ldr	r2, [pc, #444]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	4b6d      	ldr	r3, [pc, #436]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a6c      	ldr	r2, [pc, #432]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e00b      	b.n	80063bc <HAL_RCC_OscConfig+0xb0>
 80063a4:	4b69      	ldr	r3, [pc, #420]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a68      	ldr	r2, [pc, #416]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80063aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	4b66      	ldr	r3, [pc, #408]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a65      	ldr	r2, [pc, #404]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80063b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d013      	beq.n	80063ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c4:	f7fc fe3e 	bl	8003044 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063cc:	f7fc fe3a 	bl	8003044 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b64      	cmp	r3, #100	@ 0x64
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e207      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063de:	4b5b      	ldr	r3, [pc, #364]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0xc0>
 80063ea:	e014      	b.n	8006416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ec:	f7fc fe2a 	bl	8003044 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f4:	f7fc fe26 	bl	8003044 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b64      	cmp	r3, #100	@ 0x64
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e1f3      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006406:	4b51      	ldr	r3, [pc, #324]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f0      	bne.n	80063f4 <HAL_RCC_OscConfig+0xe8>
 8006412:	e000      	b.n	8006416 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d063      	beq.n	80064ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006422:	4b4a      	ldr	r3, [pc, #296]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 030c 	and.w	r3, r3, #12
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800642e:	4b47      	ldr	r3, [pc, #284]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006436:	2b08      	cmp	r3, #8
 8006438:	d11c      	bne.n	8006474 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800643a:	4b44      	ldr	r3, [pc, #272]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d116      	bne.n	8006474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006446:	4b41      	ldr	r3, [pc, #260]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <HAL_RCC_OscConfig+0x152>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d001      	beq.n	800645e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e1c7      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645e:	4b3b      	ldr	r3, [pc, #236]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4937      	ldr	r1, [pc, #220]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 800646e:	4313      	orrs	r3, r2
 8006470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006472:	e03a      	b.n	80064ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d020      	beq.n	80064be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800647c:	4b34      	ldr	r3, [pc, #208]	@ (8006550 <HAL_RCC_OscConfig+0x244>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006482:	f7fc fddf 	bl	8003044 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800648a:	f7fc fddb 	bl	8003044 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e1a8      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800649c:	4b2b      	ldr	r3, [pc, #172]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a8:	4b28      	ldr	r3, [pc, #160]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	4925      	ldr	r1, [pc, #148]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	600b      	str	r3, [r1, #0]
 80064bc:	e015      	b.n	80064ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064be:	4b24      	ldr	r3, [pc, #144]	@ (8006550 <HAL_RCC_OscConfig+0x244>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fc fdbe 	bl	8003044 <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064cc:	f7fc fdba 	bl	8003044 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e187      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064de:	4b1b      	ldr	r3, [pc, #108]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f0      	bne.n	80064cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d036      	beq.n	8006564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d016      	beq.n	800652c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064fe:	4b15      	ldr	r3, [pc, #84]	@ (8006554 <HAL_RCC_OscConfig+0x248>)
 8006500:	2201      	movs	r2, #1
 8006502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fc fd9e 	bl	8003044 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800650c:	f7fc fd9a 	bl	8003044 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e167      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800651e:	4b0b      	ldr	r3, [pc, #44]	@ (800654c <HAL_RCC_OscConfig+0x240>)
 8006520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f0      	beq.n	800650c <HAL_RCC_OscConfig+0x200>
 800652a:	e01b      	b.n	8006564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800652c:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <HAL_RCC_OscConfig+0x248>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006532:	f7fc fd87 	bl	8003044 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006538:	e00e      	b.n	8006558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800653a:	f7fc fd83 	bl	8003044 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d907      	bls.n	8006558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e150      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
 800654c:	40023800 	.word	0x40023800
 8006550:	42470000 	.word	0x42470000
 8006554:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006558:	4b88      	ldr	r3, [pc, #544]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 800655a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ea      	bne.n	800653a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8097 	beq.w	80066a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006576:	4b81      	ldr	r3, [pc, #516]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	4b7d      	ldr	r3, [pc, #500]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	4a7c      	ldr	r2, [pc, #496]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 800658c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006590:	6413      	str	r3, [r2, #64]	@ 0x40
 8006592:	4b7a      	ldr	r3, [pc, #488]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a2:	4b77      	ldr	r3, [pc, #476]	@ (8006780 <HAL_RCC_OscConfig+0x474>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d118      	bne.n	80065e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ae:	4b74      	ldr	r3, [pc, #464]	@ (8006780 <HAL_RCC_OscConfig+0x474>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a73      	ldr	r2, [pc, #460]	@ (8006780 <HAL_RCC_OscConfig+0x474>)
 80065b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ba:	f7fc fd43 	bl	8003044 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c2:	f7fc fd3f 	bl	8003044 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e10c      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006780 <HAL_RCC_OscConfig+0x474>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d106      	bne.n	80065f6 <HAL_RCC_OscConfig+0x2ea>
 80065e8:	4b64      	ldr	r3, [pc, #400]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ec:	4a63      	ldr	r2, [pc, #396]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f4:	e01c      	b.n	8006630 <HAL_RCC_OscConfig+0x324>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	d10c      	bne.n	8006618 <HAL_RCC_OscConfig+0x30c>
 80065fe:	4b5f      	ldr	r3, [pc, #380]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006602:	4a5e      	ldr	r2, [pc, #376]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006604:	f043 0304 	orr.w	r3, r3, #4
 8006608:	6713      	str	r3, [r2, #112]	@ 0x70
 800660a:	4b5c      	ldr	r3, [pc, #368]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660e:	4a5b      	ldr	r2, [pc, #364]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	6713      	str	r3, [r2, #112]	@ 0x70
 8006616:	e00b      	b.n	8006630 <HAL_RCC_OscConfig+0x324>
 8006618:	4b58      	ldr	r3, [pc, #352]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	4a57      	ldr	r2, [pc, #348]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	6713      	str	r3, [r2, #112]	@ 0x70
 8006624:	4b55      	ldr	r3, [pc, #340]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006628:	4a54      	ldr	r2, [pc, #336]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 800662a:	f023 0304 	bic.w	r3, r3, #4
 800662e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d015      	beq.n	8006664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006638:	f7fc fd04 	bl	8003044 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663e:	e00a      	b.n	8006656 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006640:	f7fc fd00 	bl	8003044 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e0cb      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006656:	4b49      	ldr	r3, [pc, #292]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0ee      	beq.n	8006640 <HAL_RCC_OscConfig+0x334>
 8006662:	e014      	b.n	800668e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006664:	f7fc fcee 	bl	8003044 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800666a:	e00a      	b.n	8006682 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666c:	f7fc fcea 	bl	8003044 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667a:	4293      	cmp	r3, r2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e0b5      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006682:	4b3e      	ldr	r3, [pc, #248]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1ee      	bne.n	800666c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d105      	bne.n	80066a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006694:	4b39      	ldr	r3, [pc, #228]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	4a38      	ldr	r2, [pc, #224]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 800669a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800669e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 80a1 	beq.w	80067ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066aa:	4b34      	ldr	r3, [pc, #208]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d05c      	beq.n	8006770 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d141      	bne.n	8006742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066be:	4b31      	ldr	r3, [pc, #196]	@ (8006784 <HAL_RCC_OscConfig+0x478>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c4:	f7fc fcbe 	bl	8003044 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066cc:	f7fc fcba 	bl	8003044 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e087      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066de:	4b27      	ldr	r3, [pc, #156]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69da      	ldr	r2, [r3, #28]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	019b      	lsls	r3, r3, #6
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	3b01      	subs	r3, #1
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	061b      	lsls	r3, r3, #24
 800670e:	491b      	ldr	r1, [pc, #108]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006710:	4313      	orrs	r3, r2
 8006712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006714:	4b1b      	ldr	r3, [pc, #108]	@ (8006784 <HAL_RCC_OscConfig+0x478>)
 8006716:	2201      	movs	r2, #1
 8006718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671a:	f7fc fc93 	bl	8003044 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006722:	f7fc fc8f 	bl	8003044 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e05c      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006734:	4b11      	ldr	r3, [pc, #68]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x416>
 8006740:	e054      	b.n	80067ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <HAL_RCC_OscConfig+0x478>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fc fc7c 	bl	8003044 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006750:	f7fc fc78 	bl	8003044 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e045      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006762:	4b06      	ldr	r3, [pc, #24]	@ (800677c <HAL_RCC_OscConfig+0x470>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0x444>
 800676e:	e03d      	b.n	80067ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d107      	bne.n	8006788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e038      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
 800677c:	40023800 	.word	0x40023800
 8006780:	40007000 	.word	0x40007000
 8006784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006788:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <HAL_RCC_OscConfig+0x4ec>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d028      	beq.n	80067e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d121      	bne.n	80067e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d11a      	bne.n	80067e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067b8:	4013      	ands	r3, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d111      	bne.n	80067e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	3b01      	subs	r3, #1
 80067d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d107      	bne.n	80067e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40023800 	.word	0x40023800

080067fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0cc      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006810:	4b68      	ldr	r3, [pc, #416]	@ (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d90c      	bls.n	8006838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b65      	ldr	r3, [pc, #404]	@ (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b63      	ldr	r3, [pc, #396]	@ (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0b8      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d020      	beq.n	8006886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006850:	4b59      	ldr	r3, [pc, #356]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a58      	ldr	r2, [pc, #352]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800685a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006868:	4b53      	ldr	r3, [pc, #332]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4a52      	ldr	r2, [pc, #328]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006874:	4b50      	ldr	r3, [pc, #320]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	494d      	ldr	r1, [pc, #308]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d044      	beq.n	800691c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d107      	bne.n	80068aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689a:	4b47      	ldr	r3, [pc, #284]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d119      	bne.n	80068da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e07f      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d003      	beq.n	80068ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d107      	bne.n	80068ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ba:	4b3f      	ldr	r3, [pc, #252]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e06f      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ca:	4b3b      	ldr	r3, [pc, #236]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e067      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068da:	4b37      	ldr	r3, [pc, #220]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4934      	ldr	r1, [pc, #208]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068ec:	f7fc fbaa 	bl	8003044 <HAL_GetTick>
 80068f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	e00a      	b.n	800690a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f4:	f7fc fba6 	bl	8003044 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006902:	4293      	cmp	r3, r2
 8006904:	d901      	bls.n	800690a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e04f      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690a:	4b2b      	ldr	r3, [pc, #172]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 020c 	and.w	r2, r3, #12
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	429a      	cmp	r2, r3
 800691a:	d1eb      	bne.n	80068f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800691c:	4b25      	ldr	r3, [pc, #148]	@ (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d20c      	bcs.n	8006944 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692a:	4b22      	ldr	r3, [pc, #136]	@ (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	4b20      	ldr	r3, [pc, #128]	@ (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d001      	beq.n	8006944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e032      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006950:	4b19      	ldr	r3, [pc, #100]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4916      	ldr	r1, [pc, #88]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	4313      	orrs	r3, r2
 8006960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800696e:	4b12      	ldr	r3, [pc, #72]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	490e      	ldr	r1, [pc, #56]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	4313      	orrs	r3, r2
 8006980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006982:	f000 f821 	bl	80069c8 <HAL_RCC_GetSysClockFreq>
 8006986:	4602      	mov	r2, r0
 8006988:	4b0b      	ldr	r3, [pc, #44]	@ (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	091b      	lsrs	r3, r3, #4
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	490a      	ldr	r1, [pc, #40]	@ (80069bc <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	5ccb      	ldrb	r3, [r1, r3]
 8006996:	fa22 f303 	lsr.w	r3, r2, r3
 800699a:	4a09      	ldr	r2, [pc, #36]	@ (80069c0 <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800699e:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <HAL_RCC_ClockConfig+0x1c8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fc fb0a 	bl	8002fbc <HAL_InitTick>

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	40023c00 	.word	0x40023c00
 80069b8:	40023800 	.word	0x40023800
 80069bc:	08013cd0 	.word	0x08013cd0
 80069c0:	20000004 	.word	0x20000004
 80069c4:	20000008 	.word	0x20000008

080069c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069cc:	b090      	sub	sp, #64	@ 0x40
 80069ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069e0:	4b59      	ldr	r3, [pc, #356]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x180>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 030c 	and.w	r3, r3, #12
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d00d      	beq.n	8006a08 <HAL_RCC_GetSysClockFreq+0x40>
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	f200 80a1 	bhi.w	8006b34 <HAL_RCC_GetSysClockFreq+0x16c>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_RCC_GetSysClockFreq+0x34>
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d003      	beq.n	8006a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80069fa:	e09b      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069fc:	4b53      	ldr	r3, [pc, #332]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x184>)
 80069fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a00:	e09b      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a02:	4b53      	ldr	r3, [pc, #332]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a06:	e098      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a08:	4b4f      	ldr	r3, [pc, #316]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a12:	4b4d      	ldr	r3, [pc, #308]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d028      	beq.n	8006a70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	099b      	lsrs	r3, r3, #6
 8006a24:	2200      	movs	r2, #0
 8006a26:	623b      	str	r3, [r7, #32]
 8006a28:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a30:	2100      	movs	r1, #0
 8006a32:	4b47      	ldr	r3, [pc, #284]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a34:	fb03 f201 	mul.w	r2, r3, r1
 8006a38:	2300      	movs	r3, #0
 8006a3a:	fb00 f303 	mul.w	r3, r0, r3
 8006a3e:	4413      	add	r3, r2
 8006a40:	4a43      	ldr	r2, [pc, #268]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a42:	fba0 1202 	umull	r1, r2, r0, r2
 8006a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a48:	460a      	mov	r2, r1
 8006a4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a4e:	4413      	add	r3, r2
 8006a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a54:	2200      	movs	r2, #0
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	61fa      	str	r2, [r7, #28]
 8006a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006a62:	f7fa f8f1 	bl	8000c48 <__aeabi_uldivmod>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a6e:	e053      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a70:	4b35      	ldr	r3, [pc, #212]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	099b      	lsrs	r3, r3, #6
 8006a76:	2200      	movs	r2, #0
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	617a      	str	r2, [r7, #20]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a82:	f04f 0b00 	mov.w	fp, #0
 8006a86:	4652      	mov	r2, sl
 8006a88:	465b      	mov	r3, fp
 8006a8a:	f04f 0000 	mov.w	r0, #0
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	0159      	lsls	r1, r3, #5
 8006a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a98:	0150      	lsls	r0, r2, #5
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	ebb2 080a 	subs.w	r8, r2, sl
 8006aa2:	eb63 090b 	sbc.w	r9, r3, fp
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ab2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ab6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006aba:	ebb2 0408 	subs.w	r4, r2, r8
 8006abe:	eb63 0509 	sbc.w	r5, r3, r9
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	00eb      	lsls	r3, r5, #3
 8006acc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ad0:	00e2      	lsls	r2, r4, #3
 8006ad2:	4614      	mov	r4, r2
 8006ad4:	461d      	mov	r5, r3
 8006ad6:	eb14 030a 	adds.w	r3, r4, sl
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	eb45 030b 	adc.w	r3, r5, fp
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aee:	4629      	mov	r1, r5
 8006af0:	028b      	lsls	r3, r1, #10
 8006af2:	4621      	mov	r1, r4
 8006af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006af8:	4621      	mov	r1, r4
 8006afa:	028a      	lsls	r2, r1, #10
 8006afc:	4610      	mov	r0, r2
 8006afe:	4619      	mov	r1, r3
 8006b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b02:	2200      	movs	r2, #0
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	60fa      	str	r2, [r7, #12]
 8006b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b0c:	f7fa f89c 	bl	8000c48 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4613      	mov	r3, r2
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b18:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	3301      	adds	r3, #1
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006b28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b32:	e002      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b34:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x184>)
 8006b36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3740      	adds	r7, #64	@ 0x40
 8006b40:	46bd      	mov	sp, r7
 8006b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	00f42400 	.word	0x00f42400
 8006b50:	00b71b00 	.word	0x00b71b00

08006b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b58:	4b03      	ldr	r3, [pc, #12]	@ (8006b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000004 	.word	0x20000004

08006b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b70:	f7ff fff0 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	0a9b      	lsrs	r3, r3, #10
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4903      	ldr	r1, [pc, #12]	@ (8006b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	08013ce0 	.word	0x08013ce0

08006b94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e022      	b.n	8006bec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fb fec5 	bl	8002948 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f814 	bl	8006bf4 <HAL_SD_InitCard>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e00a      	b.n	8006bec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b08e      	sub	sp, #56	@ 0x38
 8006bf8:	af04      	add	r7, sp, #16
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006c10:	2376      	movs	r3, #118	@ 0x76
 8006c12:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681d      	ldr	r5, [r3, #0]
 8006c18:	466c      	mov	r4, sp
 8006c1a:	f107 0318 	add.w	r3, r7, #24
 8006c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c26:	f107 030c 	add.w	r3, r7, #12
 8006c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f002 f8b5 	bl	8008d9c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006c32:	4b2a      	ldr	r3, [pc, #168]	@ (8006cdc <HAL_SD_InitCard+0xe8>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f002 f8f6 	bl	8008e2e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006c42:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <HAL_SD_InitCard+0xe8>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006c48:	2002      	movs	r0, #2
 8006c4a:	f7fc fa07 	bl	800305c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f806 	bl	8007c60 <SD_PowerON>
 8006c54:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e02e      	b.n	8006cd2 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 ff25 	bl	8007ac4 <SD_InitCard>
 8006c7a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01b      	b.n	8006cd2 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f002 f955 	bl	8008f52 <SDMMC_CmdBlockLength>
 8006ca8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00f      	beq.n	8006cd0 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce0 <HAL_SD_InitCard+0xec>)
 8006cb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3728      	adds	r7, #40	@ 0x28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	422580a0 	.word	0x422580a0
 8006ce0:	004005ff 	.word	0x004005ff

08006ce4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	@ 0x30
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d107      	bne.n	8006d0c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0c0      	b.n	8006e8e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f040 80b9 	bne.w	8006e8c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	441a      	add	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d907      	bls.n	8006d3e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e0a7      	b.n	8006e8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2203      	movs	r2, #3
 8006d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006d5c:	f043 0302 	orr.w	r3, r3, #2
 8006d60:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	4a4c      	ldr	r2, [pc, #304]	@ (8006e98 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006d68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	4a4b      	ldr	r2, [pc, #300]	@ (8006e9c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006d70:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	2200      	movs	r2, #0
 8006d78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3380      	adds	r3, #128	@ 0x80
 8006da8:	4619      	mov	r1, r3
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	025b      	lsls	r3, r3, #9
 8006db0:	089b      	lsrs	r3, r3, #2
 8006db2:	f7fc fb37 	bl	8003424 <HAL_DMA_Start_IT>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d017      	beq.n	8006dec <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8006dca:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a33      	ldr	r2, [pc, #204]	@ (8006ea0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006dd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e050      	b.n	8006e8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006dec:	4b2d      	ldr	r3, [pc, #180]	@ (8006ea4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d002      	beq.n	8006e00 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfc:	025b      	lsls	r3, r3, #9
 8006dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e00:	f04f 33ff 	mov.w	r3, #4294967295
 8006e04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	025b      	lsls	r3, r3, #9
 8006e0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e0c:	2390      	movs	r3, #144	@ 0x90
 8006e0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006e10:	2302      	movs	r3, #2
 8006e12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f107 0210 	add.w	r2, r7, #16
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f002 f867 	bl	8008efa <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d90a      	bls.n	8006e48 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2282      	movs	r2, #130	@ 0x82
 8006e36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 f8cb 	bl	8008fda <SDMMC_CmdReadMultiBlock>
 8006e44:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006e46:	e009      	b.n	8006e5c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2281      	movs	r2, #129	@ 0x81
 8006e4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e54:	4618      	mov	r0, r3
 8006e56:	f002 f89e 	bl	8008f96 <SDMMC_CmdReadSingleBlock>
 8006e5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d012      	beq.n	8006e88 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a0e      	ldr	r2, [pc, #56]	@ (8006ea0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006e68:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e70:	431a      	orrs	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e002      	b.n	8006e8e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e000      	b.n	8006e8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006e8c:	2302      	movs	r3, #2
  }
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3730      	adds	r7, #48	@ 0x30
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	080078d3 	.word	0x080078d3
 8006e9c:	08007945 	.word	0x08007945
 8006ea0:	004005ff 	.word	0x004005ff
 8006ea4:	4225858c 	.word	0x4225858c

08006ea8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08c      	sub	sp, #48	@ 0x30
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0c5      	b.n	800705c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	f040 80be 	bne.w	800705a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	441a      	add	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d907      	bls.n	8006f02 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e0ac      	b.n	800705c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2203      	movs	r2, #3
 8006f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8006f20:	f043 0302 	orr.w	r3, r3, #2
 8006f24:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2a:	4a4e      	ldr	r2, [pc, #312]	@ (8007064 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f32:	4a4d      	ldr	r2, [pc, #308]	@ (8007068 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006f34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d002      	beq.n	8006f4c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f48:	025b      	lsls	r3, r3, #9
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d90a      	bls.n	8006f68 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	22a0      	movs	r2, #160	@ 0xa0
 8006f56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f002 f87f 	bl	8009062 <SDMMC_CmdWriteMultiBlock>
 8006f64:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006f66:	e009      	b.n	8006f7c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2290      	movs	r2, #144	@ 0x90
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 f852 	bl	800901e <SDMMC_CmdWriteSingleBlock>
 8006f7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d012      	beq.n	8006fa8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a39      	ldr	r2, [pc, #228]	@ (800706c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006f88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f90:	431a      	orrs	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e059      	b.n	800705c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006fa8:	4b31      	ldr	r3, [pc, #196]	@ (8007070 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb2:	2240      	movs	r2, #64	@ 0x40
 8006fb4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3380      	adds	r3, #128	@ 0x80
 8006fde:	461a      	mov	r2, r3
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	025b      	lsls	r3, r3, #9
 8006fe4:	089b      	lsrs	r3, r3, #2
 8006fe6:	f7fc fa1d 	bl	8003424 <HAL_DMA_Start_IT>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01c      	beq.n	800702a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8006ffe:	f023 0302 	bic.w	r3, r3, #2
 8007002:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a18      	ldr	r2, [pc, #96]	@ (800706c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800700a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e018      	b.n	800705c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800702a:	f04f 33ff 	mov.w	r3, #4294967295
 800702e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	025b      	lsls	r3, r3, #9
 8007034:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007036:	2390      	movs	r3, #144	@ 0x90
 8007038:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800703e:	2300      	movs	r3, #0
 8007040:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007042:	2301      	movs	r3, #1
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f107 0210 	add.w	r2, r7, #16
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f001 ff52 	bl	8008efa <SDIO_ConfigData>

      return HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	e000      	b.n	800705c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800705a:	2302      	movs	r3, #2
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3730      	adds	r7, #48	@ 0x30
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	080078a9 	.word	0x080078a9
 8007068:	08007945 	.word	0x08007945
 800706c:	004005ff 	.word	0x004005ff
 8007070:	4225858c 	.word	0x4225858c

08007074 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007080:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_SD_IRQHandler+0x2e>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 f806 	bl	80080ac <SD_Read_IT>
 80070a0:	e165      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 808f 	beq.w	80071d0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070ba:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80070ca:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80070ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0201 	bic.w	r2, r2, #1
 80070de:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d039      	beq.n	800715e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <HAL_SD_IRQHandler+0x8a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d011      	beq.n	8007122 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f001 ffd0 	bl	80090a8 <SDMMC_CmdStopTransfer>
 8007108:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f92f 	bl	8007380 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f240 523a 	movw	r2, #1338	@ 0x53a
 800712a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_SD_IRQHandler+0xda>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f003 ff8c 	bl	800b06c <HAL_SD_RxCpltCallback>
 8007154:	e10b      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f003 ff7e 	bl	800b058 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800715c:	e107      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8102 	beq.w	800736e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d011      	beq.n	8007198 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f001 ff95 	bl	80090a8 <SDMMC_CmdStopTransfer>
 800717e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f8f4 	bl	8007380 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f040 80e5 	bne.w	800736e <HAL_SD_IRQHandler+0x2fa>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 80df 	bne.w	800736e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0208 	bic.w	r2, r2, #8
 80071be:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f003 ff45 	bl	800b058 <HAL_SD_TxCpltCallback>
}
 80071ce:	e0ce      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_SD_IRQHandler+0x17c>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 ffb0 	bl	800814e <SD_Write_IT>
 80071ee:	e0be      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071f6:	f240 233a 	movw	r3, #570	@ 0x23a
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80b6 	beq.w	800736e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	f043 0202 	orr.w	r2, r3, #2
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722e:	f043 0208 	orr.w	r2, r3, #8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	f043 0220 	orr.w	r2, r3, #32
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	f043 0210 	orr.w	r2, r3, #16
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727c:	f043 0208 	orr.w	r2, r3, #8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f240 723a 	movw	r2, #1850	@ 0x73a
 800728c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6812      	ldr	r2, [r2, #0]
 8007298:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800729c:	f023 0302 	bic.w	r3, r3, #2
 80072a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fefe 	bl	80090a8 <SDMMC_CmdStopTransfer>
 80072ac:	4602      	mov	r2, r0
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f855 	bl	8007380 <HAL_SD_ErrorCallback>
}
 80072d6:	e04a      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d045      	beq.n	800736e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <HAL_SD_IRQHandler+0x282>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d011      	beq.n	800731a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007378 <HAL_SD_IRQHandler+0x304>)
 80072fc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007302:	4618      	mov	r0, r3
 8007304:	f7fc f8e6 	bl	80034d4 <HAL_DMA_Abort_IT>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d02f      	beq.n	800736e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fb68 	bl	80079e8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007318:	e029      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <HAL_SD_IRQHandler+0x2ba>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d011      	beq.n	8007352 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	4a12      	ldr	r2, [pc, #72]	@ (800737c <HAL_SD_IRQHandler+0x308>)
 8007334:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	4618      	mov	r0, r3
 800733c:	f7fc f8ca 	bl	80034d4 <HAL_DMA_Abort_IT>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d013      	beq.n	800736e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fb83 	bl	8007a56 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007350:	e00d      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f003 fe6c 	bl	800b044 <HAL_SD_AbortCallback>
}
 800736c:	e7ff      	b.n	800736e <HAL_SD_IRQHandler+0x2fa>
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	080079e9 	.word	0x080079e9
 800737c:	08007a57 	.word	0x08007a57

08007380 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a2:	0f9b      	lsrs	r3, r3, #30
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ae:	0e9b      	lsrs	r3, r3, #26
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073c0:	0e1b      	lsrs	r3, r3, #24
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d2:	0c1b      	lsrs	r3, r3, #16
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073de:	0a1b      	lsrs	r3, r3, #8
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073f4:	0d1b      	lsrs	r3, r3, #20
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007400:	0c1b      	lsrs	r3, r3, #16
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	b2da      	uxtb	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007412:	0bdb      	lsrs	r3, r3, #15
 8007414:	b2db      	uxtb	r3, r3
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	b2da      	uxtb	r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007424:	0b9b      	lsrs	r3, r3, #14
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	b2da      	uxtb	r2, r3
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007436:	0b5b      	lsrs	r3, r3, #13
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007448:	0b1b      	lsrs	r3, r3, #12
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	b2da      	uxtb	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2200      	movs	r2, #0
 800745a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007460:	2b00      	cmp	r3, #0
 8007462:	d163      	bne.n	800752c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007468:	009a      	lsls	r2, r3, #2
 800746a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800746e:	4013      	ands	r3, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007474:	0f92      	lsrs	r2, r2, #30
 8007476:	431a      	orrs	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007480:	0edb      	lsrs	r3, r3, #27
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	b2da      	uxtb	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007492:	0e1b      	lsrs	r3, r3, #24
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	b2da      	uxtb	r2, r3
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074a4:	0d5b      	lsrs	r3, r3, #21
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b6:	0c9b      	lsrs	r3, r3, #18
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074c8:	0bdb      	lsrs	r3, r3, #15
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	7e1b      	ldrb	r3, [r3, #24]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	3302      	adds	r3, #2
 80074ec:	2201      	movs	r2, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80074f6:	fb03 f202 	mul.w	r2, r3, r2
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	7a1b      	ldrb	r3, [r3, #8]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	2201      	movs	r2, #1
 800750a:	409a      	lsls	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007518:	0a52      	lsrs	r2, r2, #9
 800751a:	fb03 f202 	mul.w	r2, r3, r2
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007528:	661a      	str	r2, [r3, #96]	@ 0x60
 800752a:	e031      	b.n	8007590 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007530:	2b01      	cmp	r3, #1
 8007532:	d11d      	bne.n	8007570 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007542:	0c1b      	lsrs	r3, r3, #16
 8007544:	431a      	orrs	r2, r3
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	3301      	adds	r3, #1
 8007550:	029a      	lsls	r2, r3, #10
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007564:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	661a      	str	r2, [r3, #96]	@ 0x60
 800756e:	e00f      	b.n	8007590 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a58      	ldr	r2, [pc, #352]	@ (80076d8 <HAL_SD_GetCardCSD+0x344>)
 8007576:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e09d      	b.n	80076cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007594:	0b9b      	lsrs	r3, r3, #14
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	b2da      	uxtb	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a6:	09db      	lsrs	r3, r3, #7
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c8:	0fdb      	lsrs	r3, r3, #31
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d4:	0f5b      	lsrs	r3, r3, #29
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e6:	0e9b      	lsrs	r3, r3, #26
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f8:	0d9b      	lsrs	r3, r3, #22
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	b2da      	uxtb	r2, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760a:	0d5b      	lsrs	r3, r3, #21
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	b2da      	uxtb	r2, r3
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	0bdb      	lsrs	r3, r3, #15
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	b2da      	uxtb	r2, r3
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764e:	0b9b      	lsrs	r3, r3, #14
 8007650:	b2db      	uxtb	r3, r3
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007662:	0b5b      	lsrs	r3, r3, #13
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007676:	0b1b      	lsrs	r3, r3, #12
 8007678:	b2db      	uxtb	r3, r3
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	b2da      	uxtb	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768a:	0a9b      	lsrs	r3, r3, #10
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	b2da      	uxtb	r2, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769e:	0a1b      	lsrs	r3, r3, #8
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	004005ff 	.word	0x004005ff

080076dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007734:	b5b0      	push	{r4, r5, r7, lr}
 8007736:	b08e      	sub	sp, #56	@ 0x38
 8007738:	af04      	add	r7, sp, #16
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2203      	movs	r2, #3
 8007748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007750:	2b03      	cmp	r3, #3
 8007752:	d02e      	beq.n	80077b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800775a:	d106      	bne.n	800776a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	639a      	str	r2, [r3, #56]	@ 0x38
 8007768:	e029      	b.n	80077be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007770:	d10a      	bne.n	8007788 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fb2a 	bl	8007dcc <SD_WideBus_Enable>
 8007778:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	639a      	str	r2, [r3, #56]	@ 0x38
 8007786:	e01a      	b.n	80077be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fb67 	bl	8007e62 <SD_WideBus_Disable>
 8007794:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80077a2:	e00c      	b.n	80077be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80077b0:	e005      	b.n	80077be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a26      	ldr	r2, [pc, #152]	@ (8007864 <HAL_SD_ConfigWideBusOperation+0x130>)
 80077cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077dc:	e01f      	b.n	800781e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681d      	ldr	r5, [r3, #0]
 8007804:	466c      	mov	r4, sp
 8007806:	f107 0314 	add.w	r3, r7, #20
 800780a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800780e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007818:	4628      	mov	r0, r5
 800781a:	f001 fabf 	bl	8008d9c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007826:	4618      	mov	r0, r3
 8007828:	f001 fb93 	bl	8008f52 <SDMMC_CmdBlockLength>
 800782c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00c      	beq.n	800784e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a0a      	ldr	r2, [pc, #40]	@ (8007864 <HAL_SD_ConfigWideBusOperation+0x130>)
 800783a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	@ 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bdb0      	pop	{r4, r5, r7, pc}
 8007862:	bf00      	nop
 8007864:	004005ff 	.word	0x004005ff

08007868 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa7e 	bl	8007d7c <SD_SendStatus>
 8007880:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0a5b      	lsrs	r3, r3, #9
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800789e:	693b      	ldr	r3, [r7, #16]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	2b82      	cmp	r3, #130	@ 0x82
 80078e6:	d111      	bne.n	800790c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f001 fbdb 	bl	80090a8 <SDMMC_CmdStopTransfer>
 80078f2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d008      	beq.n	800790c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	431a      	orrs	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff fd3a 	bl	8007380 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0208 	bic.w	r2, r2, #8
 800791a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007924:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f003 fb99 	bl	800b06c <HAL_SD_RxCpltCallback>
#endif
}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007950:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fb ff78 	bl	8003848 <HAL_DMA_GetError>
 8007958:	4603      	mov	r3, r0
 800795a:	2b02      	cmp	r3, #2
 800795c:	d03e      	beq.n	80079dc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007964:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d002      	beq.n	800797a <SD_DMAError+0x36>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d12d      	bne.n	80079d6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a19      	ldr	r2, [pc, #100]	@ (80079e4 <SD_DMAError+0xa0>)
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007990:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007996:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800799e:	6978      	ldr	r0, [r7, #20]
 80079a0:	f7ff ff62 	bl	8007868 <HAL_SD_GetCardState>
 80079a4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b06      	cmp	r3, #6
 80079aa:	d002      	beq.n	80079b2 <SD_DMAError+0x6e>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d10a      	bne.n	80079c8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 fb76 	bl	80090a8 <SDMMC_CmdStopTransfer>
 80079bc:	4602      	mov	r2, r0
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c2:	431a      	orrs	r2, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80079d6:	6978      	ldr	r0, [r7, #20]
 80079d8:	f7ff fcd2 	bl	8007380 <HAL_SD_ErrorCallback>
#endif
  }
}
 80079dc:	bf00      	nop
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	004005ff 	.word	0x004005ff

080079e8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80079fe:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff ff31 	bl	8007868 <HAL_SD_GetCardState>
 8007a06:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b06      	cmp	r3, #6
 8007a1a:	d002      	beq.n	8007a22 <SD_DMATxAbort+0x3a>
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d10a      	bne.n	8007a38 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 fb3e 	bl	80090a8 <SDMMC_CmdStopTransfer>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	431a      	orrs	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f003 faff 	bl	800b044 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007a46:	e002      	b.n	8007a4e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff fc99 	bl	8007380 <HAL_SD_ErrorCallback>
}
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007a6c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f7ff fefa 	bl	8007868 <HAL_SD_GetCardState>
 8007a74:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b06      	cmp	r3, #6
 8007a88:	d002      	beq.n	8007a90 <SD_DMARxAbort+0x3a>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b05      	cmp	r3, #5
 8007a8e:	d10a      	bne.n	8007aa6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 fb07 	bl	80090a8 <SDMMC_CmdStopTransfer>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f003 fac8 	bl	800b044 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007ab4:	e002      	b.n	8007abc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff fc62 	bl	8007380 <HAL_SD_ErrorCallback>
}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ac4:	b5b0      	push	{r4, r5, r7, lr}
 8007ac6:	b094      	sub	sp, #80	@ 0x50
 8007ac8:	af04      	add	r7, sp, #16
 8007aca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007acc:	2301      	movs	r3, #1
 8007ace:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 f9b8 	bl	8008e4a <SDIO_GetPowerState>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ae0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007ae4:	e0b8      	b.n	8007c58 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d02f      	beq.n	8007b4e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 fbe2 	bl	80092bc <SDMMC_CmdSendCID>
 8007af8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <SD_InitCard+0x40>
    {
      return errorstate;
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	e0a9      	b.n	8007c58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 f9e2 	bl	8008ed4 <SDIO_GetResponse>
 8007b10:	4602      	mov	r2, r0
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 f9d9 	bl	8008ed4 <SDIO_GetResponse>
 8007b22:	4602      	mov	r2, r0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2108      	movs	r1, #8
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 f9d0 	bl	8008ed4 <SDIO_GetResponse>
 8007b34:	4602      	mov	r2, r0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	210c      	movs	r1, #12
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 f9c7 	bl	8008ed4 <SDIO_GetResponse>
 8007b46:	4602      	mov	r2, r0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d00d      	beq.n	8007b72 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f107 020e 	add.w	r2, r7, #14
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fbe8 	bl	8009336 <SDMMC_CmdSetRelAdd>
 8007b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <SD_InitCard+0xae>
    {
      return errorstate;
 8007b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b70:	e072      	b.n	8007c58 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d036      	beq.n	8007be8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b7a:	89fb      	ldrh	r3, [r7, #14]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f001 fbb2 	bl	80092f8 <SDMMC_CmdSendCSD>
 8007b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b9e:	e05b      	b.n	8007c58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 f994 	bl	8008ed4 <SDIO_GetResponse>
 8007bac:	4602      	mov	r2, r0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2104      	movs	r1, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f98b 	bl	8008ed4 <SDIO_GetResponse>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2108      	movs	r1, #8
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 f982 	bl	8008ed4 <SDIO_GetResponse>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	210c      	movs	r1, #12
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 f979 	bl	8008ed4 <SDIO_GetResponse>
 8007be2:	4602      	mov	r2, r0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2104      	movs	r1, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 f970 	bl	8008ed4 <SDIO_GetResponse>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	0d1a      	lsrs	r2, r3, #20
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007bfc:	f107 0310 	add.w	r3, r7, #16
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fbc6 	bl	8007394 <HAL_SD_GetCardCSD>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007c12:	e021      	b.n	8007c58 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6819      	ldr	r1, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1c:	041b      	lsls	r3, r3, #16
 8007c1e:	2200      	movs	r2, #0
 8007c20:	461c      	mov	r4, r3
 8007c22:	4615      	mov	r5, r2
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	4608      	mov	r0, r1
 8007c2a:	f001 fa5f 	bl	80090ec <SDMMC_CmdSelDesel>
 8007c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <SD_InitCard+0x176>
  {
    return errorstate;
 8007c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c38:	e00e      	b.n	8007c58 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	466c      	mov	r4, sp
 8007c42:	f103 0210 	add.w	r2, r3, #16
 8007c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c50:	4628      	mov	r0, r5
 8007c52:	f001 f8a3 	bl	8008d9c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3740      	adds	r7, #64	@ 0x40
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bdb0      	pop	{r4, r5, r7, pc}

08007c60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	2300      	movs	r3, #0
 8007c72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 fa5a 	bl	8009132 <SDMMC_CmdGoIdleState>
 8007c7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	e072      	b.n	8007d70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fa6d 	bl	800916e <SDMMC_CmdOperCond>
 8007c94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00d      	beq.n	8007cb8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 fa43 	bl	8009132 <SDMMC_CmdGoIdleState>
 8007cac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d004      	beq.n	8007cbe <SD_PowerON+0x5e>
    {
      return errorstate;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	e05b      	b.n	8007d70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d137      	bne.n	8007d36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 fa6d 	bl	80091ac <SDMMC_CmdAppCommand>
 8007cd2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02d      	beq.n	8007d36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007cde:	e047      	b.n	8007d70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 fa60 	bl	80091ac <SDMMC_CmdAppCommand>
 8007cec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <SD_PowerON+0x98>
    {
      return errorstate;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	e03b      	b.n	8007d70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	491e      	ldr	r1, [pc, #120]	@ (8007d78 <SD_PowerON+0x118>)
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fa76 	bl	80091f0 <SDMMC_CmdAppOperCommand>
 8007d04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d10:	e02e      	b.n	8007d70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 f8db 	bl	8008ed4 <SDIO_GetResponse>
 8007d1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	0fdb      	lsrs	r3, r3, #31
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <SD_PowerON+0xcc>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <SD_PowerON+0xce>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	613b      	str	r3, [r7, #16]

    count++;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d802      	bhi.n	8007d46 <SD_PowerON+0xe6>
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0cc      	beq.n	8007ce0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d902      	bls.n	8007d56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d54:	e00c      	b.n	8007d70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	645a      	str	r2, [r3, #68]	@ 0x44
 8007d66:	e002      	b.n	8007d6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	c1100000 	.word	0xc1100000

08007d7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d90:	e018      	b.n	8007dc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f001 faea 	bl	8009378 <SDMMC_CmdSendStatus>
 8007da4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	e009      	b.n	8007dc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 f88c 	bl	8008ed4 <SDIO_GetResponse>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 f876 	bl	8008ed4 <SDIO_GetResponse>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007df2:	d102      	bne.n	8007dfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007df4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007df8:	e02f      	b.n	8007e5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007dfa:	f107 030c 	add.w	r3, r7, #12
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f879 	bl	8007ef8 <SD_FindSCR>
 8007e06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	e023      	b.n	8007e5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01c      	beq.n	8007e56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e24:	041b      	lsls	r3, r3, #16
 8007e26:	4619      	mov	r1, r3
 8007e28:	4610      	mov	r0, r2
 8007e2a:	f001 f9bf 	bl	80091ac <SDMMC_CmdAppCommand>
 8007e2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	e00f      	b.n	8007e5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2102      	movs	r1, #2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 f9f8 	bl	8009236 <SDMMC_CmdBusWidth>
 8007e46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	e003      	b.n	8007e5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e001      	b.n	8007e5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e56:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b086      	sub	sp, #24
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2100      	movs	r1, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 f82b 	bl	8008ed4 <SDIO_GetResponse>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e88:	d102      	bne.n	8007e90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e8e:	e02f      	b.n	8007ef0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e90:	f107 030c 	add.w	r3, r7, #12
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f82e 	bl	8007ef8 <SD_FindSCR>
 8007e9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	e023      	b.n	8007ef0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01c      	beq.n	8007eec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	f001 f974 	bl	80091ac <SDMMC_CmdAppCommand>
 8007ec4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	e00f      	b.n	8007ef0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 f9ad 	bl	8009236 <SDMMC_CmdBusWidth>
 8007edc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	e003      	b.n	8007ef0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e001      	b.n	8007ef0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007eec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ef8:	b590      	push	{r4, r7, lr}
 8007efa:	b08f      	sub	sp, #60	@ 0x3c
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f02:	f7fb f89f 	bl	8003044 <HAL_GetTick>
 8007f06:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60bb      	str	r3, [r7, #8]
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2108      	movs	r1, #8
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 f817 	bl	8008f52 <SDMMC_CmdBlockLength>
 8007f24:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	e0b9      	b.n	80080a4 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f001 f935 	bl	80091ac <SDMMC_CmdAppCommand>
 8007f42:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8007f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4c:	e0aa      	b.n	80080a4 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007f54:	2308      	movs	r3, #8
 8007f56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007f58:	2330      	movs	r3, #48	@ 0x30
 8007f5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f107 0210 	add.w	r2, r7, #16
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 ffc1 	bl	8008efa <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f97c 	bl	800927a <SDMMC_CmdSendSCR>
 8007f82:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d02a      	beq.n	8007fe0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	e08a      	b.n	80080a4 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00f      	beq.n	8007fbc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6819      	ldr	r1, [r3, #0]
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	f107 0208 	add.w	r2, r7, #8
 8007fa8:	18d4      	adds	r4, r2, r3
 8007faa:	4608      	mov	r0, r1
 8007fac:	f000 ff21 	bl	8008df2 <SDIO_ReadFIFO>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	6023      	str	r3, [r4, #0]
      index++;
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fba:	e006      	b.n	8007fca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d012      	beq.n	8007ff0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007fca:	f7fb f83b 	bl	8003044 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd8:	d102      	bne.n	8007fe0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007fda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fde:	e061      	b.n	80080a4 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0cf      	beq.n	8007f8e <SD_FindSCR+0x96>
 8007fee:	e000      	b.n	8007ff2 <SD_FindSCR+0xfa>
      break;
 8007ff0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff8:	f003 0308 	and.w	r3, r3, #8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d106      	bne.n	800800e <SD_FindSCR+0x116>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2208      	movs	r2, #8
 8008014:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008016:	2308      	movs	r3, #8
 8008018:	e044      	b.n	80080a4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d005      	beq.n	8008034 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2202      	movs	r2, #2
 800802e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008030:	2302      	movs	r3, #2
 8008032:	e037      	b.n	80080a4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2220      	movs	r2, #32
 8008048:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800804a:	2320      	movs	r3, #32
 800804c:	e02a      	b.n	80080a4 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008056:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	061a      	lsls	r2, r3, #24
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	021b      	lsls	r3, r3, #8
 8008060:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008064:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800806e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	0e1b      	lsrs	r3, r3, #24
 8008074:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	601a      	str	r2, [r3, #0]
    scr++;
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	3304      	adds	r3, #4
 800807e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	061a      	lsls	r2, r3, #24
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800808c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	0a1b      	lsrs	r3, r3, #8
 8008092:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008096:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	0e1b      	lsrs	r3, r3, #24
 800809c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	373c      	adds	r7, #60	@ 0x3c
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd90      	pop	{r4, r7, pc}

080080ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d03f      	beq.n	8008146 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e033      	b.n	8008134 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fe8e 	bl	8008df2 <SDIO_ReadFIFO>
 80080d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	0a1b      	lsrs	r3, r3, #8
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	3b01      	subs	r3, #1
 8008100:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	0c1b      	lsrs	r3, r3, #16
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3301      	adds	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	3b01      	subs	r3, #1
 8008116:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	0e1b      	lsrs	r3, r3, #24
 800811c:	b2da      	uxtb	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	3b01      	subs	r3, #1
 800812c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	3301      	adds	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b07      	cmp	r3, #7
 8008138:	d9c8      	bls.n	80080cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008146:	bf00      	nop
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b086      	sub	sp, #24
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008160:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d043      	beq.n	80081f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e037      	b.n	80081de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3301      	adds	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	3b01      	subs	r3, #1
 800817e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	021a      	lsls	r2, r3, #8
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	4313      	orrs	r3, r2
 800818a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	3b01      	subs	r3, #1
 8008196:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	041a      	lsls	r2, r3, #16
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	061a      	lsls	r2, r3, #24
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3301      	adds	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fe1a 	bl	8008e0c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	3301      	adds	r3, #1
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b07      	cmp	r3, #7
 80081e2:	d9c4      	bls.n	800816e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80081f0:	bf00      	nop
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e07b      	b.n	8008302 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820e:	2b00      	cmp	r3, #0
 8008210:	d108      	bne.n	8008224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800821a:	d009      	beq.n	8008230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	61da      	str	r2, [r3, #28]
 8008222:	e005      	b.n	8008230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7fa fc7c 	bl	8002b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008266:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008278:	431a      	orrs	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	431a      	orrs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b4:	ea42 0103 	orr.w	r1, r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	0c1b      	lsrs	r3, r3, #16
 80082ce:	f003 0104 	and.w	r1, r3, #4
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	f003 0210 	and.w	r2, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b088      	sub	sp, #32
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	603b      	str	r3, [r7, #0]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800831a:	f7fa fe93 	bl	8003044 <HAL_GetTick>
 800831e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b01      	cmp	r3, #1
 800832e:	d001      	beq.n	8008334 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008330:	2302      	movs	r3, #2
 8008332:	e12a      	b.n	800858a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <HAL_SPI_Transmit+0x36>
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e122      	b.n	800858a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_SPI_Transmit+0x48>
 800834e:	2302      	movs	r3, #2
 8008350:	e11b      	b.n	800858a <HAL_SPI_Transmit+0x280>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2203      	movs	r2, #3
 800835e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083a0:	d10f      	bne.n	80083c2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083cc:	2b40      	cmp	r3, #64	@ 0x40
 80083ce:	d007      	beq.n	80083e0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083e8:	d152      	bne.n	8008490 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_SPI_Transmit+0xee>
 80083f2:	8b7b      	ldrh	r3, [r7, #26]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d145      	bne.n	8008484 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fc:	881a      	ldrh	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008408:	1c9a      	adds	r2, r3, #2
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800841c:	e032      	b.n	8008484 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b02      	cmp	r3, #2
 800842a:	d112      	bne.n	8008452 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008430:	881a      	ldrh	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843c:	1c9a      	adds	r2, r3, #2
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b01      	subs	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008450:	e018      	b.n	8008484 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008452:	f7fa fdf7 	bl	8003044 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	429a      	cmp	r2, r3
 8008460:	d803      	bhi.n	800846a <HAL_SPI_Transmit+0x160>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d102      	bne.n	8008470 <HAL_SPI_Transmit+0x166>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d109      	bne.n	8008484 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e082      	b.n	800858a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1c7      	bne.n	800841e <HAL_SPI_Transmit+0x114>
 800848e:	e053      	b.n	8008538 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <HAL_SPI_Transmit+0x194>
 8008498:	8b7b      	ldrh	r3, [r7, #26]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d147      	bne.n	800852e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	330c      	adds	r3, #12
 80084a8:	7812      	ldrb	r2, [r2, #0]
 80084aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80084c4:	e033      	b.n	800852e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d113      	bne.n	80084fc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	330c      	adds	r3, #12
 80084de:	7812      	ldrb	r2, [r2, #0]
 80084e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80084fa:	e018      	b.n	800852e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084fc:	f7fa fda2 	bl	8003044 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d803      	bhi.n	8008514 <HAL_SPI_Transmit+0x20a>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008512:	d102      	bne.n	800851a <HAL_SPI_Transmit+0x210>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d109      	bne.n	800852e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e02d      	b.n	800858a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1c6      	bne.n	80084c6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 fbd9 	bl	8008cf4 <SPI_EndRxTxTransaction>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008588:	2300      	movs	r3, #0
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3720      	adds	r7, #32
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b088      	sub	sp, #32
 8008596:	af02      	add	r7, sp, #8
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d001      	beq.n	80085b2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80085ae:	2302      	movs	r3, #2
 80085b0:	e104      	b.n	80087bc <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_SPI_Receive+0x2c>
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e0fc      	b.n	80087bc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085ca:	d112      	bne.n	80085f2 <HAL_SPI_Receive+0x60>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10e      	bne.n	80085f2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2204      	movs	r2, #4
 80085d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80085dc:	88fa      	ldrh	r2, [r7, #6]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f8eb 	bl	80087c4 <HAL_SPI_TransmitReceive>
 80085ee:	4603      	mov	r3, r0
 80085f0:	e0e4      	b.n	80087bc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085f2:	f7fa fd27 	bl	8003044 <HAL_GetTick>
 80085f6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <HAL_SPI_Receive+0x74>
 8008602:	2302      	movs	r3, #2
 8008604:	e0da      	b.n	80087bc <HAL_SPI_Receive+0x22a>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2204      	movs	r2, #4
 8008612:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	88fa      	ldrh	r2, [r7, #6]
 8008626:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008654:	d10f      	bne.n	8008676 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008674:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008680:	2b40      	cmp	r3, #64	@ 0x40
 8008682:	d007      	beq.n	8008694 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008692:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d170      	bne.n	800877e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800869c:	e035      	b.n	800870a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d115      	bne.n	80086d8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f103 020c 	add.w	r2, r3, #12
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b8:	7812      	ldrb	r2, [r2, #0]
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086d6:	e018      	b.n	800870a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086d8:	f7fa fcb4 	bl	8003044 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d803      	bhi.n	80086f0 <HAL_SPI_Receive+0x15e>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d102      	bne.n	80086f6 <HAL_SPI_Receive+0x164>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e058      	b.n	80087bc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800870e:	b29b      	uxth	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1c4      	bne.n	800869e <HAL_SPI_Receive+0x10c>
 8008714:	e038      	b.n	8008788 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d113      	bne.n	800874c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	b292      	uxth	r2, r2
 8008730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008736:	1c9a      	adds	r2, r3, #2
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800874a:	e018      	b.n	800877e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800874c:	f7fa fc7a 	bl	8003044 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d803      	bhi.n	8008764 <HAL_SPI_Receive+0x1d2>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008762:	d102      	bne.n	800876a <HAL_SPI_Receive+0x1d8>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e01e      	b.n	80087bc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1c6      	bne.n	8008716 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 fa4b 	bl	8008c28 <SPI_EndRxTransaction>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2220      	movs	r2, #32
 800879c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80087ba:	2300      	movs	r3, #0
  }
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08a      	sub	sp, #40	@ 0x28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80087d2:	2301      	movs	r3, #1
 80087d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087d6:	f7fa fc35 	bl	8003044 <HAL_GetTick>
 80087da:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087e2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80087ea:	887b      	ldrh	r3, [r7, #2]
 80087ec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087ee:	7ffb      	ldrb	r3, [r7, #31]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d00c      	beq.n	800880e <HAL_SPI_TransmitReceive+0x4a>
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087fa:	d106      	bne.n	800880a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <HAL_SPI_TransmitReceive+0x46>
 8008804:	7ffb      	ldrb	r3, [r7, #31]
 8008806:	2b04      	cmp	r3, #4
 8008808:	d001      	beq.n	800880e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800880a:	2302      	movs	r3, #2
 800880c:	e17f      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <HAL_SPI_TransmitReceive+0x5c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_SPI_TransmitReceive+0x5c>
 800881a:	887b      	ldrh	r3, [r7, #2]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e174      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_SPI_TransmitReceive+0x6e>
 800882e:	2302      	movs	r3, #2
 8008830:	e16d      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x34a>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b04      	cmp	r3, #4
 8008844:	d003      	beq.n	800884e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2205      	movs	r2, #5
 800884a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	887a      	ldrh	r2, [r7, #2]
 800885e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	887a      	ldrh	r2, [r7, #2]
 8008864:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	887a      	ldrh	r2, [r7, #2]
 8008870:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	887a      	ldrh	r2, [r7, #2]
 8008876:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800888e:	2b40      	cmp	r3, #64	@ 0x40
 8008890:	d007      	beq.n	80088a2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088aa:	d17e      	bne.n	80089aa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <HAL_SPI_TransmitReceive+0xf6>
 80088b4:	8afb      	ldrh	r3, [r7, #22]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d16c      	bne.n	8008994 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088be:	881a      	ldrh	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ca:	1c9a      	adds	r2, r3, #2
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	3b01      	subs	r3, #1
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088de:	e059      	b.n	8008994 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d11b      	bne.n	8008926 <HAL_SPI_TransmitReceive+0x162>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d016      	beq.n	8008926 <HAL_SPI_TransmitReceive+0x162>
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d113      	bne.n	8008926 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008902:	881a      	ldrh	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890e:	1c9a      	adds	r2, r3, #2
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b01      	cmp	r3, #1
 8008932:	d119      	bne.n	8008968 <HAL_SPI_TransmitReceive+0x1a4>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d014      	beq.n	8008968 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008948:	b292      	uxth	r2, r2
 800894a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008950:	1c9a      	adds	r2, r3, #2
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800895a:	b29b      	uxth	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008964:	2301      	movs	r3, #1
 8008966:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008968:	f7fa fb6c 	bl	8003044 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008974:	429a      	cmp	r2, r3
 8008976:	d80d      	bhi.n	8008994 <HAL_SPI_TransmitReceive+0x1d0>
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897e:	d009      	beq.n	8008994 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e0bc      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1a0      	bne.n	80088e0 <HAL_SPI_TransmitReceive+0x11c>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d19b      	bne.n	80088e0 <HAL_SPI_TransmitReceive+0x11c>
 80089a8:	e082      	b.n	8008ab0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <HAL_SPI_TransmitReceive+0x1f4>
 80089b2:	8afb      	ldrh	r3, [r7, #22]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d171      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	330c      	adds	r3, #12
 80089c2:	7812      	ldrb	r2, [r2, #0]
 80089c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089de:	e05d      	b.n	8008a9c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d11c      	bne.n	8008a28 <HAL_SPI_TransmitReceive+0x264>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d017      	beq.n	8008a28 <HAL_SPI_TransmitReceive+0x264>
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d114      	bne.n	8008a28 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	330c      	adds	r3, #12
 8008a08:	7812      	ldrb	r2, [r2, #0]
 8008a0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d119      	bne.n	8008a6a <HAL_SPI_TransmitReceive+0x2a6>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d014      	beq.n	8008a6a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a66:	2301      	movs	r3, #1
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a6a:	f7fa faeb 	bl	8003044 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d803      	bhi.n	8008a82 <HAL_SPI_TransmitReceive+0x2be>
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d102      	bne.n	8008a88 <HAL_SPI_TransmitReceive+0x2c4>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d109      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e038      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d19c      	bne.n	80089e0 <HAL_SPI_TransmitReceive+0x21c>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d197      	bne.n	80089e0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ab0:	6a3a      	ldr	r2, [r7, #32]
 8008ab2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f91d 	bl	8008cf4 <SPI_EndRxTxTransaction>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d008      	beq.n	8008ad2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e01d      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10a      	bne.n	8008af0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ada:	2300      	movs	r3, #0
 8008adc:	613b      	str	r3, [r7, #16]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	613b      	str	r3, [r7, #16]
 8008aee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e000      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
  }
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3728      	adds	r7, #40	@ 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
	...

08008b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	4613      	mov	r3, r2
 8008b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b28:	f7fa fa8c 	bl	8003044 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b38:	f7fa fa84 	bl	8003044 <HAL_GetTick>
 8008b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b3e:	4b39      	ldr	r3, [pc, #228]	@ (8008c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	015b      	lsls	r3, r3, #5
 8008b44:	0d1b      	lsrs	r3, r3, #20
 8008b46:	69fa      	ldr	r2, [r7, #28]
 8008b48:	fb02 f303 	mul.w	r3, r2, r3
 8008b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b4e:	e055      	b.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d051      	beq.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b58:	f7fa fa74 	bl	8003044 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d902      	bls.n	8008b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d13d      	bne.n	8008bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b86:	d111      	bne.n	8008bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b90:	d004      	beq.n	8008b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b9a:	d107      	bne.n	8008bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bb4:	d10f      	bne.n	8008bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e018      	b.n	8008c1c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	e002      	b.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	4013      	ands	r3, r2
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2301      	moveq	r3, #1
 8008c0e:	2300      	movne	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	461a      	mov	r2, r3
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d19a      	bne.n	8008b50 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20000004 	.word	0x20000004

08008c28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c3c:	d111      	bne.n	8008c62 <SPI_EndRxTransaction+0x3a>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c46:	d004      	beq.n	8008c52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c50:	d107      	bne.n	8008c62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c6a:	d12a      	bne.n	8008cc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c74:	d012      	beq.n	8008c9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2180      	movs	r1, #128	@ 0x80
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff ff49 	bl	8008b18 <SPI_WaitFlagStateUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d02d      	beq.n	8008ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c90:	f043 0220 	orr.w	r2, r3, #32
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e026      	b.n	8008cea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff ff36 	bl	8008b18 <SPI_WaitFlagStateUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d01a      	beq.n	8008ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb6:	f043 0220 	orr.w	r2, r3, #32
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e013      	b.n	8008cea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2101      	movs	r1, #1
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff ff23 	bl	8008b18 <SPI_WaitFlagStateUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d007      	beq.n	8008ce8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cdc:	f043 0220 	orr.w	r2, r3, #32
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e000      	b.n	8008cea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2201      	movs	r2, #1
 8008d08:	2102      	movs	r1, #2
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff ff04 	bl	8008b18 <SPI_WaitFlagStateUntilTimeout>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d007      	beq.n	8008d26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1a:	f043 0220 	orr.w	r2, r3, #32
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e032      	b.n	8008d8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d26:	4b1b      	ldr	r3, [pc, #108]	@ (8008d94 <SPI_EndRxTxTransaction+0xa0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008d98 <SPI_EndRxTxTransaction+0xa4>)
 8008d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d30:	0d5b      	lsrs	r3, r3, #21
 8008d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
 8008d3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d44:	d112      	bne.n	8008d6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2180      	movs	r1, #128	@ 0x80
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fee1 	bl	8008b18 <SPI_WaitFlagStateUntilTimeout>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d016      	beq.n	8008d8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d60:	f043 0220 	orr.w	r2, r3, #32
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e00f      	b.n	8008d8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d82:	2b80      	cmp	r3, #128	@ 0x80
 8008d84:	d0f2      	beq.n	8008d6c <SPI_EndRxTxTransaction+0x78>
 8008d86:	e000      	b.n	8008d8a <SPI_EndRxTxTransaction+0x96>
        break;
 8008d88:	bf00      	nop
  }

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20000004 	.word	0x20000004
 8008d98:	165e9f81 	.word	0x165e9f81

08008d9c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	f107 001c 	add.w	r0, r7, #28
 8008daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008db2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008db4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008db6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008dba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008dbe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008dc2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008dc6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008dd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	b004      	add	sp, #16
 8008df0:	4770      	bx	lr

08008df2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2203      	movs	r2, #3
 8008e3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0303 	and.w	r3, r3, #3
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e84:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008e8a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008e90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008ea0:	f023 030f 	bic.w	r3, r3, #15
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	b2db      	uxtb	r3, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3314      	adds	r3, #20
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
}  
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f20:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f26:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f38:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0

}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b088      	sub	sp, #32
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f60:	2310      	movs	r3, #16
 8008f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f64:	2340      	movs	r3, #64	@ 0x40
 8008f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff ff74 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f82:	2110      	movs	r1, #16
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fa19 	bl	80093bc <SDMMC_GetCmdResp1>
 8008f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3720      	adds	r7, #32
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b088      	sub	sp, #32
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008fa4:	2311      	movs	r3, #17
 8008fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fa8:	2340      	movs	r3, #64	@ 0x40
 8008faa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fb6:	f107 0308 	add.w	r3, r7, #8
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ff52 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc6:	2111      	movs	r1, #17
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f9f7 	bl	80093bc <SDMMC_GetCmdResp1>
 8008fce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008fe8:	2312      	movs	r3, #18
 8008fea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fec:	2340      	movs	r3, #64	@ 0x40
 8008fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ff8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff ff30 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800900a:	2112      	movs	r1, #18
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f9d5 	bl	80093bc <SDMMC_GetCmdResp1>
 8009012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009014:	69fb      	ldr	r3, [r7, #28]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3720      	adds	r7, #32
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b088      	sub	sp, #32
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800902c:	2318      	movs	r3, #24
 800902e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009030:	2340      	movs	r3, #64	@ 0x40
 8009032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009034:	2300      	movs	r3, #0
 8009036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800903c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ff0e 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800904a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800904e:	2118      	movs	r1, #24
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f9b3 	bl	80093bc <SDMMC_GetCmdResp1>
 8009056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009058:	69fb      	ldr	r3, [r7, #28]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b088      	sub	sp, #32
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009070:	2319      	movs	r3, #25
 8009072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009074:	2340      	movs	r3, #64	@ 0x40
 8009076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800907c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff feec 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800908e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009092:	2119      	movs	r1, #25
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f991 	bl	80093bc <SDMMC_GetCmdResp1>
 800909a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800909c:	69fb      	ldr	r3, [r7, #28]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80090b4:	230c      	movs	r3, #12
 80090b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090b8:	2340      	movs	r3, #64	@ 0x40
 80090ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090c6:	f107 0308 	add.w	r3, r7, #8
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff feca 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80090d2:	4a05      	ldr	r2, [pc, #20]	@ (80090e8 <SDMMC_CmdStopTransfer+0x40>)
 80090d4:	210c      	movs	r1, #12
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f970 	bl	80093bc <SDMMC_GetCmdResp1>
 80090dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090de:	69fb      	ldr	r3, [r7, #28]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	05f5e100 	.word	0x05f5e100

080090ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08a      	sub	sp, #40	@ 0x28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80090fc:	2307      	movs	r3, #7
 80090fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009100:	2340      	movs	r3, #64	@ 0x40
 8009102:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009104:	2300      	movs	r3, #0
 8009106:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800910c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800910e:	f107 0310 	add.w	r3, r7, #16
 8009112:	4619      	mov	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff fea6 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800911a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800911e:	2107      	movs	r1, #7
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f94b 	bl	80093bc <SDMMC_GetCmdResp1>
 8009126:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800912a:	4618      	mov	r0, r3
 800912c:	3728      	adds	r7, #40	@ 0x28
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b088      	sub	sp, #32
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009142:	2300      	movs	r3, #0
 8009144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800914a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800914e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009150:	f107 0308 	add.w	r3, r7, #8
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff fe85 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fb65 	bl	800982c <SDMMC_GetCmdError>
 8009162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009164:	69fb      	ldr	r3, [r7, #28]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b088      	sub	sp, #32
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009176:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800917a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800917c:	2308      	movs	r3, #8
 800917e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009180:	2340      	movs	r3, #64	@ 0x40
 8009182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009188:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800918c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff fe66 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 faf8 	bl	8009790 <SDMMC_GetCmdResp7>
 80091a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a2:	69fb      	ldr	r3, [r7, #28]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3720      	adds	r7, #32
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b088      	sub	sp, #32
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80091ba:	2337      	movs	r3, #55	@ 0x37
 80091bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091be:	2340      	movs	r3, #64	@ 0x40
 80091c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091cc:	f107 0308 	add.w	r3, r7, #8
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff fe47 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80091d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091dc:	2137      	movs	r1, #55	@ 0x37
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f8ec 	bl	80093bc <SDMMC_GetCmdResp1>
 80091e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091e6:	69fb      	ldr	r3, [r7, #28]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3720      	adds	r7, #32
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b088      	sub	sp, #32
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009200:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009206:	2329      	movs	r3, #41	@ 0x29
 8009208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800920a:	2340      	movs	r3, #64	@ 0x40
 800920c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fe21 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9ff 	bl	8009628 <SDMMC_GetCmdResp3>
 800922a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b088      	sub	sp, #32
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009244:	2306      	movs	r3, #6
 8009246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009248:	2340      	movs	r3, #64	@ 0x40
 800924a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009254:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009256:	f107 0308 	add.w	r3, r7, #8
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fe02 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009266:	2106      	movs	r1, #6
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8a7 	bl	80093bc <SDMMC_GetCmdResp1>
 800926e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009270:	69fb      	ldr	r3, [r7, #28]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b088      	sub	sp, #32
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009286:	2333      	movs	r3, #51	@ 0x33
 8009288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800928a:	2340      	movs	r3, #64	@ 0x40
 800928c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009298:	f107 0308 	add.w	r3, r7, #8
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff fde1 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80092a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092a8:	2133      	movs	r1, #51	@ 0x33
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f886 	bl	80093bc <SDMMC_GetCmdResp1>
 80092b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092b2:	69fb      	ldr	r3, [r7, #28]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3720      	adds	r7, #32
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80092c8:	2302      	movs	r3, #2
 80092ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80092cc:	23c0      	movs	r3, #192	@ 0xc0
 80092ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092da:	f107 0308 	add.w	r3, r7, #8
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fdc0 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f956 	bl	8009598 <SDMMC_GetCmdResp2>
 80092ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ee:	69fb      	ldr	r3, [r7, #28]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3720      	adds	r7, #32
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009306:	2309      	movs	r3, #9
 8009308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800930a:	23c0      	movs	r3, #192	@ 0xc0
 800930c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800930e:	2300      	movs	r3, #0
 8009310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009316:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009318:	f107 0308 	add.w	r3, r7, #8
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff fda1 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f937 	bl	8009598 <SDMMC_GetCmdResp2>
 800932a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800932c:	69fb      	ldr	r3, [r7, #28]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b088      	sub	sp, #32
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009344:	2303      	movs	r3, #3
 8009346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009348:	2340      	movs	r3, #64	@ 0x40
 800934a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff fd82 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	2103      	movs	r1, #3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f99c 	bl	80096a4 <SDMMC_GetCmdResp6>
 800936c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800936e:	69fb      	ldr	r3, [r7, #28]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3720      	adds	r7, #32
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009386:	230d      	movs	r3, #13
 8009388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800938a:	2340      	movs	r3, #64	@ 0x40
 800938c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009398:	f107 0308 	add.w	r3, r7, #8
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff fd61 	bl	8008e66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80093a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a8:	210d      	movs	r1, #13
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f806 	bl	80093bc <SDMMC_GetCmdResp1>
 80093b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093b2:	69fb      	ldr	r3, [r7, #28]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	460b      	mov	r3, r1
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093ca:	4b70      	ldr	r3, [pc, #448]	@ (800958c <SDMMC_GetCmdResp1+0x1d0>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a70      	ldr	r2, [pc, #448]	@ (8009590 <SDMMC_GetCmdResp1+0x1d4>)
 80093d0:	fba2 2303 	umull	r2, r3, r2, r3
 80093d4:	0a5a      	lsrs	r2, r3, #9
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	fb02 f303 	mul.w	r3, r2, r3
 80093dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	1e5a      	subs	r2, r3, #1
 80093e2:	61fa      	str	r2, [r7, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093ec:	e0c9      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0ef      	beq.n	80093de <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1ea      	bne.n	80093de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2204      	movs	r2, #4
 8009418:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800941a:	2304      	movs	r3, #4
 800941c:	e0b1      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d004      	beq.n	8009434 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009430:	2301      	movs	r3, #1
 8009432:	e0a6      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	22c5      	movs	r2, #197	@ 0xc5
 8009438:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fd3d 	bl	8008eba <SDIO_GetCommandResponse>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	4293      	cmp	r3, r2
 8009448:	d001      	beq.n	800944e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800944a:	2301      	movs	r3, #1
 800944c:	e099      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800944e:	2100      	movs	r1, #0
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff fd3f 	bl	8008ed4 <SDIO_GetResponse>
 8009456:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4b4e      	ldr	r3, [pc, #312]	@ (8009594 <SDMMC_GetCmdResp1+0x1d8>)
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009462:	2300      	movs	r3, #0
 8009464:	e08d      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	da02      	bge.n	8009472 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800946c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009470:	e087      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800947c:	2340      	movs	r3, #64	@ 0x40
 800947e:	e080      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800948a:	2380      	movs	r3, #128	@ 0x80
 800948c:	e079      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009498:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800949c:	e071      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80094a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094ac:	e069      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80094b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094bc:	e061      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80094c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094cc:	e059      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80094d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094dc:	e051      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80094e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094ec:	e049      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80094f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80094fc:	e041      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800950c:	e039      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009518:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800951c:	e031      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009528:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800952c:	e029      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800953c:	e021      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800954c:	e019      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009558:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800955c:	e011      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009568:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800956c:	e009      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009578:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800957c:	e001      	b.n	8009582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800957e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009582:	4618      	mov	r0, r3
 8009584:	3720      	adds	r7, #32
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000004 	.word	0x20000004
 8009590:	10624dd3 	.word	0x10624dd3
 8009594:	fdffe008 	.word	0xfdffe008

08009598 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095a0:	4b1f      	ldr	r3, [pc, #124]	@ (8009620 <SDMMC_GetCmdResp2+0x88>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009624 <SDMMC_GetCmdResp2+0x8c>)
 80095a6:	fba2 2303 	umull	r2, r3, r2, r3
 80095aa:	0a5b      	lsrs	r3, r3, #9
 80095ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095b0:	fb02 f303 	mul.w	r3, r2, r3
 80095b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1e5a      	subs	r2, r3, #1
 80095ba:	60fa      	str	r2, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095c4:	e026      	b.n	8009614 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0ef      	beq.n	80095b6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1ea      	bne.n	80095b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2204      	movs	r2, #4
 80095f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095f2:	2304      	movs	r3, #4
 80095f4:	e00e      	b.n	8009614 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009608:	2301      	movs	r3, #1
 800960a:	e003      	b.n	8009614 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	22c5      	movs	r2, #197	@ 0xc5
 8009610:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	20000004 	.word	0x20000004
 8009624:	10624dd3 	.word	0x10624dd3

08009628 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009630:	4b1a      	ldr	r3, [pc, #104]	@ (800969c <SDMMC_GetCmdResp3+0x74>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a1a      	ldr	r2, [pc, #104]	@ (80096a0 <SDMMC_GetCmdResp3+0x78>)
 8009636:	fba2 2303 	umull	r2, r3, r2, r3
 800963a:	0a5b      	lsrs	r3, r3, #9
 800963c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009640:	fb02 f303 	mul.w	r3, r2, r3
 8009644:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	1e5a      	subs	r2, r3, #1
 800964a:	60fa      	str	r2, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009650:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009654:	e01b      	b.n	800968e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800965a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0ef      	beq.n	8009646 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1ea      	bne.n	8009646 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2204      	movs	r2, #4
 8009680:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009682:	2304      	movs	r3, #4
 8009684:	e003      	b.n	800968e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	22c5      	movs	r2, #197	@ 0xc5
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000004 	.word	0x20000004
 80096a0:	10624dd3 	.word	0x10624dd3

080096a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	460b      	mov	r3, r1
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096b2:	4b35      	ldr	r3, [pc, #212]	@ (8009788 <SDMMC_GetCmdResp6+0xe4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a35      	ldr	r2, [pc, #212]	@ (800978c <SDMMC_GetCmdResp6+0xe8>)
 80096b8:	fba2 2303 	umull	r2, r3, r2, r3
 80096bc:	0a5b      	lsrs	r3, r3, #9
 80096be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
 80096c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	1e5a      	subs	r2, r3, #1
 80096cc:	61fa      	str	r2, [r7, #28]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d102      	bne.n	80096d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80096d6:	e052      	b.n	800977e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d0ef      	beq.n	80096c8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1ea      	bne.n	80096c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d004      	beq.n	8009708 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2204      	movs	r2, #4
 8009702:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009704:	2304      	movs	r3, #4
 8009706:	e03a      	b.n	800977e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800971a:	2301      	movs	r3, #1
 800971c:	e02f      	b.n	800977e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7ff fbcb 	bl	8008eba <SDIO_GetCommandResponse>
 8009724:	4603      	mov	r3, r0
 8009726:	461a      	mov	r2, r3
 8009728:	7afb      	ldrb	r3, [r7, #11]
 800972a:	4293      	cmp	r3, r2
 800972c:	d001      	beq.n	8009732 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800972e:	2301      	movs	r3, #1
 8009730:	e025      	b.n	800977e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	22c5      	movs	r2, #197	@ 0xc5
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009738:	2100      	movs	r1, #0
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7ff fbca 	bl	8008ed4 <SDIO_GetResponse>
 8009740:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d106      	bne.n	800975a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	0c1b      	lsrs	r3, r3, #16
 8009750:	b29a      	uxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009756:	2300      	movs	r3, #0
 8009758:	e011      	b.n	800977e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009768:	e009      	b.n	800977e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009778:	e001      	b.n	800977e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800977a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000004 	.word	0x20000004
 800978c:	10624dd3 	.word	0x10624dd3

08009790 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009798:	4b22      	ldr	r3, [pc, #136]	@ (8009824 <SDMMC_GetCmdResp7+0x94>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a22      	ldr	r2, [pc, #136]	@ (8009828 <SDMMC_GetCmdResp7+0x98>)
 800979e:	fba2 2303 	umull	r2, r3, r2, r3
 80097a2:	0a5b      	lsrs	r3, r3, #9
 80097a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097a8:	fb02 f303 	mul.w	r3, r2, r3
 80097ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	1e5a      	subs	r2, r3, #1
 80097b2:	60fa      	str	r2, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097bc:	e02c      	b.n	8009818 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0ef      	beq.n	80097ae <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1ea      	bne.n	80097ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d004      	beq.n	80097ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2204      	movs	r2, #4
 80097e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097ea:	2304      	movs	r3, #4
 80097ec:	e014      	b.n	8009818 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009800:	2301      	movs	r3, #1
 8009802:	e009      	b.n	8009818 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2240      	movs	r2, #64	@ 0x40
 8009814:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009816:	2300      	movs	r3, #0
  
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20000004 	.word	0x20000004
 8009828:	10624dd3 	.word	0x10624dd3

0800982c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009834:	4b11      	ldr	r3, [pc, #68]	@ (800987c <SDMMC_GetCmdError+0x50>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a11      	ldr	r2, [pc, #68]	@ (8009880 <SDMMC_GetCmdError+0x54>)
 800983a:	fba2 2303 	umull	r2, r3, r2, r3
 800983e:	0a5b      	lsrs	r3, r3, #9
 8009840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009844:	fb02 f303 	mul.w	r3, r2, r3
 8009848:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	1e5a      	subs	r2, r3, #1
 800984e:	60fa      	str	r2, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009854:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009858:	e009      	b.n	800986e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800985e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f1      	beq.n	800984a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	22c5      	movs	r2, #197	@ 0xc5
 800986a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20000004 	.word	0x20000004
 8009880:	10624dd3 	.word	0x10624dd3

08009884 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009884:	b084      	sub	sp, #16
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	f107 001c 	add.w	r0, r7, #28
 8009892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009896:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800989a:	2b01      	cmp	r3, #1
 800989c:	d123      	bne.n	80098e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80098b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d105      	bne.n	80098da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fae8 	bl	800aeb0 <USB_CoreReset>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
 80098e4:	e01b      	b.n	800991e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f001 fadc 	bl	800aeb0 <USB_CoreReset>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009908:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009910:	e005      	b.n	800991e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009916:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800991e:	7fbb      	ldrb	r3, [r7, #30]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d10b      	bne.n	800993c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f043 0206 	orr.w	r2, r3, #6
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f043 0220 	orr.w	r2, r3, #32
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009948:	b004      	add	sp, #16
 800994a:	4770      	bx	lr

0800994c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800994c:	b480      	push	{r7}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	4613      	mov	r3, r2
 8009958:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d165      	bne.n	8009a2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4a41      	ldr	r2, [pc, #260]	@ (8009a68 <USB_SetTurnaroundTime+0x11c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d906      	bls.n	8009976 <USB_SetTurnaroundTime+0x2a>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4a40      	ldr	r2, [pc, #256]	@ (8009a6c <USB_SetTurnaroundTime+0x120>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d202      	bcs.n	8009976 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009970:	230f      	movs	r3, #15
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e062      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4a3c      	ldr	r2, [pc, #240]	@ (8009a6c <USB_SetTurnaroundTime+0x120>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d306      	bcc.n	800998c <USB_SetTurnaroundTime+0x40>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4a3b      	ldr	r2, [pc, #236]	@ (8009a70 <USB_SetTurnaroundTime+0x124>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d202      	bcs.n	800998c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009986:	230e      	movs	r3, #14
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e057      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	4a38      	ldr	r2, [pc, #224]	@ (8009a70 <USB_SetTurnaroundTime+0x124>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d306      	bcc.n	80099a2 <USB_SetTurnaroundTime+0x56>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4a37      	ldr	r2, [pc, #220]	@ (8009a74 <USB_SetTurnaroundTime+0x128>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d202      	bcs.n	80099a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800999c:	230d      	movs	r3, #13
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e04c      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	4a33      	ldr	r2, [pc, #204]	@ (8009a74 <USB_SetTurnaroundTime+0x128>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d306      	bcc.n	80099b8 <USB_SetTurnaroundTime+0x6c>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	4a32      	ldr	r2, [pc, #200]	@ (8009a78 <USB_SetTurnaroundTime+0x12c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d802      	bhi.n	80099b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099b2:	230c      	movs	r3, #12
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e041      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4a2f      	ldr	r2, [pc, #188]	@ (8009a78 <USB_SetTurnaroundTime+0x12c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d906      	bls.n	80099ce <USB_SetTurnaroundTime+0x82>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4a2e      	ldr	r2, [pc, #184]	@ (8009a7c <USB_SetTurnaroundTime+0x130>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d802      	bhi.n	80099ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099c8:	230b      	movs	r3, #11
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e036      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4a2a      	ldr	r2, [pc, #168]	@ (8009a7c <USB_SetTurnaroundTime+0x130>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d906      	bls.n	80099e4 <USB_SetTurnaroundTime+0x98>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	4a29      	ldr	r2, [pc, #164]	@ (8009a80 <USB_SetTurnaroundTime+0x134>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d802      	bhi.n	80099e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099de:	230a      	movs	r3, #10
 80099e0:	617b      	str	r3, [r7, #20]
 80099e2:	e02b      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4a26      	ldr	r2, [pc, #152]	@ (8009a80 <USB_SetTurnaroundTime+0x134>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d906      	bls.n	80099fa <USB_SetTurnaroundTime+0xae>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4a25      	ldr	r2, [pc, #148]	@ (8009a84 <USB_SetTurnaroundTime+0x138>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d202      	bcs.n	80099fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80099f4:	2309      	movs	r3, #9
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e020      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	4a21      	ldr	r2, [pc, #132]	@ (8009a84 <USB_SetTurnaroundTime+0x138>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d306      	bcc.n	8009a10 <USB_SetTurnaroundTime+0xc4>
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	4a20      	ldr	r2, [pc, #128]	@ (8009a88 <USB_SetTurnaroundTime+0x13c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d802      	bhi.n	8009a10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a0a:	2308      	movs	r3, #8
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e015      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4a1d      	ldr	r2, [pc, #116]	@ (8009a88 <USB_SetTurnaroundTime+0x13c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d906      	bls.n	8009a26 <USB_SetTurnaroundTime+0xda>
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009a8c <USB_SetTurnaroundTime+0x140>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d202      	bcs.n	8009a26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a20:	2307      	movs	r3, #7
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	e00a      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a26:	2306      	movs	r3, #6
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	e007      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a32:	2309      	movs	r3, #9
 8009a34:	617b      	str	r3, [r7, #20]
 8009a36:	e001      	b.n	8009a3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a38:	2309      	movs	r3, #9
 8009a3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	029b      	lsls	r3, r3, #10
 8009a50:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009a54:	431a      	orrs	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	00d8acbf 	.word	0x00d8acbf
 8009a6c:	00e4e1c0 	.word	0x00e4e1c0
 8009a70:	00f42400 	.word	0x00f42400
 8009a74:	01067380 	.word	0x01067380
 8009a78:	011a499f 	.word	0x011a499f
 8009a7c:	01312cff 	.word	0x01312cff
 8009a80:	014ca43f 	.word	0x014ca43f
 8009a84:	016e3600 	.word	0x016e3600
 8009a88:	01a6ab1f 	.word	0x01a6ab1f
 8009a8c:	01e84800 	.word	0x01e84800

08009a90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f043 0201 	orr.w	r2, r3, #1
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f023 0201 	bic.w	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d115      	bne.n	8009b22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b02:	200a      	movs	r0, #10
 8009b04:	f7f9 faaa 	bl	800305c <HAL_Delay>
      ms += 10U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	330a      	adds	r3, #10
 8009b0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 f93f 	bl	800ad92 <USB_GetMode>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d01e      	beq.n	8009b58 <USB_SetCurrentMode+0x84>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b1e:	d9f0      	bls.n	8009b02 <USB_SetCurrentMode+0x2e>
 8009b20:	e01a      	b.n	8009b58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d115      	bne.n	8009b54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b34:	200a      	movs	r0, #10
 8009b36:	f7f9 fa91 	bl	800305c <HAL_Delay>
      ms += 10U;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	330a      	adds	r3, #10
 8009b3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f926 	bl	800ad92 <USB_GetMode>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <USB_SetCurrentMode+0x84>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b50:	d9f0      	bls.n	8009b34 <USB_SetCurrentMode+0x60>
 8009b52:	e001      	b.n	8009b58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e005      	b.n	8009b64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8009b5c:	d101      	bne.n	8009b62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b86:	2300      	movs	r3, #0
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	e009      	b.n	8009ba0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	3340      	adds	r3, #64	@ 0x40
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	2200      	movs	r2, #0
 8009b98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	613b      	str	r3, [r7, #16]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	2b0e      	cmp	r3, #14
 8009ba4:	d9f2      	bls.n	8009b8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d11c      	bne.n	8009be8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bde:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009be6:	e00b      	b.n	8009c00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c06:	461a      	mov	r2, r3
 8009c08:	2300      	movs	r3, #0
 8009c0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d10d      	bne.n	8009c30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d104      	bne.n	8009c26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f968 	bl	8009ef4 <USB_SetDevSpeed>
 8009c24:	e008      	b.n	8009c38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009c26:	2101      	movs	r1, #1
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f963 	bl	8009ef4 <USB_SetDevSpeed>
 8009c2e:	e003      	b.n	8009c38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c30:	2103      	movs	r1, #3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f95e 	bl	8009ef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c38:	2110      	movs	r1, #16
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f8fa 	bl	8009e34 <USB_FlushTxFifo>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f924 	bl	8009e98 <USB_FlushRxFifo>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c60:	461a      	mov	r2, r3
 8009c62:	2300      	movs	r3, #0
 8009c64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c78:	461a      	mov	r2, r3
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c7e:	2300      	movs	r3, #0
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	e043      	b.n	8009d0c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c9a:	d118      	bne.n	8009cce <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	e013      	b.n	8009ce0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	e008      	b.n	8009ce0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cda:	461a      	mov	r2, r3
 8009cdc:	2300      	movs	r3, #0
 8009cde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cec:	461a      	mov	r2, r3
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d10:	461a      	mov	r2, r3
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d3b5      	bcc.n	8009c84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	613b      	str	r3, [r7, #16]
 8009d1c:	e043      	b.n	8009da6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d34:	d118      	bne.n	8009d68 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10a      	bne.n	8009d52 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	e013      	b.n	8009d7a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	015a      	lsls	r2, r3, #5
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	e008      	b.n	8009d7a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d74:	461a      	mov	r2, r3
 8009d76:	2300      	movs	r3, #0
 8009d78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	015a      	lsls	r2, r3, #5
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d86:	461a      	mov	r2, r3
 8009d88:	2300      	movs	r3, #0
 8009d8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d98:	461a      	mov	r2, r3
 8009d9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	3301      	adds	r3, #1
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009daa:	461a      	mov	r2, r3
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d3b5      	bcc.n	8009d1e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009dd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d105      	bne.n	8009de8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	f043 0210 	orr.w	r2, r3, #16
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699a      	ldr	r2, [r3, #24]
 8009dec:	4b10      	ldr	r3, [pc, #64]	@ (8009e30 <USB_DevInit+0x2c4>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009df4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d005      	beq.n	8009e08 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	f043 0208 	orr.w	r2, r3, #8
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d107      	bne.n	8009e20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e18:	f043 0304 	orr.w	r3, r3, #4
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e2c:	b004      	add	sp, #16
 8009e2e:	4770      	bx	lr
 8009e30:	803c3800 	.word	0x803c3800

08009e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3301      	adds	r3, #1
 8009e46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e4e:	d901      	bls.n	8009e54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e01b      	b.n	8009e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	daf2      	bge.n	8009e42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	019b      	lsls	r3, r3, #6
 8009e64:	f043 0220 	orr.w	r2, r3, #32
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e78:	d901      	bls.n	8009e7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e006      	b.n	8009e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	d0f0      	beq.n	8009e6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009eb0:	d901      	bls.n	8009eb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e018      	b.n	8009ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	daf2      	bge.n	8009ea4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2210      	movs	r2, #16
 8009ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ed4:	d901      	bls.n	8009eda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e006      	b.n	8009ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	f003 0310 	and.w	r3, r3, #16
 8009ee2:	2b10      	cmp	r3, #16
 8009ee4:	d0f0      	beq.n	8009ec8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	68f9      	ldr	r1, [r7, #12]
 8009f10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f14:	4313      	orrs	r3, r2
 8009f16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b087      	sub	sp, #28
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f003 0306 	and.w	r3, r3, #6
 8009f3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009f46:	2300      	movs	r3, #0
 8009f48:	75fb      	strb	r3, [r7, #23]
 8009f4a:	e00a      	b.n	8009f62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d002      	beq.n	8009f58 <USB_GetDevSpeed+0x32>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b06      	cmp	r3, #6
 8009f56:	d102      	bne.n	8009f5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	75fb      	strb	r3, [r7, #23]
 8009f5c:	e001      	b.n	8009f62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f5e:	230f      	movs	r3, #15
 8009f60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	371c      	adds	r7, #28
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d13a      	bne.n	800a002 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f92:	69da      	ldr	r2, [r3, #28]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f003 030f 	and.w	r3, r3, #15
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	68f9      	ldr	r1, [r7, #12]
 8009fa6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009faa:	4313      	orrs	r3, r2
 8009fac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d155      	bne.n	800a070 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	791b      	ldrb	r3, [r3, #4]
 8009fde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fe0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	059b      	lsls	r3, r3, #22
 8009fe6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	0151      	lsls	r1, r2, #5
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ffe:	6013      	str	r3, [r2, #0]
 800a000:	e036      	b.n	800a070 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a008:	69da      	ldr	r2, [r3, #28]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	2101      	movs	r1, #1
 800a014:	fa01 f303 	lsl.w	r3, r1, r3
 800a018:	041b      	lsls	r3, r3, #16
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a020:	4313      	orrs	r3, r2
 800a022:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d11a      	bne.n	800a070 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	791b      	ldrb	r3, [r3, #4]
 800a054:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a056:	430b      	orrs	r3, r1
 800a058:	4313      	orrs	r3, r2
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	0151      	lsls	r1, r2, #5
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	440a      	add	r2, r1
 800a062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a06a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a06e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
	...

0800a080 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d161      	bne.n	800a160 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0b2:	d11f      	bne.n	800a0f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	0151      	lsls	r1, r2, #5
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	440a      	add	r2, r1
 800a0ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	f003 030f 	and.w	r3, r3, #15
 800a104:	2101      	movs	r1, #1
 800a106:	fa01 f303 	lsl.w	r3, r1, r3
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	43db      	mvns	r3, r3
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a114:	4013      	ands	r3, r2
 800a116:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a11e:	69da      	ldr	r2, [r3, #28]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	f003 030f 	and.w	r3, r3, #15
 800a128:	2101      	movs	r1, #1
 800a12a:	fa01 f303 	lsl.w	r3, r1, r3
 800a12e:	b29b      	uxth	r3, r3
 800a130:	43db      	mvns	r3, r3
 800a132:	68f9      	ldr	r1, [r7, #12]
 800a134:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a138:	4013      	ands	r3, r2
 800a13a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	0159      	lsls	r1, r3, #5
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	440b      	add	r3, r1
 800a152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a156:	4619      	mov	r1, r3
 800a158:	4b35      	ldr	r3, [pc, #212]	@ (800a230 <USB_DeactivateEndpoint+0x1b0>)
 800a15a:	4013      	ands	r3, r2
 800a15c:	600b      	str	r3, [r1, #0]
 800a15e:	e060      	b.n	800a222 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a176:	d11f      	bne.n	800a1b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	0151      	lsls	r1, r2, #5
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	440a      	add	r2, r1
 800a18e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a192:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a196:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ce:	041b      	lsls	r3, r3, #16
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	68f9      	ldr	r1, [r7, #12]
 800a1d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1d8:	4013      	ands	r3, r2
 800a1da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e2:	69da      	ldr	r2, [r3, #28]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 030f 	and.w	r3, r3, #15
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f2:	041b      	lsls	r3, r3, #16
 800a1f4:	43db      	mvns	r3, r3
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	0159      	lsls	r1, r3, #5
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	440b      	add	r3, r1
 800a216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21a:	4619      	mov	r1, r3
 800a21c:	4b05      	ldr	r3, [pc, #20]	@ (800a234 <USB_DeactivateEndpoint+0x1b4>)
 800a21e:	4013      	ands	r3, r2
 800a220:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	ec337800 	.word	0xec337800
 800a234:	eff37800 	.word	0xeff37800

0800a238 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08a      	sub	sp, #40	@ 0x28
 800a23c:	af02      	add	r7, sp, #8
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	785b      	ldrb	r3, [r3, #1]
 800a254:	2b01      	cmp	r3, #1
 800a256:	f040 817f 	bne.w	800a558 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d132      	bne.n	800a2c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	0151      	lsls	r1, r2, #5
 800a274:	69fa      	ldr	r2, [r7, #28]
 800a276:	440a      	add	r2, r1
 800a278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a27c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a280:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	015a      	lsls	r2, r3, #5
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	4413      	add	r3, r2
 800a28e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	0151      	lsls	r1, r2, #5
 800a298:	69fa      	ldr	r2, [r7, #28]
 800a29a:	440a      	add	r2, r1
 800a29c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	69fa      	ldr	r2, [r7, #28]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2c0:	0cdb      	lsrs	r3, r3, #19
 800a2c2:	04db      	lsls	r3, r3, #19
 800a2c4:	6113      	str	r3, [r2, #16]
 800a2c6:	e097      	b.n	800a3f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	0151      	lsls	r1, r2, #5
 800a2da:	69fa      	ldr	r2, [r7, #28]
 800a2dc:	440a      	add	r2, r1
 800a2de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2e2:	0cdb      	lsrs	r3, r3, #19
 800a2e4:	04db      	lsls	r3, r3, #19
 800a2e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	69fa      	ldr	r2, [r7, #28]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a302:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a306:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a30a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d11a      	bne.n	800a348 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d903      	bls.n	800a326 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	69ba      	ldr	r2, [r7, #24]
 800a336:	0151      	lsls	r1, r2, #5
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	440a      	add	r2, r1
 800a33c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a340:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a344:	6113      	str	r3, [r2, #16]
 800a346:	e044      	b.n	800a3d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	4413      	add	r3, r2
 800a352:	1e5a      	subs	r2, r3, #1
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36a:	691a      	ldr	r2, [r3, #16]
 800a36c:	8afb      	ldrh	r3, [r7, #22]
 800a36e:	04d9      	lsls	r1, r3, #19
 800a370:	4ba4      	ldr	r3, [pc, #656]	@ (800a604 <USB_EPStartXfer+0x3cc>)
 800a372:	400b      	ands	r3, r1
 800a374:	69b9      	ldr	r1, [r7, #24]
 800a376:	0148      	lsls	r0, r1, #5
 800a378:	69f9      	ldr	r1, [r7, #28]
 800a37a:	4401      	add	r1, r0
 800a37c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a380:	4313      	orrs	r3, r2
 800a382:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	791b      	ldrb	r3, [r3, #4]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d122      	bne.n	800a3d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	0151      	lsls	r1, r2, #5
 800a39e:	69fa      	ldr	r2, [r7, #28]
 800a3a0:	440a      	add	r2, r1
 800a3a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a3aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	8afb      	ldrh	r3, [r7, #22]
 800a3bc:	075b      	lsls	r3, r3, #29
 800a3be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a3c2:	69b9      	ldr	r1, [r7, #24]
 800a3c4:	0148      	lsls	r0, r1, #5
 800a3c6:	69f9      	ldr	r1, [r7, #28]
 800a3c8:	4401      	add	r1, r0
 800a3ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3de:	691a      	ldr	r2, [r3, #16]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3e8:	69b9      	ldr	r1, [r7, #24]
 800a3ea:	0148      	lsls	r0, r1, #5
 800a3ec:	69f9      	ldr	r1, [r7, #28]
 800a3ee:	4401      	add	r1, r0
 800a3f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d14b      	bne.n	800a496 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d009      	beq.n	800a41a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a412:	461a      	mov	r2, r3
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	791b      	ldrb	r3, [r3, #4]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d128      	bne.n	800a474 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d110      	bne.n	800a454 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a44c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	e00f      	b.n	800a474 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	69fa      	ldr	r2, [r7, #28]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a46e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a472:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a48e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	e166      	b.n	800a764 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	0151      	lsls	r1, r2, #5
 800a4a8:	69fa      	ldr	r2, [r7, #28]
 800a4aa:	440a      	add	r2, r1
 800a4ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a4b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	791b      	ldrb	r3, [r3, #4]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d015      	beq.n	800a4ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 814e 	beq.w	800a764 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	2101      	movs	r1, #1
 800a4da:	fa01 f303 	lsl.w	r3, r1, r3
 800a4de:	69f9      	ldr	r1, [r7, #28]
 800a4e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	634b      	str	r3, [r1, #52]	@ 0x34
 800a4e8:	e13c      	b.n	800a764 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d110      	bne.n	800a51c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	69ba      	ldr	r2, [r7, #24]
 800a50a:	0151      	lsls	r1, r2, #5
 800a50c:	69fa      	ldr	r2, [r7, #28]
 800a50e:	440a      	add	r2, r1
 800a510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a514:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	e00f      	b.n	800a53c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	0151      	lsls	r1, r2, #5
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	440a      	add	r2, r1
 800a532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a53a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	68d9      	ldr	r1, [r3, #12]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	781a      	ldrb	r2, [r3, #0]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	b298      	uxth	r0, r3
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	4603      	mov	r3, r0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 f9b9 	bl	800a8c8 <USB_WritePacket>
 800a556:	e105      	b.n	800a764 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	69ba      	ldr	r2, [r7, #24]
 800a568:	0151      	lsls	r1, r2, #5
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	440a      	add	r2, r1
 800a56e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a572:	0cdb      	lsrs	r3, r3, #19
 800a574:	04db      	lsls	r3, r3, #19
 800a576:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	015a      	lsls	r2, r3, #5
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	0151      	lsls	r1, r2, #5
 800a58a:	69fa      	ldr	r2, [r7, #28]
 800a58c:	440a      	add	r2, r1
 800a58e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a592:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a596:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a59a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d132      	bne.n	800a608 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	689a      	ldr	r2, [r3, #8]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5d0:	69b9      	ldr	r1, [r7, #24]
 800a5d2:	0148      	lsls	r0, r1, #5
 800a5d4:	69f9      	ldr	r1, [r7, #28]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	0151      	lsls	r1, r2, #5
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	440a      	add	r2, r1
 800a5f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5fe:	6113      	str	r3, [r2, #16]
 800a600:	e062      	b.n	800a6c8 <USB_EPStartXfer+0x490>
 800a602:	bf00      	nop
 800a604:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d123      	bne.n	800a658 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61c:	691a      	ldr	r2, [r3, #16]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a626:	69b9      	ldr	r1, [r7, #24]
 800a628:	0148      	lsls	r0, r1, #5
 800a62a:	69f9      	ldr	r1, [r7, #28]
 800a62c:	4401      	add	r1, r0
 800a62e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a632:	4313      	orrs	r3, r2
 800a634:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	0151      	lsls	r1, r2, #5
 800a648:	69fa      	ldr	r2, [r7, #28]
 800a64a:	440a      	add	r2, r1
 800a64c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a650:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a654:	6113      	str	r3, [r2, #16]
 800a656:	e037      	b.n	800a6c8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	691a      	ldr	r2, [r3, #16]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	4413      	add	r3, r2
 800a662:	1e5a      	subs	r2, r3, #1
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	fbb2 f3f3 	udiv	r3, r2, r3
 800a66c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	8afa      	ldrh	r2, [r7, #22]
 800a674:	fb03 f202 	mul.w	r2, r3, r2
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	8afb      	ldrh	r3, [r7, #22]
 800a68c:	04d9      	lsls	r1, r3, #19
 800a68e:	4b38      	ldr	r3, [pc, #224]	@ (800a770 <USB_EPStartXfer+0x538>)
 800a690:	400b      	ands	r3, r1
 800a692:	69b9      	ldr	r1, [r7, #24]
 800a694:	0148      	lsls	r0, r1, #5
 800a696:	69f9      	ldr	r1, [r7, #28]
 800a698:	4401      	add	r1, r0
 800a69a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ae:	691a      	ldr	r2, [r3, #16]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	0148      	lsls	r0, r1, #5
 800a6bc:	69f9      	ldr	r1, [r7, #28]
 800a6be:	4401      	add	r1, r0
 800a6c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d10d      	bne.n	800a6ea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d009      	beq.n	800a6ea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	68d9      	ldr	r1, [r3, #12]
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e6:	460a      	mov	r2, r1
 800a6e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	791b      	ldrb	r3, [r3, #4]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d128      	bne.n	800a744 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d110      	bne.n	800a724 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	0151      	lsls	r1, r2, #5
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	440a      	add	r2, r1
 800a718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a71c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e00f      	b.n	800a744 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	0151      	lsls	r1, r2, #5
 800a736:	69fa      	ldr	r2, [r7, #28]
 800a738:	440a      	add	r2, r1
 800a73a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a73e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a742:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	0151      	lsls	r1, r2, #5
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	440a      	add	r2, r1
 800a75a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a75e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3720      	adds	r7, #32
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	1ff80000 	.word	0x1ff80000

0800a774 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	785b      	ldrb	r3, [r3, #1]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d14a      	bne.n	800a828 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7aa:	f040 8086 	bne.w	800a8ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	7812      	ldrb	r2, [r2, #0]
 800a7c2:	0151      	lsls	r1, r2, #5
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	440a      	add	r2, r1
 800a7c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	7812      	ldrb	r2, [r2, #0]
 800a7e6:	0151      	lsls	r1, r2, #5
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a802:	4293      	cmp	r3, r2
 800a804:	d902      	bls.n	800a80c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	75fb      	strb	r3, [r7, #23]
          break;
 800a80a:	e056      	b.n	800a8ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	4413      	add	r3, r2
 800a816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a824:	d0e7      	beq.n	800a7f6 <USB_EPStopXfer+0x82>
 800a826:	e048      	b.n	800a8ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a83c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a840:	d13b      	bne.n	800a8ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	7812      	ldrb	r2, [r2, #0]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a860:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a864:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	7812      	ldrb	r2, [r2, #0]
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a896:	4293      	cmp	r3, r2
 800a898:	d902      	bls.n	800a8a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	75fb      	strb	r3, [r7, #23]
          break;
 800a89e:	e00c      	b.n	800a8ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	015a      	lsls	r2, r3, #5
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8b8:	d0e7      	beq.n	800a88a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	371c      	adds	r7, #28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b089      	sub	sp, #36	@ 0x24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	71fb      	strb	r3, [r7, #7]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a8e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d123      	bne.n	800a936 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a8ee:	88bb      	ldrh	r3, [r7, #4]
 800a8f0:	3303      	adds	r3, #3
 800a8f2:	089b      	lsrs	r3, r3, #2
 800a8f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61bb      	str	r3, [r7, #24]
 800a8fa:	e018      	b.n	800a92e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	031a      	lsls	r2, r3, #12
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	4413      	add	r3, r2
 800a904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a908:	461a      	mov	r2, r3
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	3301      	adds	r3, #1
 800a914:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	3301      	adds	r3, #1
 800a91a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	3301      	adds	r3, #1
 800a920:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	3301      	adds	r3, #1
 800a926:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	3301      	adds	r3, #1
 800a92c:	61bb      	str	r3, [r7, #24]
 800a92e:	69ba      	ldr	r2, [r7, #24]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	429a      	cmp	r2, r3
 800a934:	d3e2      	bcc.n	800a8fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3724      	adds	r7, #36	@ 0x24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a944:	b480      	push	{r7}
 800a946:	b08b      	sub	sp, #44	@ 0x2c
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	4613      	mov	r3, r2
 800a950:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a95a:	88fb      	ldrh	r3, [r7, #6]
 800a95c:	089b      	lsrs	r3, r3, #2
 800a95e:	b29b      	uxth	r3, r3
 800a960:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a962:	88fb      	ldrh	r3, [r7, #6]
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a96a:	2300      	movs	r3, #0
 800a96c:	623b      	str	r3, [r7, #32]
 800a96e:	e014      	b.n	800a99a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	3301      	adds	r3, #1
 800a980:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a984:	3301      	adds	r3, #1
 800a986:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	3301      	adds	r3, #1
 800a98c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a990:	3301      	adds	r3, #1
 800a992:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	3301      	adds	r3, #1
 800a998:	623b      	str	r3, [r7, #32]
 800a99a:	6a3a      	ldr	r2, [r7, #32]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d3e6      	bcc.n	800a970 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a9a2:	8bfb      	ldrh	r3, [r7, #30]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01e      	beq.n	800a9e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f107 0310 	add.w	r3, r7, #16
 800a9b8:	6812      	ldr	r2, [r2, #0]
 800a9ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	701a      	strb	r2, [r3, #0]
      i++;
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a9da:	8bfb      	ldrh	r3, [r7, #30]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9e0:	8bfb      	ldrh	r3, [r7, #30]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1ea      	bne.n	800a9bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	372c      	adds	r7, #44	@ 0x2c
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	785b      	ldrb	r3, [r3, #1]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d12c      	bne.n	800aa6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	db12      	blt.n	800aa48 <USB_EPSetStall+0x54>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00f      	beq.n	800aa48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	0151      	lsls	r1, r2, #5
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	440a      	add	r2, r1
 800aa3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aa46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	0151      	lsls	r1, r2, #5
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	440a      	add	r2, r1
 800aa5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	e02b      	b.n	800aac2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	db12      	blt.n	800aaa2 <USB_EPSetStall+0xae>
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00f      	beq.n	800aaa2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	0151      	lsls	r1, r2, #5
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	440a      	add	r2, r1
 800aa98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aaa0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	0151      	lsls	r1, r2, #5
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	440a      	add	r2, r1
 800aab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aabc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aac0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d128      	bne.n	800ab3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	0151      	lsls	r1, r2, #5
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	440a      	add	r2, r1
 800ab02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	791b      	ldrb	r3, [r3, #4]
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d003      	beq.n	800ab1c <USB_EPClearStall+0x4c>
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	791b      	ldrb	r3, [r3, #4]
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d138      	bne.n	800ab8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	0151      	lsls	r1, r2, #5
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	440a      	add	r2, r1
 800ab32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	e027      	b.n	800ab8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	015a      	lsls	r2, r3, #5
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	0151      	lsls	r1, r2, #5
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	440a      	add	r2, r1
 800ab54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	791b      	ldrb	r3, [r3, #4]
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d003      	beq.n	800ab6e <USB_EPClearStall+0x9e>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	791b      	ldrb	r3, [r3, #4]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d10f      	bne.n	800ab8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	0151      	lsls	r1, r2, #5
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	440a      	add	r2, r1
 800ab84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800abbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	011b      	lsls	r3, r3, #4
 800abcc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800abd0:	68f9      	ldr	r1, [r7, #12]
 800abd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abd6:	4313      	orrs	r3, r2
 800abd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac16:	f023 0302 	bic.w	r3, r3, #2
 800ac1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac44:	f023 0303 	bic.w	r3, r3, #3
 800ac48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac58:	f043 0302 	orr.w	r3, r3, #2
 800ac5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4013      	ands	r3, r2
 800ac82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac84:	68fb      	ldr	r3, [r7, #12]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	4013      	ands	r3, r2
 800acb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	0c1b      	lsrs	r3, r3, #16
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b085      	sub	sp, #20
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	4013      	ands	r3, r2
 800ace8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	b29b      	uxth	r3, r3
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acfa:	b480      	push	{r7}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	460b      	mov	r3, r1
 800ad04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad20:	695b      	ldr	r3, [r3, #20]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	4013      	ands	r3, r2
 800ad26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad28:	68bb      	ldr	r3, [r7, #8]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b087      	sub	sp, #28
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	f003 030f 	and.w	r3, r3, #15
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	fa22 f303 	lsr.w	r3, r2, r3
 800ad66:	01db      	lsls	r3, r3, #7
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	4013      	ands	r3, r2
 800ad82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad84:	68bb      	ldr	r3, [r7, #8]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	370c      	adds	r7, #12
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800adcc:	f023 0307 	bic.w	r3, r3, #7
 800add0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ade0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ade4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b087      	sub	sp, #28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	460b      	mov	r3, r1
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	333c      	adds	r3, #60	@ 0x3c
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	4a26      	ldr	r2, [pc, #152]	@ (800aeac <USB_EP0_OutStart+0xb8>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d90a      	bls.n	800ae2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae28:	d101      	bne.n	800ae2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e037      	b.n	800ae9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae34:	461a      	mov	r2, r3
 800ae36:	2300      	movs	r3, #0
 800ae38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae5c:	f043 0318 	orr.w	r3, r3, #24
 800ae60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ae74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae76:	7afb      	ldrb	r3, [r7, #11]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d10f      	bne.n	800ae9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae82:	461a      	mov	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ae9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	371c      	adds	r7, #28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	4f54300a 	.word	0x4f54300a

0800aeb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3301      	adds	r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aec8:	d901      	bls.n	800aece <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e022      	b.n	800af14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	daf2      	bge.n	800aebc <USB_CoreReset+0xc>

  count = 10U;
 800aed6:	230a      	movs	r3, #10
 800aed8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800aeda:	e002      	b.n	800aee2 <USB_CoreReset+0x32>
  {
    count--;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3b01      	subs	r3, #1
 800aee0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1f9      	bne.n	800aedc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	f043 0201 	orr.w	r2, r3, #1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3301      	adds	r3, #1
 800aef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af00:	d901      	bls.n	800af06 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e006      	b.n	800af14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d0f0      	beq.n	800aef4 <USB_CoreReset+0x44>

  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af24:	4904      	ldr	r1, [pc, #16]	@ (800af38 <MX_FATFS_Init+0x18>)
 800af26:	4805      	ldr	r0, [pc, #20]	@ (800af3c <MX_FATFS_Init+0x1c>)
 800af28:	f004 ff82 	bl	800fe30 <FATFS_LinkDriver>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	4b03      	ldr	r3, [pc, #12]	@ (800af40 <MX_FATFS_Init+0x20>)
 800af32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af34:	bf00      	nop
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20004a34 	.word	0x20004a34
 800af3c:	08013cf0 	.word	0x08013cf0
 800af40:	20004a30 	.word	0x20004a30

0800af44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af5e:	f000 f896 	bl	800b08e <BSP_SD_IsDetected>
 800af62:	4603      	mov	r3, r0
 800af64:	2b01      	cmp	r3, #1
 800af66:	d001      	beq.n	800af6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e012      	b.n	800af92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800af6c:	480b      	ldr	r0, [pc, #44]	@ (800af9c <BSP_SD_Init+0x48>)
 800af6e:	f7fb fe11 	bl	8006b94 <HAL_SD_Init>
 800af72:	4603      	mov	r3, r0
 800af74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d109      	bne.n	800af90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800af7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800af80:	4806      	ldr	r0, [pc, #24]	@ (800af9c <BSP_SD_Init+0x48>)
 800af82:	f7fc fbd7 	bl	8007734 <HAL_SD_ConfigWideBusOperation>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af90:	79fb      	ldrb	r3, [r7, #7]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20004828 	.word	0x20004828

0800afa0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	68f9      	ldr	r1, [r7, #12]
 800afb6:	4806      	ldr	r0, [pc, #24]	@ (800afd0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800afb8:	f7fb fe94 	bl	8006ce4 <HAL_SD_ReadBlocks_DMA>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	20004828 	.word	0x20004828

0800afd4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	68f9      	ldr	r1, [r7, #12]
 800afea:	4806      	ldr	r0, [pc, #24]	@ (800b004 <BSP_SD_WriteBlocks_DMA+0x30>)
 800afec:	f7fb ff5c 	bl	8006ea8 <HAL_SD_WriteBlocks_DMA>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800affa:	7dfb      	ldrb	r3, [r7, #23]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20004828 	.word	0x20004828

0800b008 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b00c:	4805      	ldr	r0, [pc, #20]	@ (800b024 <BSP_SD_GetCardState+0x1c>)
 800b00e:	f7fc fc2b 	bl	8007868 <HAL_SD_GetCardState>
 800b012:	4603      	mov	r3, r0
 800b014:	2b04      	cmp	r3, #4
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
}
 800b01e:	4618      	mov	r0, r3
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20004828 	.word	0x20004828

0800b028 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4803      	ldr	r0, [pc, #12]	@ (800b040 <BSP_SD_GetCardInfo+0x18>)
 800b034:	f7fc fb52 	bl	80076dc <HAL_SD_GetCardInfo>
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20004828 	.word	0x20004828

0800b044 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b04c:	f000 f818 	bl	800b080 <BSP_SD_AbortCallback>
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b060:	f000 f9c4 	bl	800b3ec <BSP_SD_WriteCpltCallback>
}
 800b064:	bf00      	nop
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b074:	f000 f9c6 	bl	800b404 <BSP_SD_ReadCpltCallback>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0

}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b094:	2301      	movs	r3, #1
 800b096:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b098:	f000 f80c 	bl	800b0b4 <BSP_PlatformIsDetected>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	b2db      	uxtb	r3, r3
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b0be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b0c2:	4806      	ldr	r0, [pc, #24]	@ (800b0dc <BSP_PlatformIsDetected+0x28>)
 800b0c4:	f7f8 fe48 	bl	8003d58 <HAL_GPIO_ReadPin>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b0d2:	79fb      	ldrb	r3, [r7, #7]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	40020400 	.word	0x40020400

0800b0e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b0e8:	f7f7 ffac 	bl	8003044 <HAL_GetTick>
 800b0ec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b0ee:	e006      	b.n	800b0fe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0f0:	f7ff ff8a 	bl	800b008 <BSP_SD_GetCardState>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e009      	b.n	800b112 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b0fe:	f7f7 ffa1 	bl	8003044 <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d8f0      	bhi.n	800b0f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b10e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b126:	4b0b      	ldr	r3, [pc, #44]	@ (800b154 <SD_CheckStatus+0x38>)
 800b128:	2201      	movs	r2, #1
 800b12a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b12c:	f7ff ff6c 	bl	800b008 <BSP_SD_GetCardState>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d107      	bne.n	800b146 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b136:	4b07      	ldr	r3, [pc, #28]	@ (800b154 <SD_CheckStatus+0x38>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	b2da      	uxtb	r2, r3
 800b142:	4b04      	ldr	r3, [pc, #16]	@ (800b154 <SD_CheckStatus+0x38>)
 800b144:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b146:	4b03      	ldr	r3, [pc, #12]	@ (800b154 <SD_CheckStatus+0x38>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	b2db      	uxtb	r3, r3
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	2000000d 	.word	0x2000000d

0800b158 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	4603      	mov	r3, r0
 800b160:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b162:	f7ff fef7 	bl	800af54 <BSP_SD_Init>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d107      	bne.n	800b17c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff ffd4 	bl	800b11c <SD_CheckStatus>
 800b174:	4603      	mov	r3, r0
 800b176:	461a      	mov	r2, r3
 800b178:	4b04      	ldr	r3, [pc, #16]	@ (800b18c <SD_initialize+0x34>)
 800b17a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b17c:	4b03      	ldr	r3, [pc, #12]	@ (800b18c <SD_initialize+0x34>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b2db      	uxtb	r3, r3
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	2000000d 	.word	0x2000000d

0800b190 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b19a:	79fb      	ldrb	r3, [r7, #7]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7ff ffbd 	bl	800b11c <SD_CheckStatus>
 800b1a2:	4603      	mov	r3, r0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60b9      	str	r1, [r7, #8]
 800b1b4:	607a      	str	r2, [r7, #4]
 800b1b6:	603b      	str	r3, [r7, #0]
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b1c0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b1c4:	f7ff ff8c 	bl	800b0e0 <SD_CheckStatusWithTimeout>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	da01      	bge.n	800b1d2 <SD_read+0x26>
  {
    return res;
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	e03b      	b.n	800b24a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	6879      	ldr	r1, [r7, #4]
 800b1d6:	68b8      	ldr	r0, [r7, #8]
 800b1d8:	f7ff fee2 	bl	800afa0 <BSP_SD_ReadBlocks_DMA>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d132      	bne.n	800b248 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b1e2:	4b1c      	ldr	r3, [pc, #112]	@ (800b254 <SD_read+0xa8>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b1e8:	f7f7 ff2c 	bl	8003044 <HAL_GetTick>
 800b1ec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1ee:	bf00      	nop
 800b1f0:	4b18      	ldr	r3, [pc, #96]	@ (800b254 <SD_read+0xa8>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d108      	bne.n	800b20a <SD_read+0x5e>
 800b1f8:	f7f7 ff24 	bl	8003044 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b206:	4293      	cmp	r3, r2
 800b208:	d9f2      	bls.n	800b1f0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b20a:	4b12      	ldr	r3, [pc, #72]	@ (800b254 <SD_read+0xa8>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d102      	bne.n	800b218 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	75fb      	strb	r3, [r7, #23]
 800b216:	e017      	b.n	800b248 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b218:	4b0e      	ldr	r3, [pc, #56]	@ (800b254 <SD_read+0xa8>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b21e:	f7f7 ff11 	bl	8003044 <HAL_GetTick>
 800b222:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b224:	e007      	b.n	800b236 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b226:	f7ff feef 	bl	800b008 <BSP_SD_GetCardState>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d102      	bne.n	800b236 <SD_read+0x8a>
          {
            res = RES_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b234:	e008      	b.n	800b248 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b236:	f7f7 ff05 	bl	8003044 <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b244:	4293      	cmp	r3, r2
 800b246:	d9ee      	bls.n	800b226 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20004a40 	.word	0x20004a40

0800b258 <SD_write>:

/* USER CODE BEGIN beforeWriteSection */
/* can be used to modify previous code / undefine following code / add new code */
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	603b      	str	r3, [r7, #0]
 800b264:	4603      	mov	r3, r0
 800b266:	73fb      	strb	r3, [r7, #15]
	  DRESULT res = RES_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	75fb      	strb	r3, [r7, #23]
	  uint32_t timeout;

	  if(sd_FastWriteFlag == 0)
 800b26c:	4b31      	ldr	r3, [pc, #196]	@ (800b334 <SD_write+0xdc>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d145      	bne.n	800b300 <SD_write+0xa8>
	  {

	   WriteStatus = 0;
 800b274:	4b30      	ldr	r3, [pc, #192]	@ (800b338 <SD_write+0xe0>)
 800b276:	2200      	movs	r2, #0
 800b278:	601a      	str	r2, [r3, #0]

	  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b27a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b27e:	f7ff ff2f 	bl	800b0e0 <SD_CheckStatusWithTimeout>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	da01      	bge.n	800b28c <SD_write+0x34>
	  {
	    return res;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	e04e      	b.n	800b32a <SD_write+0xd2>
	  }
		    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	68b8      	ldr	r0, [r7, #8]
 800b292:	f7ff fe9f 	bl	800afd4 <BSP_SD_WriteBlocks_DMA>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d12f      	bne.n	800b2fc <SD_write+0xa4>
		                              (uint32_t)(sector),
		                              count) == MSD_OK)
		    {
		      /* Wait that writing process is completed or a timeout occurs */

		      timeout = HAL_GetTick();
 800b29c:	f7f7 fed2 	bl	8003044 <HAL_GetTick>
 800b2a0:	6138      	str	r0, [r7, #16]
		      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b2a2:	bf00      	nop
 800b2a4:	4b24      	ldr	r3, [pc, #144]	@ (800b338 <SD_write+0xe0>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d108      	bne.n	800b2be <SD_write+0x66>
 800b2ac:	f7f7 feca 	bl	8003044 <HAL_GetTick>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d9f2      	bls.n	800b2a4 <SD_write+0x4c>
		      {
		      }
		      /* in case of a timeout return error */
		      if (WriteStatus == 0)
 800b2be:	4b1e      	ldr	r3, [pc, #120]	@ (800b338 <SD_write+0xe0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <SD_write+0x74>
		      {
		        res = RES_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	75fb      	strb	r3, [r7, #23]
 800b2ca:	e017      	b.n	800b2fc <SD_write+0xa4>
		      }
		      else
		      {
		        WriteStatus = 1;
 800b2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b338 <SD_write+0xe0>)
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	601a      	str	r2, [r3, #0]
		        timeout = HAL_GetTick();
 800b2d2:	f7f7 feb7 	bl	8003044 <HAL_GetTick>
 800b2d6:	6138      	str	r0, [r7, #16]

		        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2d8:	e007      	b.n	800b2ea <SD_write+0x92>
		        {
		          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b2da:	f7ff fe95 	bl	800b008 <BSP_SD_GetCardState>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <SD_write+0x92>
		          {
		            res = RES_OK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	75fb      	strb	r3, [r7, #23]
		            break;
 800b2e8:	e008      	b.n	800b2fc <SD_write+0xa4>
		        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2ea:	f7f7 feab 	bl	8003044 <HAL_GetTick>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d9ee      	bls.n	800b2da <SD_write+0x82>
		          }
		        }
		      }
		    }
		  return res;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
 800b2fe:	e014      	b.n	800b32a <SD_write+0xd2>
	  }
	  else
	  {
		  if (WriteStatus == 0)
 800b300:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <SD_write+0xe0>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d102      	bne.n	800b30e <SD_write+0xb6>
		  {
			  res = RES_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	75fb      	strb	r3, [r7, #23]
 800b30c:	e00c      	b.n	800b328 <SD_write+0xd0>
		  }
		  else
		  {
			  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff, (uint32_t)(sector),count) == MSD_OK)
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	6879      	ldr	r1, [r7, #4]
 800b312:	68b8      	ldr	r0, [r7, #8]
 800b314:	f7ff fe5e 	bl	800afd4 <BSP_SD_WriteBlocks_DMA>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d104      	bne.n	800b328 <SD_write+0xd0>
			  {
				  WriteStatus = 0;
 800b31e:	4b06      	ldr	r3, [pc, #24]	@ (800b338 <SD_write+0xe0>)
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	75fb      	strb	r3, [r7, #23]
			  }
		  }
		  return res;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
	  }
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	20004a38 	.word	0x20004a38
 800b338:	20004a3c 	.word	0x20004a3c

0800b33c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08c      	sub	sp, #48	@ 0x30
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	603a      	str	r2, [r7, #0]
 800b346:	71fb      	strb	r3, [r7, #7]
 800b348:	460b      	mov	r3, r1
 800b34a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b352:	4b25      	ldr	r3, [pc, #148]	@ (800b3e8 <SD_ioctl+0xac>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	b2db      	uxtb	r3, r3
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <SD_ioctl+0x28>
 800b360:	2303      	movs	r3, #3
 800b362:	e03c      	b.n	800b3de <SD_ioctl+0xa2>

  switch (cmd)
 800b364:	79bb      	ldrb	r3, [r7, #6]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d834      	bhi.n	800b3d4 <SD_ioctl+0x98>
 800b36a:	a201      	add	r2, pc, #4	@ (adr r2, 800b370 <SD_ioctl+0x34>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b381 	.word	0x0800b381
 800b374:	0800b389 	.word	0x0800b389
 800b378:	0800b3a1 	.word	0x0800b3a1
 800b37c:	0800b3bb 	.word	0x0800b3bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b386:	e028      	b.n	800b3da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b388:	f107 030c 	add.w	r3, r7, #12
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fe4b 	bl	800b028 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b39e:	e01c      	b.n	800b3da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b3a0:	f107 030c 	add.w	r3, r7, #12
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff fe3f 	bl	800b028 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b3b8:	e00f      	b.n	800b3da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b3ba:	f107 030c 	add.w	r3, r7, #12
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff fe32 	bl	800b028 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c6:	0a5a      	lsrs	r2, r3, #9
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b3d2:	e002      	b.n	800b3da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b3da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3730      	adds	r7, #48	@ 0x30
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	2000000d 	.word	0x2000000d

0800b3ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b3f0:	4b03      	ldr	r3, [pc, #12]	@ (800b400 <BSP_SD_WriteCpltCallback+0x14>)
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]
}
 800b3f6:	bf00      	nop
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	20004a3c 	.word	0x20004a3c

0800b404 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b408:	4b03      	ldr	r3, [pc, #12]	@ (800b418 <BSP_SD_ReadCpltCallback+0x14>)
 800b40a:	2201      	movs	r2, #1
 800b40c:	601a      	str	r2, [r3, #0]
}
 800b40e:	bf00      	nop
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	20004a40 	.word	0x20004a40

0800b41c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	460b      	mov	r3, r1
 800b426:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b428:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b42c:	f005 fa2c 	bl	8010888 <USBD_static_malloc>
 800b430:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d109      	bne.n	800b44c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	32b0      	adds	r2, #176	@ 0xb0
 800b442:	2100      	movs	r1, #0
 800b444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b448:	2302      	movs	r3, #2
 800b44a:	e0d4      	b.n	800b5f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b44c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b450:	2100      	movs	r1, #0
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f006 f80f 	bl	8011476 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	32b0      	adds	r2, #176	@ 0xb0
 800b462:	68f9      	ldr	r1, [r7, #12]
 800b464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	32b0      	adds	r2, #176	@ 0xb0
 800b472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7c1b      	ldrb	r3, [r3, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d138      	bne.n	800b4f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b484:	4b5e      	ldr	r3, [pc, #376]	@ (800b600 <USBD_CDC_Init+0x1e4>)
 800b486:	7819      	ldrb	r1, [r3, #0]
 800b488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b48c:	2202      	movs	r2, #2
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f005 f8d7 	bl	8010642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b494:	4b5a      	ldr	r3, [pc, #360]	@ (800b600 <USBD_CDC_Init+0x1e4>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	f003 020f 	and.w	r2, r3, #15
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4413      	add	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	440b      	add	r3, r1
 800b4a8:	3323      	adds	r3, #35	@ 0x23
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b4ae:	4b55      	ldr	r3, [pc, #340]	@ (800b604 <USBD_CDC_Init+0x1e8>)
 800b4b0:	7819      	ldrb	r1, [r3, #0]
 800b4b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f005 f8c2 	bl	8010642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b4be:	4b51      	ldr	r3, [pc, #324]	@ (800b604 <USBD_CDC_Init+0x1e8>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	f003 020f 	and.w	r2, r3, #15
 800b4c6:	6879      	ldr	r1, [r7, #4]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b4da:	4b4b      	ldr	r3, [pc, #300]	@ (800b608 <USBD_CDC_Init+0x1ec>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	f003 020f 	and.w	r2, r3, #15
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	440b      	add	r3, r1
 800b4ee:	331c      	adds	r3, #28
 800b4f0:	2210      	movs	r2, #16
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	e035      	b.n	800b562 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b4f6:	4b42      	ldr	r3, [pc, #264]	@ (800b600 <USBD_CDC_Init+0x1e4>)
 800b4f8:	7819      	ldrb	r1, [r3, #0]
 800b4fa:	2340      	movs	r3, #64	@ 0x40
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f005 f89f 	bl	8010642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b504:	4b3e      	ldr	r3, [pc, #248]	@ (800b600 <USBD_CDC_Init+0x1e4>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	f003 020f 	and.w	r2, r3, #15
 800b50c:	6879      	ldr	r1, [r7, #4]
 800b50e:	4613      	mov	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	440b      	add	r3, r1
 800b518:	3323      	adds	r3, #35	@ 0x23
 800b51a:	2201      	movs	r2, #1
 800b51c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b51e:	4b39      	ldr	r3, [pc, #228]	@ (800b604 <USBD_CDC_Init+0x1e8>)
 800b520:	7819      	ldrb	r1, [r3, #0]
 800b522:	2340      	movs	r3, #64	@ 0x40
 800b524:	2202      	movs	r2, #2
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f005 f88b 	bl	8010642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b52c:	4b35      	ldr	r3, [pc, #212]	@ (800b604 <USBD_CDC_Init+0x1e8>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 020f 	and.w	r2, r3, #15
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	440b      	add	r3, r1
 800b540:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b544:	2201      	movs	r2, #1
 800b546:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b548:	4b2f      	ldr	r3, [pc, #188]	@ (800b608 <USBD_CDC_Init+0x1ec>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	f003 020f 	and.w	r2, r3, #15
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	440b      	add	r3, r1
 800b55c:	331c      	adds	r3, #28
 800b55e:	2210      	movs	r2, #16
 800b560:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b562:	4b29      	ldr	r3, [pc, #164]	@ (800b608 <USBD_CDC_Init+0x1ec>)
 800b564:	7819      	ldrb	r1, [r3, #0]
 800b566:	2308      	movs	r3, #8
 800b568:	2203      	movs	r2, #3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f005 f869 	bl	8010642 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b570:	4b25      	ldr	r3, [pc, #148]	@ (800b608 <USBD_CDC_Init+0x1ec>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	f003 020f 	and.w	r2, r3, #15
 800b578:	6879      	ldr	r1, [r7, #4]
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	3323      	adds	r3, #35	@ 0x23
 800b586:	2201      	movs	r2, #1
 800b588:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	33b0      	adds	r3, #176	@ 0xb0
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	e018      	b.n	800b5f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	7c1b      	ldrb	r3, [r3, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b604 <USBD_CDC_Init+0x1e8>)
 800b5ce:	7819      	ldrb	r1, [r3, #0]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f005 f920 	bl	8010820 <USBD_LL_PrepareReceive>
 800b5e0:	e008      	b.n	800b5f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5e2:	4b08      	ldr	r3, [pc, #32]	@ (800b604 <USBD_CDC_Init+0x1e8>)
 800b5e4:	7819      	ldrb	r1, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5ec:	2340      	movs	r3, #64	@ 0x40
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f005 f916 	bl	8010820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20000097 	.word	0x20000097
 800b604:	20000098 	.word	0x20000098
 800b608:	20000099 	.word	0x20000099

0800b60c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b618:	4b3a      	ldr	r3, [pc, #232]	@ (800b704 <USBD_CDC_DeInit+0xf8>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f005 f835 	bl	801068e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b624:	4b37      	ldr	r3, [pc, #220]	@ (800b704 <USBD_CDC_DeInit+0xf8>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	f003 020f 	and.w	r2, r3, #15
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	440b      	add	r3, r1
 800b638:	3323      	adds	r3, #35	@ 0x23
 800b63a:	2200      	movs	r2, #0
 800b63c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b63e:	4b32      	ldr	r3, [pc, #200]	@ (800b708 <USBD_CDC_DeInit+0xfc>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f005 f822 	bl	801068e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b64a:	4b2f      	ldr	r3, [pc, #188]	@ (800b708 <USBD_CDC_DeInit+0xfc>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f003 020f 	and.w	r2, r3, #15
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	4613      	mov	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	440b      	add	r3, r1
 800b65e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b662:	2200      	movs	r2, #0
 800b664:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b666:	4b29      	ldr	r3, [pc, #164]	@ (800b70c <USBD_CDC_DeInit+0x100>)
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f005 f80e 	bl	801068e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b672:	4b26      	ldr	r3, [pc, #152]	@ (800b70c <USBD_CDC_DeInit+0x100>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	f003 020f 	and.w	r2, r3, #15
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	440b      	add	r3, r1
 800b686:	3323      	adds	r3, #35	@ 0x23
 800b688:	2200      	movs	r2, #0
 800b68a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b68c:	4b1f      	ldr	r3, [pc, #124]	@ (800b70c <USBD_CDC_DeInit+0x100>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	f003 020f 	and.w	r2, r3, #15
 800b694:	6879      	ldr	r1, [r7, #4]
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	440b      	add	r3, r1
 800b6a0:	331c      	adds	r3, #28
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	32b0      	adds	r2, #176	@ 0xb0
 800b6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d01f      	beq.n	800b6f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	33b0      	adds	r3, #176	@ 0xb0
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	32b0      	adds	r2, #176	@ 0xb0
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f005 f8e2 	bl	80108a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	32b0      	adds	r2, #176	@ 0xb0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20000097 	.word	0x20000097
 800b708:	20000098 	.word	0x20000098
 800b70c:	20000099 	.word	0x20000099

0800b710 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	32b0      	adds	r2, #176	@ 0xb0
 800b724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b728:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b72e:	2300      	movs	r3, #0
 800b730:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e0bf      	b.n	800b8c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d050      	beq.n	800b7ee <USBD_CDC_Setup+0xde>
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	f040 80af 	bne.w	800b8b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	88db      	ldrh	r3, [r3, #6]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d03a      	beq.n	800b7d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	b25b      	sxtb	r3, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	da1b      	bge.n	800b79c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	33b0      	adds	r3, #176	@ 0xb0
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b77a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	88d2      	ldrh	r2, [r2, #6]
 800b780:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	88db      	ldrh	r3, [r3, #6]
 800b786:	2b07      	cmp	r3, #7
 800b788:	bf28      	it	cs
 800b78a:	2307      	movcs	r3, #7
 800b78c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	89fa      	ldrh	r2, [r7, #14]
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f001 fda9 	bl	800d2ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b79a:	e090      	b.n	800b8be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	785a      	ldrb	r2, [r3, #1]
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	88db      	ldrh	r3, [r3, #6]
 800b7aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800b7ac:	d803      	bhi.n	800b7b6 <USBD_CDC_Setup+0xa6>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	88db      	ldrh	r3, [r3, #6]
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	e000      	b.n	800b7b8 <USBD_CDC_Setup+0xa8>
 800b7b6:	2240      	movs	r2, #64	@ 0x40
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b7be:	6939      	ldr	r1, [r7, #16]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 fdbe 	bl	800d34a <USBD_CtlPrepareRx>
      break;
 800b7ce:	e076      	b.n	800b8be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	33b0      	adds	r3, #176	@ 0xb0
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	7850      	ldrb	r0, [r2, #1]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	4798      	blx	r3
      break;
 800b7ec:	e067      	b.n	800b8be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	785b      	ldrb	r3, [r3, #1]
 800b7f2:	2b0b      	cmp	r3, #11
 800b7f4:	d851      	bhi.n	800b89a <USBD_CDC_Setup+0x18a>
 800b7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7fc <USBD_CDC_Setup+0xec>)
 800b7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fc:	0800b82d 	.word	0x0800b82d
 800b800:	0800b8a9 	.word	0x0800b8a9
 800b804:	0800b89b 	.word	0x0800b89b
 800b808:	0800b89b 	.word	0x0800b89b
 800b80c:	0800b89b 	.word	0x0800b89b
 800b810:	0800b89b 	.word	0x0800b89b
 800b814:	0800b89b 	.word	0x0800b89b
 800b818:	0800b89b 	.word	0x0800b89b
 800b81c:	0800b89b 	.word	0x0800b89b
 800b820:	0800b89b 	.word	0x0800b89b
 800b824:	0800b857 	.word	0x0800b857
 800b828:	0800b881 	.word	0x0800b881
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b03      	cmp	r3, #3
 800b836:	d107      	bne.n	800b848 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b838:	f107 030a 	add.w	r3, r7, #10
 800b83c:	2202      	movs	r2, #2
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f001 fd53 	bl	800d2ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b846:	e032      	b.n	800b8ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f001 fcd1 	bl	800d1f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b850:	2303      	movs	r3, #3
 800b852:	75fb      	strb	r3, [r7, #23]
          break;
 800b854:	e02b      	b.n	800b8ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d107      	bne.n	800b872 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b862:	f107 030d 	add.w	r3, r7, #13
 800b866:	2201      	movs	r2, #1
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f001 fd3e 	bl	800d2ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b870:	e01d      	b.n	800b8ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 fcbc 	bl	800d1f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b87a:	2303      	movs	r3, #3
 800b87c:	75fb      	strb	r3, [r7, #23]
          break;
 800b87e:	e016      	b.n	800b8ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d00f      	beq.n	800b8ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f001 fcaf 	bl	800d1f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b898:	e008      	b.n	800b8ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f001 fca8 	bl	800d1f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b8a6:	e002      	b.n	800b8ae <USBD_CDC_Setup+0x19e>
          break;
 800b8a8:	bf00      	nop
 800b8aa:	e008      	b.n	800b8be <USBD_CDC_Setup+0x1ae>
          break;
 800b8ac:	bf00      	nop
      }
      break;
 800b8ae:	e006      	b.n	800b8be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f001 fc9d 	bl	800d1f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b8bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	32b0      	adds	r2, #176	@ 0xb0
 800b8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e065      	b.n	800b9be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	32b0      	adds	r2, #176	@ 0xb0
 800b8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b900:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	f003 020f 	and.w	r2, r3, #15
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	3314      	adds	r3, #20
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d02f      	beq.n	800b97c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	f003 020f 	and.w	r2, r3, #15
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	4613      	mov	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	440b      	add	r3, r1
 800b92e:	3314      	adds	r3, #20
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	78fb      	ldrb	r3, [r7, #3]
 800b934:	f003 010f 	and.w	r1, r3, #15
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	460b      	mov	r3, r1
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	440b      	add	r3, r1
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4403      	add	r3, r0
 800b944:	331c      	adds	r3, #28
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	fbb2 f1f3 	udiv	r1, r2, r3
 800b94c:	fb01 f303 	mul.w	r3, r1, r3
 800b950:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b952:	2b00      	cmp	r3, #0
 800b954:	d112      	bne.n	800b97c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	f003 020f 	and.w	r2, r3, #15
 800b95c:	6879      	ldr	r1, [r7, #4]
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	440b      	add	r3, r1
 800b968:	3314      	adds	r3, #20
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b96e:	78f9      	ldrb	r1, [r7, #3]
 800b970:	2300      	movs	r3, #0
 800b972:	2200      	movs	r2, #0
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f004 ff32 	bl	80107de <USBD_LL_Transmit>
 800b97a:	e01f      	b.n	800b9bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	2200      	movs	r2, #0
 800b980:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	33b0      	adds	r3, #176	@ 0xb0
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d010      	beq.n	800b9bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	33b0      	adds	r3, #176	@ 0xb0
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b9b8:	78fa      	ldrb	r2, [r7, #3]
 800b9ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	32b0      	adds	r2, #176	@ 0xb0
 800b9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	32b0      	adds	r2, #176	@ 0xb0
 800b9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e01a      	b.n	800ba2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f004 ff30 	bl	8010862 <USBD_LL_GetRxDataSize>
 800ba02:	4602      	mov	r2, r0
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	33b0      	adds	r3, #176	@ 0xb0
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	32b0      	adds	r2, #176	@ 0xb0
 800ba48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e024      	b.n	800baa2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	33b0      	adds	r3, #176	@ 0xb0
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d019      	beq.n	800baa0 <USBD_CDC_EP0_RxReady+0x6a>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ba72:	2bff      	cmp	r3, #255	@ 0xff
 800ba74:	d014      	beq.n	800baa0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	33b0      	adds	r3, #176	@ 0xb0
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ba8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ba96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	22ff      	movs	r2, #255	@ 0xff
 800ba9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bab4:	2182      	movs	r1, #130	@ 0x82
 800bab6:	4818      	ldr	r0, [pc, #96]	@ (800bb18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bab8:	f000 fd62 	bl	800c580 <USBD_GetEpDesc>
 800babc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800babe:	2101      	movs	r1, #1
 800bac0:	4815      	ldr	r0, [pc, #84]	@ (800bb18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bac2:	f000 fd5d 	bl	800c580 <USBD_GetEpDesc>
 800bac6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bac8:	2181      	movs	r1, #129	@ 0x81
 800baca:	4813      	ldr	r0, [pc, #76]	@ (800bb18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bacc:	f000 fd58 	bl	800c580 <USBD_GetEpDesc>
 800bad0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2210      	movs	r2, #16
 800badc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d006      	beq.n	800baf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baec:	711a      	strb	r2, [r3, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d006      	beq.n	800bb06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb00:	711a      	strb	r2, [r3, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2243      	movs	r2, #67	@ 0x43
 800bb0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb0c:	4b02      	ldr	r3, [pc, #8]	@ (800bb18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	20000054 	.word	0x20000054

0800bb1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb24:	2182      	movs	r1, #130	@ 0x82
 800bb26:	4818      	ldr	r0, [pc, #96]	@ (800bb88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb28:	f000 fd2a 	bl	800c580 <USBD_GetEpDesc>
 800bb2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb2e:	2101      	movs	r1, #1
 800bb30:	4815      	ldr	r0, [pc, #84]	@ (800bb88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb32:	f000 fd25 	bl	800c580 <USBD_GetEpDesc>
 800bb36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bb38:	2181      	movs	r1, #129	@ 0x81
 800bb3a:	4813      	ldr	r0, [pc, #76]	@ (800bb88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb3c:	f000 fd20 	bl	800c580 <USBD_GetEpDesc>
 800bb40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2210      	movs	r2, #16
 800bb4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d006      	beq.n	800bb62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	2200      	movs	r2, #0
 800bb58:	711a      	strb	r2, [r3, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f042 0202 	orr.w	r2, r2, #2
 800bb60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d006      	beq.n	800bb76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	711a      	strb	r2, [r3, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f042 0202 	orr.w	r2, r2, #2
 800bb74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2243      	movs	r2, #67	@ 0x43
 800bb7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb7c:	4b02      	ldr	r3, [pc, #8]	@ (800bb88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20000054 	.word	0x20000054

0800bb8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb94:	2182      	movs	r1, #130	@ 0x82
 800bb96:	4818      	ldr	r0, [pc, #96]	@ (800bbf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bb98:	f000 fcf2 	bl	800c580 <USBD_GetEpDesc>
 800bb9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb9e:	2101      	movs	r1, #1
 800bba0:	4815      	ldr	r0, [pc, #84]	@ (800bbf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bba2:	f000 fced 	bl	800c580 <USBD_GetEpDesc>
 800bba6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bba8:	2181      	movs	r1, #129	@ 0x81
 800bbaa:	4813      	ldr	r0, [pc, #76]	@ (800bbf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bbac:	f000 fce8 	bl	800c580 <USBD_GetEpDesc>
 800bbb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2210      	movs	r2, #16
 800bbbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d006      	beq.n	800bbd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbcc:	711a      	strb	r2, [r3, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d006      	beq.n	800bbe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbe0:	711a      	strb	r2, [r3, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2243      	movs	r2, #67	@ 0x43
 800bbea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bbec:	4b02      	ldr	r3, [pc, #8]	@ (800bbf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000054 	.word	0x20000054

0800bbfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	220a      	movs	r2, #10
 800bc08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc0a:	4b03      	ldr	r3, [pc, #12]	@ (800bc18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	20000010 	.word	0x20000010

0800bc1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e009      	b.n	800bc44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	33b0      	adds	r3, #176	@ 0xb0
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	32b0      	adds	r2, #176	@ 0xb0
 800bc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e008      	b.n	800bc88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	32b0      	adds	r2, #176	@ 0xb0
 800bca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e004      	b.n	800bcc2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
	...

0800bcd0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	32b0      	adds	r2, #176	@ 0xb0
 800bce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bce8:	2301      	movs	r3, #1
 800bcea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e025      	b.n	800bd42 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d11f      	bne.n	800bd40 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bd08:	4b10      	ldr	r3, [pc, #64]	@ (800bd4c <USBD_CDC_TransmitPacket+0x7c>)
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	f003 020f 	and.w	r2, r3, #15
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4403      	add	r3, r0
 800bd22:	3314      	adds	r3, #20
 800bd24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bd26:	4b09      	ldr	r3, [pc, #36]	@ (800bd4c <USBD_CDC_TransmitPacket+0x7c>)
 800bd28:	7819      	ldrb	r1, [r3, #0]
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f004 fd51 	bl	80107de <USBD_LL_Transmit>

    ret = USBD_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000097 	.word	0x20000097

0800bd50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	32b0      	adds	r2, #176	@ 0xb0
 800bd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	32b0      	adds	r2, #176	@ 0xb0
 800bd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e018      	b.n	800bdb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7c1b      	ldrb	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10a      	bne.n	800bd9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd86:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb8 <USBD_CDC_ReceivePacket+0x68>)
 800bd88:	7819      	ldrb	r1, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f004 fd43 	bl	8010820 <USBD_LL_PrepareReceive>
 800bd9a:	e008      	b.n	800bdae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd9c:	4b06      	ldr	r3, [pc, #24]	@ (800bdb8 <USBD_CDC_ReceivePacket+0x68>)
 800bd9e:	7819      	ldrb	r1, [r3, #0]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bda6:	2340      	movs	r3, #64	@ 0x40
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f004 fd39 	bl	8010820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20000098 	.word	0x20000098

0800bdbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e01f      	b.n	800be14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	79fa      	ldrb	r2, [r7, #7]
 800be06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f004 fbb3 	bl	8010574 <USBD_LL_Init>
 800be0e:	4603      	mov	r3, r0
 800be10:	75fb      	strb	r3, [r7, #23]

  return ret;
 800be12:	7dfb      	ldrb	r3, [r7, #23]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be26:	2300      	movs	r3, #0
 800be28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800be30:	2303      	movs	r3, #3
 800be32:	e025      	b.n	800be80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	32ae      	adds	r2, #174	@ 0xae
 800be46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00f      	beq.n	800be70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	32ae      	adds	r2, #174	@ 0xae
 800be5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be60:	f107 020e 	add.w	r2, r7, #14
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
 800be68:	4602      	mov	r2, r0
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f004 fbbb 	bl	801060c <USBD_LL_Start>
 800be96:	4603      	mov	r3, r0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bea8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800beaa:	4618      	mov	r0, r3
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	460b      	mov	r3, r1
 800bec0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800becc:	2b00      	cmp	r3, #0
 800bece:	d009      	beq.n	800bee4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	78fa      	ldrb	r2, [r7, #3]
 800beda:	4611      	mov	r1, r2
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	4798      	blx	r3
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	460b      	mov	r3, r1
 800bef8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	78fa      	ldrb	r2, [r7, #3]
 800bf08:	4611      	mov	r1, r2
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bf14:	2303      	movs	r3, #3
 800bf16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b084      	sub	sp, #16
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f001 f922 	bl	800d17e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bf48:	461a      	mov	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf56:	f003 031f 	and.w	r3, r3, #31
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d01a      	beq.n	800bf94 <USBD_LL_SetupStage+0x72>
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d822      	bhi.n	800bfa8 <USBD_LL_SetupStage+0x86>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <USBD_LL_SetupStage+0x4a>
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d00a      	beq.n	800bf80 <USBD_LL_SetupStage+0x5e>
 800bf6a:	e01d      	b.n	800bfa8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fb77 	bl	800c668 <USBD_StdDevReq>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf7e:	e020      	b.n	800bfc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fbdf 	bl	800c74c <USBD_StdItfReq>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	73fb      	strb	r3, [r7, #15]
      break;
 800bf92:	e016      	b.n	800bfc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fc41 	bl	800c824 <USBD_StdEPReq>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73fb      	strb	r3, [r7, #15]
      break;
 800bfa6:	e00c      	b.n	800bfc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bfae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f004 fb88 	bl	80106cc <USBD_LL_StallEP>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc0:	bf00      	nop
  }

  return ret;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bfde:	7afb      	ldrb	r3, [r7, #11]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d177      	bne.n	800c0d4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bfea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	f040 80a1 	bne.w	800c13a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	693a      	ldr	r2, [r7, #16]
 800bffe:	8992      	ldrh	r2, [r2, #12]
 800c000:	4293      	cmp	r3, r2
 800c002:	d91c      	bls.n	800c03e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	8992      	ldrh	r2, [r2, #12]
 800c00c:	1a9a      	subs	r2, r3, r2
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	8992      	ldrh	r2, [r2, #12]
 800c01a:	441a      	add	r2, r3
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	6919      	ldr	r1, [r3, #16]
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	899b      	ldrh	r3, [r3, #12]
 800c028:	461a      	mov	r2, r3
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	4293      	cmp	r3, r2
 800c030:	bf38      	it	cc
 800c032:	4613      	movcc	r3, r2
 800c034:	461a      	mov	r2, r3
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f001 f9a8 	bl	800d38c <USBD_CtlContinueRx>
 800c03c:	e07d      	b.n	800c13a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c044:	f003 031f 	and.w	r3, r3, #31
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d014      	beq.n	800c076 <USBD_LL_DataOutStage+0xaa>
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d81d      	bhi.n	800c08c <USBD_LL_DataOutStage+0xc0>
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <USBD_LL_DataOutStage+0x8e>
 800c054:	2b01      	cmp	r3, #1
 800c056:	d003      	beq.n	800c060 <USBD_LL_DataOutStage+0x94>
 800c058:	e018      	b.n	800c08c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	75bb      	strb	r3, [r7, #22]
            break;
 800c05e:	e018      	b.n	800c092 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c066:	b2db      	uxtb	r3, r3
 800c068:	4619      	mov	r1, r3
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f000 fa6e 	bl	800c54c <USBD_CoreFindIF>
 800c070:	4603      	mov	r3, r0
 800c072:	75bb      	strb	r3, [r7, #22]
            break;
 800c074:	e00d      	b.n	800c092 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	4619      	mov	r1, r3
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f000 fa70 	bl	800c566 <USBD_CoreFindEP>
 800c086:	4603      	mov	r3, r0
 800c088:	75bb      	strb	r3, [r7, #22]
            break;
 800c08a:	e002      	b.n	800c092 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	75bb      	strb	r3, [r7, #22]
            break;
 800c090:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c092:	7dbb      	ldrb	r3, [r7, #22]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d119      	bne.n	800c0cc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d113      	bne.n	800c0cc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c0a4:	7dba      	ldrb	r2, [r7, #22]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	32ae      	adds	r2, #174	@ 0xae
 800c0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00b      	beq.n	800c0cc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c0b4:	7dba      	ldrb	r2, [r7, #22]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c0bc:	7dba      	ldrb	r2, [r7, #22]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	32ae      	adds	r2, #174	@ 0xae
 800c0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f001 f96e 	bl	800d3ae <USBD_CtlSendStatus>
 800c0d2:	e032      	b.n	800c13a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	4619      	mov	r1, r3
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 fa41 	bl	800c566 <USBD_CoreFindEP>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0e8:	7dbb      	ldrb	r3, [r7, #22]
 800c0ea:	2bff      	cmp	r3, #255	@ 0xff
 800c0ec:	d025      	beq.n	800c13a <USBD_LL_DataOutStage+0x16e>
 800c0ee:	7dbb      	ldrb	r3, [r7, #22]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d122      	bne.n	800c13a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d117      	bne.n	800c130 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c100:	7dba      	ldrb	r2, [r7, #22]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	32ae      	adds	r2, #174	@ 0xae
 800c106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00f      	beq.n	800c130 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c110:	7dba      	ldrb	r2, [r7, #22]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c118:	7dba      	ldrb	r2, [r7, #22]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	32ae      	adds	r2, #174	@ 0xae
 800c11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	7afa      	ldrb	r2, [r7, #11]
 800c126:	4611      	mov	r1, r2
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	4798      	blx	r3
 800c12c:	4603      	mov	r3, r0
 800c12e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c136:	7dfb      	ldrb	r3, [r7, #23]
 800c138:	e000      	b.n	800c13c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3718      	adds	r7, #24
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	460b      	mov	r3, r1
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c152:	7afb      	ldrb	r3, [r7, #11]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d178      	bne.n	800c24a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3314      	adds	r3, #20
 800c15c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c164:	2b02      	cmp	r3, #2
 800c166:	d163      	bne.n	800c230 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	8992      	ldrh	r2, [r2, #12]
 800c170:	4293      	cmp	r3, r2
 800c172:	d91c      	bls.n	800c1ae <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	8992      	ldrh	r2, [r2, #12]
 800c17c:	1a9a      	subs	r2, r3, r2
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	8992      	ldrh	r2, [r2, #12]
 800c18a:	441a      	add	r2, r3
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6919      	ldr	r1, [r3, #16]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	461a      	mov	r2, r3
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f001 f8c4 	bl	800d328 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f004 fb3a 	bl	8010820 <USBD_LL_PrepareReceive>
 800c1ac:	e040      	b.n	800c230 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	899b      	ldrh	r3, [r3, #12]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d11c      	bne.n	800c1f6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d316      	bcc.n	800c1f6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d20f      	bcs.n	800c1f6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2100      	movs	r1, #0
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f001 f8a4 	bl	800d328 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f004 fb16 	bl	8010820 <USBD_LL_PrepareReceive>
 800c1f4:	e01c      	b.n	800c230 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	d10f      	bne.n	800c222 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d009      	beq.n	800c222 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c222:	2180      	movs	r1, #128	@ 0x80
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f004 fa51 	bl	80106cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f001 f8d2 	bl	800d3d4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d03a      	beq.n	800c2b0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f7ff fe30 	bl	800bea0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2200      	movs	r2, #0
 800c244:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c248:	e032      	b.n	800c2b0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c24a:	7afb      	ldrb	r3, [r7, #11]
 800c24c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c250:	b2db      	uxtb	r3, r3
 800c252:	4619      	mov	r1, r3
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f000 f986 	bl	800c566 <USBD_CoreFindEP>
 800c25a:	4603      	mov	r3, r0
 800c25c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	2bff      	cmp	r3, #255	@ 0xff
 800c262:	d025      	beq.n	800c2b0 <USBD_LL_DataInStage+0x16c>
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d122      	bne.n	800c2b0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b03      	cmp	r3, #3
 800c274:	d11c      	bne.n	800c2b0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c276:	7dfa      	ldrb	r2, [r7, #23]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	32ae      	adds	r2, #174	@ 0xae
 800c27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d014      	beq.n	800c2b0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c286:	7dfa      	ldrb	r2, [r7, #23]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c28e:	7dfa      	ldrb	r2, [r7, #23]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	32ae      	adds	r2, #174	@ 0xae
 800c294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	7afa      	ldrb	r2, [r7, #11]
 800c29c:	4611      	mov	r1, r2
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	4798      	blx	r3
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c2a6:	7dbb      	ldrb	r3, [r7, #22]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c2ac:	7dbb      	ldrb	r3, [r7, #22]
 800c2ae:	e000      	b.n	800c2b2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3718      	adds	r7, #24
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d014      	beq.n	800c320 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00e      	beq.n	800c320 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	6852      	ldr	r2, [r2, #4]
 800c30e:	b2d2      	uxtb	r2, r2
 800c310:	4611      	mov	r1, r2
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	4798      	blx	r3
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c31c:	2303      	movs	r3, #3
 800c31e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c320:	2340      	movs	r3, #64	@ 0x40
 800c322:	2200      	movs	r2, #0
 800c324:	2100      	movs	r1, #0
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f004 f98b 	bl	8010642 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2240      	movs	r2, #64	@ 0x40
 800c338:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c33c:	2340      	movs	r3, #64	@ 0x40
 800c33e:	2200      	movs	r2, #0
 800c340:	2180      	movs	r1, #128	@ 0x80
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f004 f97d 	bl	8010642 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2240      	movs	r2, #64	@ 0x40
 800c354:	841a      	strh	r2, [r3, #32]

  return ret;
 800c356:	7bfb      	ldrb	r3, [r7, #15]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	78fa      	ldrb	r2, [r7, #3]
 800c370:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b04      	cmp	r3, #4
 800c392:	d006      	beq.n	800c3a2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2204      	movs	r2, #4
 800c3a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b04      	cmp	r3, #4
 800c3ca:	d106      	bne.n	800c3da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	2b03      	cmp	r3, #3
 800c3fa:	d110      	bne.n	800c41e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00b      	beq.n	800c41e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d005      	beq.n	800c41e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	32ae      	adds	r2, #174	@ 0xae
 800c43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	e01c      	b.n	800c484 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b03      	cmp	r3, #3
 800c454:	d115      	bne.n	800c482 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	32ae      	adds	r2, #174	@ 0xae
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	6a1b      	ldr	r3, [r3, #32]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	32ae      	adds	r2, #174	@ 0xae
 800c474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	78fa      	ldrb	r2, [r7, #3]
 800c47c:	4611      	mov	r1, r2
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	32ae      	adds	r2, #174	@ 0xae
 800c4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	e01c      	b.n	800c4e8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d115      	bne.n	800c4e6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	32ae      	adds	r2, #174	@ 0xae
 800c4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00b      	beq.n	800c4e6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	32ae      	adds	r2, #174	@ 0xae
 800c4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00e      	beq.n	800c542 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	6852      	ldr	r2, [r2, #4]
 800c530:	b2d2      	uxtb	r2, r2
 800c532:	4611      	mov	r1, r2
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	4798      	blx	r3
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c53e:	2303      	movs	r3, #3
 800c540:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c542:	7bfb      	ldrb	r3, [r7, #15]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	460b      	mov	r3, r1
 800c556:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c558:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c566:	b480      	push	{r7}
 800c568:	b083      	sub	sp, #12
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	460b      	mov	r3, r1
 800c570:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c572:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	460b      	mov	r3, r1
 800c58a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c594:	2300      	movs	r3, #0
 800c596:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	885b      	ldrh	r3, [r3, #2]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	7812      	ldrb	r2, [r2, #0]
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d91f      	bls.n	800c5e6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c5ac:	e013      	b.n	800c5d6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c5ae:	f107 030a 	add.w	r3, r7, #10
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6978      	ldr	r0, [r7, #20]
 800c5b6:	f000 f81b 	bl	800c5f0 <USBD_GetNextDesc>
 800c5ba:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	785b      	ldrb	r3, [r3, #1]
 800c5c0:	2b05      	cmp	r3, #5
 800c5c2:	d108      	bne.n	800c5d6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	789b      	ldrb	r3, [r3, #2]
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d008      	beq.n	800c5e4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	897b      	ldrh	r3, [r7, #10]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d8e5      	bhi.n	800c5ae <USBD_GetEpDesc+0x2e>
 800c5e2:	e000      	b.n	800c5e6 <USBD_GetEpDesc+0x66>
          break;
 800c5e4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c5e6:	693b      	ldr	r3, [r7, #16]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	7812      	ldrb	r2, [r2, #0]
 800c606:	4413      	add	r3, r2
 800c608:	b29a      	uxth	r2, r3
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4413      	add	r3, r2
 800c618:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c61a:	68fb      	ldr	r3, [r7, #12]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c628:	b480      	push	{r7}
 800c62a:	b087      	sub	sp, #28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	3301      	adds	r3, #1
 800c63e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c646:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c64a:	021b      	lsls	r3, r3, #8
 800c64c:	b21a      	sxth	r2, r3
 800c64e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c652:	4313      	orrs	r3, r2
 800c654:	b21b      	sxth	r3, r3
 800c656:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c658:	89fb      	ldrh	r3, [r7, #14]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	371c      	adds	r7, #28
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c67e:	2b40      	cmp	r3, #64	@ 0x40
 800c680:	d005      	beq.n	800c68e <USBD_StdDevReq+0x26>
 800c682:	2b40      	cmp	r3, #64	@ 0x40
 800c684:	d857      	bhi.n	800c736 <USBD_StdDevReq+0xce>
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00f      	beq.n	800c6aa <USBD_StdDevReq+0x42>
 800c68a:	2b20      	cmp	r3, #32
 800c68c:	d153      	bne.n	800c736 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	32ae      	adds	r2, #174	@ 0xae
 800c698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	4798      	blx	r3
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a8:	e04a      	b.n	800c740 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	785b      	ldrb	r3, [r3, #1]
 800c6ae:	2b09      	cmp	r3, #9
 800c6b0:	d83b      	bhi.n	800c72a <USBD_StdDevReq+0xc2>
 800c6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b8 <USBD_StdDevReq+0x50>)
 800c6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b8:	0800c70d 	.word	0x0800c70d
 800c6bc:	0800c721 	.word	0x0800c721
 800c6c0:	0800c72b 	.word	0x0800c72b
 800c6c4:	0800c717 	.word	0x0800c717
 800c6c8:	0800c72b 	.word	0x0800c72b
 800c6cc:	0800c6eb 	.word	0x0800c6eb
 800c6d0:	0800c6e1 	.word	0x0800c6e1
 800c6d4:	0800c72b 	.word	0x0800c72b
 800c6d8:	0800c703 	.word	0x0800c703
 800c6dc:	0800c6f5 	.word	0x0800c6f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fa3e 	bl	800cb64 <USBD_GetDescriptor>
          break;
 800c6e8:	e024      	b.n	800c734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fba3 	bl	800ce38 <USBD_SetAddress>
          break;
 800c6f2:	e01f      	b.n	800c734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fbe2 	bl	800cec0 <USBD_SetConfig>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	73fb      	strb	r3, [r7, #15]
          break;
 800c700:	e018      	b.n	800c734 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fc85 	bl	800d014 <USBD_GetConfig>
          break;
 800c70a:	e013      	b.n	800c734 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fcb6 	bl	800d080 <USBD_GetStatus>
          break;
 800c714:	e00e      	b.n	800c734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fce5 	bl	800d0e8 <USBD_SetFeature>
          break;
 800c71e:	e009      	b.n	800c734 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fd09 	bl	800d13a <USBD_ClrFeature>
          break;
 800c728:	e004      	b.n	800c734 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fd60 	bl	800d1f2 <USBD_CtlError>
          break;
 800c732:	bf00      	nop
      }
      break;
 800c734:	e004      	b.n	800c740 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 fd5a 	bl	800d1f2 <USBD_CtlError>
      break;
 800c73e:	bf00      	nop
  }

  return ret;
 800c740:	7bfb      	ldrb	r3, [r7, #15]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop

0800c74c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c762:	2b40      	cmp	r3, #64	@ 0x40
 800c764:	d005      	beq.n	800c772 <USBD_StdItfReq+0x26>
 800c766:	2b40      	cmp	r3, #64	@ 0x40
 800c768:	d852      	bhi.n	800c810 <USBD_StdItfReq+0xc4>
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <USBD_StdItfReq+0x26>
 800c76e:	2b20      	cmp	r3, #32
 800c770:	d14e      	bne.n	800c810 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	3b01      	subs	r3, #1
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d840      	bhi.n	800c802 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	889b      	ldrh	r3, [r3, #4]
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b01      	cmp	r3, #1
 800c788:	d836      	bhi.n	800c7f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	889b      	ldrh	r3, [r3, #4]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff feda 	bl	800c54c <USBD_CoreFindIF>
 800c798:	4603      	mov	r3, r0
 800c79a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	2bff      	cmp	r3, #255	@ 0xff
 800c7a0:	d01d      	beq.n	800c7de <USBD_StdItfReq+0x92>
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d11a      	bne.n	800c7de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c7a8:	7bba      	ldrb	r2, [r7, #14]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	32ae      	adds	r2, #174	@ 0xae
 800c7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00f      	beq.n	800c7d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c7b8:	7bba      	ldrb	r2, [r7, #14]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c7c0:	7bba      	ldrb	r2, [r7, #14]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	32ae      	adds	r2, #174	@ 0xae
 800c7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	4798      	blx	r3
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c7d6:	e004      	b.n	800c7e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c7dc:	e001      	b.n	800c7e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	88db      	ldrh	r3, [r3, #6]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d110      	bne.n	800c80c <USBD_StdItfReq+0xc0>
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10d      	bne.n	800c80c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fddc 	bl	800d3ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c7f6:	e009      	b.n	800c80c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fcf9 	bl	800d1f2 <USBD_CtlError>
          break;
 800c800:	e004      	b.n	800c80c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fcf4 	bl	800d1f2 <USBD_CtlError>
          break;
 800c80a:	e000      	b.n	800c80e <USBD_StdItfReq+0xc2>
          break;
 800c80c:	bf00      	nop
      }
      break;
 800c80e:	e004      	b.n	800c81a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fced 	bl	800d1f2 <USBD_CtlError>
      break;
 800c818:	bf00      	nop
  }

  return ret;
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	889b      	ldrh	r3, [r3, #4]
 800c836:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c840:	2b40      	cmp	r3, #64	@ 0x40
 800c842:	d007      	beq.n	800c854 <USBD_StdEPReq+0x30>
 800c844:	2b40      	cmp	r3, #64	@ 0x40
 800c846:	f200 8181 	bhi.w	800cb4c <USBD_StdEPReq+0x328>
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d02a      	beq.n	800c8a4 <USBD_StdEPReq+0x80>
 800c84e:	2b20      	cmp	r3, #32
 800c850:	f040 817c 	bne.w	800cb4c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff fe84 	bl	800c566 <USBD_CoreFindEP>
 800c85e:	4603      	mov	r3, r0
 800c860:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c862:	7b7b      	ldrb	r3, [r7, #13]
 800c864:	2bff      	cmp	r3, #255	@ 0xff
 800c866:	f000 8176 	beq.w	800cb56 <USBD_StdEPReq+0x332>
 800c86a:	7b7b      	ldrb	r3, [r7, #13]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f040 8172 	bne.w	800cb56 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c872:	7b7a      	ldrb	r2, [r7, #13]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c87a:	7b7a      	ldrb	r2, [r7, #13]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	32ae      	adds	r2, #174	@ 0xae
 800c880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	2b00      	cmp	r3, #0
 800c888:	f000 8165 	beq.w	800cb56 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c88c:	7b7a      	ldrb	r2, [r7, #13]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	32ae      	adds	r2, #174	@ 0xae
 800c892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	4798      	blx	r3
 800c89e:	4603      	mov	r3, r0
 800c8a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c8a2:	e158      	b.n	800cb56 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	785b      	ldrb	r3, [r3, #1]
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d008      	beq.n	800c8be <USBD_StdEPReq+0x9a>
 800c8ac:	2b03      	cmp	r3, #3
 800c8ae:	f300 8147 	bgt.w	800cb40 <USBD_StdEPReq+0x31c>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 809b 	beq.w	800c9ee <USBD_StdEPReq+0x1ca>
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d03c      	beq.n	800c936 <USBD_StdEPReq+0x112>
 800c8bc:	e140      	b.n	800cb40 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d002      	beq.n	800c8d0 <USBD_StdEPReq+0xac>
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d016      	beq.n	800c8fc <USBD_StdEPReq+0xd8>
 800c8ce:	e02c      	b.n	800c92a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8d0:	7bbb      	ldrb	r3, [r7, #14]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00d      	beq.n	800c8f2 <USBD_StdEPReq+0xce>
 800c8d6:	7bbb      	ldrb	r3, [r7, #14]
 800c8d8:	2b80      	cmp	r3, #128	@ 0x80
 800c8da:	d00a      	beq.n	800c8f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f003 fef3 	bl	80106cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8e6:	2180      	movs	r1, #128	@ 0x80
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f003 feef 	bl	80106cc <USBD_LL_StallEP>
 800c8ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8f0:	e020      	b.n	800c934 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fc7c 	bl	800d1f2 <USBD_CtlError>
              break;
 800c8fa:	e01b      	b.n	800c934 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	885b      	ldrh	r3, [r3, #2]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10e      	bne.n	800c922 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <USBD_StdEPReq+0xfe>
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	2b80      	cmp	r3, #128	@ 0x80
 800c90e:	d008      	beq.n	800c922 <USBD_StdEPReq+0xfe>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	88db      	ldrh	r3, [r3, #6]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d104      	bne.n	800c922 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	4619      	mov	r1, r3
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f003 fed5 	bl	80106cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fd43 	bl	800d3ae <USBD_CtlSendStatus>

              break;
 800c928:	e004      	b.n	800c934 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fc60 	bl	800d1f2 <USBD_CtlError>
              break;
 800c932:	bf00      	nop
          }
          break;
 800c934:	e109      	b.n	800cb4a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d002      	beq.n	800c948 <USBD_StdEPReq+0x124>
 800c942:	2b03      	cmp	r3, #3
 800c944:	d016      	beq.n	800c974 <USBD_StdEPReq+0x150>
 800c946:	e04b      	b.n	800c9e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00d      	beq.n	800c96a <USBD_StdEPReq+0x146>
 800c94e:	7bbb      	ldrb	r3, [r7, #14]
 800c950:	2b80      	cmp	r3, #128	@ 0x80
 800c952:	d00a      	beq.n	800c96a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f003 feb7 	bl	80106cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c95e:	2180      	movs	r1, #128	@ 0x80
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f003 feb3 	bl	80106cc <USBD_LL_StallEP>
 800c966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c968:	e040      	b.n	800c9ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fc40 	bl	800d1f2 <USBD_CtlError>
              break;
 800c972:	e03b      	b.n	800c9ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	885b      	ldrh	r3, [r3, #2]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d136      	bne.n	800c9ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c982:	2b00      	cmp	r3, #0
 800c984:	d004      	beq.n	800c990 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c986:	7bbb      	ldrb	r3, [r7, #14]
 800c988:	4619      	mov	r1, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f003 febd 	bl	801070a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fd0c 	bl	800d3ae <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c996:	7bbb      	ldrb	r3, [r7, #14]
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff fde3 	bl	800c566 <USBD_CoreFindEP>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9a4:	7b7b      	ldrb	r3, [r7, #13]
 800c9a6:	2bff      	cmp	r3, #255	@ 0xff
 800c9a8:	d01f      	beq.n	800c9ea <USBD_StdEPReq+0x1c6>
 800c9aa:	7b7b      	ldrb	r3, [r7, #13]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d11c      	bne.n	800c9ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c9b0:	7b7a      	ldrb	r2, [r7, #13]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c9b8:	7b7a      	ldrb	r2, [r7, #13]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	32ae      	adds	r2, #174	@ 0xae
 800c9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d010      	beq.n	800c9ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c9c8:	7b7a      	ldrb	r2, [r7, #13]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	32ae      	adds	r2, #174	@ 0xae
 800c9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	6839      	ldr	r1, [r7, #0]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	4798      	blx	r3
 800c9da:	4603      	mov	r3, r0
 800c9dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c9de:	e004      	b.n	800c9ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fc05 	bl	800d1f2 <USBD_CtlError>
              break;
 800c9e8:	e000      	b.n	800c9ec <USBD_StdEPReq+0x1c8>
              break;
 800c9ea:	bf00      	nop
          }
          break;
 800c9ec:	e0ad      	b.n	800cb4a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d002      	beq.n	800ca00 <USBD_StdEPReq+0x1dc>
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d033      	beq.n	800ca66 <USBD_StdEPReq+0x242>
 800c9fe:	e099      	b.n	800cb34 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d007      	beq.n	800ca16 <USBD_StdEPReq+0x1f2>
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	2b80      	cmp	r3, #128	@ 0x80
 800ca0a:	d004      	beq.n	800ca16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fbef 	bl	800d1f2 <USBD_CtlError>
                break;
 800ca14:	e093      	b.n	800cb3e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	da0b      	bge.n	800ca36 <USBD_StdEPReq+0x212>
 800ca1e:	7bbb      	ldrb	r3, [r7, #14]
 800ca20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	3310      	adds	r3, #16
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	4413      	add	r3, r2
 800ca32:	3304      	adds	r3, #4
 800ca34:	e00b      	b.n	800ca4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	2200      	movs	r2, #0
 800ca54:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	330e      	adds	r3, #14
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fc44 	bl	800d2ec <USBD_CtlSendData>
              break;
 800ca64:	e06b      	b.n	800cb3e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	da11      	bge.n	800ca92 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	f003 020f 	and.w	r2, r3, #15
 800ca74:	6879      	ldr	r1, [r7, #4]
 800ca76:	4613      	mov	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	440b      	add	r3, r1
 800ca80:	3323      	adds	r3, #35	@ 0x23
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d117      	bne.n	800cab8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fbb1 	bl	800d1f2 <USBD_CtlError>
                  break;
 800ca90:	e055      	b.n	800cb3e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca92:	7bbb      	ldrb	r3, [r7, #14]
 800ca94:	f003 020f 	and.w	r2, r3, #15
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	440b      	add	r3, r1
 800caa4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fb9e 	bl	800d1f2 <USBD_CtlError>
                  break;
 800cab6:	e042      	b.n	800cb3e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	da0b      	bge.n	800cad8 <USBD_StdEPReq+0x2b4>
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cac6:	4613      	mov	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	3310      	adds	r3, #16
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	4413      	add	r3, r2
 800cad4:	3304      	adds	r3, #4
 800cad6:	e00b      	b.n	800caf0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cad8:	7bbb      	ldrb	r3, [r7, #14]
 800cada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cade:	4613      	mov	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	3304      	adds	r3, #4
 800caf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800caf2:	7bbb      	ldrb	r3, [r7, #14]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <USBD_StdEPReq+0x2da>
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	2b80      	cmp	r3, #128	@ 0x80
 800cafc:	d103      	bne.n	800cb06 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2200      	movs	r2, #0
 800cb02:	739a      	strb	r2, [r3, #14]
 800cb04:	e00e      	b.n	800cb24 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb06:	7bbb      	ldrb	r3, [r7, #14]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f003 fe1c 	bl	8010748 <USBD_LL_IsStallEP>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d003      	beq.n	800cb1e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	739a      	strb	r2, [r3, #14]
 800cb1c:	e002      	b.n	800cb24 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2200      	movs	r2, #0
 800cb22:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	330e      	adds	r3, #14
 800cb28:	2202      	movs	r2, #2
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fbdd 	bl	800d2ec <USBD_CtlSendData>
              break;
 800cb32:	e004      	b.n	800cb3e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800cb34:	6839      	ldr	r1, [r7, #0]
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 fb5b 	bl	800d1f2 <USBD_CtlError>
              break;
 800cb3c:	bf00      	nop
          }
          break;
 800cb3e:	e004      	b.n	800cb4a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800cb40:	6839      	ldr	r1, [r7, #0]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fb55 	bl	800d1f2 <USBD_CtlError>
          break;
 800cb48:	bf00      	nop
      }
      break;
 800cb4a:	e005      	b.n	800cb58 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fb4f 	bl	800d1f2 <USBD_CtlError>
      break;
 800cb54:	e000      	b.n	800cb58 <USBD_StdEPReq+0x334>
      break;
 800cb56:	bf00      	nop
  }

  return ret;
 800cb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
	...

0800cb64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb76:	2300      	movs	r3, #0
 800cb78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	885b      	ldrh	r3, [r3, #2]
 800cb7e:	0a1b      	lsrs	r3, r3, #8
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	3b01      	subs	r3, #1
 800cb84:	2b06      	cmp	r3, #6
 800cb86:	f200 8128 	bhi.w	800cdda <USBD_GetDescriptor+0x276>
 800cb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb90 <USBD_GetDescriptor+0x2c>)
 800cb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb90:	0800cbad 	.word	0x0800cbad
 800cb94:	0800cbc5 	.word	0x0800cbc5
 800cb98:	0800cc05 	.word	0x0800cc05
 800cb9c:	0800cddb 	.word	0x0800cddb
 800cba0:	0800cddb 	.word	0x0800cddb
 800cba4:	0800cd7b 	.word	0x0800cd7b
 800cba8:	0800cda7 	.word	0x0800cda7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	7c12      	ldrb	r2, [r2, #16]
 800cbb8:	f107 0108 	add.w	r1, r7, #8
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	4798      	blx	r3
 800cbc0:	60f8      	str	r0, [r7, #12]
      break;
 800cbc2:	e112      	b.n	800cdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7c1b      	ldrb	r3, [r3, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10d      	bne.n	800cbe8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbd4:	f107 0208 	add.w	r2, r7, #8
 800cbd8:	4610      	mov	r0, r2
 800cbda:	4798      	blx	r3
 800cbdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	2202      	movs	r2, #2
 800cbe4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cbe6:	e100      	b.n	800cdea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf0:	f107 0208 	add.w	r2, r7, #8
 800cbf4:	4610      	mov	r0, r2
 800cbf6:	4798      	blx	r3
 800cbf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	2202      	movs	r2, #2
 800cc00:	701a      	strb	r2, [r3, #0]
      break;
 800cc02:	e0f2      	b.n	800cdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	885b      	ldrh	r3, [r3, #2]
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b05      	cmp	r3, #5
 800cc0c:	f200 80ac 	bhi.w	800cd68 <USBD_GetDescriptor+0x204>
 800cc10:	a201      	add	r2, pc, #4	@ (adr r2, 800cc18 <USBD_GetDescriptor+0xb4>)
 800cc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc16:	bf00      	nop
 800cc18:	0800cc31 	.word	0x0800cc31
 800cc1c:	0800cc65 	.word	0x0800cc65
 800cc20:	0800cc99 	.word	0x0800cc99
 800cc24:	0800cccd 	.word	0x0800cccd
 800cc28:	0800cd01 	.word	0x0800cd01
 800cc2c:	0800cd35 	.word	0x0800cd35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	7c12      	ldrb	r2, [r2, #16]
 800cc48:	f107 0108 	add.w	r1, r7, #8
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	4798      	blx	r3
 800cc50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc52:	e091      	b.n	800cd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 facb 	bl	800d1f2 <USBD_CtlError>
            err++;
 800cc5c:	7afb      	ldrb	r3, [r7, #11]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	72fb      	strb	r3, [r7, #11]
          break;
 800cc62:	e089      	b.n	800cd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	7c12      	ldrb	r2, [r2, #16]
 800cc7c:	f107 0108 	add.w	r1, r7, #8
 800cc80:	4610      	mov	r0, r2
 800cc82:	4798      	blx	r3
 800cc84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc86:	e077      	b.n	800cd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fab1 	bl	800d1f2 <USBD_CtlError>
            err++;
 800cc90:	7afb      	ldrb	r3, [r7, #11]
 800cc92:	3301      	adds	r3, #1
 800cc94:	72fb      	strb	r3, [r7, #11]
          break;
 800cc96:	e06f      	b.n	800cd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	7c12      	ldrb	r2, [r2, #16]
 800ccb0:	f107 0108 	add.w	r1, r7, #8
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	4798      	blx	r3
 800ccb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccba:	e05d      	b.n	800cd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fa97 	bl	800d1f2 <USBD_CtlError>
            err++;
 800ccc4:	7afb      	ldrb	r3, [r7, #11]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccca:	e055      	b.n	800cd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00b      	beq.n	800ccf0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	7c12      	ldrb	r2, [r2, #16]
 800cce4:	f107 0108 	add.w	r1, r7, #8
 800cce8:	4610      	mov	r0, r2
 800ccea:	4798      	blx	r3
 800ccec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccee:	e043      	b.n	800cd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fa7d 	bl	800d1f2 <USBD_CtlError>
            err++;
 800ccf8:	7afb      	ldrb	r3, [r7, #11]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	72fb      	strb	r3, [r7, #11]
          break;
 800ccfe:	e03b      	b.n	800cd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd06:	695b      	ldr	r3, [r3, #20]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00b      	beq.n	800cd24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	7c12      	ldrb	r2, [r2, #16]
 800cd18:	f107 0108 	add.w	r1, r7, #8
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	4798      	blx	r3
 800cd20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd22:	e029      	b.n	800cd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fa63 	bl	800d1f2 <USBD_CtlError>
            err++;
 800cd2c:	7afb      	ldrb	r3, [r7, #11]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	72fb      	strb	r3, [r7, #11]
          break;
 800cd32:	e021      	b.n	800cd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd3a:	699b      	ldr	r3, [r3, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00b      	beq.n	800cd58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd46:	699b      	ldr	r3, [r3, #24]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	7c12      	ldrb	r2, [r2, #16]
 800cd4c:	f107 0108 	add.w	r1, r7, #8
 800cd50:	4610      	mov	r0, r2
 800cd52:	4798      	blx	r3
 800cd54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd56:	e00f      	b.n	800cd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 fa49 	bl	800d1f2 <USBD_CtlError>
            err++;
 800cd60:	7afb      	ldrb	r3, [r7, #11]
 800cd62:	3301      	adds	r3, #1
 800cd64:	72fb      	strb	r3, [r7, #11]
          break;
 800cd66:	e007      	b.n	800cd78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa41 	bl	800d1f2 <USBD_CtlError>
          err++;
 800cd70:	7afb      	ldrb	r3, [r7, #11]
 800cd72:	3301      	adds	r3, #1
 800cd74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cd76:	bf00      	nop
      }
      break;
 800cd78:	e037      	b.n	800cdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7c1b      	ldrb	r3, [r3, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d109      	bne.n	800cd96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd8a:	f107 0208 	add.w	r2, r7, #8
 800cd8e:	4610      	mov	r0, r2
 800cd90:	4798      	blx	r3
 800cd92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd94:	e029      	b.n	800cdea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd96:	6839      	ldr	r1, [r7, #0]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 fa2a 	bl	800d1f2 <USBD_CtlError>
        err++;
 800cd9e:	7afb      	ldrb	r3, [r7, #11]
 800cda0:	3301      	adds	r3, #1
 800cda2:	72fb      	strb	r3, [r7, #11]
      break;
 800cda4:	e021      	b.n	800cdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	7c1b      	ldrb	r3, [r3, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10d      	bne.n	800cdca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb6:	f107 0208 	add.w	r2, r7, #8
 800cdba:	4610      	mov	r0, r2
 800cdbc:	4798      	blx	r3
 800cdbe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	2207      	movs	r2, #7
 800cdc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdc8:	e00f      	b.n	800cdea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fa10 	bl	800d1f2 <USBD_CtlError>
        err++;
 800cdd2:	7afb      	ldrb	r3, [r7, #11]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	72fb      	strb	r3, [r7, #11]
      break;
 800cdd8:	e007      	b.n	800cdea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fa08 	bl	800d1f2 <USBD_CtlError>
      err++;
 800cde2:	7afb      	ldrb	r3, [r7, #11]
 800cde4:	3301      	adds	r3, #1
 800cde6:	72fb      	strb	r3, [r7, #11]
      break;
 800cde8:	bf00      	nop
  }

  if (err != 0U)
 800cdea:	7afb      	ldrb	r3, [r7, #11]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d11e      	bne.n	800ce2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	88db      	ldrh	r3, [r3, #6]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d016      	beq.n	800ce26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cdf8:	893b      	ldrh	r3, [r7, #8]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00e      	beq.n	800ce1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	88da      	ldrh	r2, [r3, #6]
 800ce02:	893b      	ldrh	r3, [r7, #8]
 800ce04:	4293      	cmp	r3, r2
 800ce06:	bf28      	it	cs
 800ce08:	4613      	movcs	r3, r2
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce0e:	893b      	ldrh	r3, [r7, #8]
 800ce10:	461a      	mov	r2, r3
 800ce12:	68f9      	ldr	r1, [r7, #12]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fa69 	bl	800d2ec <USBD_CtlSendData>
 800ce1a:	e009      	b.n	800ce30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f9e7 	bl	800d1f2 <USBD_CtlError>
 800ce24:	e004      	b.n	800ce30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fac1 	bl	800d3ae <USBD_CtlSendStatus>
 800ce2c:	e000      	b.n	800ce30 <USBD_GetDescriptor+0x2cc>
    return;
 800ce2e:	bf00      	nop
  }
}
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop

0800ce38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	889b      	ldrh	r3, [r3, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d131      	bne.n	800ceae <USBD_SetAddress+0x76>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	88db      	ldrh	r3, [r3, #6]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d12d      	bne.n	800ceae <USBD_SetAddress+0x76>
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce58:	d829      	bhi.n	800ceae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	885b      	ldrh	r3, [r3, #2]
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d104      	bne.n	800ce7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f9bc 	bl	800d1f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce7a:	e01d      	b.n	800ceb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	7bfa      	ldrb	r2, [r7, #15]
 800ce80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f003 fc89 	bl	80107a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fa8d 	bl	800d3ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d004      	beq.n	800cea4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cea2:	e009      	b.n	800ceb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceac:	e004      	b.n	800ceb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f99e 	bl	800d1f2 <USBD_CtlError>
  }
}
 800ceb6:	bf00      	nop
 800ceb8:	bf00      	nop
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	885b      	ldrh	r3, [r3, #2]
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	4b4e      	ldr	r3, [pc, #312]	@ (800d010 <USBD_SetConfig+0x150>)
 800ced6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ced8:	4b4d      	ldr	r3, [pc, #308]	@ (800d010 <USBD_SetConfig+0x150>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d905      	bls.n	800ceec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f985 	bl	800d1f2 <USBD_CtlError>
    return USBD_FAIL;
 800cee8:	2303      	movs	r3, #3
 800ceea:	e08c      	b.n	800d006 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d002      	beq.n	800cefe <USBD_SetConfig+0x3e>
 800cef8:	2b03      	cmp	r3, #3
 800cefa:	d029      	beq.n	800cf50 <USBD_SetConfig+0x90>
 800cefc:	e075      	b.n	800cfea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cefe:	4b44      	ldr	r3, [pc, #272]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d020      	beq.n	800cf48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cf06:	4b42      	ldr	r3, [pc, #264]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf10:	4b3f      	ldr	r3, [pc, #252]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7fe ffcd 	bl	800beb6 <USBD_SetClassConfig>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d008      	beq.n	800cf38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f962 	bl	800d1f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2202      	movs	r2, #2
 800cf32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf36:	e065      	b.n	800d004 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fa38 	bl	800d3ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2203      	movs	r2, #3
 800cf42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cf46:	e05d      	b.n	800d004 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fa30 	bl	800d3ae <USBD_CtlSendStatus>
      break;
 800cf4e:	e059      	b.n	800d004 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf50:	4b2f      	ldr	r3, [pc, #188]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d112      	bne.n	800cf7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cf60:	4b2b      	ldr	r3, [pc, #172]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	461a      	mov	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf6a:	4b29      	ldr	r3, [pc, #164]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7fe ffbc 	bl	800beee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa19 	bl	800d3ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf7c:	e042      	b.n	800d004 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cf7e:	4b24      	ldr	r3, [pc, #144]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	461a      	mov	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d02a      	beq.n	800cfe2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7fe ffaa 	bl	800beee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cf9a:	4b1d      	ldr	r3, [pc, #116]	@ (800d010 <USBD_SetConfig+0x150>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfa4:	4b1a      	ldr	r3, [pc, #104]	@ (800d010 <USBD_SetConfig+0x150>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7fe ff83 	bl	800beb6 <USBD_SetClassConfig>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d00f      	beq.n	800cfda <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f918 	bl	800d1f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7fe ff8f 	bl	800beee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cfd8:	e014      	b.n	800d004 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f9e7 	bl	800d3ae <USBD_CtlSendStatus>
      break;
 800cfe0:	e010      	b.n	800d004 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f9e3 	bl	800d3ae <USBD_CtlSendStatus>
      break;
 800cfe8:	e00c      	b.n	800d004 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f900 	bl	800d1f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cff2:	4b07      	ldr	r3, [pc, #28]	@ (800d010 <USBD_SetConfig+0x150>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7fe ff78 	bl	800beee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	73fb      	strb	r3, [r7, #15]
      break;
 800d002:	bf00      	nop
  }

  return ret;
 800d004:	7bfb      	ldrb	r3, [r7, #15]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	20004a44 	.word	0x20004a44

0800d014 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	88db      	ldrh	r3, [r3, #6]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d004      	beq.n	800d030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f8e2 	bl	800d1f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d02e:	e023      	b.n	800d078 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d036:	b2db      	uxtb	r3, r3
 800d038:	2b02      	cmp	r3, #2
 800d03a:	dc02      	bgt.n	800d042 <USBD_GetConfig+0x2e>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dc03      	bgt.n	800d048 <USBD_GetConfig+0x34>
 800d040:	e015      	b.n	800d06e <USBD_GetConfig+0x5a>
 800d042:	2b03      	cmp	r3, #3
 800d044:	d00b      	beq.n	800d05e <USBD_GetConfig+0x4a>
 800d046:	e012      	b.n	800d06e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	3308      	adds	r3, #8
 800d052:	2201      	movs	r2, #1
 800d054:	4619      	mov	r1, r3
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f948 	bl	800d2ec <USBD_CtlSendData>
        break;
 800d05c:	e00c      	b.n	800d078 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3304      	adds	r3, #4
 800d062:	2201      	movs	r2, #1
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 f940 	bl	800d2ec <USBD_CtlSendData>
        break;
 800d06c:	e004      	b.n	800d078 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 f8be 	bl	800d1f2 <USBD_CtlError>
        break;
 800d076:	bf00      	nop
}
 800d078:	bf00      	nop
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d090:	b2db      	uxtb	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	2b02      	cmp	r3, #2
 800d096:	d81e      	bhi.n	800d0d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	88db      	ldrh	r3, [r3, #6]
 800d09c:	2b02      	cmp	r3, #2
 800d09e:	d004      	beq.n	800d0aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 f8a5 	bl	800d1f2 <USBD_CtlError>
        break;
 800d0a8:	e01a      	b.n	800d0e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	f043 0202 	orr.w	r2, r3, #2
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	330c      	adds	r3, #12
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f90c 	bl	800d2ec <USBD_CtlSendData>
      break;
 800d0d4:	e004      	b.n	800d0e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 f88a 	bl	800d1f2 <USBD_CtlError>
      break;
 800d0de:	bf00      	nop
  }
}
 800d0e0:	bf00      	nop
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	885b      	ldrh	r3, [r3, #2]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d107      	bne.n	800d10a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f953 	bl	800d3ae <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d108:	e013      	b.n	800d132 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	885b      	ldrh	r3, [r3, #2]
 800d10e:	2b02      	cmp	r3, #2
 800d110:	d10b      	bne.n	800d12a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	889b      	ldrh	r3, [r3, #4]
 800d116:	0a1b      	lsrs	r3, r3, #8
 800d118:	b29b      	uxth	r3, r3
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f943 	bl	800d3ae <USBD_CtlSendStatus>
}
 800d128:	e003      	b.n	800d132 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f860 	bl	800d1f2 <USBD_CtlError>
}
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b082      	sub	sp, #8
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	3b01      	subs	r3, #1
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d80b      	bhi.n	800d16a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	885b      	ldrh	r3, [r3, #2]
 800d156:	2b01      	cmp	r3, #1
 800d158:	d10c      	bne.n	800d174 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f923 	bl	800d3ae <USBD_CtlSendStatus>
      }
      break;
 800d168:	e004      	b.n	800d174 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f840 	bl	800d1f2 <USBD_CtlError>
      break;
 800d172:	e000      	b.n	800d176 <USBD_ClrFeature+0x3c>
      break;
 800d174:	bf00      	nop
  }
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	781a      	ldrb	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3301      	adds	r3, #1
 800d198:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	781a      	ldrb	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f7ff fa3d 	bl	800c628 <SWAPBYTE>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f7ff fa30 	bl	800c628 <SWAPBYTE>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f7ff fa23 	bl	800c628 <SWAPBYTE>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	80da      	strh	r2, [r3, #6]
}
 800d1ea:	bf00      	nop
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1fc:	2180      	movs	r1, #128	@ 0x80
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f003 fa64 	bl	80106cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d204:	2100      	movs	r1, #0
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f003 fa60 	bl	80106cc <USBD_LL_StallEP>
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d220:	2300      	movs	r3, #0
 800d222:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d042      	beq.n	800d2b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d22e:	6938      	ldr	r0, [r7, #16]
 800d230:	f000 f842 	bl	800d2b8 <USBD_GetLen>
 800d234:	4603      	mov	r3, r0
 800d236:	3301      	adds	r3, #1
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d23e:	d808      	bhi.n	800d252 <USBD_GetString+0x3e>
 800d240:	6938      	ldr	r0, [r7, #16]
 800d242:	f000 f839 	bl	800d2b8 <USBD_GetLen>
 800d246:	4603      	mov	r3, r0
 800d248:	3301      	adds	r3, #1
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	b29a      	uxth	r2, r3
 800d250:	e001      	b.n	800d256 <USBD_GetString+0x42>
 800d252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	4413      	add	r3, r2
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	7812      	ldrb	r2, [r2, #0]
 800d264:	701a      	strb	r2, [r3, #0]
  idx++;
 800d266:	7dfb      	ldrb	r3, [r7, #23]
 800d268:	3301      	adds	r3, #1
 800d26a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d26c:	7dfb      	ldrb	r3, [r7, #23]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	4413      	add	r3, r2
 800d272:	2203      	movs	r2, #3
 800d274:	701a      	strb	r2, [r3, #0]
  idx++;
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	3301      	adds	r3, #1
 800d27a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d27c:	e013      	b.n	800d2a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d27e:	7dfb      	ldrb	r3, [r7, #23]
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	4413      	add	r3, r2
 800d284:	693a      	ldr	r2, [r7, #16]
 800d286:	7812      	ldrb	r2, [r2, #0]
 800d288:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	3301      	adds	r3, #1
 800d28e:	613b      	str	r3, [r7, #16]
    idx++;
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	3301      	adds	r3, #1
 800d294:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	4413      	add	r3, r2
 800d29c:	2200      	movs	r2, #0
 800d29e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1e7      	bne.n	800d27e <USBD_GetString+0x6a>
 800d2ae:	e000      	b.n	800d2b2 <USBD_GetString+0x9e>
    return;
 800d2b0:	bf00      	nop
  }
}
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2c8:	e005      	b.n	800d2d6 <USBD_GetLen+0x1e>
  {
    len++;
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1f5      	bne.n	800d2ca <USBD_GetLen+0x12>
  }

  return len;
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	2100      	movs	r1, #0
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f003 fa60 	bl	80107de <USBD_LL_Transmit>

  return USBD_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	2100      	movs	r1, #0
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f003 fa4f 	bl	80107de <USBD_LL_Transmit>

  return USBD_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b084      	sub	sp, #16
 800d34e:	af00      	add	r7, sp, #0
 800d350:	60f8      	str	r0, [r7, #12]
 800d352:	60b9      	str	r1, [r7, #8]
 800d354:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2203      	movs	r2, #3
 800d35a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	2100      	movs	r1, #0
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f003 fa4f 	bl	8010820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	2100      	movs	r1, #0
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f003 fa3e 	bl	8010820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2204      	movs	r2, #4
 800d3ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3be:	2300      	movs	r3, #0
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f003 fa0a 	bl	80107de <USBD_LL_Transmit>

  return USBD_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2205      	movs	r2, #5
 800d3e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f003 fa18 	bl	8010820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
	...

0800d3fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	4603      	mov	r3, r0
 800d404:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	4a08      	ldr	r2, [pc, #32]	@ (800d42c <disk_status+0x30>)
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4413      	add	r3, r2
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	79fa      	ldrb	r2, [r7, #7]
 800d414:	4905      	ldr	r1, [pc, #20]	@ (800d42c <disk_status+0x30>)
 800d416:	440a      	add	r2, r1
 800d418:	7a12      	ldrb	r2, [r2, #8]
 800d41a:	4610      	mov	r0, r2
 800d41c:	4798      	blx	r3
 800d41e:	4603      	mov	r3, r0
 800d420:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20004a70 	.word	0x20004a70

0800d430 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	4603      	mov	r3, r0
 800d438:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	4a0e      	ldr	r2, [pc, #56]	@ (800d47c <disk_initialize+0x4c>)
 800d442:	5cd3      	ldrb	r3, [r2, r3]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d114      	bne.n	800d472 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	4a0c      	ldr	r2, [pc, #48]	@ (800d47c <disk_initialize+0x4c>)
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	4413      	add	r3, r2
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	79fa      	ldrb	r2, [r7, #7]
 800d456:	4909      	ldr	r1, [pc, #36]	@ (800d47c <disk_initialize+0x4c>)
 800d458:	440a      	add	r2, r1
 800d45a:	7a12      	ldrb	r2, [r2, #8]
 800d45c:	4610      	mov	r0, r2
 800d45e:	4798      	blx	r3
 800d460:	4603      	mov	r3, r0
 800d462:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d464:	7bfb      	ldrb	r3, [r7, #15]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d103      	bne.n	800d472 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	4a03      	ldr	r2, [pc, #12]	@ (800d47c <disk_initialize+0x4c>)
 800d46e:	2101      	movs	r1, #1
 800d470:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d472:	7bfb      	ldrb	r3, [r7, #15]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20004a70 	.word	0x20004a70

0800d480 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d480:	b590      	push	{r4, r7, lr}
 800d482:	b087      	sub	sp, #28
 800d484:	af00      	add	r7, sp, #0
 800d486:	60b9      	str	r1, [r7, #8]
 800d488:	607a      	str	r2, [r7, #4]
 800d48a:	603b      	str	r3, [r7, #0]
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	4a0a      	ldr	r2, [pc, #40]	@ (800d4bc <disk_read+0x3c>)
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	689c      	ldr	r4, [r3, #8]
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	4a07      	ldr	r2, [pc, #28]	@ (800d4bc <disk_read+0x3c>)
 800d4a0:	4413      	add	r3, r2
 800d4a2:	7a18      	ldrb	r0, [r3, #8]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	68b9      	ldr	r1, [r7, #8]
 800d4aa:	47a0      	blx	r4
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd90      	pop	{r4, r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20004a70 	.word	0x20004a70

0800d4c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60b9      	str	r1, [r7, #8]
 800d4c8:	607a      	str	r2, [r7, #4]
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d4d0:	7bfb      	ldrb	r3, [r7, #15]
 800d4d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d4fc <disk_write+0x3c>)
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4413      	add	r3, r2
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	68dc      	ldr	r4, [r3, #12]
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
 800d4de:	4a07      	ldr	r2, [pc, #28]	@ (800d4fc <disk_write+0x3c>)
 800d4e0:	4413      	add	r3, r2
 800d4e2:	7a18      	ldrb	r0, [r3, #8]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	47a0      	blx	r4
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd90      	pop	{r4, r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20004a70 	.word	0x20004a70

0800d500 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	603a      	str	r2, [r7, #0]
 800d50a:	71fb      	strb	r3, [r7, #7]
 800d50c:	460b      	mov	r3, r1
 800d50e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d510:	79fb      	ldrb	r3, [r7, #7]
 800d512:	4a09      	ldr	r2, [pc, #36]	@ (800d538 <disk_ioctl+0x38>)
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	79fa      	ldrb	r2, [r7, #7]
 800d51e:	4906      	ldr	r1, [pc, #24]	@ (800d538 <disk_ioctl+0x38>)
 800d520:	440a      	add	r2, r1
 800d522:	7a10      	ldrb	r0, [r2, #8]
 800d524:	79b9      	ldrb	r1, [r7, #6]
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	4798      	blx	r3
 800d52a:	4603      	mov	r3, r0
 800d52c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	20004a70 	.word	0x20004a70

0800d53c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	3301      	adds	r3, #1
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d54c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d550:	021b      	lsls	r3, r3, #8
 800d552:	b21a      	sxth	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	b21b      	sxth	r3, r3
 800d55a:	4313      	orrs	r3, r2
 800d55c:	b21b      	sxth	r3, r3
 800d55e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d560:	89fb      	ldrh	r3, [r7, #14]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3714      	adds	r7, #20
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d56e:	b480      	push	{r7}
 800d570:	b085      	sub	sp, #20
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3303      	adds	r3, #3
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	021b      	lsls	r3, r3, #8
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	3202      	adds	r2, #2
 800d586:	7812      	ldrb	r2, [r2, #0]
 800d588:	4313      	orrs	r3, r2
 800d58a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	021b      	lsls	r3, r3, #8
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	3201      	adds	r2, #1
 800d594:	7812      	ldrb	r2, [r2, #0]
 800d596:	4313      	orrs	r3, r2
 800d598:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	021b      	lsls	r3, r3, #8
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	7812      	ldrb	r2, [r2, #0]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]
	return rv;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3714      	adds	r7, #20
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	1c5a      	adds	r2, r3, #1
 800d5c4:	607a      	str	r2, [r7, #4]
 800d5c6:	887a      	ldrh	r2, [r7, #2]
 800d5c8:	b2d2      	uxtb	r2, r2
 800d5ca:	701a      	strb	r2, [r3, #0]
 800d5cc:	887b      	ldrh	r3, [r7, #2]
 800d5ce:	0a1b      	lsrs	r3, r3, #8
 800d5d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	1c5a      	adds	r2, r3, #1
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	887a      	ldrh	r2, [r7, #2]
 800d5da:	b2d2      	uxtb	r2, r2
 800d5dc:	701a      	strb	r2, [r3, #0]
}
 800d5de:	bf00      	nop
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	1c5a      	adds	r2, r3, #1
 800d5f8:	607a      	str	r2, [r7, #4]
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	b2d2      	uxtb	r2, r2
 800d5fe:	701a      	strb	r2, [r3, #0]
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	0a1b      	lsrs	r3, r3, #8
 800d604:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	1c5a      	adds	r2, r3, #1
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	b2d2      	uxtb	r2, r2
 800d610:	701a      	strb	r2, [r3, #0]
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	0a1b      	lsrs	r3, r3, #8
 800d616:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	607a      	str	r2, [r7, #4]
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	b2d2      	uxtb	r2, r2
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	0a1b      	lsrs	r3, r3, #8
 800d628:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	607a      	str	r2, [r7, #4]
 800d630:	683a      	ldr	r2, [r7, #0]
 800d632:	b2d2      	uxtb	r2, r2
 800d634:	701a      	strb	r2, [r3, #0]
}
 800d636:	bf00      	nop
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d642:	b480      	push	{r7}
 800d644:	b087      	sub	sp, #28
 800d646:	af00      	add	r7, sp, #0
 800d648:	60f8      	str	r0, [r7, #12]
 800d64a:	60b9      	str	r1, [r7, #8]
 800d64c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00d      	beq.n	800d678 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	1c53      	adds	r3, r2, #1
 800d660:	613b      	str	r3, [r7, #16]
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	1c59      	adds	r1, r3, #1
 800d666:	6179      	str	r1, [r7, #20]
 800d668:	7812      	ldrb	r2, [r2, #0]
 800d66a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3b01      	subs	r3, #1
 800d670:	607b      	str	r3, [r7, #4]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1f1      	bne.n	800d65c <mem_cpy+0x1a>
	}
}
 800d678:	bf00      	nop
 800d67a:	371c      	adds	r7, #28
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	617a      	str	r2, [r7, #20]
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	b2d2      	uxtb	r2, r2
 800d69e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	607b      	str	r3, [r7, #4]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1f3      	bne.n	800d694 <mem_set+0x10>
}
 800d6ac:	bf00      	nop
 800d6ae:	bf00      	nop
 800d6b0:	371c      	adds	r7, #28
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d6ba:	b480      	push	{r7}
 800d6bc:	b089      	sub	sp, #36	@ 0x24
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	60f8      	str	r0, [r7, #12]
 800d6c2:	60b9      	str	r1, [r7, #8]
 800d6c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	61fb      	str	r3, [r7, #28]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	1c5a      	adds	r2, r3, #1
 800d6d6:	61fa      	str	r2, [r7, #28]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	61ba      	str	r2, [r7, #24]
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	1acb      	subs	r3, r1, r3
 800d6e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	607b      	str	r3, [r7, #4]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <mem_cmp+0x40>
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d0eb      	beq.n	800d6d2 <mem_cmp+0x18>

	return r;
 800d6fa:	697b      	ldr	r3, [r7, #20]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3724      	adds	r7, #36	@ 0x24
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d712:	e002      	b.n	800d71a <chk_chr+0x12>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	3301      	adds	r3, #1
 800d718:	607b      	str	r3, [r7, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <chk_chr+0x26>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d1f2      	bne.n	800d714 <chk_chr+0xc>
	return *str;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	781b      	ldrb	r3, [r3, #0]
}
 800d732:	4618      	mov	r0, r3
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
	...

0800d740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d74a:	2300      	movs	r3, #0
 800d74c:	60bb      	str	r3, [r7, #8]
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	e029      	b.n	800d7a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d754:	4a27      	ldr	r2, [pc, #156]	@ (800d7f4 <chk_lock+0xb4>)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	011b      	lsls	r3, r3, #4
 800d75a:	4413      	add	r3, r2
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d01d      	beq.n	800d79e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d762:	4a24      	ldr	r2, [pc, #144]	@ (800d7f4 <chk_lock+0xb4>)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	011b      	lsls	r3, r3, #4
 800d768:	4413      	add	r3, r2
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d116      	bne.n	800d7a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d774:	4a1f      	ldr	r2, [pc, #124]	@ (800d7f4 <chk_lock+0xb4>)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	011b      	lsls	r3, r3, #4
 800d77a:	4413      	add	r3, r2
 800d77c:	3304      	adds	r3, #4
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d784:	429a      	cmp	r2, r3
 800d786:	d10c      	bne.n	800d7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d788:	4a1a      	ldr	r2, [pc, #104]	@ (800d7f4 <chk_lock+0xb4>)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	011b      	lsls	r3, r3, #4
 800d78e:	4413      	add	r3, r2
 800d790:	3308      	adds	r3, #8
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d798:	429a      	cmp	r2, r3
 800d79a:	d102      	bne.n	800d7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d79c:	e007      	b.n	800d7ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d9d2      	bls.n	800d754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d109      	bne.n	800d7c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d102      	bne.n	800d7c0 <chk_lock+0x80>
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d101      	bne.n	800d7c4 <chk_lock+0x84>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e010      	b.n	800d7e6 <chk_lock+0xa6>
 800d7c4:	2312      	movs	r3, #18
 800d7c6:	e00e      	b.n	800d7e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d108      	bne.n	800d7e0 <chk_lock+0xa0>
 800d7ce:	4a09      	ldr	r2, [pc, #36]	@ (800d7f4 <chk_lock+0xb4>)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	011b      	lsls	r3, r3, #4
 800d7d4:	4413      	add	r3, r2
 800d7d6:	330c      	adds	r3, #12
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7de:	d101      	bne.n	800d7e4 <chk_lock+0xa4>
 800d7e0:	2310      	movs	r3, #16
 800d7e2:	e000      	b.n	800d7e6 <chk_lock+0xa6>
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3714      	adds	r7, #20
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20004a50 	.word	0x20004a50

0800d7f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7fe:	2300      	movs	r3, #0
 800d800:	607b      	str	r3, [r7, #4]
 800d802:	e002      	b.n	800d80a <enq_lock+0x12>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3301      	adds	r3, #1
 800d808:	607b      	str	r3, [r7, #4]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d806      	bhi.n	800d81e <enq_lock+0x26>
 800d810:	4a09      	ldr	r2, [pc, #36]	@ (800d838 <enq_lock+0x40>)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	011b      	lsls	r3, r3, #4
 800d816:	4413      	add	r3, r2
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1f2      	bne.n	800d804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2b02      	cmp	r3, #2
 800d822:	bf14      	ite	ne
 800d824:	2301      	movne	r3, #1
 800d826:	2300      	moveq	r3, #0
 800d828:	b2db      	uxtb	r3, r3
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	370c      	adds	r7, #12
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	20004a50 	.word	0x20004a50

0800d83c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b085      	sub	sp, #20
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
 800d84a:	e01f      	b.n	800d88c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d84c:	4a41      	ldr	r2, [pc, #260]	@ (800d954 <inc_lock+0x118>)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	011b      	lsls	r3, r3, #4
 800d852:	4413      	add	r3, r2
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d113      	bne.n	800d886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d85e:	4a3d      	ldr	r2, [pc, #244]	@ (800d954 <inc_lock+0x118>)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	011b      	lsls	r3, r3, #4
 800d864:	4413      	add	r3, r2
 800d866:	3304      	adds	r3, #4
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d86e:	429a      	cmp	r2, r3
 800d870:	d109      	bne.n	800d886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d872:	4a38      	ldr	r2, [pc, #224]	@ (800d954 <inc_lock+0x118>)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	011b      	lsls	r3, r3, #4
 800d878:	4413      	add	r3, r2
 800d87a:	3308      	adds	r3, #8
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d882:	429a      	cmp	r2, r3
 800d884:	d006      	beq.n	800d894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	3301      	adds	r3, #1
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d9dc      	bls.n	800d84c <inc_lock+0x10>
 800d892:	e000      	b.n	800d896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d132      	bne.n	800d902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	e002      	b.n	800d8a8 <inc_lock+0x6c>
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d806      	bhi.n	800d8bc <inc_lock+0x80>
 800d8ae:	4a29      	ldr	r2, [pc, #164]	@ (800d954 <inc_lock+0x118>)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	011b      	lsls	r3, r3, #4
 800d8b4:	4413      	add	r3, r2
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1f2      	bne.n	800d8a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b02      	cmp	r3, #2
 800d8c0:	d101      	bne.n	800d8c6 <inc_lock+0x8a>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e040      	b.n	800d948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	4922      	ldr	r1, [pc, #136]	@ (800d954 <inc_lock+0x118>)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	011b      	lsls	r3, r3, #4
 800d8d0:	440b      	add	r3, r1
 800d8d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	689a      	ldr	r2, [r3, #8]
 800d8d8:	491e      	ldr	r1, [pc, #120]	@ (800d954 <inc_lock+0x118>)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	011b      	lsls	r3, r3, #4
 800d8de:	440b      	add	r3, r1
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	695a      	ldr	r2, [r3, #20]
 800d8e8:	491a      	ldr	r1, [pc, #104]	@ (800d954 <inc_lock+0x118>)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	011b      	lsls	r3, r3, #4
 800d8ee:	440b      	add	r3, r1
 800d8f0:	3308      	adds	r3, #8
 800d8f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d8f4:	4a17      	ldr	r2, [pc, #92]	@ (800d954 <inc_lock+0x118>)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	011b      	lsls	r3, r3, #4
 800d8fa:	4413      	add	r3, r2
 800d8fc:	330c      	adds	r3, #12
 800d8fe:	2200      	movs	r2, #0
 800d900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d009      	beq.n	800d91c <inc_lock+0xe0>
 800d908:	4a12      	ldr	r2, [pc, #72]	@ (800d954 <inc_lock+0x118>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	011b      	lsls	r3, r3, #4
 800d90e:	4413      	add	r3, r2
 800d910:	330c      	adds	r3, #12
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <inc_lock+0xe0>
 800d918:	2300      	movs	r3, #0
 800d91a:	e015      	b.n	800d948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d108      	bne.n	800d934 <inc_lock+0xf8>
 800d922:	4a0c      	ldr	r2, [pc, #48]	@ (800d954 <inc_lock+0x118>)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	011b      	lsls	r3, r3, #4
 800d928:	4413      	add	r3, r2
 800d92a:	330c      	adds	r3, #12
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	3301      	adds	r3, #1
 800d930:	b29a      	uxth	r2, r3
 800d932:	e001      	b.n	800d938 <inc_lock+0xfc>
 800d934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d938:	4906      	ldr	r1, [pc, #24]	@ (800d954 <inc_lock+0x118>)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	011b      	lsls	r3, r3, #4
 800d93e:	440b      	add	r3, r1
 800d940:	330c      	adds	r3, #12
 800d942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3301      	adds	r3, #1
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3714      	adds	r7, #20
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	20004a50 	.word	0x20004a50

0800d958 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d960:	2300      	movs	r3, #0
 800d962:	60fb      	str	r3, [r7, #12]
 800d964:	e010      	b.n	800d988 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d966:	4a0d      	ldr	r2, [pc, #52]	@ (800d99c <clear_lock+0x44>)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	011b      	lsls	r3, r3, #4
 800d96c:	4413      	add	r3, r2
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	429a      	cmp	r2, r3
 800d974:	d105      	bne.n	800d982 <clear_lock+0x2a>
 800d976:	4a09      	ldr	r2, [pc, #36]	@ (800d99c <clear_lock+0x44>)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	011b      	lsls	r3, r3, #4
 800d97c:	4413      	add	r3, r2
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3301      	adds	r3, #1
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d9eb      	bls.n	800d966 <clear_lock+0xe>
	}
}
 800d98e:	bf00      	nop
 800d990:	bf00      	nop
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	20004a50 	.word	0x20004a50

0800d9a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b086      	sub	sp, #24
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	78db      	ldrb	r3, [r3, #3]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d034      	beq.n	800da1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7858      	ldrb	r0, [r3, #1]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	f7ff fd7a 	bl	800d4c0 <disk_write>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d002      	beq.n	800d9d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	73fb      	strb	r3, [r7, #15]
 800d9d6:	e022      	b.n	800da1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6a1b      	ldr	r3, [r3, #32]
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	1ad2      	subs	r2, r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d217      	bcs.n	800da1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	789b      	ldrb	r3, [r3, #2]
 800d9f2:	613b      	str	r3, [r7, #16]
 800d9f4:	e010      	b.n	800da18 <sync_window+0x78>
					wsect += fs->fsize;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	697a      	ldr	r2, [r7, #20]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	7858      	ldrb	r0, [r3, #1]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da0a:	2301      	movs	r3, #1
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	f7ff fd57 	bl	800d4c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	3b01      	subs	r3, #1
 800da16:	613b      	str	r3, [r7, #16]
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d8eb      	bhi.n	800d9f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800da1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3718      	adds	r7, #24
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d01b      	beq.n	800da78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff ffad 	bl	800d9a0 <sync_window>
 800da46:	4603      	mov	r3, r0
 800da48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da4a:	7bfb      	ldrb	r3, [r7, #15]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d113      	bne.n	800da78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7858      	ldrb	r0, [r3, #1]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da5a:	2301      	movs	r3, #1
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	f7ff fd0f 	bl	800d480 <disk_read>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d004      	beq.n	800da72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800da68:	f04f 33ff 	mov.w	r3, #4294967295
 800da6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800da6e:	2301      	movs	r3, #1
 800da70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800da78:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
	...

0800da84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7ff ff87 	bl	800d9a0 <sync_window>
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d158      	bne.n	800db4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d148      	bne.n	800db36 <sync_fs+0xb2>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	791b      	ldrb	r3, [r3, #4]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d144      	bne.n	800db36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	3330      	adds	r3, #48	@ 0x30
 800dab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dab4:	2100      	movs	r1, #0
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7ff fde4 	bl	800d684 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	3330      	adds	r3, #48	@ 0x30
 800dac0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dac4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800dac8:	4618      	mov	r0, r3
 800daca:	f7ff fd73 	bl	800d5b4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3330      	adds	r3, #48	@ 0x30
 800dad2:	4921      	ldr	r1, [pc, #132]	@ (800db58 <sync_fs+0xd4>)
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7ff fd88 	bl	800d5ea <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	3330      	adds	r3, #48	@ 0x30
 800dade:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dae2:	491e      	ldr	r1, [pc, #120]	@ (800db5c <sync_fs+0xd8>)
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7ff fd80 	bl	800d5ea <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	3330      	adds	r3, #48	@ 0x30
 800daee:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	4619      	mov	r1, r3
 800daf8:	4610      	mov	r0, r2
 800dafa:	f7ff fd76 	bl	800d5ea <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	3330      	adds	r3, #48	@ 0x30
 800db02:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	4619      	mov	r1, r3
 800db0c:	4610      	mov	r0, r2
 800db0e:	f7ff fd6c 	bl	800d5ea <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	1c5a      	adds	r2, r3, #1
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	7858      	ldrb	r0, [r3, #1]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db2a:	2301      	movs	r3, #1
 800db2c:	f7ff fcc8 	bl	800d4c0 <disk_write>
			fs->fsi_flag = 0;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	785b      	ldrb	r3, [r3, #1]
 800db3a:	2200      	movs	r2, #0
 800db3c:	2100      	movs	r1, #0
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff fcde 	bl	800d500 <disk_ioctl>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <sync_fs+0xca>
 800db4a:	2301      	movs	r3, #1
 800db4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	41615252 	.word	0x41615252
 800db5c:	61417272 	.word	0x61417272

0800db60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	3b02      	subs	r3, #2
 800db6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	695b      	ldr	r3, [r3, #20]
 800db74:	3b02      	subs	r3, #2
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d301      	bcc.n	800db80 <clust2sect+0x20>
 800db7c:	2300      	movs	r3, #0
 800db7e:	e008      	b.n	800db92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	895b      	ldrh	r3, [r3, #10]
 800db84:	461a      	mov	r2, r3
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	fb03 f202 	mul.w	r2, r3, r2
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db90:	4413      	add	r3, r2
}
 800db92:	4618      	mov	r0, r3
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b086      	sub	sp, #24
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d904      	bls.n	800dbbe <get_fat+0x20>
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d302      	bcc.n	800dbc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	e08e      	b.n	800dce2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d061      	beq.n	800dc96 <get_fat+0xf8>
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	dc7b      	bgt.n	800dcce <get_fat+0x130>
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d002      	beq.n	800dbe0 <get_fat+0x42>
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d041      	beq.n	800dc62 <get_fat+0xc4>
 800dbde:	e076      	b.n	800dcce <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	085b      	lsrs	r3, r3, #1
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	4413      	add	r3, r2
 800dbec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	6a1a      	ldr	r2, [r3, #32]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	0a5b      	lsrs	r3, r3, #9
 800dbf6:	4413      	add	r3, r2
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6938      	ldr	r0, [r7, #16]
 800dbfc:	f7ff ff14 	bl	800da28 <move_window>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d166      	bne.n	800dcd4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	60fa      	str	r2, [r7, #12]
 800dc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc10:	693a      	ldr	r2, [r7, #16]
 800dc12:	4413      	add	r3, r2
 800dc14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	6a1a      	ldr	r2, [r3, #32]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	0a5b      	lsrs	r3, r3, #9
 800dc22:	4413      	add	r3, r2
 800dc24:	4619      	mov	r1, r3
 800dc26:	6938      	ldr	r0, [r7, #16]
 800dc28:	f7ff fefe 	bl	800da28 <move_window>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d152      	bne.n	800dcd8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc40:	021b      	lsls	r3, r3, #8
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <get_fat+0xba>
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	091b      	lsrs	r3, r3, #4
 800dc56:	e002      	b.n	800dc5e <get_fat+0xc0>
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc5e:	617b      	str	r3, [r7, #20]
			break;
 800dc60:	e03f      	b.n	800dce2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	6a1a      	ldr	r2, [r3, #32]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	0a1b      	lsrs	r3, r3, #8
 800dc6a:	4413      	add	r3, r2
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6938      	ldr	r0, [r7, #16]
 800dc70:	f7ff feda 	bl	800da28 <move_window>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d130      	bne.n	800dcdc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	005b      	lsls	r3, r3, #1
 800dc84:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dc88:	4413      	add	r3, r2
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff fc56 	bl	800d53c <ld_word>
 800dc90:	4603      	mov	r3, r0
 800dc92:	617b      	str	r3, [r7, #20]
			break;
 800dc94:	e025      	b.n	800dce2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	6a1a      	ldr	r2, [r3, #32]
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	09db      	lsrs	r3, r3, #7
 800dc9e:	4413      	add	r3, r2
 800dca0:	4619      	mov	r1, r3
 800dca2:	6938      	ldr	r0, [r7, #16]
 800dca4:	f7ff fec0 	bl	800da28 <move_window>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d118      	bne.n	800dce0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dcbc:	4413      	add	r3, r2
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7ff fc55 	bl	800d56e <ld_dword>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dcca:	617b      	str	r3, [r7, #20]
			break;
 800dccc:	e009      	b.n	800dce2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dcce:	2301      	movs	r3, #1
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e006      	b.n	800dce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcd4:	bf00      	nop
 800dcd6:	e004      	b.n	800dce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcd8:	bf00      	nop
 800dcda:	e002      	b.n	800dce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dcdc:	bf00      	nop
 800dcde:	e000      	b.n	800dce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dce0:	bf00      	nop
		}
	}

	return val;
 800dce2:	697b      	ldr	r3, [r7, #20]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3718      	adds	r7, #24
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dcec:	b590      	push	{r4, r7, lr}
 800dcee:	b089      	sub	sp, #36	@ 0x24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	f240 80d9 	bls.w	800deb6 <put_fat+0x1ca>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	f080 80d3 	bcs.w	800deb6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	f000 8096 	beq.w	800de46 <put_fat+0x15a>
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	f300 80cb 	bgt.w	800deb6 <put_fat+0x1ca>
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d002      	beq.n	800dd2a <put_fat+0x3e>
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d06e      	beq.n	800de06 <put_fat+0x11a>
 800dd28:	e0c5      	b.n	800deb6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	61bb      	str	r3, [r7, #24]
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	085b      	lsrs	r3, r3, #1
 800dd32:	69ba      	ldr	r2, [r7, #24]
 800dd34:	4413      	add	r3, r2
 800dd36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6a1a      	ldr	r2, [r3, #32]
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	0a5b      	lsrs	r3, r3, #9
 800dd40:	4413      	add	r3, r2
 800dd42:	4619      	mov	r1, r3
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f7ff fe6f 	bl	800da28 <move_window>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd4e:	7ffb      	ldrb	r3, [r7, #31]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f040 80a9 	bne.w	800dea8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	1c59      	adds	r1, r3, #1
 800dd60:	61b9      	str	r1, [r7, #24]
 800dd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd66:	4413      	add	r3, r2
 800dd68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	f003 0301 	and.w	r3, r3, #1
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00d      	beq.n	800dd90 <put_fat+0xa4>
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	b25b      	sxtb	r3, r3
 800dd7a:	f003 030f 	and.w	r3, r3, #15
 800dd7e:	b25a      	sxtb	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	b25b      	sxtb	r3, r3
 800dd84:	011b      	lsls	r3, r3, #4
 800dd86:	b25b      	sxtb	r3, r3
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	b25b      	sxtb	r3, r3
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	e001      	b.n	800dd94 <put_fat+0xa8>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6a1a      	ldr	r2, [r3, #32]
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	0a5b      	lsrs	r3, r3, #9
 800dda6:	4413      	add	r3, r2
 800dda8:	4619      	mov	r1, r3
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7ff fe3c 	bl	800da28 <move_window>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddb4:	7ffb      	ldrb	r3, [r7, #31]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d178      	bne.n	800deac <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc6:	4413      	add	r3, r2
 800ddc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d003      	beq.n	800dddc <put_fat+0xf0>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	091b      	lsrs	r3, r3, #4
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	e00e      	b.n	800ddfa <put_fat+0x10e>
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	b25b      	sxtb	r3, r3
 800dde2:	f023 030f 	bic.w	r3, r3, #15
 800dde6:	b25a      	sxtb	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	0a1b      	lsrs	r3, r3, #8
 800ddec:	b25b      	sxtb	r3, r3
 800ddee:	f003 030f 	and.w	r3, r3, #15
 800ddf2:	b25b      	sxtb	r3, r3
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	b25b      	sxtb	r3, r3
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2201      	movs	r2, #1
 800de02:	70da      	strb	r2, [r3, #3]
			break;
 800de04:	e057      	b.n	800deb6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6a1a      	ldr	r2, [r3, #32]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	0a1b      	lsrs	r3, r3, #8
 800de0e:	4413      	add	r3, r2
 800de10:	4619      	mov	r1, r3
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7ff fe08 	bl	800da28 <move_window>
 800de18:	4603      	mov	r3, r0
 800de1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de1c:	7ffb      	ldrb	r3, [r7, #31]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d146      	bne.n	800deb0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800de30:	4413      	add	r3, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	b292      	uxth	r2, r2
 800de36:	4611      	mov	r1, r2
 800de38:	4618      	mov	r0, r3
 800de3a:	f7ff fbbb 	bl	800d5b4 <st_word>
			fs->wflag = 1;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2201      	movs	r2, #1
 800de42:	70da      	strb	r2, [r3, #3]
			break;
 800de44:	e037      	b.n	800deb6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6a1a      	ldr	r2, [r3, #32]
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	09db      	lsrs	r3, r3, #7
 800de4e:	4413      	add	r3, r2
 800de50:	4619      	mov	r1, r3
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7ff fde8 	bl	800da28 <move_window>
 800de58:	4603      	mov	r3, r0
 800de5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de5c:	7ffb      	ldrb	r3, [r7, #31]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d128      	bne.n	800deb4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800de76:	4413      	add	r3, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff fb78 	bl	800d56e <ld_dword>
 800de7e:	4603      	mov	r3, r0
 800de80:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800de84:	4323      	orrs	r3, r4
 800de86:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800de96:	4413      	add	r3, r2
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7ff fba5 	bl	800d5ea <st_dword>
			fs->wflag = 1;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2201      	movs	r2, #1
 800dea4:	70da      	strb	r2, [r3, #3]
			break;
 800dea6:	e006      	b.n	800deb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dea8:	bf00      	nop
 800deaa:	e004      	b.n	800deb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800deac:	bf00      	nop
 800deae:	e002      	b.n	800deb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800deb0:	bf00      	nop
 800deb2:	e000      	b.n	800deb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800deb4:	bf00      	nop
		}
	}
	return res;
 800deb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3724      	adds	r7, #36	@ 0x24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd90      	pop	{r4, r7, pc}

0800dec0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b088      	sub	sp, #32
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d904      	bls.n	800dee6 <remove_chain+0x26>
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	695b      	ldr	r3, [r3, #20]
 800dee0:	68ba      	ldr	r2, [r7, #8]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d301      	bcc.n	800deea <remove_chain+0x2a>
 800dee6:	2302      	movs	r3, #2
 800dee8:	e04b      	b.n	800df82 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00c      	beq.n	800df0a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800def0:	f04f 32ff 	mov.w	r2, #4294967295
 800def4:	6879      	ldr	r1, [r7, #4]
 800def6:	69b8      	ldr	r0, [r7, #24]
 800def8:	f7ff fef8 	bl	800dcec <put_fat>
 800defc:	4603      	mov	r3, r0
 800defe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800df00:	7ffb      	ldrb	r3, [r7, #31]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <remove_chain+0x4a>
 800df06:	7ffb      	ldrb	r3, [r7, #31]
 800df08:	e03b      	b.n	800df82 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800df0a:	68b9      	ldr	r1, [r7, #8]
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7ff fe46 	bl	800db9e <get_fat>
 800df12:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d031      	beq.n	800df7e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d101      	bne.n	800df24 <remove_chain+0x64>
 800df20:	2302      	movs	r3, #2
 800df22:	e02e      	b.n	800df82 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2a:	d101      	bne.n	800df30 <remove_chain+0x70>
 800df2c:	2301      	movs	r3, #1
 800df2e:	e028      	b.n	800df82 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800df30:	2200      	movs	r2, #0
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	69b8      	ldr	r0, [r7, #24]
 800df36:	f7ff fed9 	bl	800dcec <put_fat>
 800df3a:	4603      	mov	r3, r0
 800df3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800df3e:	7ffb      	ldrb	r3, [r7, #31]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <remove_chain+0x88>
 800df44:	7ffb      	ldrb	r3, [r7, #31]
 800df46:	e01c      	b.n	800df82 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	691a      	ldr	r2, [r3, #16]
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	695b      	ldr	r3, [r3, #20]
 800df50:	3b02      	subs	r3, #2
 800df52:	429a      	cmp	r2, r3
 800df54:	d20b      	bcs.n	800df6e <remove_chain+0xae>
			fs->free_clst++;
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	1c5a      	adds	r2, r3, #1
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	791b      	ldrb	r3, [r3, #4]
 800df64:	f043 0301 	orr.w	r3, r3, #1
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d3c6      	bcc.n	800df0a <remove_chain+0x4a>
 800df7c:	e000      	b.n	800df80 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800df7e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3720      	adds	r7, #32
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}

0800df8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b088      	sub	sp, #32
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
 800df92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d10d      	bne.n	800dfbc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d004      	beq.n	800dfb6 <create_chain+0x2c>
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	695b      	ldr	r3, [r3, #20]
 800dfb0:	69ba      	ldr	r2, [r7, #24]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d31b      	bcc.n	800dfee <create_chain+0x64>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	61bb      	str	r3, [r7, #24]
 800dfba:	e018      	b.n	800dfee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff fded 	bl	800db9e <get_fat>
 800dfc4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d801      	bhi.n	800dfd0 <create_chain+0x46>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e070      	b.n	800e0b2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd6:	d101      	bne.n	800dfdc <create_chain+0x52>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	e06a      	b.n	800e0b2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d201      	bcs.n	800dfea <create_chain+0x60>
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	e063      	b.n	800e0b2 <create_chain+0x128>
		scl = clst;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	3301      	adds	r3, #1
 800dff6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	69fa      	ldr	r2, [r7, #28]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d307      	bcc.n	800e012 <create_chain+0x88>
				ncl = 2;
 800e002:	2302      	movs	r3, #2
 800e004:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e006:	69fa      	ldr	r2, [r7, #28]
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d901      	bls.n	800e012 <create_chain+0x88>
 800e00e:	2300      	movs	r3, #0
 800e010:	e04f      	b.n	800e0b2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e012:	69f9      	ldr	r1, [r7, #28]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff fdc2 	bl	800db9e <get_fat>
 800e01a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00e      	beq.n	800e040 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d003      	beq.n	800e030 <create_chain+0xa6>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02e:	d101      	bne.n	800e034 <create_chain+0xaa>
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	e03e      	b.n	800e0b2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e034:	69fa      	ldr	r2, [r7, #28]
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d1da      	bne.n	800dff2 <create_chain+0x68>
 800e03c:	2300      	movs	r3, #0
 800e03e:	e038      	b.n	800e0b2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e040:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e042:	f04f 32ff 	mov.w	r2, #4294967295
 800e046:	69f9      	ldr	r1, [r7, #28]
 800e048:	6938      	ldr	r0, [r7, #16]
 800e04a:	f7ff fe4f 	bl	800dcec <put_fat>
 800e04e:	4603      	mov	r3, r0
 800e050:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e052:	7dfb      	ldrb	r3, [r7, #23]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d109      	bne.n	800e06c <create_chain+0xe2>
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d006      	beq.n	800e06c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	6938      	ldr	r0, [r7, #16]
 800e064:	f7ff fe42 	bl	800dcec <put_fat>
 800e068:	4603      	mov	r3, r0
 800e06a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e06c:	7dfb      	ldrb	r3, [r7, #23]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d116      	bne.n	800e0a0 <create_chain+0x116>
		fs->last_clst = ncl;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	69fa      	ldr	r2, [r7, #28]
 800e076:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	691a      	ldr	r2, [r3, #16]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	3b02      	subs	r3, #2
 800e082:	429a      	cmp	r2, r3
 800e084:	d804      	bhi.n	800e090 <create_chain+0x106>
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	1e5a      	subs	r2, r3, #1
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	791b      	ldrb	r3, [r3, #4]
 800e094:	f043 0301 	orr.w	r3, r3, #1
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	711a      	strb	r2, [r3, #4]
 800e09e:	e007      	b.n	800e0b0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d102      	bne.n	800e0ac <create_chain+0x122>
 800e0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0aa:	e000      	b.n	800e0ae <create_chain+0x124>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e0b0:	69fb      	ldr	r3, [r7, #28]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3720      	adds	r7, #32
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b087      	sub	sp, #28
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	0a5b      	lsrs	r3, r3, #9
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	8952      	ldrh	r2, [r2, #10]
 800e0da:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0de:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	1d1a      	adds	r2, r3, #4
 800e0e4:	613a      	str	r2, [r7, #16]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <clmt_clust+0x3a>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e010      	b.n	800e116 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d307      	bcc.n	800e10c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	1ad3      	subs	r3, r2, r3
 800e102:	617b      	str	r3, [r7, #20]
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	3304      	adds	r3, #4
 800e108:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e10a:	e7e9      	b.n	800e0e0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e10c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	4413      	add	r3, r2
}
 800e116:	4618      	mov	r0, r3
 800e118:	371c      	adds	r7, #28
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr

0800e122 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b086      	sub	sp, #24
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e138:	d204      	bcs.n	800e144 <dir_sdi+0x22>
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	f003 031f 	and.w	r3, r3, #31
 800e140:	2b00      	cmp	r3, #0
 800e142:	d001      	beq.n	800e148 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e144:	2302      	movs	r3, #2
 800e146:	e063      	b.n	800e210 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	683a      	ldr	r2, [r7, #0]
 800e14c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d106      	bne.n	800e168 <dir_sdi+0x46>
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d902      	bls.n	800e168 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e166:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10c      	bne.n	800e188 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	095b      	lsrs	r3, r3, #5
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	8912      	ldrh	r2, [r2, #8]
 800e176:	4293      	cmp	r3, r2
 800e178:	d301      	bcc.n	800e17e <dir_sdi+0x5c>
 800e17a:	2302      	movs	r3, #2
 800e17c:	e048      	b.n	800e210 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	61da      	str	r2, [r3, #28]
 800e186:	e029      	b.n	800e1dc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	895b      	ldrh	r3, [r3, #10]
 800e18c:	025b      	lsls	r3, r3, #9
 800e18e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e190:	e019      	b.n	800e1c6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6979      	ldr	r1, [r7, #20]
 800e196:	4618      	mov	r0, r3
 800e198:	f7ff fd01 	bl	800db9e <get_fat>
 800e19c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a4:	d101      	bne.n	800e1aa <dir_sdi+0x88>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e032      	b.n	800e210 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d904      	bls.n	800e1ba <dir_sdi+0x98>
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	695b      	ldr	r3, [r3, #20]
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d301      	bcc.n	800e1be <dir_sdi+0x9c>
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	e028      	b.n	800e210 <dir_sdi+0xee>
			ofs -= csz;
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d2e1      	bcs.n	800e192 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e1ce:	6979      	ldr	r1, [r7, #20]
 800e1d0:	6938      	ldr	r0, [r7, #16]
 800e1d2:	f7ff fcc5 	bl	800db60 <clust2sect>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	69db      	ldr	r3, [r3, #28]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d101      	bne.n	800e1ee <dir_sdi+0xcc>
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	e010      	b.n	800e210 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	69da      	ldr	r2, [r3, #28]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	0a5b      	lsrs	r3, r3, #9
 800e1f6:	441a      	add	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e208:	441a      	add	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	3320      	adds	r3, #32
 800e22e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	69db      	ldr	r3, [r3, #28]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d003      	beq.n	800e240 <dir_next+0x28>
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e23e:	d301      	bcc.n	800e244 <dir_next+0x2c>
 800e240:	2304      	movs	r3, #4
 800e242:	e0aa      	b.n	800e39a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 8098 	bne.w	800e380 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	69db      	ldr	r3, [r3, #28]
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	699b      	ldr	r3, [r3, #24]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d10b      	bne.n	800e27a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	095b      	lsrs	r3, r3, #5
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	8912      	ldrh	r2, [r2, #8]
 800e26a:	4293      	cmp	r3, r2
 800e26c:	f0c0 8088 	bcc.w	800e380 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	61da      	str	r2, [r3, #28]
 800e276:	2304      	movs	r3, #4
 800e278:	e08f      	b.n	800e39a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	0a5b      	lsrs	r3, r3, #9
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	8952      	ldrh	r2, [r2, #10]
 800e282:	3a01      	subs	r2, #1
 800e284:	4013      	ands	r3, r2
 800e286:	2b00      	cmp	r3, #0
 800e288:	d17a      	bne.n	800e380 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	699b      	ldr	r3, [r3, #24]
 800e290:	4619      	mov	r1, r3
 800e292:	4610      	mov	r0, r2
 800e294:	f7ff fc83 	bl	800db9e <get_fat>
 800e298:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d801      	bhi.n	800e2a4 <dir_next+0x8c>
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	e07a      	b.n	800e39a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2aa:	d101      	bne.n	800e2b0 <dir_next+0x98>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e074      	b.n	800e39a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	695b      	ldr	r3, [r3, #20]
 800e2b4:	697a      	ldr	r2, [r7, #20]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d358      	bcc.n	800e36c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d104      	bne.n	800e2ca <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	61da      	str	r2, [r3, #28]
 800e2c6:	2304      	movs	r3, #4
 800e2c8:	e067      	b.n	800e39a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7ff fe59 	bl	800df8a <create_chain>
 800e2d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d101      	bne.n	800e2e4 <dir_next+0xcc>
 800e2e0:	2307      	movs	r3, #7
 800e2e2:	e05a      	b.n	800e39a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d101      	bne.n	800e2ee <dir_next+0xd6>
 800e2ea:	2302      	movs	r3, #2
 800e2ec:	e055      	b.n	800e39a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f4:	d101      	bne.n	800e2fa <dir_next+0xe2>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e04f      	b.n	800e39a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f7ff fb50 	bl	800d9a0 <sync_window>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <dir_next+0xf2>
 800e306:	2301      	movs	r3, #1
 800e308:	e047      	b.n	800e39a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	3330      	adds	r3, #48	@ 0x30
 800e30e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e312:	2100      	movs	r1, #0
 800e314:	4618      	mov	r0, r3
 800e316:	f7ff f9b5 	bl	800d684 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e31a:	2300      	movs	r3, #0
 800e31c:	613b      	str	r3, [r7, #16]
 800e31e:	6979      	ldr	r1, [r7, #20]
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f7ff fc1d 	bl	800db60 <clust2sect>
 800e326:	4602      	mov	r2, r0
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e32c:	e012      	b.n	800e354 <dir_next+0x13c>
						fs->wflag = 1;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f7ff fb33 	bl	800d9a0 <sync_window>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <dir_next+0x12c>
 800e340:	2301      	movs	r3, #1
 800e342:	e02a      	b.n	800e39a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	3301      	adds	r3, #1
 800e348:	613b      	str	r3, [r7, #16]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34e:	1c5a      	adds	r2, r3, #1
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	895b      	ldrh	r3, [r3, #10]
 800e358:	461a      	mov	r2, r3
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d3e6      	bcc.n	800e32e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	1ad2      	subs	r2, r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	697a      	ldr	r2, [r7, #20]
 800e370:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e372:	6979      	ldr	r1, [r7, #20]
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7ff fbf3 	bl	800db60 <clust2sect>
 800e37a:	4602      	mov	r2, r0
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	68ba      	ldr	r2, [r7, #8]
 800e384:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e392:	441a      	add	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3718      	adds	r7, #24
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b086      	sub	sp, #24
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7ff feb4 	bl	800e122 <dir_sdi>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e3be:	7dfb      	ldrb	r3, [r7, #23]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d12b      	bne.n	800e41c <dir_alloc+0x7a>
		n = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7ff fb2a 	bl	800da28 <move_window>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e3d8:	7dfb      	ldrb	r3, [r7, #23]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d11d      	bne.n	800e41a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	2be5      	cmp	r3, #229	@ 0xe5
 800e3e6:	d004      	beq.n	800e3f2 <dir_alloc+0x50>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a1b      	ldr	r3, [r3, #32]
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d107      	bne.n	800e402 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	613b      	str	r3, [r7, #16]
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d102      	bne.n	800e406 <dir_alloc+0x64>
 800e400:	e00c      	b.n	800e41c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e402:	2300      	movs	r3, #0
 800e404:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e406:	2101      	movs	r1, #1
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff ff05 	bl	800e218 <dir_next>
 800e40e:	4603      	mov	r3, r0
 800e410:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d0d7      	beq.n	800e3c8 <dir_alloc+0x26>
 800e418:	e000      	b.n	800e41c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e41a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
 800e41e:	2b04      	cmp	r3, #4
 800e420:	d101      	bne.n	800e426 <dir_alloc+0x84>
 800e422:	2307      	movs	r3, #7
 800e424:	75fb      	strb	r3, [r7, #23]
	return res;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	331a      	adds	r3, #26
 800e43e:	4618      	mov	r0, r3
 800e440:	f7ff f87c 	bl	800d53c <ld_word>
 800e444:	4603      	mov	r3, r0
 800e446:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	d109      	bne.n	800e464 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	3314      	adds	r3, #20
 800e454:	4618      	mov	r0, r3
 800e456:	f7ff f871 	bl	800d53c <ld_word>
 800e45a:	4603      	mov	r3, r0
 800e45c:	041b      	lsls	r3, r3, #16
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	4313      	orrs	r3, r2
 800e462:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e464:	68fb      	ldr	r3, [r7, #12]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	331a      	adds	r3, #26
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	b292      	uxth	r2, r2
 800e482:	4611      	mov	r1, r2
 800e484:	4618      	mov	r0, r3
 800e486:	f7ff f895 	bl	800d5b4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d109      	bne.n	800e4a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f103 0214 	add.w	r2, r3, #20
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	0c1b      	lsrs	r3, r3, #16
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	f7ff f887 	bl	800d5b4 <st_word>
	}
}
 800e4a6:	bf00      	nop
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b086      	sub	sp, #24
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e4b8:	2304      	movs	r3, #4
 800e4ba:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e4c2:	e03c      	b.n	800e53e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	69db      	ldr	r3, [r3, #28]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6938      	ldr	r0, [r7, #16]
 800e4cc:	f7ff faac 	bl	800da28 <move_window>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d136      	bne.n	800e548 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a1b      	ldr	r3, [r3, #32]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d102      	bne.n	800e4ee <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e4e8:	2304      	movs	r3, #4
 800e4ea:	75fb      	strb	r3, [r7, #23]
 800e4ec:	e031      	b.n	800e552 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a1b      	ldr	r3, [r3, #32]
 800e4f2:	330b      	adds	r3, #11
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e4fa:	73bb      	strb	r3, [r7, #14]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	7bba      	ldrb	r2, [r7, #14]
 800e500:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	2be5      	cmp	r3, #229	@ 0xe5
 800e506:	d011      	beq.n	800e52c <dir_read+0x7e>
 800e508:	7bfb      	ldrb	r3, [r7, #15]
 800e50a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e50c:	d00e      	beq.n	800e52c <dir_read+0x7e>
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
 800e510:	2b0f      	cmp	r3, #15
 800e512:	d00b      	beq.n	800e52c <dir_read+0x7e>
 800e514:	7bbb      	ldrb	r3, [r7, #14]
 800e516:	f023 0320 	bic.w	r3, r3, #32
 800e51a:	2b08      	cmp	r3, #8
 800e51c:	bf0c      	ite	eq
 800e51e:	2301      	moveq	r3, #1
 800e520:	2300      	movne	r3, #0
 800e522:	b2db      	uxtb	r3, r3
 800e524:	461a      	mov	r2, r3
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	4293      	cmp	r3, r2
 800e52a:	d00f      	beq.n	800e54c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e52c:	2100      	movs	r1, #0
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7ff fe72 	bl	800e218 <dir_next>
 800e534:	4603      	mov	r3, r0
 800e536:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e538:	7dfb      	ldrb	r3, [r7, #23]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d108      	bne.n	800e550 <dir_read+0xa2>
	while (dp->sect) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	69db      	ldr	r3, [r3, #28]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1be      	bne.n	800e4c4 <dir_read+0x16>
 800e546:	e004      	b.n	800e552 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e548:	bf00      	nop
 800e54a:	e002      	b.n	800e552 <dir_read+0xa4>
				break;
 800e54c:	bf00      	nop
 800e54e:	e000      	b.n	800e552 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e550:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e552:	7dfb      	ldrb	r3, [r7, #23]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <dir_read+0xb0>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	61da      	str	r2, [r3, #28]
	return res;
 800e55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e576:	2100      	movs	r1, #0
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7ff fdd2 	bl	800e122 <dir_sdi>
 800e57e:	4603      	mov	r3, r0
 800e580:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e582:	7dfb      	ldrb	r3, [r7, #23]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <dir_find+0x24>
 800e588:	7dfb      	ldrb	r3, [r7, #23]
 800e58a:	e03e      	b.n	800e60a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	4619      	mov	r1, r3
 800e592:	6938      	ldr	r0, [r7, #16]
 800e594:	f7ff fa48 	bl	800da28 <move_window>
 800e598:	4603      	mov	r3, r0
 800e59a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d12f      	bne.n	800e602 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a1b      	ldr	r3, [r3, #32]
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e5aa:	7bfb      	ldrb	r3, [r7, #15]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d102      	bne.n	800e5b6 <dir_find+0x4e>
 800e5b0:	2304      	movs	r3, #4
 800e5b2:	75fb      	strb	r3, [r7, #23]
 800e5b4:	e028      	b.n	800e608 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	330b      	adds	r3, #11
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e5c2:	b2da      	uxtb	r2, r3
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a1b      	ldr	r3, [r3, #32]
 800e5cc:	330b      	adds	r3, #11
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	f003 0308 	and.w	r3, r3, #8
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10a      	bne.n	800e5ee <dir_find+0x86>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6a18      	ldr	r0, [r3, #32]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3324      	adds	r3, #36	@ 0x24
 800e5e0:	220b      	movs	r2, #11
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	f7ff f869 	bl	800d6ba <mem_cmp>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00b      	beq.n	800e606 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7ff fe11 	bl	800e218 <dir_next>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e5fa:	7dfb      	ldrb	r3, [r7, #23]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d0c5      	beq.n	800e58c <dir_find+0x24>
 800e600:	e002      	b.n	800e608 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e602:	bf00      	nop
 800e604:	e000      	b.n	800e608 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e606:	bf00      	nop

	return res;
 800e608:	7dfb      	ldrb	r3, [r7, #23]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b084      	sub	sp, #16
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e620:	2101      	movs	r1, #1
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7ff febd 	bl	800e3a2 <dir_alloc>
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d11c      	bne.n	800e66c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	69db      	ldr	r3, [r3, #28]
 800e636:	4619      	mov	r1, r3
 800e638:	68b8      	ldr	r0, [r7, #8]
 800e63a:	f7ff f9f5 	bl	800da28 <move_window>
 800e63e:	4603      	mov	r3, r0
 800e640:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e642:	7bfb      	ldrb	r3, [r7, #15]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d111      	bne.n	800e66c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a1b      	ldr	r3, [r3, #32]
 800e64c:	2220      	movs	r2, #32
 800e64e:	2100      	movs	r1, #0
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff f817 	bl	800d684 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a18      	ldr	r0, [r3, #32]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	3324      	adds	r3, #36	@ 0x24
 800e65e:	220b      	movs	r2, #11
 800e660:	4619      	mov	r1, r3
 800e662:	f7fe ffee 	bl	800d642 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	2201      	movs	r2, #1
 800e66a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}

0800e676 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b086      	sub	sp, #24
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2200      	movs	r2, #0
 800e684:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	69db      	ldr	r3, [r3, #28]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d04f      	beq.n	800e72e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e68e:	2300      	movs	r3, #0
 800e690:	613b      	str	r3, [r7, #16]
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e696:	e022      	b.n	800e6de <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6a1a      	ldr	r2, [r3, #32]
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	1c59      	adds	r1, r3, #1
 800e6a0:	6179      	str	r1, [r7, #20]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	2b20      	cmp	r3, #32
 800e6ac:	d016      	beq.n	800e6dc <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
 800e6b0:	2b05      	cmp	r3, #5
 800e6b2:	d101      	bne.n	800e6b8 <get_fileinfo+0x42>
 800e6b4:	23e5      	movs	r3, #229	@ 0xe5
 800e6b6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	2b09      	cmp	r3, #9
 800e6bc:	d106      	bne.n	800e6cc <get_fileinfo+0x56>
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	613a      	str	r2, [r7, #16]
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	222e      	movs	r2, #46	@ 0x2e
 800e6ca:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	613a      	str	r2, [r7, #16]
 800e6d2:	683a      	ldr	r2, [r7, #0]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	7bfa      	ldrb	r2, [r7, #15]
 800e6d8:	725a      	strb	r2, [r3, #9]
 800e6da:	e000      	b.n	800e6de <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800e6dc:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	2b0a      	cmp	r3, #10
 800e6e2:	d9d9      	bls.n	800e698 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	3309      	adds	r3, #9
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a1b      	ldr	r3, [r3, #32]
 800e6f4:	7ada      	ldrb	r2, [r3, #11]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	331c      	adds	r3, #28
 800e700:	4618      	mov	r0, r3
 800e702:	f7fe ff34 	bl	800d56e <ld_dword>
 800e706:	4602      	mov	r2, r0
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	3316      	adds	r3, #22
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe ff2b 	bl	800d56e <ld_dword>
 800e718:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	80da      	strh	r2, [r3, #6]
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	0c1b      	lsrs	r3, r3, #16
 800e726:	b29a      	uxth	r2, r3
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	809a      	strh	r2, [r3, #4]
 800e72c:	e000      	b.n	800e730 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e72e:	bf00      	nop
}
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
	...

0800e738 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	1c59      	adds	r1, r3, #1
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	6011      	str	r1, [r2, #0]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e74e:	89fb      	ldrh	r3, [r7, #14]
 800e750:	2b60      	cmp	r3, #96	@ 0x60
 800e752:	d905      	bls.n	800e760 <get_achar+0x28>
 800e754:	89fb      	ldrh	r3, [r7, #14]
 800e756:	2b7a      	cmp	r3, #122	@ 0x7a
 800e758:	d802      	bhi.n	800e760 <get_achar+0x28>
 800e75a:	89fb      	ldrh	r3, [r7, #14]
 800e75c:	3b20      	subs	r3, #32
 800e75e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e760:	89fb      	ldrh	r3, [r7, #14]
 800e762:	2b7f      	cmp	r3, #127	@ 0x7f
 800e764:	d904      	bls.n	800e770 <get_achar+0x38>
 800e766:	89fb      	ldrh	r3, [r7, #14]
 800e768:	3b80      	subs	r3, #128	@ 0x80
 800e76a:	4a05      	ldr	r2, [pc, #20]	@ (800e780 <get_achar+0x48>)
 800e76c:	5cd3      	ldrb	r3, [r2, r3]
 800e76e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800e770:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	08013d04 	.word	0x08013d04

0800e784 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b08a      	sub	sp, #40	@ 0x28
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	607a      	str	r2, [r7, #4]
 800e790:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e792:	e009      	b.n	800e7a8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e794:	f107 0308 	add.w	r3, r7, #8
 800e798:	4618      	mov	r0, r3
 800e79a:	f7ff ffcd 	bl	800e738 <get_achar>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d101      	bne.n	800e7a8 <pattern_matching+0x24>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	e064      	b.n	800e872 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	1e5a      	subs	r2, r3, #1
 800e7ac:	607a      	str	r2, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1f0      	bne.n	800e794 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d104      	bne.n	800e7c4 <pattern_matching+0x40>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d001      	beq.n	800e7c4 <pattern_matching+0x40>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e056      	b.n	800e872 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	617b      	str	r3, [r7, #20]
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	2b3f      	cmp	r3, #63	@ 0x3f
 800e7d2:	d003      	beq.n	800e7dc <pattern_matching+0x58>
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7da:	d126      	bne.n	800e82a <pattern_matching+0xa6>
				nm = nx = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	61fb      	str	r3, [r7, #28]
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	617a      	str	r2, [r7, #20]
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	2b3f      	cmp	r3, #63	@ 0x3f
 800e7ee:	d103      	bne.n	800e7f8 <pattern_matching+0x74>
 800e7f0:	6a3b      	ldr	r3, [r7, #32]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	623b      	str	r3, [r7, #32]
 800e7f6:	e001      	b.n	800e7fc <pattern_matching+0x78>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	2b3f      	cmp	r3, #63	@ 0x3f
 800e802:	d0ef      	beq.n	800e7e4 <pattern_matching+0x60>
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b2a      	cmp	r3, #42	@ 0x2a
 800e80a:	d0eb      	beq.n	800e7e4 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e80c:	6978      	ldr	r0, [r7, #20]
 800e80e:	6939      	ldr	r1, [r7, #16]
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	6a3a      	ldr	r2, [r7, #32]
 800e814:	f7ff ffb6 	bl	800e784 <pattern_matching>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <pattern_matching+0x9e>
 800e81e:	2301      	movs	r3, #1
 800e820:	e027      	b.n	800e872 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e828:	e017      	b.n	800e85a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800e82a:	f107 0314 	add.w	r3, r7, #20
 800e82e:	4618      	mov	r0, r3
 800e830:	f7ff ff82 	bl	800e738 <get_achar>
 800e834:	4603      	mov	r3, r0
 800e836:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800e838:	f107 0310 	add.w	r3, r7, #16
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff ff7b 	bl	800e738 <get_achar>
 800e842:	4603      	mov	r3, r0
 800e844:	84fb      	strh	r3, [r7, #38]	@ 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800e846:	8b7a      	ldrh	r2, [r7, #26]
 800e848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d104      	bne.n	800e858 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e84e:	8b7b      	ldrh	r3, [r7, #26]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1bb      	bne.n	800e7cc <pattern_matching+0x48>
 800e854:	2301      	movs	r3, #1
 800e856:	e00c      	b.n	800e872 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800e858:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800e85a:	f107 0308 	add.w	r3, r7, #8
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff ff6a 	bl	800e738 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <pattern_matching+0xec>
 800e86a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1a9      	bne.n	800e7c4 <pattern_matching+0x40>

	return 0;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3728      	adds	r7, #40	@ 0x28
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
	...

0800e87c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b088      	sub	sp, #32
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	60fb      	str	r3, [r7, #12]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3324      	adds	r3, #36	@ 0x24
 800e890:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e892:	220b      	movs	r2, #11
 800e894:	2120      	movs	r1, #32
 800e896:	68b8      	ldr	r0, [r7, #8]
 800e898:	f7fe fef4 	bl	800d684 <mem_set>
	si = i = 0; ni = 8;
 800e89c:	2300      	movs	r3, #0
 800e89e:	613b      	str	r3, [r7, #16]
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	61fb      	str	r3, [r7, #28]
 800e8a4:	2308      	movs	r3, #8
 800e8a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	61fa      	str	r2, [r7, #28]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e8b6:	7efb      	ldrb	r3, [r7, #27]
 800e8b8:	2b20      	cmp	r3, #32
 800e8ba:	d94e      	bls.n	800e95a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e8bc:	7efb      	ldrb	r3, [r7, #27]
 800e8be:	2b2f      	cmp	r3, #47	@ 0x2f
 800e8c0:	d006      	beq.n	800e8d0 <create_name+0x54>
 800e8c2:	7efb      	ldrb	r3, [r7, #27]
 800e8c4:	2b5c      	cmp	r3, #92	@ 0x5c
 800e8c6:	d110      	bne.n	800e8ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e8c8:	e002      	b.n	800e8d0 <create_name+0x54>
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	2b2f      	cmp	r3, #47	@ 0x2f
 800e8da:	d0f6      	beq.n	800e8ca <create_name+0x4e>
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800e8e6:	d0f0      	beq.n	800e8ca <create_name+0x4e>
			break;
 800e8e8:	e038      	b.n	800e95c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e8ea:	7efb      	ldrb	r3, [r7, #27]
 800e8ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ee:	d003      	beq.n	800e8f8 <create_name+0x7c>
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d30c      	bcc.n	800e912 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2b0b      	cmp	r3, #11
 800e8fc:	d002      	beq.n	800e904 <create_name+0x88>
 800e8fe:	7efb      	ldrb	r3, [r7, #27]
 800e900:	2b2e      	cmp	r3, #46	@ 0x2e
 800e902:	d001      	beq.n	800e908 <create_name+0x8c>
 800e904:	2306      	movs	r3, #6
 800e906:	e044      	b.n	800e992 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e908:	2308      	movs	r3, #8
 800e90a:	613b      	str	r3, [r7, #16]
 800e90c:	230b      	movs	r3, #11
 800e90e:	617b      	str	r3, [r7, #20]
			continue;
 800e910:	e022      	b.n	800e958 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e912:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e916:	2b00      	cmp	r3, #0
 800e918:	da04      	bge.n	800e924 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e91a:	7efb      	ldrb	r3, [r7, #27]
 800e91c:	3b80      	subs	r3, #128	@ 0x80
 800e91e:	4a1f      	ldr	r2, [pc, #124]	@ (800e99c <create_name+0x120>)
 800e920:	5cd3      	ldrb	r3, [r2, r3]
 800e922:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e924:	7efb      	ldrb	r3, [r7, #27]
 800e926:	4619      	mov	r1, r3
 800e928:	481d      	ldr	r0, [pc, #116]	@ (800e9a0 <create_name+0x124>)
 800e92a:	f7fe feed 	bl	800d708 <chk_chr>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d001      	beq.n	800e938 <create_name+0xbc>
 800e934:	2306      	movs	r3, #6
 800e936:	e02c      	b.n	800e992 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e938:	7efb      	ldrb	r3, [r7, #27]
 800e93a:	2b60      	cmp	r3, #96	@ 0x60
 800e93c:	d905      	bls.n	800e94a <create_name+0xce>
 800e93e:	7efb      	ldrb	r3, [r7, #27]
 800e940:	2b7a      	cmp	r3, #122	@ 0x7a
 800e942:	d802      	bhi.n	800e94a <create_name+0xce>
 800e944:	7efb      	ldrb	r3, [r7, #27]
 800e946:	3b20      	subs	r3, #32
 800e948:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	613a      	str	r2, [r7, #16]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	4413      	add	r3, r2
 800e954:	7efa      	ldrb	r2, [r7, #27]
 800e956:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e958:	e7a6      	b.n	800e8a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e95a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	441a      	add	r2, r3
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <create_name+0xf4>
 800e96c:	2306      	movs	r3, #6
 800e96e:	e010      	b.n	800e992 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	2be5      	cmp	r3, #229	@ 0xe5
 800e976:	d102      	bne.n	800e97e <create_name+0x102>
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	2205      	movs	r2, #5
 800e97c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e97e:	7efb      	ldrb	r3, [r7, #27]
 800e980:	2b20      	cmp	r3, #32
 800e982:	d801      	bhi.n	800e988 <create_name+0x10c>
 800e984:	2204      	movs	r2, #4
 800e986:	e000      	b.n	800e98a <create_name+0x10e>
 800e988:	2200      	movs	r2, #0
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	330b      	adds	r3, #11
 800e98e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e990:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e992:	4618      	mov	r0, r3
 800e994:	3720      	adds	r7, #32
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	08013d04 	.word	0x08013d04
 800e9a0:	08013c44 	.word	0x08013c44

0800e9a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e9b8:	e002      	b.n	800e9c0 <follow_path+0x1c>
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	603b      	str	r3, [r7, #0]
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e9c6:	d0f8      	beq.n	800e9ba <follow_path+0x16>
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	2b5c      	cmp	r3, #92	@ 0x5c
 800e9ce:	d0f4      	beq.n	800e9ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	2b1f      	cmp	r3, #31
 800e9dc:	d80a      	bhi.n	800e9f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2280      	movs	r2, #128	@ 0x80
 800e9e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7ff fb9a 	bl	800e122 <dir_sdi>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	75fb      	strb	r3, [r7, #23]
 800e9f2:	e043      	b.n	800ea7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e9f4:	463b      	mov	r3, r7
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7ff ff3f 	bl	800e87c <create_name>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea02:	7dfb      	ldrb	r3, [r7, #23]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d134      	bne.n	800ea72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7ff fdad 	bl	800e568 <dir_find>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ea18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00a      	beq.n	800ea36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	d127      	bne.n	800ea76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ea26:	7afb      	ldrb	r3, [r7, #11]
 800ea28:	f003 0304 	and.w	r3, r3, #4
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d122      	bne.n	800ea76 <follow_path+0xd2>
 800ea30:	2305      	movs	r3, #5
 800ea32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ea34:	e01f      	b.n	800ea76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea36:	7afb      	ldrb	r3, [r7, #11]
 800ea38:	f003 0304 	and.w	r3, r3, #4
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d11c      	bne.n	800ea7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	799b      	ldrb	r3, [r3, #6]
 800ea44:	f003 0310 	and.w	r3, r3, #16
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d102      	bne.n	800ea52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ea4c:	2305      	movs	r3, #5
 800ea4e:	75fb      	strb	r3, [r7, #23]
 800ea50:	e014      	b.n	800ea7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	695b      	ldr	r3, [r3, #20]
 800ea5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea60:	4413      	add	r3, r2
 800ea62:	4619      	mov	r1, r3
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7ff fce3 	bl	800e430 <ld_clust>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea70:	e7c0      	b.n	800e9f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ea72:	bf00      	nop
 800ea74:	e002      	b.n	800ea7c <follow_path+0xd8>
				break;
 800ea76:	bf00      	nop
 800ea78:	e000      	b.n	800ea7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea7a:	bf00      	nop
			}
		}
	}

	return res;
 800ea7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3718      	adds	r7, #24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ea86:	b480      	push	{r7}
 800ea88:	b087      	sub	sp, #28
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ea8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d031      	beq.n	800eb00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	617b      	str	r3, [r7, #20]
 800eaa2:	e002      	b.n	800eaaa <get_ldnumber+0x24>
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	617b      	str	r3, [r7, #20]
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d903      	bls.n	800eaba <get_ldnumber+0x34>
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	2b3a      	cmp	r3, #58	@ 0x3a
 800eab8:	d1f4      	bne.n	800eaa4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	2b3a      	cmp	r3, #58	@ 0x3a
 800eac0:	d11c      	bne.n	800eafc <get_ldnumber+0x76>
			tp = *path;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	60fa      	str	r2, [r7, #12]
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	3b30      	subs	r3, #48	@ 0x30
 800ead2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	2b09      	cmp	r3, #9
 800ead8:	d80e      	bhi.n	800eaf8 <get_ldnumber+0x72>
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d10a      	bne.n	800eaf8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d107      	bne.n	800eaf8 <get_ldnumber+0x72>
					vol = (int)i;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	617b      	str	r3, [r7, #20]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	697a      	ldr	r2, [r7, #20]
 800eaf6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	e002      	b.n	800eb02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eafc:	2300      	movs	r3, #0
 800eafe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eb00:	693b      	ldr	r3, [r7, #16]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	371c      	adds	r7, #28
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
	...

0800eb10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	70da      	strb	r2, [r3, #3]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f04f 32ff 	mov.w	r2, #4294967295
 800eb26:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eb28:	6839      	ldr	r1, [r7, #0]
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7fe ff7c 	bl	800da28 <move_window>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <check_fs+0x2a>
 800eb36:	2304      	movs	r3, #4
 800eb38:	e038      	b.n	800ebac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3330      	adds	r3, #48	@ 0x30
 800eb3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe fcfa 	bl	800d53c <ld_word>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d001      	beq.n	800eb58 <check_fs+0x48>
 800eb54:	2303      	movs	r3, #3
 800eb56:	e029      	b.n	800ebac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb5e:	2be9      	cmp	r3, #233	@ 0xe9
 800eb60:	d009      	beq.n	800eb76 <check_fs+0x66>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb68:	2beb      	cmp	r3, #235	@ 0xeb
 800eb6a:	d11e      	bne.n	800ebaa <check_fs+0x9a>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800eb72:	2b90      	cmp	r3, #144	@ 0x90
 800eb74:	d119      	bne.n	800ebaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	3330      	adds	r3, #48	@ 0x30
 800eb7a:	3336      	adds	r3, #54	@ 0x36
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fe fcf6 	bl	800d56e <ld_dword>
 800eb82:	4603      	mov	r3, r0
 800eb84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800eb88:	4a0a      	ldr	r2, [pc, #40]	@ (800ebb4 <check_fs+0xa4>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d101      	bne.n	800eb92 <check_fs+0x82>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	e00c      	b.n	800ebac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	3330      	adds	r3, #48	@ 0x30
 800eb96:	3352      	adds	r3, #82	@ 0x52
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe fce8 	bl	800d56e <ld_dword>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	4a05      	ldr	r2, [pc, #20]	@ (800ebb8 <check_fs+0xa8>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d101      	bne.n	800ebaa <check_fs+0x9a>
 800eba6:	2300      	movs	r3, #0
 800eba8:	e000      	b.n	800ebac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ebaa:	2302      	movs	r3, #2
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	00544146 	.word	0x00544146
 800ebb8:	33544146 	.word	0x33544146

0800ebbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b096      	sub	sp, #88	@ 0x58
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7ff ff58 	bl	800ea86 <get_ldnumber>
 800ebd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ebd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	da01      	bge.n	800ebe2 <find_volume+0x26>
 800ebde:	230b      	movs	r3, #11
 800ebe0:	e22d      	b.n	800f03e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ebe2:	4aa1      	ldr	r2, [pc, #644]	@ (800ee68 <find_volume+0x2ac>)
 800ebe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ebec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d101      	bne.n	800ebf6 <find_volume+0x3a>
 800ebf2:	230c      	movs	r3, #12
 800ebf4:	e223      	b.n	800f03e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebfa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ebfc:	79fb      	ldrb	r3, [r7, #7]
 800ebfe:	f023 0301 	bic.w	r3, r3, #1
 800ec02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ec04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01a      	beq.n	800ec42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ec0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec0e:	785b      	ldrb	r3, [r3, #1]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe fbf3 	bl	800d3fc <disk_status>
 800ec16:	4603      	mov	r3, r0
 800ec18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ec1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ec20:	f003 0301 	and.w	r3, r3, #1
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10c      	bne.n	800ec42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ec28:	79fb      	ldrb	r3, [r7, #7]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d007      	beq.n	800ec3e <find_volume+0x82>
 800ec2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ec32:	f003 0304 	and.w	r3, r3, #4
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ec3a:	230a      	movs	r3, #10
 800ec3c:	e1ff      	b.n	800f03e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ec3e:	2300      	movs	r3, #0
 800ec40:	e1fd      	b.n	800f03e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ec42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec44:	2200      	movs	r2, #0
 800ec46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ec48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ec50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec52:	785b      	ldrb	r3, [r3, #1]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fe fbeb 	bl	800d430 <disk_initialize>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ec60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ec64:	f003 0301 	and.w	r3, r3, #1
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d001      	beq.n	800ec70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	e1e6      	b.n	800f03e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ec70:	79fb      	ldrb	r3, [r7, #7]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d007      	beq.n	800ec86 <find_volume+0xca>
 800ec76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ec7a:	f003 0304 	and.w	r3, r3, #4
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ec82:	230a      	movs	r3, #10
 800ec84:	e1db      	b.n	800f03e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ec8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ec8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ec8e:	f7ff ff3f 	bl	800eb10 <check_fs>
 800ec92:	4603      	mov	r3, r0
 800ec94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ec98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d149      	bne.n	800ed34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eca0:	2300      	movs	r3, #0
 800eca2:	643b      	str	r3, [r7, #64]	@ 0x40
 800eca4:	e01e      	b.n	800ece4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800eca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eca8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ecac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecae:	011b      	lsls	r3, r3, #4
 800ecb0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ecb4:	4413      	add	r3, r2
 800ecb6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecba:	3304      	adds	r3, #4
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d006      	beq.n	800ecd0 <find_volume+0x114>
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc4:	3308      	adds	r3, #8
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe fc51 	bl	800d56e <ld_dword>
 800eccc:	4602      	mov	r2, r0
 800ecce:	e000      	b.n	800ecd2 <find_volume+0x116>
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	3358      	adds	r3, #88	@ 0x58
 800ecd8:	443b      	add	r3, r7
 800ecda:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ecde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ece0:	3301      	adds	r3, #1
 800ece2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ece4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d9dd      	bls.n	800eca6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ecea:	2300      	movs	r3, #0
 800ecec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ecee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d002      	beq.n	800ecfa <find_volume+0x13e>
 800ecf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ecfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	3358      	adds	r3, #88	@ 0x58
 800ed00:	443b      	add	r3, r7
 800ed02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ed06:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ed08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d005      	beq.n	800ed1a <find_volume+0x15e>
 800ed0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ed10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed12:	f7ff fefd 	bl	800eb10 <check_fs>
 800ed16:	4603      	mov	r3, r0
 800ed18:	e000      	b.n	800ed1c <find_volume+0x160>
 800ed1a:	2303      	movs	r3, #3
 800ed1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ed20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d905      	bls.n	800ed34 <find_volume+0x178>
 800ed28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed30:	2b03      	cmp	r3, #3
 800ed32:	d9e2      	bls.n	800ecfa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ed34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	d101      	bne.n	800ed40 <find_volume+0x184>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e17e      	b.n	800f03e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ed40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d901      	bls.n	800ed4c <find_volume+0x190>
 800ed48:	230d      	movs	r3, #13
 800ed4a:	e178      	b.n	800f03e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4e:	3330      	adds	r3, #48	@ 0x30
 800ed50:	330b      	adds	r3, #11
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fe fbf2 	bl	800d53c <ld_word>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed5e:	d001      	beq.n	800ed64 <find_volume+0x1a8>
 800ed60:	230d      	movs	r3, #13
 800ed62:	e16c      	b.n	800f03e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ed64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed66:	3330      	adds	r3, #48	@ 0x30
 800ed68:	3316      	adds	r3, #22
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fe fbe6 	bl	800d53c <ld_word>
 800ed70:	4603      	mov	r3, r0
 800ed72:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ed74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d106      	bne.n	800ed88 <find_volume+0x1cc>
 800ed7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed7c:	3330      	adds	r3, #48	@ 0x30
 800ed7e:	3324      	adds	r3, #36	@ 0x24
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fe fbf4 	bl	800d56e <ld_dword>
 800ed86:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ed88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed8c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed90:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ed94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ed98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed9a:	789b      	ldrb	r3, [r3, #2]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d005      	beq.n	800edac <find_volume+0x1f0>
 800eda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda2:	789b      	ldrb	r3, [r3, #2]
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d001      	beq.n	800edac <find_volume+0x1f0>
 800eda8:	230d      	movs	r3, #13
 800edaa:	e148      	b.n	800f03e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800edac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edae:	789b      	ldrb	r3, [r3, #2]
 800edb0:	461a      	mov	r2, r3
 800edb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edb4:	fb02 f303 	mul.w	r3, r2, r3
 800edb8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800edba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800edc0:	461a      	mov	r2, r3
 800edc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800edc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc8:	895b      	ldrh	r3, [r3, #10]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d008      	beq.n	800ede0 <find_volume+0x224>
 800edce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edd0:	895b      	ldrh	r3, [r3, #10]
 800edd2:	461a      	mov	r2, r3
 800edd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edd6:	895b      	ldrh	r3, [r3, #10]
 800edd8:	3b01      	subs	r3, #1
 800edda:	4013      	ands	r3, r2
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <find_volume+0x228>
 800ede0:	230d      	movs	r3, #13
 800ede2:	e12c      	b.n	800f03e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ede4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ede6:	3330      	adds	r3, #48	@ 0x30
 800ede8:	3311      	adds	r3, #17
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe fba6 	bl	800d53c <ld_word>
 800edf0:	4603      	mov	r3, r0
 800edf2:	461a      	mov	r2, r3
 800edf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800edf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edfa:	891b      	ldrh	r3, [r3, #8]
 800edfc:	f003 030f 	and.w	r3, r3, #15
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <find_volume+0x24e>
 800ee06:	230d      	movs	r3, #13
 800ee08:	e119      	b.n	800f03e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ee0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0c:	3330      	adds	r3, #48	@ 0x30
 800ee0e:	3313      	adds	r3, #19
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fe fb93 	bl	800d53c <ld_word>
 800ee16:	4603      	mov	r3, r0
 800ee18:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ee1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d106      	bne.n	800ee2e <find_volume+0x272>
 800ee20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee22:	3330      	adds	r3, #48	@ 0x30
 800ee24:	3320      	adds	r3, #32
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe fba1 	bl	800d56e <ld_dword>
 800ee2c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee30:	3330      	adds	r3, #48	@ 0x30
 800ee32:	330e      	adds	r3, #14
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fe fb81 	bl	800d53c <ld_word>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ee3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <find_volume+0x28c>
 800ee44:	230d      	movs	r3, #13
 800ee46:	e0fa      	b.n	800f03e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ee48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ee4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee4c:	4413      	add	r3, r2
 800ee4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee50:	8912      	ldrh	r2, [r2, #8]
 800ee52:	0912      	lsrs	r2, r2, #4
 800ee54:	b292      	uxth	r2, r2
 800ee56:	4413      	add	r3, r2
 800ee58:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ee5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d204      	bcs.n	800ee6c <find_volume+0x2b0>
 800ee62:	230d      	movs	r3, #13
 800ee64:	e0eb      	b.n	800f03e <find_volume+0x482>
 800ee66:	bf00      	nop
 800ee68:	20004a48 	.word	0x20004a48
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ee6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee74:	8952      	ldrh	r2, [r2, #10]
 800ee76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ee7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <find_volume+0x2ca>
 800ee82:	230d      	movs	r3, #13
 800ee84:	e0db      	b.n	800f03e <find_volume+0x482>
		fmt = FS_FAT32;
 800ee86:	2303      	movs	r3, #3
 800ee88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d802      	bhi.n	800ee9c <find_volume+0x2e0>
 800ee96:	2302      	movs	r3, #2
 800ee98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ee9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d802      	bhi.n	800eeac <find_volume+0x2f0>
 800eea6:	2301      	movs	r3, #1
 800eea8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeae:	1c9a      	adds	r2, r3, #2
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eeb8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eeba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800eebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eebe:	441a      	add	r2, r3
 800eec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800eec4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec8:	441a      	add	r2, r3
 800eeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eecc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800eece:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eed2:	2b03      	cmp	r3, #3
 800eed4:	d11e      	bne.n	800ef14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed8:	3330      	adds	r3, #48	@ 0x30
 800eeda:	332a      	adds	r3, #42	@ 0x2a
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fe fb2d 	bl	800d53c <ld_word>
 800eee2:	4603      	mov	r3, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <find_volume+0x330>
 800eee8:	230d      	movs	r3, #13
 800eeea:	e0a8      	b.n	800f03e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eeec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeee:	891b      	ldrh	r3, [r3, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d001      	beq.n	800eef8 <find_volume+0x33c>
 800eef4:	230d      	movs	r3, #13
 800eef6:	e0a2      	b.n	800f03e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefa:	3330      	adds	r3, #48	@ 0x30
 800eefc:	332c      	adds	r3, #44	@ 0x2c
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe fb35 	bl	800d56e <ld_dword>
 800ef04:	4602      	mov	r2, r0
 800ef06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef08:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef0c:	695b      	ldr	r3, [r3, #20]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef12:	e01f      	b.n	800ef54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ef14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef16:	891b      	ldrh	r3, [r3, #8]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d101      	bne.n	800ef20 <find_volume+0x364>
 800ef1c:	230d      	movs	r3, #13
 800ef1e:	e08e      	b.n	800f03e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ef20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef22:	6a1a      	ldr	r2, [r3, #32]
 800ef24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef26:	441a      	add	r2, r3
 800ef28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ef2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d103      	bne.n	800ef3c <find_volume+0x380>
 800ef34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef36:	695b      	ldr	r3, [r3, #20]
 800ef38:	005b      	lsls	r3, r3, #1
 800ef3a:	e00a      	b.n	800ef52 <find_volume+0x396>
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef3e:	695a      	ldr	r2, [r3, #20]
 800ef40:	4613      	mov	r3, r2
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	4413      	add	r3, r2
 800ef46:	085a      	lsrs	r2, r3, #1
 800ef48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef4a:	695b      	ldr	r3, [r3, #20]
 800ef4c:	f003 0301 	and.w	r3, r3, #1
 800ef50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ef52:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ef54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef56:	699a      	ldr	r2, [r3, #24]
 800ef58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef5a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ef5e:	0a5b      	lsrs	r3, r3, #9
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d201      	bcs.n	800ef68 <find_volume+0x3ac>
 800ef64:	230d      	movs	r3, #13
 800ef66:	e06a      	b.n	800f03e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ef68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef6e:	611a      	str	r2, [r3, #16]
 800ef70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef72:	691a      	ldr	r2, [r3, #16]
 800ef74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef76:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ef78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7a:	2280      	movs	r2, #128	@ 0x80
 800ef7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef82:	2b03      	cmp	r3, #3
 800ef84:	d149      	bne.n	800f01a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ef86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef88:	3330      	adds	r3, #48	@ 0x30
 800ef8a:	3330      	adds	r3, #48	@ 0x30
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fe fad5 	bl	800d53c <ld_word>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d140      	bne.n	800f01a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ef98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800efa0:	f7fe fd42 	bl	800da28 <move_window>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d137      	bne.n	800f01a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800efaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efac:	2200      	movs	r2, #0
 800efae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800efb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb2:	3330      	adds	r3, #48	@ 0x30
 800efb4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fe fabf 	bl	800d53c <ld_word>
 800efbe:	4603      	mov	r3, r0
 800efc0:	461a      	mov	r2, r3
 800efc2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d127      	bne.n	800f01a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800efca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efcc:	3330      	adds	r3, #48	@ 0x30
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fe facd 	bl	800d56e <ld_dword>
 800efd4:	4603      	mov	r3, r0
 800efd6:	4a1c      	ldr	r2, [pc, #112]	@ (800f048 <find_volume+0x48c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d11e      	bne.n	800f01a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800efdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efde:	3330      	adds	r3, #48	@ 0x30
 800efe0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7fe fac2 	bl	800d56e <ld_dword>
 800efea:	4603      	mov	r3, r0
 800efec:	4a17      	ldr	r2, [pc, #92]	@ (800f04c <find_volume+0x490>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d113      	bne.n	800f01a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800eff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff4:	3330      	adds	r3, #48	@ 0x30
 800eff6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe fab7 	bl	800d56e <ld_dword>
 800f000:	4602      	mov	r2, r0
 800f002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f004:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f008:	3330      	adds	r3, #48	@ 0x30
 800f00a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fe faad 	bl	800d56e <ld_dword>
 800f014:	4602      	mov	r2, r0
 800f016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f018:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f020:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f022:	4b0b      	ldr	r3, [pc, #44]	@ (800f050 <find_volume+0x494>)
 800f024:	881b      	ldrh	r3, [r3, #0]
 800f026:	3301      	adds	r3, #1
 800f028:	b29a      	uxth	r2, r3
 800f02a:	4b09      	ldr	r3, [pc, #36]	@ (800f050 <find_volume+0x494>)
 800f02c:	801a      	strh	r2, [r3, #0]
 800f02e:	4b08      	ldr	r3, [pc, #32]	@ (800f050 <find_volume+0x494>)
 800f030:	881a      	ldrh	r2, [r3, #0]
 800f032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f034:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f036:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f038:	f7fe fc8e 	bl	800d958 <clear_lock>
#endif
	return FR_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3758      	adds	r7, #88	@ 0x58
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	41615252 	.word	0x41615252
 800f04c:	61417272 	.word	0x61417272
 800f050:	20004a4c 	.word	0x20004a4c

0800f054 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f05e:	2309      	movs	r3, #9
 800f060:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d01c      	beq.n	800f0a2 <validate+0x4e>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d018      	beq.n	800f0a2 <validate+0x4e>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d013      	beq.n	800f0a2 <validate+0x4e>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	889a      	ldrh	r2, [r3, #4]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	88db      	ldrh	r3, [r3, #6]
 800f084:	429a      	cmp	r2, r3
 800f086:	d10c      	bne.n	800f0a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	785b      	ldrb	r3, [r3, #1]
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fe f9b4 	bl	800d3fc <disk_status>
 800f094:	4603      	mov	r3, r0
 800f096:	f003 0301 	and.w	r3, r3, #1
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d101      	bne.n	800f0a2 <validate+0x4e>
			res = FR_OK;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d102      	bne.n	800f0ae <validate+0x5a>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	e000      	b.n	800f0b0 <validate+0x5c>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	683a      	ldr	r2, [r7, #0]
 800f0b2:	6013      	str	r3, [r2, #0]
	return res;
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
	...

0800f0c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b088      	sub	sp, #32
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f0d2:	f107 0310 	add.w	r3, r7, #16
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff fcd5 	bl	800ea86 <get_ldnumber>
 800f0dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	da01      	bge.n	800f0e8 <f_mount+0x28>
 800f0e4:	230b      	movs	r3, #11
 800f0e6:	e02b      	b.n	800f140 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f0e8:	4a17      	ldr	r2, [pc, #92]	@ (800f148 <f_mount+0x88>)
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d005      	beq.n	800f104 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f0f8:	69b8      	ldr	r0, [r7, #24]
 800f0fa:	f7fe fc2d 	bl	800d958 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	2200      	movs	r2, #0
 800f102:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d002      	beq.n	800f110 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	490d      	ldr	r1, [pc, #52]	@ (800f148 <f_mount+0x88>)
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d002      	beq.n	800f126 <f_mount+0x66>
 800f120:	79fb      	ldrb	r3, [r7, #7]
 800f122:	2b01      	cmp	r3, #1
 800f124:	d001      	beq.n	800f12a <f_mount+0x6a>
 800f126:	2300      	movs	r3, #0
 800f128:	e00a      	b.n	800f140 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f12a:	f107 010c 	add.w	r1, r7, #12
 800f12e:	f107 0308 	add.w	r3, r7, #8
 800f132:	2200      	movs	r2, #0
 800f134:	4618      	mov	r0, r3
 800f136:	f7ff fd41 	bl	800ebbc <find_volume>
 800f13a:	4603      	mov	r3, r0
 800f13c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3720      	adds	r7, #32
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	20004a48 	.word	0x20004a48

0800f14c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b09a      	sub	sp, #104	@ 0x68
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	4613      	mov	r3, r2
 800f158:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <f_open+0x18>
 800f160:	2309      	movs	r3, #9
 800f162:	e1a9      	b.n	800f4b8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f164:	79fb      	ldrb	r3, [r7, #7]
 800f166:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f16a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f16c:	79fa      	ldrb	r2, [r7, #7]
 800f16e:	f107 0114 	add.w	r1, r7, #20
 800f172:	f107 0308 	add.w	r3, r7, #8
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff fd20 	bl	800ebbc <find_volume>
 800f17c:	4603      	mov	r3, r0
 800f17e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f182:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f186:	2b00      	cmp	r3, #0
 800f188:	f040 818d 	bne.w	800f4a6 <f_open+0x35a>
		dj.obj.fs = fs;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	f107 0318 	add.w	r3, r7, #24
 800f196:	4611      	mov	r1, r2
 800f198:	4618      	mov	r0, r3
 800f19a:	f7ff fc03 	bl	800e9a4 <follow_path>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f1a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d118      	bne.n	800f1de <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f1ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f1b0:	b25b      	sxtb	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	da03      	bge.n	800f1be <f_open+0x72>
				res = FR_INVALID_NAME;
 800f1b6:	2306      	movs	r3, #6
 800f1b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f1bc:	e00f      	b.n	800f1de <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f1be:	79fb      	ldrb	r3, [r7, #7]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	bf8c      	ite	hi
 800f1c4:	2301      	movhi	r3, #1
 800f1c6:	2300      	movls	r3, #0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	f107 0318 	add.w	r3, r7, #24
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fe fab4 	bl	800d740 <chk_lock>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	f003 031c 	and.w	r3, r3, #28
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d07f      	beq.n	800f2e8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f1e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d017      	beq.n	800f220 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f1f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f1f4:	2b04      	cmp	r3, #4
 800f1f6:	d10e      	bne.n	800f216 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f1f8:	f7fe fafe 	bl	800d7f8 <enq_lock>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d006      	beq.n	800f210 <f_open+0xc4>
 800f202:	f107 0318 	add.w	r3, r7, #24
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff fa03 	bl	800e612 <dir_register>
 800f20c:	4603      	mov	r3, r0
 800f20e:	e000      	b.n	800f212 <f_open+0xc6>
 800f210:	2312      	movs	r3, #18
 800f212:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f216:	79fb      	ldrb	r3, [r7, #7]
 800f218:	f043 0308 	orr.w	r3, r3, #8
 800f21c:	71fb      	strb	r3, [r7, #7]
 800f21e:	e010      	b.n	800f242 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f220:	7fbb      	ldrb	r3, [r7, #30]
 800f222:	f003 0311 	and.w	r3, r3, #17
 800f226:	2b00      	cmp	r3, #0
 800f228:	d003      	beq.n	800f232 <f_open+0xe6>
					res = FR_DENIED;
 800f22a:	2307      	movs	r3, #7
 800f22c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f230:	e007      	b.n	800f242 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	f003 0304 	and.w	r3, r3, #4
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <f_open+0xf6>
 800f23c:	2308      	movs	r3, #8
 800f23e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f242:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f246:	2b00      	cmp	r3, #0
 800f248:	d168      	bne.n	800f31c <f_open+0x1d0>
 800f24a:	79fb      	ldrb	r3, [r7, #7]
 800f24c:	f003 0308 	and.w	r3, r3, #8
 800f250:	2b00      	cmp	r3, #0
 800f252:	d063      	beq.n	800f31c <f_open+0x1d0>
				dw = GET_FATTIME();
 800f254:	f7fb fe76 	bl	800af44 <get_fattime>
 800f258:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25c:	330e      	adds	r3, #14
 800f25e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f260:	4618      	mov	r0, r3
 800f262:	f7fe f9c2 	bl	800d5ea <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f268:	3316      	adds	r3, #22
 800f26a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fe f9bc 	bl	800d5ea <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f274:	330b      	adds	r3, #11
 800f276:	2220      	movs	r2, #32
 800f278:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f27e:	4611      	mov	r1, r2
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff f8d5 	bl	800e430 <ld_clust>
 800f286:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f28c:	2200      	movs	r2, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff f8ed 	bl	800e46e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f296:	331c      	adds	r3, #28
 800f298:	2100      	movs	r1, #0
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fe f9a5 	bl	800d5ea <st_dword>
					fs->wflag = 1;
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f2a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d037      	beq.n	800f31c <f_open+0x1d0>
						dw = fs->winsect;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f2b2:	f107 0318 	add.w	r3, r7, #24
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fe fe00 	bl	800dec0 <remove_chain>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800f2c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d126      	bne.n	800f31c <f_open+0x1d0>
							res = move_window(fs, dw);
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe fba8 	bl	800da28 <move_window>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f2e2:	3a01      	subs	r2, #1
 800f2e4:	60da      	str	r2, [r3, #12]
 800f2e6:	e019      	b.n	800f31c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f2e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d115      	bne.n	800f31c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f2f0:	7fbb      	ldrb	r3, [r7, #30]
 800f2f2:	f003 0310 	and.w	r3, r3, #16
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d003      	beq.n	800f302 <f_open+0x1b6>
					res = FR_NO_FILE;
 800f2fa:	2304      	movs	r3, #4
 800f2fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f300:	e00c      	b.n	800f31c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f302:	79fb      	ldrb	r3, [r7, #7]
 800f304:	f003 0302 	and.w	r3, r3, #2
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d007      	beq.n	800f31c <f_open+0x1d0>
 800f30c:	7fbb      	ldrb	r3, [r7, #30]
 800f30e:	f003 0301 	and.w	r3, r3, #1
 800f312:	2b00      	cmp	r3, #0
 800f314:	d002      	beq.n	800f31c <f_open+0x1d0>
						res = FR_DENIED;
 800f316:	2307      	movs	r3, #7
 800f318:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f31c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f320:	2b00      	cmp	r3, #0
 800f322:	d126      	bne.n	800f372 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	f003 0308 	and.w	r3, r3, #8
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d003      	beq.n	800f336 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800f32e:	79fb      	ldrb	r3, [r7, #7]
 800f330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f334:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f33e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f344:	79fb      	ldrb	r3, [r7, #7]
 800f346:	2b01      	cmp	r3, #1
 800f348:	bf8c      	ite	hi
 800f34a:	2301      	movhi	r3, #1
 800f34c:	2300      	movls	r3, #0
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	461a      	mov	r2, r3
 800f352:	f107 0318 	add.w	r3, r7, #24
 800f356:	4611      	mov	r1, r2
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fe fa6f 	bl	800d83c <inc_lock>
 800f35e:	4602      	mov	r2, r0
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	691b      	ldr	r3, [r3, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d102      	bne.n	800f372 <f_open+0x226>
 800f36c:	2302      	movs	r3, #2
 800f36e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f372:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f376:	2b00      	cmp	r3, #0
 800f378:	f040 8095 	bne.w	800f4a6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f380:	4611      	mov	r1, r2
 800f382:	4618      	mov	r0, r3
 800f384:	f7ff f854 	bl	800e430 <ld_clust>
 800f388:	4602      	mov	r2, r0
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f390:	331c      	adds	r3, #28
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe f8eb 	bl	800d56e <ld_dword>
 800f398:	4602      	mov	r2, r0
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f3a4:	697a      	ldr	r2, [r7, #20]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	88da      	ldrh	r2, [r3, #6]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	79fa      	ldrb	r2, [r7, #7]
 800f3b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	3330      	adds	r3, #48	@ 0x30
 800f3ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fe f955 	bl	800d684 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f3da:	79fb      	ldrb	r3, [r7, #7]
 800f3dc:	f003 0320 	and.w	r3, r3, #32
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d060      	beq.n	800f4a6 <f_open+0x35a>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d05c      	beq.n	800f4a6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	68da      	ldr	r2, [r3, #12]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	895b      	ldrh	r3, [r3, #10]
 800f3f8:	025b      	lsls	r3, r3, #9
 800f3fa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f408:	e016      	b.n	800f438 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fe fbc5 	bl	800db9e <get_fat>
 800f414:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d802      	bhi.n	800f422 <f_open+0x2d6>
 800f41c:	2302      	movs	r3, #2
 800f41e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f428:	d102      	bne.n	800f430 <f_open+0x2e4>
 800f42a:	2301      	movs	r3, #1
 800f42c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f430:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f438:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d103      	bne.n	800f448 <f_open+0x2fc>
 800f440:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f444:	429a      	cmp	r2, r3
 800f446:	d8e0      	bhi.n	800f40a <f_open+0x2be>
				}
				fp->clust = clst;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f44c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f44e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f452:	2b00      	cmp	r3, #0
 800f454:	d127      	bne.n	800f4a6 <f_open+0x35a>
 800f456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d022      	beq.n	800f4a6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f464:	4618      	mov	r0, r3
 800f466:	f7fe fb7b 	bl	800db60 <clust2sect>
 800f46a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800f46c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d103      	bne.n	800f47a <f_open+0x32e>
						res = FR_INT_ERR;
 800f472:	2302      	movs	r3, #2
 800f474:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f478:	e015      	b.n	800f4a6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f47a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f47c:	0a5a      	lsrs	r2, r3, #9
 800f47e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f480:	441a      	add	r2, r3
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	7858      	ldrb	r0, [r3, #1]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6a1a      	ldr	r2, [r3, #32]
 800f494:	2301      	movs	r3, #1
 800f496:	f7fd fff3 	bl	800d480 <disk_read>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d002      	beq.n	800f4a6 <f_open+0x35a>
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f4a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d002      	beq.n	800f4b4 <f_open+0x368>
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f4b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3768      	adds	r7, #104	@ 0x68
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b08c      	sub	sp, #48	@ 0x30
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
 800f4cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f107 0210 	add.w	r2, r7, #16
 800f4de:	4611      	mov	r1, r2
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7ff fdb7 	bl	800f054 <validate>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f4ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d107      	bne.n	800f504 <f_write+0x44>
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	7d5b      	ldrb	r3, [r3, #21]
 800f4f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f4fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <f_write+0x4a>
 800f504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f508:	e14b      	b.n	800f7a2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	7d1b      	ldrb	r3, [r3, #20]
 800f50e:	f003 0302 	and.w	r3, r3, #2
 800f512:	2b00      	cmp	r3, #0
 800f514:	d101      	bne.n	800f51a <f_write+0x5a>
 800f516:	2307      	movs	r3, #7
 800f518:	e143      	b.n	800f7a2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	699a      	ldr	r2, [r3, #24]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	441a      	add	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	699b      	ldr	r3, [r3, #24]
 800f526:	429a      	cmp	r2, r3
 800f528:	f080 812d 	bcs.w	800f786 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	43db      	mvns	r3, r3
 800f532:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f534:	e127      	b.n	800f786 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f040 80e3 	bne.w	800f70a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	0a5b      	lsrs	r3, r3, #9
 800f54a:	693a      	ldr	r2, [r7, #16]
 800f54c:	8952      	ldrh	r2, [r2, #10]
 800f54e:	3a01      	subs	r2, #1
 800f550:	4013      	ands	r3, r2
 800f552:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d143      	bne.n	800f5e2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	699b      	ldr	r3, [r3, #24]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d10c      	bne.n	800f57c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d11a      	bne.n	800f5a4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2100      	movs	r1, #0
 800f572:	4618      	mov	r0, r3
 800f574:	f7fe fd09 	bl	800df8a <create_chain>
 800f578:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f57a:	e013      	b.n	800f5a4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f580:	2b00      	cmp	r3, #0
 800f582:	d007      	beq.n	800f594 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	699b      	ldr	r3, [r3, #24]
 800f588:	4619      	mov	r1, r3
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f7fe fd95 	bl	800e0ba <clmt_clust>
 800f590:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f592:	e007      	b.n	800f5a4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	4619      	mov	r1, r3
 800f59c:	4610      	mov	r0, r2
 800f59e:	f7fe fcf4 	bl	800df8a <create_chain>
 800f5a2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f000 80f2 	beq.w	800f790 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d104      	bne.n	800f5bc <f_write+0xfc>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	755a      	strb	r2, [r3, #21]
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	e0f2      	b.n	800f7a2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c2:	d104      	bne.n	800f5ce <f_write+0x10e>
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	755a      	strb	r2, [r3, #21]
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e0e9      	b.n	800f7a2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5d2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d102      	bne.n	800f5e2 <f_write+0x122>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	b25b      	sxtb	r3, r3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	da18      	bge.n	800f61e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	7858      	ldrb	r0, [r3, #1]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6a1a      	ldr	r2, [r3, #32]
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	f7fd ff60 	bl	800d4c0 <disk_write>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d004      	beq.n	800f610 <f_write+0x150>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2201      	movs	r2, #1
 800f60a:	755a      	strb	r2, [r3, #21]
 800f60c:	2301      	movs	r3, #1
 800f60e:	e0c8      	b.n	800f7a2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	7d1b      	ldrb	r3, [r3, #20]
 800f614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	69db      	ldr	r3, [r3, #28]
 800f624:	4619      	mov	r1, r3
 800f626:	4610      	mov	r0, r2
 800f628:	f7fe fa9a 	bl	800db60 <clust2sect>
 800f62c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d104      	bne.n	800f63e <f_write+0x17e>
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2202      	movs	r2, #2
 800f638:	755a      	strb	r2, [r3, #21]
 800f63a:	2302      	movs	r3, #2
 800f63c:	e0b1      	b.n	800f7a2 <f_write+0x2e2>
			sect += csect;
 800f63e:	697a      	ldr	r2, [r7, #20]
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	4413      	add	r3, r2
 800f644:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	0a5b      	lsrs	r3, r3, #9
 800f64a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d03c      	beq.n	800f6cc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f652:	69ba      	ldr	r2, [r7, #24]
 800f654:	6a3b      	ldr	r3, [r7, #32]
 800f656:	4413      	add	r3, r2
 800f658:	693a      	ldr	r2, [r7, #16]
 800f65a:	8952      	ldrh	r2, [r2, #10]
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d905      	bls.n	800f66c <f_write+0x1ac>
					cc = fs->csize - csect;
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	895b      	ldrh	r3, [r3, #10]
 800f664:	461a      	mov	r2, r3
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	7858      	ldrb	r0, [r3, #1]
 800f670:	6a3b      	ldr	r3, [r7, #32]
 800f672:	697a      	ldr	r2, [r7, #20]
 800f674:	69f9      	ldr	r1, [r7, #28]
 800f676:	f7fd ff23 	bl	800d4c0 <disk_write>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d004      	beq.n	800f68a <f_write+0x1ca>
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2201      	movs	r2, #1
 800f684:	755a      	strb	r2, [r3, #21]
 800f686:	2301      	movs	r3, #1
 800f688:	e08b      	b.n	800f7a2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6a1a      	ldr	r2, [r3, #32]
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	6a3a      	ldr	r2, [r7, #32]
 800f694:	429a      	cmp	r2, r3
 800f696:	d915      	bls.n	800f6c4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6a1a      	ldr	r2, [r3, #32]
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	025b      	lsls	r3, r3, #9
 800f6a8:	69fa      	ldr	r2, [r7, #28]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	f7fd ffc6 	bl	800d642 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	7d1b      	ldrb	r3, [r3, #20]
 800f6ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6be:	b2da      	uxtb	r2, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f6c4:	6a3b      	ldr	r3, [r7, #32]
 800f6c6:	025b      	lsls	r3, r3, #9
 800f6c8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f6ca:	e03f      	b.n	800f74c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6a1b      	ldr	r3, [r3, #32]
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d016      	beq.n	800f704 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	699a      	ldr	r2, [r3, #24]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d210      	bcs.n	800f704 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	7858      	ldrb	r0, [r3, #1]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	f7fd fec6 	bl	800d480 <disk_read>
 800f6f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d004      	beq.n	800f704 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	755a      	strb	r2, [r3, #21]
 800f700:	2301      	movs	r3, #1
 800f702:	e04e      	b.n	800f7a2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	697a      	ldr	r2, [r7, #20]
 800f708:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f712:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f716:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d901      	bls.n	800f724 <f_write+0x264>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	699b      	ldr	r3, [r3, #24]
 800f72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f732:	4413      	add	r3, r2
 800f734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f736:	69f9      	ldr	r1, [r7, #28]
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fd ff82 	bl	800d642 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	7d1b      	ldrb	r3, [r3, #20]
 800f742:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f746:	b2da      	uxtb	r2, r3
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f74c:	69fa      	ldr	r2, [r7, #28]
 800f74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f750:	4413      	add	r3, r2
 800f752:	61fb      	str	r3, [r7, #28]
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	699a      	ldr	r2, [r3, #24]
 800f758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75a:	441a      	add	r2, r3
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	619a      	str	r2, [r3, #24]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	68da      	ldr	r2, [r3, #12]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	699b      	ldr	r3, [r3, #24]
 800f768:	429a      	cmp	r2, r3
 800f76a:	bf38      	it	cc
 800f76c:	461a      	movcc	r2, r3
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	60da      	str	r2, [r3, #12]
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f778:	441a      	add	r2, r3
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f782:	1ad3      	subs	r3, r2, r3
 800f784:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f47f aed4 	bne.w	800f536 <f_write+0x76>
 800f78e:	e000      	b.n	800f792 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f790:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	7d1b      	ldrb	r3, [r3, #20]
 800f796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3730      	adds	r7, #48	@ 0x30
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b086      	sub	sp, #24
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f107 0208 	add.w	r2, r7, #8
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7ff fc4a 	bl	800f054 <validate>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f7c4:	7dfb      	ldrb	r3, [r7, #23]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d168      	bne.n	800f89c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	7d1b      	ldrb	r3, [r3, #20]
 800f7ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d062      	beq.n	800f89c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	7d1b      	ldrb	r3, [r3, #20]
 800f7da:	b25b      	sxtb	r3, r3
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	da15      	bge.n	800f80c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	7858      	ldrb	r0, [r3, #1]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6a1a      	ldr	r2, [r3, #32]
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	f7fd fe66 	bl	800d4c0 <disk_write>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d001      	beq.n	800f7fe <f_sync+0x54>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e04f      	b.n	800f89e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	7d1b      	ldrb	r3, [r3, #20]
 800f802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f806:	b2da      	uxtb	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f80c:	f7fb fb9a 	bl	800af44 <get_fattime>
 800f810:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f818:	4619      	mov	r1, r3
 800f81a:	4610      	mov	r0, r2
 800f81c:	f7fe f904 	bl	800da28 <move_window>
 800f820:	4603      	mov	r3, r0
 800f822:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f824:	7dfb      	ldrb	r3, [r7, #23]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d138      	bne.n	800f89c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f82e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	330b      	adds	r3, #11
 800f834:	781a      	ldrb	r2, [r3, #0]
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	330b      	adds	r3, #11
 800f83a:	f042 0220 	orr.w	r2, r2, #32
 800f83e:	b2d2      	uxtb	r2, r2
 800f840:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6818      	ldr	r0, [r3, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	689b      	ldr	r3, [r3, #8]
 800f84a:	461a      	mov	r2, r3
 800f84c:	68f9      	ldr	r1, [r7, #12]
 800f84e:	f7fe fe0e 	bl	800e46e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f103 021c 	add.w	r2, r3, #28
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	4619      	mov	r1, r3
 800f85e:	4610      	mov	r0, r2
 800f860:	f7fd fec3 	bl	800d5ea <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	3316      	adds	r3, #22
 800f868:	6939      	ldr	r1, [r7, #16]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fd febd 	bl	800d5ea <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3312      	adds	r3, #18
 800f874:	2100      	movs	r1, #0
 800f876:	4618      	mov	r0, r3
 800f878:	f7fd fe9c 	bl	800d5b4 <st_word>
					fs->wflag = 1;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2201      	movs	r2, #1
 800f880:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	4618      	mov	r0, r3
 800f886:	f7fe f8fd 	bl	800da84 <sync_fs>
 800f88a:	4603      	mov	r3, r0
 800f88c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	7d1b      	ldrb	r3, [r3, #20]
 800f892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f896:	b2da      	uxtb	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3718      	adds	r7, #24
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}

0800f8a6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f8a6:	b580      	push	{r7, lr}
 800f8a8:	b086      	sub	sp, #24
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
 800f8ae:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <f_opendir+0x14>
 800f8b6:	2309      	movs	r3, #9
 800f8b8:	e064      	b.n	800f984 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f8be:	f107 010c 	add.w	r1, r7, #12
 800f8c2:	463b      	mov	r3, r7
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7ff f978 	bl	800ebbc <find_volume>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8d0:	7dfb      	ldrb	r3, [r7, #23]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d14f      	bne.n	800f976 <f_opendir+0xd0>
		obj->fs = fs;
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7ff f85f 	bl	800e9a4 <follow_path>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f8ea:	7dfb      	ldrb	r3, [r7, #23]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d13d      	bne.n	800f96c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f8f6:	b25b      	sxtb	r3, r3
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	db12      	blt.n	800f922 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	799b      	ldrb	r3, [r3, #6]
 800f900:	f003 0310 	and.w	r3, r3, #16
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00a      	beq.n	800f91e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	4619      	mov	r1, r3
 800f910:	4610      	mov	r0, r2
 800f912:	f7fe fd8d 	bl	800e430 <ld_clust>
 800f916:	4602      	mov	r2, r0
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	609a      	str	r2, [r3, #8]
 800f91c:	e001      	b.n	800f922 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f91e:	2305      	movs	r3, #5
 800f920:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f922:	7dfb      	ldrb	r3, [r7, #23]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d121      	bne.n	800f96c <f_opendir+0xc6>
				obj->id = fs->id;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	88da      	ldrh	r2, [r3, #6]
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f930:	2100      	movs	r1, #0
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7fe fbf5 	bl	800e122 <dir_sdi>
 800f938:	4603      	mov	r3, r0
 800f93a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f93c:	7dfb      	ldrb	r3, [r7, #23]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d114      	bne.n	800f96c <f_opendir+0xc6>
					if (obj->sclust) {
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00d      	beq.n	800f966 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f94a:	2100      	movs	r1, #0
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7fd ff75 	bl	800d83c <inc_lock>
 800f952:	4602      	mov	r2, r0
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	691b      	ldr	r3, [r3, #16]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d105      	bne.n	800f96c <f_opendir+0xc6>
 800f960:	2312      	movs	r3, #18
 800f962:	75fb      	strb	r3, [r7, #23]
 800f964:	e002      	b.n	800f96c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	2200      	movs	r2, #0
 800f96a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d101      	bne.n	800f976 <f_opendir+0xd0>
 800f972:	2305      	movs	r3, #5
 800f974:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f976:	7dfb      	ldrb	r3, [r7, #23]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d002      	beq.n	800f982 <f_opendir+0xdc>
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	2200      	movs	r2, #0
 800f980:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f982:	7dfb      	ldrb	r3, [r7, #23]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f107 0208 	add.w	r2, r7, #8
 800f99c:	4611      	mov	r1, r2
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7ff fb58 	bl	800f054 <validate>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d126      	bne.n	800f9fc <f_readdir+0x70>
		if (!fno) {
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7fe fbb3 	bl	800e122 <dir_sdi>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	73fb      	strb	r3, [r7, #15]
 800f9c0:	e01c      	b.n	800f9fc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7fe fd72 	bl	800e4ae <dir_read>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	2b04      	cmp	r3, #4
 800f9d2:	d101      	bne.n	800f9d8 <f_readdir+0x4c>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f9d8:	7bfb      	ldrb	r3, [r7, #15]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d10e      	bne.n	800f9fc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7fe fe48 	bl	800e676 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7fe fc15 	bl	800e218 <dir_next>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f9f2:	7bfb      	ldrb	r3, [r7, #15]
 800f9f4:	2b04      	cmp	r3, #4
 800f9f6:	d101      	bne.n	800f9fc <f_readdir+0x70>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b084      	sub	sp, #16
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7ff ffba 	bl	800f98c <f_readdir>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d114      	bne.n	800fa4c <f_findnext+0x46>
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d011      	beq.n	800fa4c <f_findnext+0x46>
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	7a5b      	ldrb	r3, [r3, #9]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d00d      	beq.n	800fa4c <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	f103 0109 	add.w	r1, r3, #9
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f7fe fea1 	bl	800e784 <pattern_matching>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d100      	bne.n	800fa4a <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fa48:	e7e2      	b.n	800fa10 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa4a:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800fa4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3710      	adds	r7, #16
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b086      	sub	sp, #24
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	60f8      	str	r0, [r7, #12]
 800fa5e:	60b9      	str	r1, [r7, #8]
 800fa60:	607a      	str	r2, [r7, #4]
 800fa62:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	683a      	ldr	r2, [r7, #0]
 800fa68:	631a      	str	r2, [r3, #48]	@ 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800fa6a:	6879      	ldr	r1, [r7, #4]
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f7ff ff1a 	bl	800f8a6 <f_opendir>
 800fa72:	4603      	mov	r3, r0
 800fa74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fa76:	7dfb      	ldrb	r3, [r7, #23]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d105      	bne.n	800fa88 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800fa7c:	68b9      	ldr	r1, [r7, #8]
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f7ff ffc1 	bl	800fa06 <f_findnext>
 800fa84:	4603      	mov	r3, r0
 800fa86:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800fa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b086      	sub	sp, #24
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f107 020c 	add.w	r2, r7, #12
 800faa0:	4611      	mov	r1, r2
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff fad6 	bl	800f054 <validate>
 800faa8:	4603      	mov	r3, r0
 800faaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800faac:	7dfb      	ldrb	r3, [r7, #23]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d105      	bne.n	800fabe <f_truncate+0x2c>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	7d5b      	ldrb	r3, [r3, #21]
 800fab6:	75fb      	strb	r3, [r7, #23]
 800fab8:	7dfb      	ldrb	r3, [r7, #23]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <f_truncate+0x30>
 800fabe:	7dfb      	ldrb	r3, [r7, #23]
 800fac0:	e077      	b.n	800fbb2 <f_truncate+0x120>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	7d1b      	ldrb	r3, [r3, #20]
 800fac6:	f003 0302 	and.w	r3, r3, #2
 800faca:	2b00      	cmp	r3, #0
 800facc:	d101      	bne.n	800fad2 <f_truncate+0x40>
 800face:	2307      	movs	r3, #7
 800fad0:	e06f      	b.n	800fbb2 <f_truncate+0x120>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	699a      	ldr	r2, [r3, #24]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d268      	bcs.n	800fbb0 <f_truncate+0x11e>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	699b      	ldr	r3, [r3, #24]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d10c      	bne.n	800fb00 <f_truncate+0x6e>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	2200      	movs	r2, #0
 800faee:	4619      	mov	r1, r3
 800faf0:	f7fe f9e6 	bl	800dec0 <remove_chain>
 800faf4:	4603      	mov	r3, r0
 800faf6:	75fb      	strb	r3, [r7, #23]
			fp->obj.sclust = 0;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	609a      	str	r2, [r3, #8]
 800fafe:	e025      	b.n	800fb4c <f_truncate+0xba>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	69db      	ldr	r3, [r3, #28]
 800fb06:	4619      	mov	r1, r3
 800fb08:	4610      	mov	r0, r2
 800fb0a:	f7fe f848 	bl	800db9e <get_fat>
 800fb0e:	6138      	str	r0, [r7, #16]
			res = FR_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	75fb      	strb	r3, [r7, #23]
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1a:	d101      	bne.n	800fb20 <f_truncate+0x8e>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	75fb      	strb	r3, [r7, #23]
			if (ncl == 1) res = FR_INT_ERR;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d101      	bne.n	800fb2a <f_truncate+0x98>
 800fb26:	2302      	movs	r3, #2
 800fb28:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK && ncl < fs->n_fatent) {
 800fb2a:	7dfb      	ldrb	r3, [r7, #23]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d10d      	bne.n	800fb4c <f_truncate+0xba>
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	695b      	ldr	r3, [r3, #20]
 800fb34:	693a      	ldr	r2, [r7, #16]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d208      	bcs.n	800fb4c <f_truncate+0xba>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	69db      	ldr	r3, [r3, #28]
 800fb40:	461a      	mov	r2, r3
 800fb42:	6939      	ldr	r1, [r7, #16]
 800fb44:	f7fe f9bc 	bl	800dec0 <remove_chain>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	75fb      	strb	r3, [r7, #23]
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	699a      	ldr	r2, [r3, #24]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	60da      	str	r2, [r3, #12]
		fp->flag |= FA_MODIFIED;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	7d1b      	ldrb	r3, [r3, #20]
 800fb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	751a      	strb	r2, [r3, #20]
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d11b      	bne.n	800fba0 <f_truncate+0x10e>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	7d1b      	ldrb	r3, [r3, #20]
 800fb6c:	b25b      	sxtb	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	da16      	bge.n	800fba0 <f_truncate+0x10e>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	7858      	ldrb	r0, [r3, #1]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a1a      	ldr	r2, [r3, #32]
 800fb80:	2301      	movs	r3, #1
 800fb82:	f7fd fc9d 	bl	800d4c0 <disk_write>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <f_truncate+0x100>
				res = FR_DISK_ERR;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	75fb      	strb	r3, [r7, #23]
 800fb90:	e006      	b.n	800fba0 <f_truncate+0x10e>
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7d1b      	ldrb	r3, [r3, #20]
 800fb96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	751a      	strb	r2, [r3, #20]
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
 800fba0:	7dfb      	ldrb	r3, [r7, #23]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d004      	beq.n	800fbb0 <f_truncate+0x11e>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	7dfa      	ldrb	r2, [r7, #23]
 800fbaa:	755a      	strb	r2, [r3, #21]
 800fbac:	7dfb      	ldrb	r3, [r7, #23]
 800fbae:	e000      	b.n	800fbb2 <f_truncate+0x120>
	}

	LEAVE_FF(fs, res);
 800fbb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3718      	adds	r7, #24
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <f_expand>:
FRESULT f_expand (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t fsz,	/* File size to be expanded to */
	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b08e      	sub	sp, #56	@ 0x38
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	60f8      	str	r0, [r7, #12]
 800fbc2:	60b9      	str	r1, [r7, #8]
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	71fb      	strb	r3, [r7, #7]
	FRESULT res;
	FATFS *fs;
	DWORD n, clst, stcl, scl, ncl, tcl, lclst;


	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f107 0214 	add.w	r2, r7, #20
 800fbce:	4611      	mov	r1, r2
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff fa3f 	bl	800f054 <validate>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800fbdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d107      	bne.n	800fbf4 <f_expand+0x3a>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	7d5b      	ldrb	r3, [r3, #21]
 800fbe8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fbec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d002      	beq.n	800fbfa <f_expand+0x40>
 800fbf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fbf8:	e0c9      	b.n	800fd8e <f_expand+0x1d4>
	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d009      	beq.n	800fc14 <f_expand+0x5a>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d105      	bne.n	800fc14 <f_expand+0x5a>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	7d1b      	ldrb	r3, [r3, #20]
 800fc0c:	f003 0302 	and.w	r3, r3, #2
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <f_expand+0x5e>
 800fc14:	2307      	movs	r3, #7
 800fc16:	e0ba      	b.n	800fd8e <f_expand+0x1d4>
#if _FS_EXFAT
	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size limit */
#endif
	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	895b      	ldrh	r3, [r3, #10]
 800fc1c:	025b      	lsls	r3, r3, #9
 800fc1e:	633b      	str	r3, [r7, #48]	@ 0x30
	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc24:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc2a:	1e51      	subs	r1, r2, #1
 800fc2c:	68ba      	ldr	r2, [r7, #8]
 800fc2e:	400a      	ands	r2, r1
 800fc30:	2a00      	cmp	r2, #0
 800fc32:	d001      	beq.n	800fc38 <f_expand+0x7e>
 800fc34:	2201      	movs	r2, #1
 800fc36:	e000      	b.n	800fc3a <f_expand+0x80>
 800fc38:	2200      	movs	r2, #0
 800fc3a:	4413      	add	r3, r2
 800fc3c:	61bb      	str	r3, [r7, #24]
	stcl = fs->last_clst; lclst = 0;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	68db      	ldr	r3, [r3, #12]
 800fc42:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc44:	2300      	movs	r3, #0
 800fc46:	61fb      	str	r3, [r7, #28]
	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 800fc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d904      	bls.n	800fc58 <f_expand+0x9e>
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	695b      	ldr	r3, [r3, #20]
 800fc52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d301      	bcc.n	800fc5c <f_expand+0xa2>
 800fc58:	2302      	movs	r3, #2
 800fc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
			}
		}
	} else
#endif
	{
		scl = clst = stcl; ncl = 0;
 800fc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc62:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc64:	2300      	movs	r3, #0
 800fc66:	623b      	str	r3, [r7, #32]
		for (;;) {	/* Find a contiguous cluster block */
			n = get_fat(&fp->obj, clst);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fd ff96 	bl	800db9e <get_fat>
 800fc72:	6338      	str	r0, [r7, #48]	@ 0x30
			if (++clst >= fs->n_fatent) clst = 2;
 800fc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc76:	3301      	adds	r3, #1
 800fc78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	695b      	ldr	r3, [r3, #20]
 800fc7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d301      	bcc.n	800fc88 <f_expand+0xce>
 800fc84:	2302      	movs	r3, #2
 800fc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (n == 1) { res = FR_INT_ERR; break; }
 800fc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d103      	bne.n	800fc96 <f_expand+0xdc>
 800fc8e:	2302      	movs	r3, #2
 800fc90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fc94:	e01d      	b.n	800fcd2 <f_expand+0x118>
			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc9c:	d103      	bne.n	800fca6 <f_expand+0xec>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fca4:	e015      	b.n	800fcd2 <f_expand+0x118>
			if (n == 0) {	/* Is it a free cluster? */
 800fca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d107      	bne.n	800fcbc <f_expand+0x102>
				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
 800fcac:	6a3b      	ldr	r3, [r7, #32]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	623b      	str	r3, [r7, #32]
 800fcb2:	6a3a      	ldr	r2, [r7, #32]
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d104      	bne.n	800fcc4 <f_expand+0x10a>
 800fcba:	e00a      	b.n	800fcd2 <f_expand+0x118>
			} else {
				scl = clst; ncl = 0;		/* Not a free cluster */
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	623b      	str	r3, [r7, #32]
			}
			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
 800fcc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d1cd      	bne.n	800fc68 <f_expand+0xae>
 800fccc:	2307      	movs	r3, #7
 800fcce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}
		if (res == FR_OK) {	/* A contiguous free area is found */
 800fcd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d12c      	bne.n	800fd34 <f_expand+0x17a>
			if (opt) {		/* Allocate it now */
 800fcda:	79fb      	ldrb	r3, [r7, #7]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d024      	beq.n	800fd2a <f_expand+0x170>
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 800fce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fce8:	e01b      	b.n	800fd22 <f_expand+0x168>
					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 800fcea:	6978      	ldr	r0, [r7, #20]
 800fcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d002      	beq.n	800fcf8 <f_expand+0x13e>
 800fcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	e001      	b.n	800fcfc <f_expand+0x142>
 800fcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd00:	f7fd fff4 	bl	800dcec <put_fat>
 800fd04:	4603      	mov	r3, r0
 800fd06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					if (res != FR_OK) break;
 800fd0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d10f      	bne.n	800fd32 <f_expand+0x178>
					lclst = clst;
 800fd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd14:	61fb      	str	r3, [r7, #28]
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 800fd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd18:	3301      	adds	r3, #1
 800fd1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e0      	bne.n	800fcea <f_expand+0x130>
 800fd28:	e004      	b.n	800fd34 <f_expand+0x17a>
				}
			} else {		/* Set it as suggested point for next allocation */
				lclst = scl - 1;
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2c:	3b01      	subs	r3, #1
 800fd2e:	61fb      	str	r3, [r7, #28]
 800fd30:	e000      	b.n	800fd34 <f_expand+0x17a>
					if (res != FR_OK) break;
 800fd32:	bf00      	nop
			}
		}
	}

	if (res == FR_OK) {
 800fd34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d126      	bne.n	800fd8a <f_expand+0x1d0>
		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	69fa      	ldr	r2, [r7, #28]
 800fd40:	60da      	str	r2, [r3, #12]
		if (opt) {	/* Is it allocated now? */
 800fd42:	79fb      	ldrb	r3, [r7, #7]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d020      	beq.n	800fd8a <f_expand+0x1d0>
			fp->obj.sclust = scl;		/* Update object allocation information */
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd4c:	609a      	str	r2, [r3, #8]
			fp->obj.objsize = fsz;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	68ba      	ldr	r2, [r7, #8]
 800fd52:	60da      	str	r2, [r3, #12]
			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
			fp->flag |= FA_MODIFIED;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	7d1b      	ldrb	r3, [r3, #20]
 800fd58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd5c:	b2da      	uxtb	r2, r3
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	751a      	strb	r2, [r3, #20]
			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	691a      	ldr	r2, [r3, #16]
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	695b      	ldr	r3, [r3, #20]
 800fd6a:	3b02      	subs	r3, #2
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d80c      	bhi.n	800fd8a <f_expand+0x1d0>
				fs->free_clst -= tcl;
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	6919      	ldr	r1, [r3, #16]
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	69ba      	ldr	r2, [r7, #24]
 800fd78:	1a8a      	subs	r2, r1, r2
 800fd7a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag |= 1;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	791a      	ldrb	r2, [r3, #4]
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	f042 0201 	orr.w	r2, r2, #1
 800fd86:	b2d2      	uxtb	r2, r2
 800fd88:	711a      	strb	r2, [r3, #4]
			}
		}
	}

	LEAVE_FF(fs, res);
 800fd8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3738      	adds	r7, #56	@ 0x38
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
	...

0800fd98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b087      	sub	sp, #28
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	4613      	mov	r3, r2
 800fda4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fda6:	2301      	movs	r3, #1
 800fda8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fdae:	4b1f      	ldr	r3, [pc, #124]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fdb0:	7a5b      	ldrb	r3, [r3, #9]
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d131      	bne.n	800fe1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fdb8:	4b1c      	ldr	r3, [pc, #112]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fdba:	7a5b      	ldrb	r3, [r3, #9]
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	4b1a      	ldr	r3, [pc, #104]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fdc2:	2100      	movs	r1, #0
 800fdc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fdc6:	4b19      	ldr	r3, [pc, #100]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fdc8:	7a5b      	ldrb	r3, [r3, #9]
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	4a17      	ldr	r2, [pc, #92]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fdce:	009b      	lsls	r3, r3, #2
 800fdd0:	4413      	add	r3, r2
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fdd6:	4b15      	ldr	r3, [pc, #84]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fdd8:	7a5b      	ldrb	r3, [r3, #9]
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	461a      	mov	r2, r3
 800fdde:	4b13      	ldr	r3, [pc, #76]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fde0:	4413      	add	r3, r2
 800fde2:	79fa      	ldrb	r2, [r7, #7]
 800fde4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fde6:	4b11      	ldr	r3, [pc, #68]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fde8:	7a5b      	ldrb	r3, [r3, #9]
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	1c5a      	adds	r2, r3, #1
 800fdee:	b2d1      	uxtb	r1, r2
 800fdf0:	4a0e      	ldr	r2, [pc, #56]	@ (800fe2c <FATFS_LinkDriverEx+0x94>)
 800fdf2:	7251      	strb	r1, [r2, #9]
 800fdf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fdf6:	7dbb      	ldrb	r3, [r7, #22]
 800fdf8:	3330      	adds	r3, #48	@ 0x30
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	3301      	adds	r3, #1
 800fe04:	223a      	movs	r2, #58	@ 0x3a
 800fe06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	3302      	adds	r3, #2
 800fe0c:	222f      	movs	r2, #47	@ 0x2f
 800fe0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	3303      	adds	r3, #3
 800fe14:	2200      	movs	r2, #0
 800fe16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	371c      	adds	r7, #28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	20004a70 	.word	0x20004a70

0800fe30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	6839      	ldr	r1, [r7, #0]
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f7ff ffaa 	bl	800fd98 <FATFS_LinkDriverEx>
 800fe44:	4603      	mov	r3, r0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3708      	adds	r7, #8
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
	...

0800fe50 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	460b      	mov	r3, r1
 800fe5a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800fe60:	2301      	movs	r3, #1
 800fe62:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800fe64:	4b15      	ldr	r3, [pc, #84]	@ (800febc <FATFS_UnLinkDriverEx+0x6c>)
 800fe66:	7a5b      	ldrb	r3, [r3, #9]
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d01e      	beq.n	800feac <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	3b30      	subs	r3, #48	@ 0x30
 800fe74:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800fe76:	7bbb      	ldrb	r3, [r7, #14]
 800fe78:	4a10      	ldr	r2, [pc, #64]	@ (800febc <FATFS_UnLinkDriverEx+0x6c>)
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4413      	add	r3, r2
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d013      	beq.n	800feac <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800fe84:	7bbb      	ldrb	r3, [r7, #14]
 800fe86:	4a0d      	ldr	r2, [pc, #52]	@ (800febc <FATFS_UnLinkDriverEx+0x6c>)
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4413      	add	r3, r2
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800fe90:	7bbb      	ldrb	r3, [r7, #14]
 800fe92:	4a0a      	ldr	r2, [pc, #40]	@ (800febc <FATFS_UnLinkDriverEx+0x6c>)
 800fe94:	4413      	add	r3, r2
 800fe96:	2200      	movs	r2, #0
 800fe98:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800fe9a:	4b08      	ldr	r3, [pc, #32]	@ (800febc <FATFS_UnLinkDriverEx+0x6c>)
 800fe9c:	7a5b      	ldrb	r3, [r3, #9]
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	3b01      	subs	r3, #1
 800fea2:	b2da      	uxtb	r2, r3
 800fea4:	4b05      	ldr	r3, [pc, #20]	@ (800febc <FATFS_UnLinkDriverEx+0x6c>)
 800fea6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800fea8:	2300      	movs	r3, #0
 800feaa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800feac:	7bfb      	ldrb	r3, [r7, #15]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3714      	adds	r7, #20
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	20004a70 	.word	0x20004a70

0800fec0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800fec8:	2100      	movs	r1, #0
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff ffc0 	bl	800fe50 <FATFS_UnLinkDriverEx>
 800fed0:	4603      	mov	r3, r0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fee0:	2200      	movs	r2, #0
 800fee2:	4912      	ldr	r1, [pc, #72]	@ (800ff2c <MX_USB_DEVICE_Init+0x50>)
 800fee4:	4812      	ldr	r0, [pc, #72]	@ (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800fee6:	f7fb ff69 	bl	800bdbc <USBD_Init>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fef0:	f7f2 fa02 	bl	80022f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fef4:	490f      	ldr	r1, [pc, #60]	@ (800ff34 <MX_USB_DEVICE_Init+0x58>)
 800fef6:	480e      	ldr	r0, [pc, #56]	@ (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800fef8:	f7fb ff90 	bl	800be1c <USBD_RegisterClass>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff02:	f7f2 f9f9 	bl	80022f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff06:	490c      	ldr	r1, [pc, #48]	@ (800ff38 <MX_USB_DEVICE_Init+0x5c>)
 800ff08:	4809      	ldr	r0, [pc, #36]	@ (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800ff0a:	f7fb fe87 	bl	800bc1c <USBD_CDC_RegisterInterface>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d001      	beq.n	800ff18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff14:	f7f2 f9f0 	bl	80022f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff18:	4805      	ldr	r0, [pc, #20]	@ (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800ff1a:	f7fb ffb5 	bl	800be88 <USBD_Start>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff24:	f7f2 f9e8 	bl	80022f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff28:	bf00      	nop
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	200000b0 	.word	0x200000b0
 800ff30:	20004a7c 	.word	0x20004a7c
 800ff34:	2000001c 	.word	0x2000001c
 800ff38:	2000009c 	.word	0x2000009c

0800ff3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff40:	2200      	movs	r2, #0
 800ff42:	4905      	ldr	r1, [pc, #20]	@ (800ff58 <CDC_Init_FS+0x1c>)
 800ff44:	4805      	ldr	r0, [pc, #20]	@ (800ff5c <CDC_Init_FS+0x20>)
 800ff46:	f7fb fe83 	bl	800bc50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff4a:	4905      	ldr	r1, [pc, #20]	@ (800ff60 <CDC_Init_FS+0x24>)
 800ff4c:	4803      	ldr	r0, [pc, #12]	@ (800ff5c <CDC_Init_FS+0x20>)
 800ff4e:	f7fb fea1 	bl	800bc94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	20005558 	.word	0x20005558
 800ff5c:	20004a7c 	.word	0x20004a7c
 800ff60:	20004d58 	.word	0x20004d58

0800ff64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ff68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	6039      	str	r1, [r7, #0]
 800ff7e:	71fb      	strb	r3, [r7, #7]
 800ff80:	4613      	mov	r3, r2
 800ff82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	2b23      	cmp	r3, #35	@ 0x23
 800ff88:	d84a      	bhi.n	8010020 <CDC_Control_FS+0xac>
 800ff8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ff90 <CDC_Control_FS+0x1c>)
 800ff8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff90:	08010021 	.word	0x08010021
 800ff94:	08010021 	.word	0x08010021
 800ff98:	08010021 	.word	0x08010021
 800ff9c:	08010021 	.word	0x08010021
 800ffa0:	08010021 	.word	0x08010021
 800ffa4:	08010021 	.word	0x08010021
 800ffa8:	08010021 	.word	0x08010021
 800ffac:	08010021 	.word	0x08010021
 800ffb0:	08010021 	.word	0x08010021
 800ffb4:	08010021 	.word	0x08010021
 800ffb8:	08010021 	.word	0x08010021
 800ffbc:	08010021 	.word	0x08010021
 800ffc0:	08010021 	.word	0x08010021
 800ffc4:	08010021 	.word	0x08010021
 800ffc8:	08010021 	.word	0x08010021
 800ffcc:	08010021 	.word	0x08010021
 800ffd0:	08010021 	.word	0x08010021
 800ffd4:	08010021 	.word	0x08010021
 800ffd8:	08010021 	.word	0x08010021
 800ffdc:	08010021 	.word	0x08010021
 800ffe0:	08010021 	.word	0x08010021
 800ffe4:	08010021 	.word	0x08010021
 800ffe8:	08010021 	.word	0x08010021
 800ffec:	08010021 	.word	0x08010021
 800fff0:	08010021 	.word	0x08010021
 800fff4:	08010021 	.word	0x08010021
 800fff8:	08010021 	.word	0x08010021
 800fffc:	08010021 	.word	0x08010021
 8010000:	08010021 	.word	0x08010021
 8010004:	08010021 	.word	0x08010021
 8010008:	08010021 	.word	0x08010021
 801000c:	08010021 	.word	0x08010021
 8010010:	08010021 	.word	0x08010021
 8010014:	08010021 	.word	0x08010021
 8010018:	08010021 	.word	0x08010021
 801001c:	08010021 	.word	0x08010021
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010020:	bf00      	nop
  }

  return (USBD_OK);
 8010022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010024:	4618      	mov	r0, r3
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801003a:	6879      	ldr	r1, [r7, #4]
 801003c:	4805      	ldr	r0, [pc, #20]	@ (8010054 <CDC_Receive_FS+0x24>)
 801003e:	f7fb fe29 	bl	800bc94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010042:	4804      	ldr	r0, [pc, #16]	@ (8010054 <CDC_Receive_FS+0x24>)
 8010044:	f7fb fe84 	bl	800bd50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010048:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801004a:	4618      	mov	r0, r3
 801004c:	3708      	adds	r7, #8
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	20004a7c 	.word	0x20004a7c

08010058 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	460b      	mov	r3, r1
 8010062:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010064:	2300      	movs	r3, #0
 8010066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010068:	4b0d      	ldr	r3, [pc, #52]	@ (80100a0 <CDC_Transmit_FS+0x48>)
 801006a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801006e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801007a:	2301      	movs	r3, #1
 801007c:	e00b      	b.n	8010096 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801007e:	887b      	ldrh	r3, [r7, #2]
 8010080:	461a      	mov	r2, r3
 8010082:	6879      	ldr	r1, [r7, #4]
 8010084:	4806      	ldr	r0, [pc, #24]	@ (80100a0 <CDC_Transmit_FS+0x48>)
 8010086:	f7fb fde3 	bl	800bc50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801008a:	4805      	ldr	r0, [pc, #20]	@ (80100a0 <CDC_Transmit_FS+0x48>)
 801008c:	f7fb fe20 	bl	800bcd0 <USBD_CDC_TransmitPacket>
 8010090:	4603      	mov	r3, r0
 8010092:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010094:	7bfb      	ldrb	r3, [r7, #15]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	20004a7c 	.word	0x20004a7c

080100a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b087      	sub	sp, #28
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	4613      	mov	r3, r2
 80100b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80100b2:	2300      	movs	r3, #0
 80100b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	371c      	adds	r7, #28
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr
	...

080100c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b083      	sub	sp, #12
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	4603      	mov	r3, r0
 80100d0:	6039      	str	r1, [r7, #0]
 80100d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	2212      	movs	r2, #18
 80100d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100da:	4b03      	ldr	r3, [pc, #12]	@ (80100e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80100dc:	4618      	mov	r0, r3
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr
 80100e8:	200000cc 	.word	0x200000cc

080100ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	4603      	mov	r3, r0
 80100f4:	6039      	str	r1, [r7, #0]
 80100f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	2204      	movs	r2, #4
 80100fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100fe:	4b03      	ldr	r3, [pc, #12]	@ (801010c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010100:	4618      	mov	r0, r3
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr
 801010c:	200000e0 	.word	0x200000e0

08010110 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
 8010116:	4603      	mov	r3, r0
 8010118:	6039      	str	r1, [r7, #0]
 801011a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801011c:	79fb      	ldrb	r3, [r7, #7]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d105      	bne.n	801012e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010122:	683a      	ldr	r2, [r7, #0]
 8010124:	4907      	ldr	r1, [pc, #28]	@ (8010144 <USBD_FS_ProductStrDescriptor+0x34>)
 8010126:	4808      	ldr	r0, [pc, #32]	@ (8010148 <USBD_FS_ProductStrDescriptor+0x38>)
 8010128:	f7fd f874 	bl	800d214 <USBD_GetString>
 801012c:	e004      	b.n	8010138 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801012e:	683a      	ldr	r2, [r7, #0]
 8010130:	4904      	ldr	r1, [pc, #16]	@ (8010144 <USBD_FS_ProductStrDescriptor+0x34>)
 8010132:	4805      	ldr	r0, [pc, #20]	@ (8010148 <USBD_FS_ProductStrDescriptor+0x38>)
 8010134:	f7fd f86e 	bl	800d214 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010138:	4b02      	ldr	r3, [pc, #8]	@ (8010144 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801013a:	4618      	mov	r0, r3
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	20005d58 	.word	0x20005d58
 8010148:	08013c88 	.word	0x08013c88

0801014c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	4603      	mov	r3, r0
 8010154:	6039      	str	r1, [r7, #0]
 8010156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010158:	683a      	ldr	r2, [r7, #0]
 801015a:	4904      	ldr	r1, [pc, #16]	@ (801016c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801015c:	4804      	ldr	r0, [pc, #16]	@ (8010170 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801015e:	f7fd f859 	bl	800d214 <USBD_GetString>
  return USBD_StrDesc;
 8010162:	4b02      	ldr	r3, [pc, #8]	@ (801016c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010164:	4618      	mov	r0, r3
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20005d58 	.word	0x20005d58
 8010170:	08013ca0 	.word	0x08013ca0

08010174 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	6039      	str	r1, [r7, #0]
 801017e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	221a      	movs	r2, #26
 8010184:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010186:	f000 f843 	bl	8010210 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801018a:	4b02      	ldr	r3, [pc, #8]	@ (8010194 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	200000e4 	.word	0x200000e4

08010198 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	4603      	mov	r3, r0
 80101a0:	6039      	str	r1, [r7, #0]
 80101a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101a4:	79fb      	ldrb	r3, [r7, #7]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d105      	bne.n	80101b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101aa:	683a      	ldr	r2, [r7, #0]
 80101ac:	4907      	ldr	r1, [pc, #28]	@ (80101cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80101ae:	4808      	ldr	r0, [pc, #32]	@ (80101d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101b0:	f7fd f830 	bl	800d214 <USBD_GetString>
 80101b4:	e004      	b.n	80101c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	4904      	ldr	r1, [pc, #16]	@ (80101cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80101ba:	4805      	ldr	r0, [pc, #20]	@ (80101d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101bc:	f7fd f82a 	bl	800d214 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101c0:	4b02      	ldr	r3, [pc, #8]	@ (80101cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20005d58 	.word	0x20005d58
 80101d0:	08013cb4 	.word	0x08013cb4

080101d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
 80101da:	4603      	mov	r3, r0
 80101dc:	6039      	str	r1, [r7, #0]
 80101de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d105      	bne.n	80101f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	4907      	ldr	r1, [pc, #28]	@ (8010208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101ea:	4808      	ldr	r0, [pc, #32]	@ (801020c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101ec:	f7fd f812 	bl	800d214 <USBD_GetString>
 80101f0:	e004      	b.n	80101fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	4904      	ldr	r1, [pc, #16]	@ (8010208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101f6:	4805      	ldr	r0, [pc, #20]	@ (801020c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101f8:	f7fd f80c 	bl	800d214 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101fc:	4b02      	ldr	r3, [pc, #8]	@ (8010208 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	20005d58 	.word	0x20005d58
 801020c:	08013cc0 	.word	0x08013cc0

08010210 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010216:	4b0f      	ldr	r3, [pc, #60]	@ (8010254 <Get_SerialNum+0x44>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801021c:	4b0e      	ldr	r3, [pc, #56]	@ (8010258 <Get_SerialNum+0x48>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010222:	4b0e      	ldr	r3, [pc, #56]	@ (801025c <Get_SerialNum+0x4c>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4413      	add	r3, r2
 801022e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d009      	beq.n	801024a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010236:	2208      	movs	r2, #8
 8010238:	4909      	ldr	r1, [pc, #36]	@ (8010260 <Get_SerialNum+0x50>)
 801023a:	68f8      	ldr	r0, [r7, #12]
 801023c:	f000 f814 	bl	8010268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010240:	2204      	movs	r2, #4
 8010242:	4908      	ldr	r1, [pc, #32]	@ (8010264 <Get_SerialNum+0x54>)
 8010244:	68b8      	ldr	r0, [r7, #8]
 8010246:	f000 f80f 	bl	8010268 <IntToUnicode>
  }
}
 801024a:	bf00      	nop
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	1fff7a10 	.word	0x1fff7a10
 8010258:	1fff7a14 	.word	0x1fff7a14
 801025c:	1fff7a18 	.word	0x1fff7a18
 8010260:	200000e6 	.word	0x200000e6
 8010264:	200000f6 	.word	0x200000f6

08010268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010268:	b480      	push	{r7}
 801026a:	b087      	sub	sp, #28
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	4613      	mov	r3, r2
 8010274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010276:	2300      	movs	r3, #0
 8010278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801027a:	2300      	movs	r3, #0
 801027c:	75fb      	strb	r3, [r7, #23]
 801027e:	e027      	b.n	80102d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	0f1b      	lsrs	r3, r3, #28
 8010284:	2b09      	cmp	r3, #9
 8010286:	d80b      	bhi.n	80102a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	0f1b      	lsrs	r3, r3, #28
 801028c:	b2da      	uxtb	r2, r3
 801028e:	7dfb      	ldrb	r3, [r7, #23]
 8010290:	005b      	lsls	r3, r3, #1
 8010292:	4619      	mov	r1, r3
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	440b      	add	r3, r1
 8010298:	3230      	adds	r2, #48	@ 0x30
 801029a:	b2d2      	uxtb	r2, r2
 801029c:	701a      	strb	r2, [r3, #0]
 801029e:	e00a      	b.n	80102b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	0f1b      	lsrs	r3, r3, #28
 80102a4:	b2da      	uxtb	r2, r3
 80102a6:	7dfb      	ldrb	r3, [r7, #23]
 80102a8:	005b      	lsls	r3, r3, #1
 80102aa:	4619      	mov	r1, r3
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	440b      	add	r3, r1
 80102b0:	3237      	adds	r2, #55	@ 0x37
 80102b2:	b2d2      	uxtb	r2, r2
 80102b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	011b      	lsls	r3, r3, #4
 80102ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102bc:	7dfb      	ldrb	r3, [r7, #23]
 80102be:	005b      	lsls	r3, r3, #1
 80102c0:	3301      	adds	r3, #1
 80102c2:	68ba      	ldr	r2, [r7, #8]
 80102c4:	4413      	add	r3, r2
 80102c6:	2200      	movs	r2, #0
 80102c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
 80102cc:	3301      	adds	r3, #1
 80102ce:	75fb      	strb	r3, [r7, #23]
 80102d0:	7dfa      	ldrb	r2, [r7, #23]
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d3d3      	bcc.n	8010280 <IntToUnicode+0x18>
  }
}
 80102d8:	bf00      	nop
 80102da:	bf00      	nop
 80102dc:	371c      	adds	r7, #28
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr
	...

080102e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08a      	sub	sp, #40	@ 0x28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102f0:	f107 0314 	add.w	r3, r7, #20
 80102f4:	2200      	movs	r2, #0
 80102f6:	601a      	str	r2, [r3, #0]
 80102f8:	605a      	str	r2, [r3, #4]
 80102fa:	609a      	str	r2, [r3, #8]
 80102fc:	60da      	str	r2, [r3, #12]
 80102fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010308:	d13a      	bne.n	8010380 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801030a:	2300      	movs	r3, #0
 801030c:	613b      	str	r3, [r7, #16]
 801030e:	4b1e      	ldr	r3, [pc, #120]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 8010310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010312:	4a1d      	ldr	r2, [pc, #116]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 8010314:	f043 0301 	orr.w	r3, r3, #1
 8010318:	6313      	str	r3, [r2, #48]	@ 0x30
 801031a:	4b1b      	ldr	r3, [pc, #108]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 801031c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801031e:	f003 0301 	and.w	r3, r3, #1
 8010322:	613b      	str	r3, [r7, #16]
 8010324:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010326:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801032a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801032c:	2302      	movs	r3, #2
 801032e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010330:	2300      	movs	r3, #0
 8010332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010334:	2303      	movs	r3, #3
 8010336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010338:	230a      	movs	r3, #10
 801033a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801033c:	f107 0314 	add.w	r3, r7, #20
 8010340:	4619      	mov	r1, r3
 8010342:	4812      	ldr	r0, [pc, #72]	@ (801038c <HAL_PCD_MspInit+0xa4>)
 8010344:	f7f3 fb6c 	bl	8003a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010348:	4b0f      	ldr	r3, [pc, #60]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 801034a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801034c:	4a0e      	ldr	r2, [pc, #56]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 801034e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010352:	6353      	str	r3, [r2, #52]	@ 0x34
 8010354:	2300      	movs	r3, #0
 8010356:	60fb      	str	r3, [r7, #12]
 8010358:	4b0b      	ldr	r3, [pc, #44]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 801035a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801035c:	4a0a      	ldr	r2, [pc, #40]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 801035e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010362:	6453      	str	r3, [r2, #68]	@ 0x44
 8010364:	4b08      	ldr	r3, [pc, #32]	@ (8010388 <HAL_PCD_MspInit+0xa0>)
 8010366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801036c:	60fb      	str	r3, [r7, #12]
 801036e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010370:	2200      	movs	r2, #0
 8010372:	2100      	movs	r1, #0
 8010374:	2043      	movs	r0, #67	@ 0x43
 8010376:	f7f2 ff70 	bl	800325a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801037a:	2043      	movs	r0, #67	@ 0x43
 801037c:	f7f2 ff89 	bl	8003292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010380:	bf00      	nop
 8010382:	3728      	adds	r7, #40	@ 0x28
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	40023800 	.word	0x40023800
 801038c:	40020000 	.word	0x40020000

08010390 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80103a4:	4619      	mov	r1, r3
 80103a6:	4610      	mov	r0, r2
 80103a8:	f7fb fdbb 	bl	800bf22 <USBD_LL_SetupStage>
}
 80103ac:	bf00      	nop
 80103ae:	3708      	adds	r7, #8
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	460b      	mov	r3, r1
 80103be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103c6:	78fa      	ldrb	r2, [r7, #3]
 80103c8:	6879      	ldr	r1, [r7, #4]
 80103ca:	4613      	mov	r3, r2
 80103cc:	00db      	lsls	r3, r3, #3
 80103ce:	4413      	add	r3, r2
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	440b      	add	r3, r1
 80103d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	78fb      	ldrb	r3, [r7, #3]
 80103dc:	4619      	mov	r1, r3
 80103de:	f7fb fdf5 	bl	800bfcc <USBD_LL_DataOutStage>
}
 80103e2:	bf00      	nop
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b082      	sub	sp, #8
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
 80103f2:	460b      	mov	r3, r1
 80103f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103fc:	78fa      	ldrb	r2, [r7, #3]
 80103fe:	6879      	ldr	r1, [r7, #4]
 8010400:	4613      	mov	r3, r2
 8010402:	00db      	lsls	r3, r3, #3
 8010404:	4413      	add	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	440b      	add	r3, r1
 801040a:	3320      	adds	r3, #32
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	78fb      	ldrb	r3, [r7, #3]
 8010410:	4619      	mov	r1, r3
 8010412:	f7fb fe97 	bl	800c144 <USBD_LL_DataInStage>
}
 8010416:	bf00      	nop
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b082      	sub	sp, #8
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801042c:	4618      	mov	r0, r3
 801042e:	f7fb ffdb 	bl	800c3e8 <USBD_LL_SOF>
}
 8010432:	bf00      	nop
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b084      	sub	sp, #16
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010442:	2301      	movs	r3, #1
 8010444:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	79db      	ldrb	r3, [r3, #7]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d102      	bne.n	8010454 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801044e:	2300      	movs	r3, #0
 8010450:	73fb      	strb	r3, [r7, #15]
 8010452:	e008      	b.n	8010466 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	79db      	ldrb	r3, [r3, #7]
 8010458:	2b02      	cmp	r3, #2
 801045a:	d102      	bne.n	8010462 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801045c:	2301      	movs	r3, #1
 801045e:	73fb      	strb	r3, [r7, #15]
 8010460:	e001      	b.n	8010466 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010462:	f7f1 ff49 	bl	80022f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801046c:	7bfa      	ldrb	r2, [r7, #15]
 801046e:	4611      	mov	r1, r2
 8010470:	4618      	mov	r0, r3
 8010472:	f7fb ff75 	bl	800c360 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801047c:	4618      	mov	r0, r3
 801047e:	f7fb ff1c 	bl	800c2ba <USBD_LL_Reset>
}
 8010482:	bf00      	nop
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
	...

0801048c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801049a:	4618      	mov	r0, r3
 801049c:	f7fb ff70 	bl	800c380 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	6812      	ldr	r2, [r2, #0]
 80104ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80104b2:	f043 0301 	orr.w	r3, r3, #1
 80104b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	7adb      	ldrb	r3, [r3, #11]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d005      	beq.n	80104cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80104c0:	4b04      	ldr	r3, [pc, #16]	@ (80104d4 <HAL_PCD_SuspendCallback+0x48>)
 80104c2:	691b      	ldr	r3, [r3, #16]
 80104c4:	4a03      	ldr	r2, [pc, #12]	@ (80104d4 <HAL_PCD_SuspendCallback+0x48>)
 80104c6:	f043 0306 	orr.w	r3, r3, #6
 80104ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80104cc:	bf00      	nop
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	e000ed00 	.word	0xe000ed00

080104d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7fb ff66 	bl	800c3b8 <USBD_LL_Resume>
}
 80104ec:	bf00      	nop
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	460b      	mov	r3, r1
 80104fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010506:	78fa      	ldrb	r2, [r7, #3]
 8010508:	4611      	mov	r1, r2
 801050a:	4618      	mov	r0, r3
 801050c:	f7fb ffbe 	bl	800c48c <USBD_LL_IsoOUTIncomplete>
}
 8010510:	bf00      	nop
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	460b      	mov	r3, r1
 8010522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801052a:	78fa      	ldrb	r2, [r7, #3]
 801052c:	4611      	mov	r1, r2
 801052e:	4618      	mov	r0, r3
 8010530:	f7fb ff7a 	bl	800c428 <USBD_LL_IsoINIncomplete>
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801054a:	4618      	mov	r0, r3
 801054c:	f7fb ffd0 	bl	800c4f0 <USBD_LL_DevConnected>
}
 8010550:	bf00      	nop
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010566:	4618      	mov	r0, r3
 8010568:	f7fb ffcd 	bl	800c506 <USBD_LL_DevDisconnected>
}
 801056c:	bf00      	nop
 801056e:	3708      	adds	r7, #8
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d13c      	bne.n	80105fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010584:	4a20      	ldr	r2, [pc, #128]	@ (8010608 <USBD_LL_Init+0x94>)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	4a1e      	ldr	r2, [pc, #120]	@ (8010608 <USBD_LL_Init+0x94>)
 8010590:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010594:	4b1c      	ldr	r3, [pc, #112]	@ (8010608 <USBD_LL_Init+0x94>)
 8010596:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801059a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801059c:	4b1a      	ldr	r3, [pc, #104]	@ (8010608 <USBD_LL_Init+0x94>)
 801059e:	2204      	movs	r2, #4
 80105a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80105a2:	4b19      	ldr	r3, [pc, #100]	@ (8010608 <USBD_LL_Init+0x94>)
 80105a4:	2202      	movs	r2, #2
 80105a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105a8:	4b17      	ldr	r3, [pc, #92]	@ (8010608 <USBD_LL_Init+0x94>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80105ae:	4b16      	ldr	r3, [pc, #88]	@ (8010608 <USBD_LL_Init+0x94>)
 80105b0:	2202      	movs	r2, #2
 80105b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80105b4:	4b14      	ldr	r3, [pc, #80]	@ (8010608 <USBD_LL_Init+0x94>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80105ba:	4b13      	ldr	r3, [pc, #76]	@ (8010608 <USBD_LL_Init+0x94>)
 80105bc:	2200      	movs	r2, #0
 80105be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80105c0:	4b11      	ldr	r3, [pc, #68]	@ (8010608 <USBD_LL_Init+0x94>)
 80105c2:	2200      	movs	r2, #0
 80105c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80105c6:	4b10      	ldr	r3, [pc, #64]	@ (8010608 <USBD_LL_Init+0x94>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80105cc:	4b0e      	ldr	r3, [pc, #56]	@ (8010608 <USBD_LL_Init+0x94>)
 80105ce:	2200      	movs	r2, #0
 80105d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80105d2:	480d      	ldr	r0, [pc, #52]	@ (8010608 <USBD_LL_Init+0x94>)
 80105d4:	f7f4 fc48 	bl	8004e68 <HAL_PCD_Init>
 80105d8:	4603      	mov	r3, r0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d001      	beq.n	80105e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80105de:	f7f1 fe8b 	bl	80022f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80105e2:	2180      	movs	r1, #128	@ 0x80
 80105e4:	4808      	ldr	r0, [pc, #32]	@ (8010608 <USBD_LL_Init+0x94>)
 80105e6:	f7f5 fe74 	bl	80062d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80105ea:	2240      	movs	r2, #64	@ 0x40
 80105ec:	2100      	movs	r1, #0
 80105ee:	4806      	ldr	r0, [pc, #24]	@ (8010608 <USBD_LL_Init+0x94>)
 80105f0:	f7f5 fe28 	bl	8006244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80105f4:	2280      	movs	r2, #128	@ 0x80
 80105f6:	2101      	movs	r1, #1
 80105f8:	4803      	ldr	r0, [pc, #12]	@ (8010608 <USBD_LL_Init+0x94>)
 80105fa:	f7f5 fe23 	bl	8006244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80105fe:	2300      	movs	r3, #0
}
 8010600:	4618      	mov	r0, r3
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	20005f58 	.word	0x20005f58

0801060c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010614:	2300      	movs	r3, #0
 8010616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010618:	2300      	movs	r3, #0
 801061a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010622:	4618      	mov	r0, r3
 8010624:	f7f4 fd2f 	bl	8005086 <HAL_PCD_Start>
 8010628:	4603      	mov	r3, r0
 801062a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801062c:	7bfb      	ldrb	r3, [r7, #15]
 801062e:	4618      	mov	r0, r3
 8010630:	f000 f942 	bl	80108b8 <USBD_Get_USB_Status>
 8010634:	4603      	mov	r3, r0
 8010636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010638:	7bbb      	ldrb	r3, [r7, #14]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b084      	sub	sp, #16
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	4608      	mov	r0, r1
 801064c:	4611      	mov	r1, r2
 801064e:	461a      	mov	r2, r3
 8010650:	4603      	mov	r3, r0
 8010652:	70fb      	strb	r3, [r7, #3]
 8010654:	460b      	mov	r3, r1
 8010656:	70bb      	strb	r3, [r7, #2]
 8010658:	4613      	mov	r3, r2
 801065a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801065c:	2300      	movs	r3, #0
 801065e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801066a:	78bb      	ldrb	r3, [r7, #2]
 801066c:	883a      	ldrh	r2, [r7, #0]
 801066e:	78f9      	ldrb	r1, [r7, #3]
 8010670:	f7f5 fa03 	bl	8005a7a <HAL_PCD_EP_Open>
 8010674:	4603      	mov	r3, r0
 8010676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010678:	7bfb      	ldrb	r3, [r7, #15]
 801067a:	4618      	mov	r0, r3
 801067c:	f000 f91c 	bl	80108b8 <USBD_Get_USB_Status>
 8010680:	4603      	mov	r3, r0
 8010682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010684:	7bbb      	ldrb	r3, [r7, #14]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b084      	sub	sp, #16
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	460b      	mov	r3, r1
 8010698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801069a:	2300      	movs	r3, #0
 801069c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801069e:	2300      	movs	r3, #0
 80106a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106a8:	78fa      	ldrb	r2, [r7, #3]
 80106aa:	4611      	mov	r1, r2
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7f5 fa4e 	bl	8005b4e <HAL_PCD_EP_Close>
 80106b2:	4603      	mov	r3, r0
 80106b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106b6:	7bfb      	ldrb	r3, [r7, #15]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f000 f8fd 	bl	80108b8 <USBD_Get_USB_Status>
 80106be:	4603      	mov	r3, r0
 80106c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	460b      	mov	r3, r1
 80106d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106d8:	2300      	movs	r3, #0
 80106da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106dc:	2300      	movs	r3, #0
 80106de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106e6:	78fa      	ldrb	r2, [r7, #3]
 80106e8:	4611      	mov	r1, r2
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7f5 fb06 	bl	8005cfc <HAL_PCD_EP_SetStall>
 80106f0:	4603      	mov	r3, r0
 80106f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106f4:	7bfb      	ldrb	r3, [r7, #15]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f000 f8de 	bl	80108b8 <USBD_Get_USB_Status>
 80106fc:	4603      	mov	r3, r0
 80106fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010700:	7bbb      	ldrb	r3, [r7, #14]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b084      	sub	sp, #16
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
 8010712:	460b      	mov	r3, r1
 8010714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010716:	2300      	movs	r3, #0
 8010718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801071a:	2300      	movs	r3, #0
 801071c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010724:	78fa      	ldrb	r2, [r7, #3]
 8010726:	4611      	mov	r1, r2
 8010728:	4618      	mov	r0, r3
 801072a:	f7f5 fb4a 	bl	8005dc2 <HAL_PCD_EP_ClrStall>
 801072e:	4603      	mov	r3, r0
 8010730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010732:	7bfb      	ldrb	r3, [r7, #15]
 8010734:	4618      	mov	r0, r3
 8010736:	f000 f8bf 	bl	80108b8 <USBD_Get_USB_Status>
 801073a:	4603      	mov	r3, r0
 801073c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801073e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3710      	adds	r7, #16
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	460b      	mov	r3, r1
 8010752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801075a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801075c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010760:	2b00      	cmp	r3, #0
 8010762:	da0b      	bge.n	801077c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010764:	78fb      	ldrb	r3, [r7, #3]
 8010766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801076a:	68f9      	ldr	r1, [r7, #12]
 801076c:	4613      	mov	r3, r2
 801076e:	00db      	lsls	r3, r3, #3
 8010770:	4413      	add	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	440b      	add	r3, r1
 8010776:	3316      	adds	r3, #22
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	e00b      	b.n	8010794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801077c:	78fb      	ldrb	r3, [r7, #3]
 801077e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010782:	68f9      	ldr	r1, [r7, #12]
 8010784:	4613      	mov	r3, r2
 8010786:	00db      	lsls	r3, r3, #3
 8010788:	4413      	add	r3, r2
 801078a:	009b      	lsls	r3, r3, #2
 801078c:	440b      	add	r3, r1
 801078e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010792:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010794:	4618      	mov	r0, r3
 8010796:	3714      	adds	r7, #20
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	460b      	mov	r3, r1
 80107aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ac:	2300      	movs	r3, #0
 80107ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107ba:	78fa      	ldrb	r2, [r7, #3]
 80107bc:	4611      	mov	r1, r2
 80107be:	4618      	mov	r0, r3
 80107c0:	f7f5 f937 	bl	8005a32 <HAL_PCD_SetAddress>
 80107c4:	4603      	mov	r3, r0
 80107c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107c8:	7bfb      	ldrb	r3, [r7, #15]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f000 f874 	bl	80108b8 <USBD_Get_USB_Status>
 80107d0:	4603      	mov	r3, r0
 80107d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3710      	adds	r7, #16
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b086      	sub	sp, #24
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	60f8      	str	r0, [r7, #12]
 80107e6:	607a      	str	r2, [r7, #4]
 80107e8:	603b      	str	r3, [r7, #0]
 80107ea:	460b      	mov	r3, r1
 80107ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ee:	2300      	movs	r3, #0
 80107f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80107fc:	7af9      	ldrb	r1, [r7, #11]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	f7f5 fa41 	bl	8005c88 <HAL_PCD_EP_Transmit>
 8010806:	4603      	mov	r3, r0
 8010808:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801080a:	7dfb      	ldrb	r3, [r7, #23]
 801080c:	4618      	mov	r0, r3
 801080e:	f000 f853 	bl	80108b8 <USBD_Get_USB_Status>
 8010812:	4603      	mov	r3, r0
 8010814:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010816:	7dbb      	ldrb	r3, [r7, #22]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3718      	adds	r7, #24
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b086      	sub	sp, #24
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	607a      	str	r2, [r7, #4]
 801082a:	603b      	str	r3, [r7, #0]
 801082c:	460b      	mov	r3, r1
 801082e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010834:	2300      	movs	r3, #0
 8010836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801083e:	7af9      	ldrb	r1, [r7, #11]
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	f7f5 f9cd 	bl	8005be2 <HAL_PCD_EP_Receive>
 8010848:	4603      	mov	r3, r0
 801084a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801084c:	7dfb      	ldrb	r3, [r7, #23]
 801084e:	4618      	mov	r0, r3
 8010850:	f000 f832 	bl	80108b8 <USBD_Get_USB_Status>
 8010854:	4603      	mov	r3, r0
 8010856:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010858:	7dbb      	ldrb	r3, [r7, #22]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3718      	adds	r7, #24
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b082      	sub	sp, #8
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	460b      	mov	r3, r1
 801086c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010874:	78fa      	ldrb	r2, [r7, #3]
 8010876:	4611      	mov	r1, r2
 8010878:	4618      	mov	r0, r3
 801087a:	f7f5 f9ed 	bl	8005c58 <HAL_PCD_EP_GetRxCount>
 801087e:	4603      	mov	r3, r0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010890:	4b03      	ldr	r3, [pc, #12]	@ (80108a0 <USBD_static_malloc+0x18>)
}
 8010892:	4618      	mov	r0, r3
 8010894:	370c      	adds	r7, #12
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	2000643c 	.word	0x2000643c

080108a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]

}
 80108ac:	bf00      	nop
 80108ae:	370c      	adds	r7, #12
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr

080108b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	4603      	mov	r3, r0
 80108c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108c2:	2300      	movs	r3, #0
 80108c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108c6:	79fb      	ldrb	r3, [r7, #7]
 80108c8:	2b03      	cmp	r3, #3
 80108ca:	d817      	bhi.n	80108fc <USBD_Get_USB_Status+0x44>
 80108cc:	a201      	add	r2, pc, #4	@ (adr r2, 80108d4 <USBD_Get_USB_Status+0x1c>)
 80108ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d2:	bf00      	nop
 80108d4:	080108e5 	.word	0x080108e5
 80108d8:	080108eb 	.word	0x080108eb
 80108dc:	080108f1 	.word	0x080108f1
 80108e0:	080108f7 	.word	0x080108f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108e4:	2300      	movs	r3, #0
 80108e6:	73fb      	strb	r3, [r7, #15]
    break;
 80108e8:	e00b      	b.n	8010902 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108ea:	2303      	movs	r3, #3
 80108ec:	73fb      	strb	r3, [r7, #15]
    break;
 80108ee:	e008      	b.n	8010902 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108f0:	2301      	movs	r3, #1
 80108f2:	73fb      	strb	r3, [r7, #15]
    break;
 80108f4:	e005      	b.n	8010902 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108f6:	2303      	movs	r3, #3
 80108f8:	73fb      	strb	r3, [r7, #15]
    break;
 80108fa:	e002      	b.n	8010902 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80108fc:	2303      	movs	r3, #3
 80108fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010900:	bf00      	nop
  }
  return usb_status;
 8010902:	7bfb      	ldrb	r3, [r7, #15]
}
 8010904:	4618      	mov	r0, r3
 8010906:	3714      	adds	r7, #20
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <__cvt>:
 8010910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010914:	ec57 6b10 	vmov	r6, r7, d0
 8010918:	2f00      	cmp	r7, #0
 801091a:	460c      	mov	r4, r1
 801091c:	4619      	mov	r1, r3
 801091e:	463b      	mov	r3, r7
 8010920:	bfbb      	ittet	lt
 8010922:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010926:	461f      	movlt	r7, r3
 8010928:	2300      	movge	r3, #0
 801092a:	232d      	movlt	r3, #45	@ 0x2d
 801092c:	700b      	strb	r3, [r1, #0]
 801092e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010930:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010934:	4691      	mov	r9, r2
 8010936:	f023 0820 	bic.w	r8, r3, #32
 801093a:	bfbc      	itt	lt
 801093c:	4632      	movlt	r2, r6
 801093e:	4616      	movlt	r6, r2
 8010940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010944:	d005      	beq.n	8010952 <__cvt+0x42>
 8010946:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801094a:	d100      	bne.n	801094e <__cvt+0x3e>
 801094c:	3401      	adds	r4, #1
 801094e:	2102      	movs	r1, #2
 8010950:	e000      	b.n	8010954 <__cvt+0x44>
 8010952:	2103      	movs	r1, #3
 8010954:	ab03      	add	r3, sp, #12
 8010956:	9301      	str	r3, [sp, #4]
 8010958:	ab02      	add	r3, sp, #8
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	ec47 6b10 	vmov	d0, r6, r7
 8010960:	4653      	mov	r3, sl
 8010962:	4622      	mov	r2, r4
 8010964:	f000 fea8 	bl	80116b8 <_dtoa_r>
 8010968:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801096c:	4605      	mov	r5, r0
 801096e:	d119      	bne.n	80109a4 <__cvt+0x94>
 8010970:	f019 0f01 	tst.w	r9, #1
 8010974:	d00e      	beq.n	8010994 <__cvt+0x84>
 8010976:	eb00 0904 	add.w	r9, r0, r4
 801097a:	2200      	movs	r2, #0
 801097c:	2300      	movs	r3, #0
 801097e:	4630      	mov	r0, r6
 8010980:	4639      	mov	r1, r7
 8010982:	f7f0 f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010986:	b108      	cbz	r0, 801098c <__cvt+0x7c>
 8010988:	f8cd 900c 	str.w	r9, [sp, #12]
 801098c:	2230      	movs	r2, #48	@ 0x30
 801098e:	9b03      	ldr	r3, [sp, #12]
 8010990:	454b      	cmp	r3, r9
 8010992:	d31e      	bcc.n	80109d2 <__cvt+0xc2>
 8010994:	9b03      	ldr	r3, [sp, #12]
 8010996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010998:	1b5b      	subs	r3, r3, r5
 801099a:	4628      	mov	r0, r5
 801099c:	6013      	str	r3, [r2, #0]
 801099e:	b004      	add	sp, #16
 80109a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80109a8:	eb00 0904 	add.w	r9, r0, r4
 80109ac:	d1e5      	bne.n	801097a <__cvt+0x6a>
 80109ae:	7803      	ldrb	r3, [r0, #0]
 80109b0:	2b30      	cmp	r3, #48	@ 0x30
 80109b2:	d10a      	bne.n	80109ca <__cvt+0xba>
 80109b4:	2200      	movs	r2, #0
 80109b6:	2300      	movs	r3, #0
 80109b8:	4630      	mov	r0, r6
 80109ba:	4639      	mov	r1, r7
 80109bc:	f7f0 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80109c0:	b918      	cbnz	r0, 80109ca <__cvt+0xba>
 80109c2:	f1c4 0401 	rsb	r4, r4, #1
 80109c6:	f8ca 4000 	str.w	r4, [sl]
 80109ca:	f8da 3000 	ldr.w	r3, [sl]
 80109ce:	4499      	add	r9, r3
 80109d0:	e7d3      	b.n	801097a <__cvt+0x6a>
 80109d2:	1c59      	adds	r1, r3, #1
 80109d4:	9103      	str	r1, [sp, #12]
 80109d6:	701a      	strb	r2, [r3, #0]
 80109d8:	e7d9      	b.n	801098e <__cvt+0x7e>

080109da <__exponent>:
 80109da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109dc:	2900      	cmp	r1, #0
 80109de:	bfba      	itte	lt
 80109e0:	4249      	neglt	r1, r1
 80109e2:	232d      	movlt	r3, #45	@ 0x2d
 80109e4:	232b      	movge	r3, #43	@ 0x2b
 80109e6:	2909      	cmp	r1, #9
 80109e8:	7002      	strb	r2, [r0, #0]
 80109ea:	7043      	strb	r3, [r0, #1]
 80109ec:	dd29      	ble.n	8010a42 <__exponent+0x68>
 80109ee:	f10d 0307 	add.w	r3, sp, #7
 80109f2:	461d      	mov	r5, r3
 80109f4:	270a      	movs	r7, #10
 80109f6:	461a      	mov	r2, r3
 80109f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80109fc:	fb07 1416 	mls	r4, r7, r6, r1
 8010a00:	3430      	adds	r4, #48	@ 0x30
 8010a02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010a06:	460c      	mov	r4, r1
 8010a08:	2c63      	cmp	r4, #99	@ 0x63
 8010a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a0e:	4631      	mov	r1, r6
 8010a10:	dcf1      	bgt.n	80109f6 <__exponent+0x1c>
 8010a12:	3130      	adds	r1, #48	@ 0x30
 8010a14:	1e94      	subs	r4, r2, #2
 8010a16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010a1a:	1c41      	adds	r1, r0, #1
 8010a1c:	4623      	mov	r3, r4
 8010a1e:	42ab      	cmp	r3, r5
 8010a20:	d30a      	bcc.n	8010a38 <__exponent+0x5e>
 8010a22:	f10d 0309 	add.w	r3, sp, #9
 8010a26:	1a9b      	subs	r3, r3, r2
 8010a28:	42ac      	cmp	r4, r5
 8010a2a:	bf88      	it	hi
 8010a2c:	2300      	movhi	r3, #0
 8010a2e:	3302      	adds	r3, #2
 8010a30:	4403      	add	r3, r0
 8010a32:	1a18      	subs	r0, r3, r0
 8010a34:	b003      	add	sp, #12
 8010a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010a3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010a40:	e7ed      	b.n	8010a1e <__exponent+0x44>
 8010a42:	2330      	movs	r3, #48	@ 0x30
 8010a44:	3130      	adds	r1, #48	@ 0x30
 8010a46:	7083      	strb	r3, [r0, #2]
 8010a48:	70c1      	strb	r1, [r0, #3]
 8010a4a:	1d03      	adds	r3, r0, #4
 8010a4c:	e7f1      	b.n	8010a32 <__exponent+0x58>
	...

08010a50 <_printf_float>:
 8010a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a54:	b08d      	sub	sp, #52	@ 0x34
 8010a56:	460c      	mov	r4, r1
 8010a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010a5c:	4616      	mov	r6, r2
 8010a5e:	461f      	mov	r7, r3
 8010a60:	4605      	mov	r5, r0
 8010a62:	f000 fd11 	bl	8011488 <_localeconv_r>
 8010a66:	6803      	ldr	r3, [r0, #0]
 8010a68:	9304      	str	r3, [sp, #16]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7ef fc00 	bl	8000270 <strlen>
 8010a70:	2300      	movs	r3, #0
 8010a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a74:	f8d8 3000 	ldr.w	r3, [r8]
 8010a78:	9005      	str	r0, [sp, #20]
 8010a7a:	3307      	adds	r3, #7
 8010a7c:	f023 0307 	bic.w	r3, r3, #7
 8010a80:	f103 0208 	add.w	r2, r3, #8
 8010a84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010a88:	f8d4 b000 	ldr.w	fp, [r4]
 8010a8c:	f8c8 2000 	str.w	r2, [r8]
 8010a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010a98:	9307      	str	r3, [sp, #28]
 8010a9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8010a9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8010d18 <_printf_float+0x2c8>)
 8010aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8010aac:	f7f0 f83e 	bl	8000b2c <__aeabi_dcmpun>
 8010ab0:	bb70      	cbnz	r0, 8010b10 <_printf_float+0xc0>
 8010ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ab6:	4b98      	ldr	r3, [pc, #608]	@ (8010d18 <_printf_float+0x2c8>)
 8010ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8010abc:	f7f0 f818 	bl	8000af0 <__aeabi_dcmple>
 8010ac0:	bb30      	cbnz	r0, 8010b10 <_printf_float+0xc0>
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	4640      	mov	r0, r8
 8010ac8:	4649      	mov	r1, r9
 8010aca:	f7f0 f807 	bl	8000adc <__aeabi_dcmplt>
 8010ace:	b110      	cbz	r0, 8010ad6 <_printf_float+0x86>
 8010ad0:	232d      	movs	r3, #45	@ 0x2d
 8010ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ad6:	4a91      	ldr	r2, [pc, #580]	@ (8010d1c <_printf_float+0x2cc>)
 8010ad8:	4b91      	ldr	r3, [pc, #580]	@ (8010d20 <_printf_float+0x2d0>)
 8010ada:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010ade:	bf8c      	ite	hi
 8010ae0:	4690      	movhi	r8, r2
 8010ae2:	4698      	movls	r8, r3
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	6123      	str	r3, [r4, #16]
 8010ae8:	f02b 0304 	bic.w	r3, fp, #4
 8010aec:	6023      	str	r3, [r4, #0]
 8010aee:	f04f 0900 	mov.w	r9, #0
 8010af2:	9700      	str	r7, [sp, #0]
 8010af4:	4633      	mov	r3, r6
 8010af6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010af8:	4621      	mov	r1, r4
 8010afa:	4628      	mov	r0, r5
 8010afc:	f000 f9d2 	bl	8010ea4 <_printf_common>
 8010b00:	3001      	adds	r0, #1
 8010b02:	f040 808d 	bne.w	8010c20 <_printf_float+0x1d0>
 8010b06:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0a:	b00d      	add	sp, #52	@ 0x34
 8010b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b10:	4642      	mov	r2, r8
 8010b12:	464b      	mov	r3, r9
 8010b14:	4640      	mov	r0, r8
 8010b16:	4649      	mov	r1, r9
 8010b18:	f7f0 f808 	bl	8000b2c <__aeabi_dcmpun>
 8010b1c:	b140      	cbz	r0, 8010b30 <_printf_float+0xe0>
 8010b1e:	464b      	mov	r3, r9
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	bfbc      	itt	lt
 8010b24:	232d      	movlt	r3, #45	@ 0x2d
 8010b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8010d24 <_printf_float+0x2d4>)
 8010b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8010d28 <_printf_float+0x2d8>)
 8010b2e:	e7d4      	b.n	8010ada <_printf_float+0x8a>
 8010b30:	6863      	ldr	r3, [r4, #4]
 8010b32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010b36:	9206      	str	r2, [sp, #24]
 8010b38:	1c5a      	adds	r2, r3, #1
 8010b3a:	d13b      	bne.n	8010bb4 <_printf_float+0x164>
 8010b3c:	2306      	movs	r3, #6
 8010b3e:	6063      	str	r3, [r4, #4]
 8010b40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010b44:	2300      	movs	r3, #0
 8010b46:	6022      	str	r2, [r4, #0]
 8010b48:	9303      	str	r3, [sp, #12]
 8010b4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8010b4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010b50:	ab09      	add	r3, sp, #36	@ 0x24
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	6861      	ldr	r1, [r4, #4]
 8010b56:	ec49 8b10 	vmov	d0, r8, r9
 8010b5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010b5e:	4628      	mov	r0, r5
 8010b60:	f7ff fed6 	bl	8010910 <__cvt>
 8010b64:	9b06      	ldr	r3, [sp, #24]
 8010b66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b68:	2b47      	cmp	r3, #71	@ 0x47
 8010b6a:	4680      	mov	r8, r0
 8010b6c:	d129      	bne.n	8010bc2 <_printf_float+0x172>
 8010b6e:	1cc8      	adds	r0, r1, #3
 8010b70:	db02      	blt.n	8010b78 <_printf_float+0x128>
 8010b72:	6863      	ldr	r3, [r4, #4]
 8010b74:	4299      	cmp	r1, r3
 8010b76:	dd41      	ble.n	8010bfc <_printf_float+0x1ac>
 8010b78:	f1aa 0a02 	sub.w	sl, sl, #2
 8010b7c:	fa5f fa8a 	uxtb.w	sl, sl
 8010b80:	3901      	subs	r1, #1
 8010b82:	4652      	mov	r2, sl
 8010b84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010b88:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b8a:	f7ff ff26 	bl	80109da <__exponent>
 8010b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b90:	1813      	adds	r3, r2, r0
 8010b92:	2a01      	cmp	r2, #1
 8010b94:	4681      	mov	r9, r0
 8010b96:	6123      	str	r3, [r4, #16]
 8010b98:	dc02      	bgt.n	8010ba0 <_printf_float+0x150>
 8010b9a:	6822      	ldr	r2, [r4, #0]
 8010b9c:	07d2      	lsls	r2, r2, #31
 8010b9e:	d501      	bpl.n	8010ba4 <_printf_float+0x154>
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	6123      	str	r3, [r4, #16]
 8010ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d0a2      	beq.n	8010af2 <_printf_float+0xa2>
 8010bac:	232d      	movs	r3, #45	@ 0x2d
 8010bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010bb2:	e79e      	b.n	8010af2 <_printf_float+0xa2>
 8010bb4:	9a06      	ldr	r2, [sp, #24]
 8010bb6:	2a47      	cmp	r2, #71	@ 0x47
 8010bb8:	d1c2      	bne.n	8010b40 <_printf_float+0xf0>
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1c0      	bne.n	8010b40 <_printf_float+0xf0>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e7bd      	b.n	8010b3e <_printf_float+0xee>
 8010bc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010bc6:	d9db      	bls.n	8010b80 <_printf_float+0x130>
 8010bc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010bcc:	d118      	bne.n	8010c00 <_printf_float+0x1b0>
 8010bce:	2900      	cmp	r1, #0
 8010bd0:	6863      	ldr	r3, [r4, #4]
 8010bd2:	dd0b      	ble.n	8010bec <_printf_float+0x19c>
 8010bd4:	6121      	str	r1, [r4, #16]
 8010bd6:	b913      	cbnz	r3, 8010bde <_printf_float+0x18e>
 8010bd8:	6822      	ldr	r2, [r4, #0]
 8010bda:	07d0      	lsls	r0, r2, #31
 8010bdc:	d502      	bpl.n	8010be4 <_printf_float+0x194>
 8010bde:	3301      	adds	r3, #1
 8010be0:	440b      	add	r3, r1
 8010be2:	6123      	str	r3, [r4, #16]
 8010be4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010be6:	f04f 0900 	mov.w	r9, #0
 8010bea:	e7db      	b.n	8010ba4 <_printf_float+0x154>
 8010bec:	b913      	cbnz	r3, 8010bf4 <_printf_float+0x1a4>
 8010bee:	6822      	ldr	r2, [r4, #0]
 8010bf0:	07d2      	lsls	r2, r2, #31
 8010bf2:	d501      	bpl.n	8010bf8 <_printf_float+0x1a8>
 8010bf4:	3302      	adds	r3, #2
 8010bf6:	e7f4      	b.n	8010be2 <_printf_float+0x192>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e7f2      	b.n	8010be2 <_printf_float+0x192>
 8010bfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c02:	4299      	cmp	r1, r3
 8010c04:	db05      	blt.n	8010c12 <_printf_float+0x1c2>
 8010c06:	6823      	ldr	r3, [r4, #0]
 8010c08:	6121      	str	r1, [r4, #16]
 8010c0a:	07d8      	lsls	r0, r3, #31
 8010c0c:	d5ea      	bpl.n	8010be4 <_printf_float+0x194>
 8010c0e:	1c4b      	adds	r3, r1, #1
 8010c10:	e7e7      	b.n	8010be2 <_printf_float+0x192>
 8010c12:	2900      	cmp	r1, #0
 8010c14:	bfd4      	ite	le
 8010c16:	f1c1 0202 	rsble	r2, r1, #2
 8010c1a:	2201      	movgt	r2, #1
 8010c1c:	4413      	add	r3, r2
 8010c1e:	e7e0      	b.n	8010be2 <_printf_float+0x192>
 8010c20:	6823      	ldr	r3, [r4, #0]
 8010c22:	055a      	lsls	r2, r3, #21
 8010c24:	d407      	bmi.n	8010c36 <_printf_float+0x1e6>
 8010c26:	6923      	ldr	r3, [r4, #16]
 8010c28:	4642      	mov	r2, r8
 8010c2a:	4631      	mov	r1, r6
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	47b8      	blx	r7
 8010c30:	3001      	adds	r0, #1
 8010c32:	d12b      	bne.n	8010c8c <_printf_float+0x23c>
 8010c34:	e767      	b.n	8010b06 <_printf_float+0xb6>
 8010c36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010c3a:	f240 80dd 	bls.w	8010df8 <_printf_float+0x3a8>
 8010c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010c42:	2200      	movs	r2, #0
 8010c44:	2300      	movs	r3, #0
 8010c46:	f7ef ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	d033      	beq.n	8010cb6 <_printf_float+0x266>
 8010c4e:	4a37      	ldr	r2, [pc, #220]	@ (8010d2c <_printf_float+0x2dc>)
 8010c50:	2301      	movs	r3, #1
 8010c52:	4631      	mov	r1, r6
 8010c54:	4628      	mov	r0, r5
 8010c56:	47b8      	blx	r7
 8010c58:	3001      	adds	r0, #1
 8010c5a:	f43f af54 	beq.w	8010b06 <_printf_float+0xb6>
 8010c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010c62:	4543      	cmp	r3, r8
 8010c64:	db02      	blt.n	8010c6c <_printf_float+0x21c>
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	07d8      	lsls	r0, r3, #31
 8010c6a:	d50f      	bpl.n	8010c8c <_printf_float+0x23c>
 8010c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c70:	4631      	mov	r1, r6
 8010c72:	4628      	mov	r0, r5
 8010c74:	47b8      	blx	r7
 8010c76:	3001      	adds	r0, #1
 8010c78:	f43f af45 	beq.w	8010b06 <_printf_float+0xb6>
 8010c7c:	f04f 0900 	mov.w	r9, #0
 8010c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c84:	f104 0a1a 	add.w	sl, r4, #26
 8010c88:	45c8      	cmp	r8, r9
 8010c8a:	dc09      	bgt.n	8010ca0 <_printf_float+0x250>
 8010c8c:	6823      	ldr	r3, [r4, #0]
 8010c8e:	079b      	lsls	r3, r3, #30
 8010c90:	f100 8103 	bmi.w	8010e9a <_printf_float+0x44a>
 8010c94:	68e0      	ldr	r0, [r4, #12]
 8010c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c98:	4298      	cmp	r0, r3
 8010c9a:	bfb8      	it	lt
 8010c9c:	4618      	movlt	r0, r3
 8010c9e:	e734      	b.n	8010b0a <_printf_float+0xba>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	4652      	mov	r2, sl
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	47b8      	blx	r7
 8010caa:	3001      	adds	r0, #1
 8010cac:	f43f af2b 	beq.w	8010b06 <_printf_float+0xb6>
 8010cb0:	f109 0901 	add.w	r9, r9, #1
 8010cb4:	e7e8      	b.n	8010c88 <_printf_float+0x238>
 8010cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	dc39      	bgt.n	8010d30 <_printf_float+0x2e0>
 8010cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8010d2c <_printf_float+0x2dc>)
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	4631      	mov	r1, r6
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	47b8      	blx	r7
 8010cc6:	3001      	adds	r0, #1
 8010cc8:	f43f af1d 	beq.w	8010b06 <_printf_float+0xb6>
 8010ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8010cd4:	d102      	bne.n	8010cdc <_printf_float+0x28c>
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	07d9      	lsls	r1, r3, #31
 8010cda:	d5d7      	bpl.n	8010c8c <_printf_float+0x23c>
 8010cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	47b8      	blx	r7
 8010ce6:	3001      	adds	r0, #1
 8010ce8:	f43f af0d 	beq.w	8010b06 <_printf_float+0xb6>
 8010cec:	f04f 0a00 	mov.w	sl, #0
 8010cf0:	f104 0b1a 	add.w	fp, r4, #26
 8010cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cf6:	425b      	negs	r3, r3
 8010cf8:	4553      	cmp	r3, sl
 8010cfa:	dc01      	bgt.n	8010d00 <_printf_float+0x2b0>
 8010cfc:	464b      	mov	r3, r9
 8010cfe:	e793      	b.n	8010c28 <_printf_float+0x1d8>
 8010d00:	2301      	movs	r3, #1
 8010d02:	465a      	mov	r2, fp
 8010d04:	4631      	mov	r1, r6
 8010d06:	4628      	mov	r0, r5
 8010d08:	47b8      	blx	r7
 8010d0a:	3001      	adds	r0, #1
 8010d0c:	f43f aefb 	beq.w	8010b06 <_printf_float+0xb6>
 8010d10:	f10a 0a01 	add.w	sl, sl, #1
 8010d14:	e7ee      	b.n	8010cf4 <_printf_float+0x2a4>
 8010d16:	bf00      	nop
 8010d18:	7fefffff 	.word	0x7fefffff
 8010d1c:	08013d88 	.word	0x08013d88
 8010d20:	08013d84 	.word	0x08013d84
 8010d24:	08013d90 	.word	0x08013d90
 8010d28:	08013d8c 	.word	0x08013d8c
 8010d2c:	08013d94 	.word	0x08013d94
 8010d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d36:	4553      	cmp	r3, sl
 8010d38:	bfa8      	it	ge
 8010d3a:	4653      	movge	r3, sl
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	4699      	mov	r9, r3
 8010d40:	dc36      	bgt.n	8010db0 <_printf_float+0x360>
 8010d42:	f04f 0b00 	mov.w	fp, #0
 8010d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d4a:	f104 021a 	add.w	r2, r4, #26
 8010d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d50:	9306      	str	r3, [sp, #24]
 8010d52:	eba3 0309 	sub.w	r3, r3, r9
 8010d56:	455b      	cmp	r3, fp
 8010d58:	dc31      	bgt.n	8010dbe <_printf_float+0x36e>
 8010d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d5c:	459a      	cmp	sl, r3
 8010d5e:	dc3a      	bgt.n	8010dd6 <_printf_float+0x386>
 8010d60:	6823      	ldr	r3, [r4, #0]
 8010d62:	07da      	lsls	r2, r3, #31
 8010d64:	d437      	bmi.n	8010dd6 <_printf_float+0x386>
 8010d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d68:	ebaa 0903 	sub.w	r9, sl, r3
 8010d6c:	9b06      	ldr	r3, [sp, #24]
 8010d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8010d72:	4599      	cmp	r9, r3
 8010d74:	bfa8      	it	ge
 8010d76:	4699      	movge	r9, r3
 8010d78:	f1b9 0f00 	cmp.w	r9, #0
 8010d7c:	dc33      	bgt.n	8010de6 <_printf_float+0x396>
 8010d7e:	f04f 0800 	mov.w	r8, #0
 8010d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d86:	f104 0b1a 	add.w	fp, r4, #26
 8010d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8010d90:	eba3 0309 	sub.w	r3, r3, r9
 8010d94:	4543      	cmp	r3, r8
 8010d96:	f77f af79 	ble.w	8010c8c <_printf_float+0x23c>
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	465a      	mov	r2, fp
 8010d9e:	4631      	mov	r1, r6
 8010da0:	4628      	mov	r0, r5
 8010da2:	47b8      	blx	r7
 8010da4:	3001      	adds	r0, #1
 8010da6:	f43f aeae 	beq.w	8010b06 <_printf_float+0xb6>
 8010daa:	f108 0801 	add.w	r8, r8, #1
 8010dae:	e7ec      	b.n	8010d8a <_printf_float+0x33a>
 8010db0:	4642      	mov	r2, r8
 8010db2:	4631      	mov	r1, r6
 8010db4:	4628      	mov	r0, r5
 8010db6:	47b8      	blx	r7
 8010db8:	3001      	adds	r0, #1
 8010dba:	d1c2      	bne.n	8010d42 <_printf_float+0x2f2>
 8010dbc:	e6a3      	b.n	8010b06 <_printf_float+0xb6>
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	4631      	mov	r1, r6
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	9206      	str	r2, [sp, #24]
 8010dc6:	47b8      	blx	r7
 8010dc8:	3001      	adds	r0, #1
 8010dca:	f43f ae9c 	beq.w	8010b06 <_printf_float+0xb6>
 8010dce:	9a06      	ldr	r2, [sp, #24]
 8010dd0:	f10b 0b01 	add.w	fp, fp, #1
 8010dd4:	e7bb      	b.n	8010d4e <_printf_float+0x2fe>
 8010dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dda:	4631      	mov	r1, r6
 8010ddc:	4628      	mov	r0, r5
 8010dde:	47b8      	blx	r7
 8010de0:	3001      	adds	r0, #1
 8010de2:	d1c0      	bne.n	8010d66 <_printf_float+0x316>
 8010de4:	e68f      	b.n	8010b06 <_printf_float+0xb6>
 8010de6:	9a06      	ldr	r2, [sp, #24]
 8010de8:	464b      	mov	r3, r9
 8010dea:	4442      	add	r2, r8
 8010dec:	4631      	mov	r1, r6
 8010dee:	4628      	mov	r0, r5
 8010df0:	47b8      	blx	r7
 8010df2:	3001      	adds	r0, #1
 8010df4:	d1c3      	bne.n	8010d7e <_printf_float+0x32e>
 8010df6:	e686      	b.n	8010b06 <_printf_float+0xb6>
 8010df8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010dfc:	f1ba 0f01 	cmp.w	sl, #1
 8010e00:	dc01      	bgt.n	8010e06 <_printf_float+0x3b6>
 8010e02:	07db      	lsls	r3, r3, #31
 8010e04:	d536      	bpl.n	8010e74 <_printf_float+0x424>
 8010e06:	2301      	movs	r3, #1
 8010e08:	4642      	mov	r2, r8
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	47b8      	blx	r7
 8010e10:	3001      	adds	r0, #1
 8010e12:	f43f ae78 	beq.w	8010b06 <_printf_float+0xb6>
 8010e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e1a:	4631      	mov	r1, r6
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	47b8      	blx	r7
 8010e20:	3001      	adds	r0, #1
 8010e22:	f43f ae70 	beq.w	8010b06 <_printf_float+0xb6>
 8010e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e32:	f7ef fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e36:	b9c0      	cbnz	r0, 8010e6a <_printf_float+0x41a>
 8010e38:	4653      	mov	r3, sl
 8010e3a:	f108 0201 	add.w	r2, r8, #1
 8010e3e:	4631      	mov	r1, r6
 8010e40:	4628      	mov	r0, r5
 8010e42:	47b8      	blx	r7
 8010e44:	3001      	adds	r0, #1
 8010e46:	d10c      	bne.n	8010e62 <_printf_float+0x412>
 8010e48:	e65d      	b.n	8010b06 <_printf_float+0xb6>
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	465a      	mov	r2, fp
 8010e4e:	4631      	mov	r1, r6
 8010e50:	4628      	mov	r0, r5
 8010e52:	47b8      	blx	r7
 8010e54:	3001      	adds	r0, #1
 8010e56:	f43f ae56 	beq.w	8010b06 <_printf_float+0xb6>
 8010e5a:	f108 0801 	add.w	r8, r8, #1
 8010e5e:	45d0      	cmp	r8, sl
 8010e60:	dbf3      	blt.n	8010e4a <_printf_float+0x3fa>
 8010e62:	464b      	mov	r3, r9
 8010e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010e68:	e6df      	b.n	8010c2a <_printf_float+0x1da>
 8010e6a:	f04f 0800 	mov.w	r8, #0
 8010e6e:	f104 0b1a 	add.w	fp, r4, #26
 8010e72:	e7f4      	b.n	8010e5e <_printf_float+0x40e>
 8010e74:	2301      	movs	r3, #1
 8010e76:	4642      	mov	r2, r8
 8010e78:	e7e1      	b.n	8010e3e <_printf_float+0x3ee>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	464a      	mov	r2, r9
 8010e7e:	4631      	mov	r1, r6
 8010e80:	4628      	mov	r0, r5
 8010e82:	47b8      	blx	r7
 8010e84:	3001      	adds	r0, #1
 8010e86:	f43f ae3e 	beq.w	8010b06 <_printf_float+0xb6>
 8010e8a:	f108 0801 	add.w	r8, r8, #1
 8010e8e:	68e3      	ldr	r3, [r4, #12]
 8010e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e92:	1a5b      	subs	r3, r3, r1
 8010e94:	4543      	cmp	r3, r8
 8010e96:	dcf0      	bgt.n	8010e7a <_printf_float+0x42a>
 8010e98:	e6fc      	b.n	8010c94 <_printf_float+0x244>
 8010e9a:	f04f 0800 	mov.w	r8, #0
 8010e9e:	f104 0919 	add.w	r9, r4, #25
 8010ea2:	e7f4      	b.n	8010e8e <_printf_float+0x43e>

08010ea4 <_printf_common>:
 8010ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea8:	4616      	mov	r6, r2
 8010eaa:	4698      	mov	r8, r3
 8010eac:	688a      	ldr	r2, [r1, #8]
 8010eae:	690b      	ldr	r3, [r1, #16]
 8010eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	bfb8      	it	lt
 8010eb8:	4613      	movlt	r3, r2
 8010eba:	6033      	str	r3, [r6, #0]
 8010ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ec0:	4607      	mov	r7, r0
 8010ec2:	460c      	mov	r4, r1
 8010ec4:	b10a      	cbz	r2, 8010eca <_printf_common+0x26>
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	6033      	str	r3, [r6, #0]
 8010eca:	6823      	ldr	r3, [r4, #0]
 8010ecc:	0699      	lsls	r1, r3, #26
 8010ece:	bf42      	ittt	mi
 8010ed0:	6833      	ldrmi	r3, [r6, #0]
 8010ed2:	3302      	addmi	r3, #2
 8010ed4:	6033      	strmi	r3, [r6, #0]
 8010ed6:	6825      	ldr	r5, [r4, #0]
 8010ed8:	f015 0506 	ands.w	r5, r5, #6
 8010edc:	d106      	bne.n	8010eec <_printf_common+0x48>
 8010ede:	f104 0a19 	add.w	sl, r4, #25
 8010ee2:	68e3      	ldr	r3, [r4, #12]
 8010ee4:	6832      	ldr	r2, [r6, #0]
 8010ee6:	1a9b      	subs	r3, r3, r2
 8010ee8:	42ab      	cmp	r3, r5
 8010eea:	dc26      	bgt.n	8010f3a <_printf_common+0x96>
 8010eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010ef0:	6822      	ldr	r2, [r4, #0]
 8010ef2:	3b00      	subs	r3, #0
 8010ef4:	bf18      	it	ne
 8010ef6:	2301      	movne	r3, #1
 8010ef8:	0692      	lsls	r2, r2, #26
 8010efa:	d42b      	bmi.n	8010f54 <_printf_common+0xb0>
 8010efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f00:	4641      	mov	r1, r8
 8010f02:	4638      	mov	r0, r7
 8010f04:	47c8      	blx	r9
 8010f06:	3001      	adds	r0, #1
 8010f08:	d01e      	beq.n	8010f48 <_printf_common+0xa4>
 8010f0a:	6823      	ldr	r3, [r4, #0]
 8010f0c:	6922      	ldr	r2, [r4, #16]
 8010f0e:	f003 0306 	and.w	r3, r3, #6
 8010f12:	2b04      	cmp	r3, #4
 8010f14:	bf02      	ittt	eq
 8010f16:	68e5      	ldreq	r5, [r4, #12]
 8010f18:	6833      	ldreq	r3, [r6, #0]
 8010f1a:	1aed      	subeq	r5, r5, r3
 8010f1c:	68a3      	ldr	r3, [r4, #8]
 8010f1e:	bf0c      	ite	eq
 8010f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f24:	2500      	movne	r5, #0
 8010f26:	4293      	cmp	r3, r2
 8010f28:	bfc4      	itt	gt
 8010f2a:	1a9b      	subgt	r3, r3, r2
 8010f2c:	18ed      	addgt	r5, r5, r3
 8010f2e:	2600      	movs	r6, #0
 8010f30:	341a      	adds	r4, #26
 8010f32:	42b5      	cmp	r5, r6
 8010f34:	d11a      	bne.n	8010f6c <_printf_common+0xc8>
 8010f36:	2000      	movs	r0, #0
 8010f38:	e008      	b.n	8010f4c <_printf_common+0xa8>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	4652      	mov	r2, sl
 8010f3e:	4641      	mov	r1, r8
 8010f40:	4638      	mov	r0, r7
 8010f42:	47c8      	blx	r9
 8010f44:	3001      	adds	r0, #1
 8010f46:	d103      	bne.n	8010f50 <_printf_common+0xac>
 8010f48:	f04f 30ff 	mov.w	r0, #4294967295
 8010f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f50:	3501      	adds	r5, #1
 8010f52:	e7c6      	b.n	8010ee2 <_printf_common+0x3e>
 8010f54:	18e1      	adds	r1, r4, r3
 8010f56:	1c5a      	adds	r2, r3, #1
 8010f58:	2030      	movs	r0, #48	@ 0x30
 8010f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f5e:	4422      	add	r2, r4
 8010f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f68:	3302      	adds	r3, #2
 8010f6a:	e7c7      	b.n	8010efc <_printf_common+0x58>
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	4622      	mov	r2, r4
 8010f70:	4641      	mov	r1, r8
 8010f72:	4638      	mov	r0, r7
 8010f74:	47c8      	blx	r9
 8010f76:	3001      	adds	r0, #1
 8010f78:	d0e6      	beq.n	8010f48 <_printf_common+0xa4>
 8010f7a:	3601      	adds	r6, #1
 8010f7c:	e7d9      	b.n	8010f32 <_printf_common+0x8e>
	...

08010f80 <_printf_i>:
 8010f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f84:	7e0f      	ldrb	r7, [r1, #24]
 8010f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f88:	2f78      	cmp	r7, #120	@ 0x78
 8010f8a:	4691      	mov	r9, r2
 8010f8c:	4680      	mov	r8, r0
 8010f8e:	460c      	mov	r4, r1
 8010f90:	469a      	mov	sl, r3
 8010f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f96:	d807      	bhi.n	8010fa8 <_printf_i+0x28>
 8010f98:	2f62      	cmp	r7, #98	@ 0x62
 8010f9a:	d80a      	bhi.n	8010fb2 <_printf_i+0x32>
 8010f9c:	2f00      	cmp	r7, #0
 8010f9e:	f000 80d1 	beq.w	8011144 <_printf_i+0x1c4>
 8010fa2:	2f58      	cmp	r7, #88	@ 0x58
 8010fa4:	f000 80b8 	beq.w	8011118 <_printf_i+0x198>
 8010fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010fb0:	e03a      	b.n	8011028 <_printf_i+0xa8>
 8010fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010fb6:	2b15      	cmp	r3, #21
 8010fb8:	d8f6      	bhi.n	8010fa8 <_printf_i+0x28>
 8010fba:	a101      	add	r1, pc, #4	@ (adr r1, 8010fc0 <_printf_i+0x40>)
 8010fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fc0:	08011019 	.word	0x08011019
 8010fc4:	0801102d 	.word	0x0801102d
 8010fc8:	08010fa9 	.word	0x08010fa9
 8010fcc:	08010fa9 	.word	0x08010fa9
 8010fd0:	08010fa9 	.word	0x08010fa9
 8010fd4:	08010fa9 	.word	0x08010fa9
 8010fd8:	0801102d 	.word	0x0801102d
 8010fdc:	08010fa9 	.word	0x08010fa9
 8010fe0:	08010fa9 	.word	0x08010fa9
 8010fe4:	08010fa9 	.word	0x08010fa9
 8010fe8:	08010fa9 	.word	0x08010fa9
 8010fec:	0801112b 	.word	0x0801112b
 8010ff0:	08011057 	.word	0x08011057
 8010ff4:	080110e5 	.word	0x080110e5
 8010ff8:	08010fa9 	.word	0x08010fa9
 8010ffc:	08010fa9 	.word	0x08010fa9
 8011000:	0801114d 	.word	0x0801114d
 8011004:	08010fa9 	.word	0x08010fa9
 8011008:	08011057 	.word	0x08011057
 801100c:	08010fa9 	.word	0x08010fa9
 8011010:	08010fa9 	.word	0x08010fa9
 8011014:	080110ed 	.word	0x080110ed
 8011018:	6833      	ldr	r3, [r6, #0]
 801101a:	1d1a      	adds	r2, r3, #4
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	6032      	str	r2, [r6, #0]
 8011020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011028:	2301      	movs	r3, #1
 801102a:	e09c      	b.n	8011166 <_printf_i+0x1e6>
 801102c:	6833      	ldr	r3, [r6, #0]
 801102e:	6820      	ldr	r0, [r4, #0]
 8011030:	1d19      	adds	r1, r3, #4
 8011032:	6031      	str	r1, [r6, #0]
 8011034:	0606      	lsls	r6, r0, #24
 8011036:	d501      	bpl.n	801103c <_printf_i+0xbc>
 8011038:	681d      	ldr	r5, [r3, #0]
 801103a:	e003      	b.n	8011044 <_printf_i+0xc4>
 801103c:	0645      	lsls	r5, r0, #25
 801103e:	d5fb      	bpl.n	8011038 <_printf_i+0xb8>
 8011040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011044:	2d00      	cmp	r5, #0
 8011046:	da03      	bge.n	8011050 <_printf_i+0xd0>
 8011048:	232d      	movs	r3, #45	@ 0x2d
 801104a:	426d      	negs	r5, r5
 801104c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011050:	4858      	ldr	r0, [pc, #352]	@ (80111b4 <_printf_i+0x234>)
 8011052:	230a      	movs	r3, #10
 8011054:	e011      	b.n	801107a <_printf_i+0xfa>
 8011056:	6821      	ldr	r1, [r4, #0]
 8011058:	6833      	ldr	r3, [r6, #0]
 801105a:	0608      	lsls	r0, r1, #24
 801105c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011060:	d402      	bmi.n	8011068 <_printf_i+0xe8>
 8011062:	0649      	lsls	r1, r1, #25
 8011064:	bf48      	it	mi
 8011066:	b2ad      	uxthmi	r5, r5
 8011068:	2f6f      	cmp	r7, #111	@ 0x6f
 801106a:	4852      	ldr	r0, [pc, #328]	@ (80111b4 <_printf_i+0x234>)
 801106c:	6033      	str	r3, [r6, #0]
 801106e:	bf14      	ite	ne
 8011070:	230a      	movne	r3, #10
 8011072:	2308      	moveq	r3, #8
 8011074:	2100      	movs	r1, #0
 8011076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801107a:	6866      	ldr	r6, [r4, #4]
 801107c:	60a6      	str	r6, [r4, #8]
 801107e:	2e00      	cmp	r6, #0
 8011080:	db05      	blt.n	801108e <_printf_i+0x10e>
 8011082:	6821      	ldr	r1, [r4, #0]
 8011084:	432e      	orrs	r6, r5
 8011086:	f021 0104 	bic.w	r1, r1, #4
 801108a:	6021      	str	r1, [r4, #0]
 801108c:	d04b      	beq.n	8011126 <_printf_i+0x1a6>
 801108e:	4616      	mov	r6, r2
 8011090:	fbb5 f1f3 	udiv	r1, r5, r3
 8011094:	fb03 5711 	mls	r7, r3, r1, r5
 8011098:	5dc7      	ldrb	r7, [r0, r7]
 801109a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801109e:	462f      	mov	r7, r5
 80110a0:	42bb      	cmp	r3, r7
 80110a2:	460d      	mov	r5, r1
 80110a4:	d9f4      	bls.n	8011090 <_printf_i+0x110>
 80110a6:	2b08      	cmp	r3, #8
 80110a8:	d10b      	bne.n	80110c2 <_printf_i+0x142>
 80110aa:	6823      	ldr	r3, [r4, #0]
 80110ac:	07df      	lsls	r7, r3, #31
 80110ae:	d508      	bpl.n	80110c2 <_printf_i+0x142>
 80110b0:	6923      	ldr	r3, [r4, #16]
 80110b2:	6861      	ldr	r1, [r4, #4]
 80110b4:	4299      	cmp	r1, r3
 80110b6:	bfde      	ittt	le
 80110b8:	2330      	movle	r3, #48	@ 0x30
 80110ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80110be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80110c2:	1b92      	subs	r2, r2, r6
 80110c4:	6122      	str	r2, [r4, #16]
 80110c6:	f8cd a000 	str.w	sl, [sp]
 80110ca:	464b      	mov	r3, r9
 80110cc:	aa03      	add	r2, sp, #12
 80110ce:	4621      	mov	r1, r4
 80110d0:	4640      	mov	r0, r8
 80110d2:	f7ff fee7 	bl	8010ea4 <_printf_common>
 80110d6:	3001      	adds	r0, #1
 80110d8:	d14a      	bne.n	8011170 <_printf_i+0x1f0>
 80110da:	f04f 30ff 	mov.w	r0, #4294967295
 80110de:	b004      	add	sp, #16
 80110e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	f043 0320 	orr.w	r3, r3, #32
 80110ea:	6023      	str	r3, [r4, #0]
 80110ec:	4832      	ldr	r0, [pc, #200]	@ (80111b8 <_printf_i+0x238>)
 80110ee:	2778      	movs	r7, #120	@ 0x78
 80110f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80110f4:	6823      	ldr	r3, [r4, #0]
 80110f6:	6831      	ldr	r1, [r6, #0]
 80110f8:	061f      	lsls	r7, r3, #24
 80110fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80110fe:	d402      	bmi.n	8011106 <_printf_i+0x186>
 8011100:	065f      	lsls	r7, r3, #25
 8011102:	bf48      	it	mi
 8011104:	b2ad      	uxthmi	r5, r5
 8011106:	6031      	str	r1, [r6, #0]
 8011108:	07d9      	lsls	r1, r3, #31
 801110a:	bf44      	itt	mi
 801110c:	f043 0320 	orrmi.w	r3, r3, #32
 8011110:	6023      	strmi	r3, [r4, #0]
 8011112:	b11d      	cbz	r5, 801111c <_printf_i+0x19c>
 8011114:	2310      	movs	r3, #16
 8011116:	e7ad      	b.n	8011074 <_printf_i+0xf4>
 8011118:	4826      	ldr	r0, [pc, #152]	@ (80111b4 <_printf_i+0x234>)
 801111a:	e7e9      	b.n	80110f0 <_printf_i+0x170>
 801111c:	6823      	ldr	r3, [r4, #0]
 801111e:	f023 0320 	bic.w	r3, r3, #32
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	e7f6      	b.n	8011114 <_printf_i+0x194>
 8011126:	4616      	mov	r6, r2
 8011128:	e7bd      	b.n	80110a6 <_printf_i+0x126>
 801112a:	6833      	ldr	r3, [r6, #0]
 801112c:	6825      	ldr	r5, [r4, #0]
 801112e:	6961      	ldr	r1, [r4, #20]
 8011130:	1d18      	adds	r0, r3, #4
 8011132:	6030      	str	r0, [r6, #0]
 8011134:	062e      	lsls	r6, r5, #24
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	d501      	bpl.n	801113e <_printf_i+0x1be>
 801113a:	6019      	str	r1, [r3, #0]
 801113c:	e002      	b.n	8011144 <_printf_i+0x1c4>
 801113e:	0668      	lsls	r0, r5, #25
 8011140:	d5fb      	bpl.n	801113a <_printf_i+0x1ba>
 8011142:	8019      	strh	r1, [r3, #0]
 8011144:	2300      	movs	r3, #0
 8011146:	6123      	str	r3, [r4, #16]
 8011148:	4616      	mov	r6, r2
 801114a:	e7bc      	b.n	80110c6 <_printf_i+0x146>
 801114c:	6833      	ldr	r3, [r6, #0]
 801114e:	1d1a      	adds	r2, r3, #4
 8011150:	6032      	str	r2, [r6, #0]
 8011152:	681e      	ldr	r6, [r3, #0]
 8011154:	6862      	ldr	r2, [r4, #4]
 8011156:	2100      	movs	r1, #0
 8011158:	4630      	mov	r0, r6
 801115a:	f7ef f839 	bl	80001d0 <memchr>
 801115e:	b108      	cbz	r0, 8011164 <_printf_i+0x1e4>
 8011160:	1b80      	subs	r0, r0, r6
 8011162:	6060      	str	r0, [r4, #4]
 8011164:	6863      	ldr	r3, [r4, #4]
 8011166:	6123      	str	r3, [r4, #16]
 8011168:	2300      	movs	r3, #0
 801116a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801116e:	e7aa      	b.n	80110c6 <_printf_i+0x146>
 8011170:	6923      	ldr	r3, [r4, #16]
 8011172:	4632      	mov	r2, r6
 8011174:	4649      	mov	r1, r9
 8011176:	4640      	mov	r0, r8
 8011178:	47d0      	blx	sl
 801117a:	3001      	adds	r0, #1
 801117c:	d0ad      	beq.n	80110da <_printf_i+0x15a>
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	079b      	lsls	r3, r3, #30
 8011182:	d413      	bmi.n	80111ac <_printf_i+0x22c>
 8011184:	68e0      	ldr	r0, [r4, #12]
 8011186:	9b03      	ldr	r3, [sp, #12]
 8011188:	4298      	cmp	r0, r3
 801118a:	bfb8      	it	lt
 801118c:	4618      	movlt	r0, r3
 801118e:	e7a6      	b.n	80110de <_printf_i+0x15e>
 8011190:	2301      	movs	r3, #1
 8011192:	4632      	mov	r2, r6
 8011194:	4649      	mov	r1, r9
 8011196:	4640      	mov	r0, r8
 8011198:	47d0      	blx	sl
 801119a:	3001      	adds	r0, #1
 801119c:	d09d      	beq.n	80110da <_printf_i+0x15a>
 801119e:	3501      	adds	r5, #1
 80111a0:	68e3      	ldr	r3, [r4, #12]
 80111a2:	9903      	ldr	r1, [sp, #12]
 80111a4:	1a5b      	subs	r3, r3, r1
 80111a6:	42ab      	cmp	r3, r5
 80111a8:	dcf2      	bgt.n	8011190 <_printf_i+0x210>
 80111aa:	e7eb      	b.n	8011184 <_printf_i+0x204>
 80111ac:	2500      	movs	r5, #0
 80111ae:	f104 0619 	add.w	r6, r4, #25
 80111b2:	e7f5      	b.n	80111a0 <_printf_i+0x220>
 80111b4:	08013d96 	.word	0x08013d96
 80111b8:	08013da7 	.word	0x08013da7

080111bc <std>:
 80111bc:	2300      	movs	r3, #0
 80111be:	b510      	push	{r4, lr}
 80111c0:	4604      	mov	r4, r0
 80111c2:	e9c0 3300 	strd	r3, r3, [r0]
 80111c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111ca:	6083      	str	r3, [r0, #8]
 80111cc:	8181      	strh	r1, [r0, #12]
 80111ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80111d0:	81c2      	strh	r2, [r0, #14]
 80111d2:	6183      	str	r3, [r0, #24]
 80111d4:	4619      	mov	r1, r3
 80111d6:	2208      	movs	r2, #8
 80111d8:	305c      	adds	r0, #92	@ 0x5c
 80111da:	f000 f94c 	bl	8011476 <memset>
 80111de:	4b0d      	ldr	r3, [pc, #52]	@ (8011214 <std+0x58>)
 80111e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80111e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011218 <std+0x5c>)
 80111e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80111e6:	4b0d      	ldr	r3, [pc, #52]	@ (801121c <std+0x60>)
 80111e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80111ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011220 <std+0x64>)
 80111ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80111ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011224 <std+0x68>)
 80111f0:	6224      	str	r4, [r4, #32]
 80111f2:	429c      	cmp	r4, r3
 80111f4:	d006      	beq.n	8011204 <std+0x48>
 80111f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80111fa:	4294      	cmp	r4, r2
 80111fc:	d002      	beq.n	8011204 <std+0x48>
 80111fe:	33d0      	adds	r3, #208	@ 0xd0
 8011200:	429c      	cmp	r4, r3
 8011202:	d105      	bne.n	8011210 <std+0x54>
 8011204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801120c:	f000 b9b0 	b.w	8011570 <__retarget_lock_init_recursive>
 8011210:	bd10      	pop	{r4, pc}
 8011212:	bf00      	nop
 8011214:	080113f1 	.word	0x080113f1
 8011218:	08011413 	.word	0x08011413
 801121c:	0801144b 	.word	0x0801144b
 8011220:	0801146f 	.word	0x0801146f
 8011224:	2000665c 	.word	0x2000665c

08011228 <stdio_exit_handler>:
 8011228:	4a02      	ldr	r2, [pc, #8]	@ (8011234 <stdio_exit_handler+0xc>)
 801122a:	4903      	ldr	r1, [pc, #12]	@ (8011238 <stdio_exit_handler+0x10>)
 801122c:	4803      	ldr	r0, [pc, #12]	@ (801123c <stdio_exit_handler+0x14>)
 801122e:	f000 b869 	b.w	8011304 <_fwalk_sglue>
 8011232:	bf00      	nop
 8011234:	20000100 	.word	0x20000100
 8011238:	08012f05 	.word	0x08012f05
 801123c:	20000110 	.word	0x20000110

08011240 <cleanup_stdio>:
 8011240:	6841      	ldr	r1, [r0, #4]
 8011242:	4b0c      	ldr	r3, [pc, #48]	@ (8011274 <cleanup_stdio+0x34>)
 8011244:	4299      	cmp	r1, r3
 8011246:	b510      	push	{r4, lr}
 8011248:	4604      	mov	r4, r0
 801124a:	d001      	beq.n	8011250 <cleanup_stdio+0x10>
 801124c:	f001 fe5a 	bl	8012f04 <_fflush_r>
 8011250:	68a1      	ldr	r1, [r4, #8]
 8011252:	4b09      	ldr	r3, [pc, #36]	@ (8011278 <cleanup_stdio+0x38>)
 8011254:	4299      	cmp	r1, r3
 8011256:	d002      	beq.n	801125e <cleanup_stdio+0x1e>
 8011258:	4620      	mov	r0, r4
 801125a:	f001 fe53 	bl	8012f04 <_fflush_r>
 801125e:	68e1      	ldr	r1, [r4, #12]
 8011260:	4b06      	ldr	r3, [pc, #24]	@ (801127c <cleanup_stdio+0x3c>)
 8011262:	4299      	cmp	r1, r3
 8011264:	d004      	beq.n	8011270 <cleanup_stdio+0x30>
 8011266:	4620      	mov	r0, r4
 8011268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801126c:	f001 be4a 	b.w	8012f04 <_fflush_r>
 8011270:	bd10      	pop	{r4, pc}
 8011272:	bf00      	nop
 8011274:	2000665c 	.word	0x2000665c
 8011278:	200066c4 	.word	0x200066c4
 801127c:	2000672c 	.word	0x2000672c

08011280 <global_stdio_init.part.0>:
 8011280:	b510      	push	{r4, lr}
 8011282:	4b0b      	ldr	r3, [pc, #44]	@ (80112b0 <global_stdio_init.part.0+0x30>)
 8011284:	4c0b      	ldr	r4, [pc, #44]	@ (80112b4 <global_stdio_init.part.0+0x34>)
 8011286:	4a0c      	ldr	r2, [pc, #48]	@ (80112b8 <global_stdio_init.part.0+0x38>)
 8011288:	601a      	str	r2, [r3, #0]
 801128a:	4620      	mov	r0, r4
 801128c:	2200      	movs	r2, #0
 801128e:	2104      	movs	r1, #4
 8011290:	f7ff ff94 	bl	80111bc <std>
 8011294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011298:	2201      	movs	r2, #1
 801129a:	2109      	movs	r1, #9
 801129c:	f7ff ff8e 	bl	80111bc <std>
 80112a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80112a4:	2202      	movs	r2, #2
 80112a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112aa:	2112      	movs	r1, #18
 80112ac:	f7ff bf86 	b.w	80111bc <std>
 80112b0:	20006794 	.word	0x20006794
 80112b4:	2000665c 	.word	0x2000665c
 80112b8:	08011229 	.word	0x08011229

080112bc <__sfp_lock_acquire>:
 80112bc:	4801      	ldr	r0, [pc, #4]	@ (80112c4 <__sfp_lock_acquire+0x8>)
 80112be:	f000 b958 	b.w	8011572 <__retarget_lock_acquire_recursive>
 80112c2:	bf00      	nop
 80112c4:	2000679d 	.word	0x2000679d

080112c8 <__sfp_lock_release>:
 80112c8:	4801      	ldr	r0, [pc, #4]	@ (80112d0 <__sfp_lock_release+0x8>)
 80112ca:	f000 b953 	b.w	8011574 <__retarget_lock_release_recursive>
 80112ce:	bf00      	nop
 80112d0:	2000679d 	.word	0x2000679d

080112d4 <__sinit>:
 80112d4:	b510      	push	{r4, lr}
 80112d6:	4604      	mov	r4, r0
 80112d8:	f7ff fff0 	bl	80112bc <__sfp_lock_acquire>
 80112dc:	6a23      	ldr	r3, [r4, #32]
 80112de:	b11b      	cbz	r3, 80112e8 <__sinit+0x14>
 80112e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112e4:	f7ff bff0 	b.w	80112c8 <__sfp_lock_release>
 80112e8:	4b04      	ldr	r3, [pc, #16]	@ (80112fc <__sinit+0x28>)
 80112ea:	6223      	str	r3, [r4, #32]
 80112ec:	4b04      	ldr	r3, [pc, #16]	@ (8011300 <__sinit+0x2c>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d1f5      	bne.n	80112e0 <__sinit+0xc>
 80112f4:	f7ff ffc4 	bl	8011280 <global_stdio_init.part.0>
 80112f8:	e7f2      	b.n	80112e0 <__sinit+0xc>
 80112fa:	bf00      	nop
 80112fc:	08011241 	.word	0x08011241
 8011300:	20006794 	.word	0x20006794

08011304 <_fwalk_sglue>:
 8011304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011308:	4607      	mov	r7, r0
 801130a:	4688      	mov	r8, r1
 801130c:	4614      	mov	r4, r2
 801130e:	2600      	movs	r6, #0
 8011310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011314:	f1b9 0901 	subs.w	r9, r9, #1
 8011318:	d505      	bpl.n	8011326 <_fwalk_sglue+0x22>
 801131a:	6824      	ldr	r4, [r4, #0]
 801131c:	2c00      	cmp	r4, #0
 801131e:	d1f7      	bne.n	8011310 <_fwalk_sglue+0xc>
 8011320:	4630      	mov	r0, r6
 8011322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011326:	89ab      	ldrh	r3, [r5, #12]
 8011328:	2b01      	cmp	r3, #1
 801132a:	d907      	bls.n	801133c <_fwalk_sglue+0x38>
 801132c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011330:	3301      	adds	r3, #1
 8011332:	d003      	beq.n	801133c <_fwalk_sglue+0x38>
 8011334:	4629      	mov	r1, r5
 8011336:	4638      	mov	r0, r7
 8011338:	47c0      	blx	r8
 801133a:	4306      	orrs	r6, r0
 801133c:	3568      	adds	r5, #104	@ 0x68
 801133e:	e7e9      	b.n	8011314 <_fwalk_sglue+0x10>

08011340 <sniprintf>:
 8011340:	b40c      	push	{r2, r3}
 8011342:	b530      	push	{r4, r5, lr}
 8011344:	4b18      	ldr	r3, [pc, #96]	@ (80113a8 <sniprintf+0x68>)
 8011346:	1e0c      	subs	r4, r1, #0
 8011348:	681d      	ldr	r5, [r3, #0]
 801134a:	b09d      	sub	sp, #116	@ 0x74
 801134c:	da08      	bge.n	8011360 <sniprintf+0x20>
 801134e:	238b      	movs	r3, #139	@ 0x8b
 8011350:	602b      	str	r3, [r5, #0]
 8011352:	f04f 30ff 	mov.w	r0, #4294967295
 8011356:	b01d      	add	sp, #116	@ 0x74
 8011358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801135c:	b002      	add	sp, #8
 801135e:	4770      	bx	lr
 8011360:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011364:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011368:	f04f 0300 	mov.w	r3, #0
 801136c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801136e:	bf14      	ite	ne
 8011370:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011374:	4623      	moveq	r3, r4
 8011376:	9304      	str	r3, [sp, #16]
 8011378:	9307      	str	r3, [sp, #28]
 801137a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801137e:	9002      	str	r0, [sp, #8]
 8011380:	9006      	str	r0, [sp, #24]
 8011382:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011386:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011388:	ab21      	add	r3, sp, #132	@ 0x84
 801138a:	a902      	add	r1, sp, #8
 801138c:	4628      	mov	r0, r5
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	f001 fc38 	bl	8012c04 <_svfiprintf_r>
 8011394:	1c43      	adds	r3, r0, #1
 8011396:	bfbc      	itt	lt
 8011398:	238b      	movlt	r3, #139	@ 0x8b
 801139a:	602b      	strlt	r3, [r5, #0]
 801139c:	2c00      	cmp	r4, #0
 801139e:	d0da      	beq.n	8011356 <sniprintf+0x16>
 80113a0:	9b02      	ldr	r3, [sp, #8]
 80113a2:	2200      	movs	r2, #0
 80113a4:	701a      	strb	r2, [r3, #0]
 80113a6:	e7d6      	b.n	8011356 <sniprintf+0x16>
 80113a8:	2000010c 	.word	0x2000010c

080113ac <siprintf>:
 80113ac:	b40e      	push	{r1, r2, r3}
 80113ae:	b510      	push	{r4, lr}
 80113b0:	b09d      	sub	sp, #116	@ 0x74
 80113b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80113b4:	9002      	str	r0, [sp, #8]
 80113b6:	9006      	str	r0, [sp, #24]
 80113b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80113bc:	480a      	ldr	r0, [pc, #40]	@ (80113e8 <siprintf+0x3c>)
 80113be:	9107      	str	r1, [sp, #28]
 80113c0:	9104      	str	r1, [sp, #16]
 80113c2:	490a      	ldr	r1, [pc, #40]	@ (80113ec <siprintf+0x40>)
 80113c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80113c8:	9105      	str	r1, [sp, #20]
 80113ca:	2400      	movs	r4, #0
 80113cc:	a902      	add	r1, sp, #8
 80113ce:	6800      	ldr	r0, [r0, #0]
 80113d0:	9301      	str	r3, [sp, #4]
 80113d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80113d4:	f001 fc16 	bl	8012c04 <_svfiprintf_r>
 80113d8:	9b02      	ldr	r3, [sp, #8]
 80113da:	701c      	strb	r4, [r3, #0]
 80113dc:	b01d      	add	sp, #116	@ 0x74
 80113de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113e2:	b003      	add	sp, #12
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop
 80113e8:	2000010c 	.word	0x2000010c
 80113ec:	ffff0208 	.word	0xffff0208

080113f0 <__sread>:
 80113f0:	b510      	push	{r4, lr}
 80113f2:	460c      	mov	r4, r1
 80113f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113f8:	f000 f86c 	bl	80114d4 <_read_r>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	bfab      	itete	ge
 8011400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011402:	89a3      	ldrhlt	r3, [r4, #12]
 8011404:	181b      	addge	r3, r3, r0
 8011406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801140a:	bfac      	ite	ge
 801140c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801140e:	81a3      	strhlt	r3, [r4, #12]
 8011410:	bd10      	pop	{r4, pc}

08011412 <__swrite>:
 8011412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011416:	461f      	mov	r7, r3
 8011418:	898b      	ldrh	r3, [r1, #12]
 801141a:	05db      	lsls	r3, r3, #23
 801141c:	4605      	mov	r5, r0
 801141e:	460c      	mov	r4, r1
 8011420:	4616      	mov	r6, r2
 8011422:	d505      	bpl.n	8011430 <__swrite+0x1e>
 8011424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011428:	2302      	movs	r3, #2
 801142a:	2200      	movs	r2, #0
 801142c:	f000 f840 	bl	80114b0 <_lseek_r>
 8011430:	89a3      	ldrh	r3, [r4, #12]
 8011432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801143a:	81a3      	strh	r3, [r4, #12]
 801143c:	4632      	mov	r2, r6
 801143e:	463b      	mov	r3, r7
 8011440:	4628      	mov	r0, r5
 8011442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011446:	f000 b857 	b.w	80114f8 <_write_r>

0801144a <__sseek>:
 801144a:	b510      	push	{r4, lr}
 801144c:	460c      	mov	r4, r1
 801144e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011452:	f000 f82d 	bl	80114b0 <_lseek_r>
 8011456:	1c43      	adds	r3, r0, #1
 8011458:	89a3      	ldrh	r3, [r4, #12]
 801145a:	bf15      	itete	ne
 801145c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801145e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011466:	81a3      	strheq	r3, [r4, #12]
 8011468:	bf18      	it	ne
 801146a:	81a3      	strhne	r3, [r4, #12]
 801146c:	bd10      	pop	{r4, pc}

0801146e <__sclose>:
 801146e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011472:	f000 b80d 	b.w	8011490 <_close_r>

08011476 <memset>:
 8011476:	4402      	add	r2, r0
 8011478:	4603      	mov	r3, r0
 801147a:	4293      	cmp	r3, r2
 801147c:	d100      	bne.n	8011480 <memset+0xa>
 801147e:	4770      	bx	lr
 8011480:	f803 1b01 	strb.w	r1, [r3], #1
 8011484:	e7f9      	b.n	801147a <memset+0x4>
	...

08011488 <_localeconv_r>:
 8011488:	4800      	ldr	r0, [pc, #0]	@ (801148c <_localeconv_r+0x4>)
 801148a:	4770      	bx	lr
 801148c:	2000024c 	.word	0x2000024c

08011490 <_close_r>:
 8011490:	b538      	push	{r3, r4, r5, lr}
 8011492:	4d06      	ldr	r5, [pc, #24]	@ (80114ac <_close_r+0x1c>)
 8011494:	2300      	movs	r3, #0
 8011496:	4604      	mov	r4, r0
 8011498:	4608      	mov	r0, r1
 801149a:	602b      	str	r3, [r5, #0]
 801149c:	f7f1 fca8 	bl	8002df0 <_close>
 80114a0:	1c43      	adds	r3, r0, #1
 80114a2:	d102      	bne.n	80114aa <_close_r+0x1a>
 80114a4:	682b      	ldr	r3, [r5, #0]
 80114a6:	b103      	cbz	r3, 80114aa <_close_r+0x1a>
 80114a8:	6023      	str	r3, [r4, #0]
 80114aa:	bd38      	pop	{r3, r4, r5, pc}
 80114ac:	20006798 	.word	0x20006798

080114b0 <_lseek_r>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	4d07      	ldr	r5, [pc, #28]	@ (80114d0 <_lseek_r+0x20>)
 80114b4:	4604      	mov	r4, r0
 80114b6:	4608      	mov	r0, r1
 80114b8:	4611      	mov	r1, r2
 80114ba:	2200      	movs	r2, #0
 80114bc:	602a      	str	r2, [r5, #0]
 80114be:	461a      	mov	r2, r3
 80114c0:	f7f1 fcbd 	bl	8002e3e <_lseek>
 80114c4:	1c43      	adds	r3, r0, #1
 80114c6:	d102      	bne.n	80114ce <_lseek_r+0x1e>
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	b103      	cbz	r3, 80114ce <_lseek_r+0x1e>
 80114cc:	6023      	str	r3, [r4, #0]
 80114ce:	bd38      	pop	{r3, r4, r5, pc}
 80114d0:	20006798 	.word	0x20006798

080114d4 <_read_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4d07      	ldr	r5, [pc, #28]	@ (80114f4 <_read_r+0x20>)
 80114d8:	4604      	mov	r4, r0
 80114da:	4608      	mov	r0, r1
 80114dc:	4611      	mov	r1, r2
 80114de:	2200      	movs	r2, #0
 80114e0:	602a      	str	r2, [r5, #0]
 80114e2:	461a      	mov	r2, r3
 80114e4:	f7f1 fc4b 	bl	8002d7e <_read>
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	d102      	bne.n	80114f2 <_read_r+0x1e>
 80114ec:	682b      	ldr	r3, [r5, #0]
 80114ee:	b103      	cbz	r3, 80114f2 <_read_r+0x1e>
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	bd38      	pop	{r3, r4, r5, pc}
 80114f4:	20006798 	.word	0x20006798

080114f8 <_write_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d07      	ldr	r5, [pc, #28]	@ (8011518 <_write_r+0x20>)
 80114fc:	4604      	mov	r4, r0
 80114fe:	4608      	mov	r0, r1
 8011500:	4611      	mov	r1, r2
 8011502:	2200      	movs	r2, #0
 8011504:	602a      	str	r2, [r5, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	f7f1 fc56 	bl	8002db8 <_write>
 801150c:	1c43      	adds	r3, r0, #1
 801150e:	d102      	bne.n	8011516 <_write_r+0x1e>
 8011510:	682b      	ldr	r3, [r5, #0]
 8011512:	b103      	cbz	r3, 8011516 <_write_r+0x1e>
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	bd38      	pop	{r3, r4, r5, pc}
 8011518:	20006798 	.word	0x20006798

0801151c <__errno>:
 801151c:	4b01      	ldr	r3, [pc, #4]	@ (8011524 <__errno+0x8>)
 801151e:	6818      	ldr	r0, [r3, #0]
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	2000010c 	.word	0x2000010c

08011528 <__libc_init_array>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	4d0d      	ldr	r5, [pc, #52]	@ (8011560 <__libc_init_array+0x38>)
 801152c:	4c0d      	ldr	r4, [pc, #52]	@ (8011564 <__libc_init_array+0x3c>)
 801152e:	1b64      	subs	r4, r4, r5
 8011530:	10a4      	asrs	r4, r4, #2
 8011532:	2600      	movs	r6, #0
 8011534:	42a6      	cmp	r6, r4
 8011536:	d109      	bne.n	801154c <__libc_init_array+0x24>
 8011538:	4d0b      	ldr	r5, [pc, #44]	@ (8011568 <__libc_init_array+0x40>)
 801153a:	4c0c      	ldr	r4, [pc, #48]	@ (801156c <__libc_init_array+0x44>)
 801153c:	f002 f872 	bl	8013624 <_init>
 8011540:	1b64      	subs	r4, r4, r5
 8011542:	10a4      	asrs	r4, r4, #2
 8011544:	2600      	movs	r6, #0
 8011546:	42a6      	cmp	r6, r4
 8011548:	d105      	bne.n	8011556 <__libc_init_array+0x2e>
 801154a:	bd70      	pop	{r4, r5, r6, pc}
 801154c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011550:	4798      	blx	r3
 8011552:	3601      	adds	r6, #1
 8011554:	e7ee      	b.n	8011534 <__libc_init_array+0xc>
 8011556:	f855 3b04 	ldr.w	r3, [r5], #4
 801155a:	4798      	blx	r3
 801155c:	3601      	adds	r6, #1
 801155e:	e7f2      	b.n	8011546 <__libc_init_array+0x1e>
 8011560:	08014104 	.word	0x08014104
 8011564:	08014104 	.word	0x08014104
 8011568:	08014104 	.word	0x08014104
 801156c:	08014108 	.word	0x08014108

08011570 <__retarget_lock_init_recursive>:
 8011570:	4770      	bx	lr

08011572 <__retarget_lock_acquire_recursive>:
 8011572:	4770      	bx	lr

08011574 <__retarget_lock_release_recursive>:
 8011574:	4770      	bx	lr

08011576 <strcpy>:
 8011576:	4603      	mov	r3, r0
 8011578:	f811 2b01 	ldrb.w	r2, [r1], #1
 801157c:	f803 2b01 	strb.w	r2, [r3], #1
 8011580:	2a00      	cmp	r2, #0
 8011582:	d1f9      	bne.n	8011578 <strcpy+0x2>
 8011584:	4770      	bx	lr

08011586 <memcpy>:
 8011586:	440a      	add	r2, r1
 8011588:	4291      	cmp	r1, r2
 801158a:	f100 33ff 	add.w	r3, r0, #4294967295
 801158e:	d100      	bne.n	8011592 <memcpy+0xc>
 8011590:	4770      	bx	lr
 8011592:	b510      	push	{r4, lr}
 8011594:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011598:	f803 4f01 	strb.w	r4, [r3, #1]!
 801159c:	4291      	cmp	r1, r2
 801159e:	d1f9      	bne.n	8011594 <memcpy+0xe>
 80115a0:	bd10      	pop	{r4, pc}

080115a2 <quorem>:
 80115a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a6:	6903      	ldr	r3, [r0, #16]
 80115a8:	690c      	ldr	r4, [r1, #16]
 80115aa:	42a3      	cmp	r3, r4
 80115ac:	4607      	mov	r7, r0
 80115ae:	db7e      	blt.n	80116ae <quorem+0x10c>
 80115b0:	3c01      	subs	r4, #1
 80115b2:	f101 0814 	add.w	r8, r1, #20
 80115b6:	00a3      	lsls	r3, r4, #2
 80115b8:	f100 0514 	add.w	r5, r0, #20
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115c2:	9301      	str	r3, [sp, #4]
 80115c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115cc:	3301      	adds	r3, #1
 80115ce:	429a      	cmp	r2, r3
 80115d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80115d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80115d8:	d32e      	bcc.n	8011638 <quorem+0x96>
 80115da:	f04f 0a00 	mov.w	sl, #0
 80115de:	46c4      	mov	ip, r8
 80115e0:	46ae      	mov	lr, r5
 80115e2:	46d3      	mov	fp, sl
 80115e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80115e8:	b298      	uxth	r0, r3
 80115ea:	fb06 a000 	mla	r0, r6, r0, sl
 80115ee:	0c02      	lsrs	r2, r0, #16
 80115f0:	0c1b      	lsrs	r3, r3, #16
 80115f2:	fb06 2303 	mla	r3, r6, r3, r2
 80115f6:	f8de 2000 	ldr.w	r2, [lr]
 80115fa:	b280      	uxth	r0, r0
 80115fc:	b292      	uxth	r2, r2
 80115fe:	1a12      	subs	r2, r2, r0
 8011600:	445a      	add	r2, fp
 8011602:	f8de 0000 	ldr.w	r0, [lr]
 8011606:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801160a:	b29b      	uxth	r3, r3
 801160c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011610:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011614:	b292      	uxth	r2, r2
 8011616:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801161a:	45e1      	cmp	r9, ip
 801161c:	f84e 2b04 	str.w	r2, [lr], #4
 8011620:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011624:	d2de      	bcs.n	80115e4 <quorem+0x42>
 8011626:	9b00      	ldr	r3, [sp, #0]
 8011628:	58eb      	ldr	r3, [r5, r3]
 801162a:	b92b      	cbnz	r3, 8011638 <quorem+0x96>
 801162c:	9b01      	ldr	r3, [sp, #4]
 801162e:	3b04      	subs	r3, #4
 8011630:	429d      	cmp	r5, r3
 8011632:	461a      	mov	r2, r3
 8011634:	d32f      	bcc.n	8011696 <quorem+0xf4>
 8011636:	613c      	str	r4, [r7, #16]
 8011638:	4638      	mov	r0, r7
 801163a:	f001 f97f 	bl	801293c <__mcmp>
 801163e:	2800      	cmp	r0, #0
 8011640:	db25      	blt.n	801168e <quorem+0xec>
 8011642:	4629      	mov	r1, r5
 8011644:	2000      	movs	r0, #0
 8011646:	f858 2b04 	ldr.w	r2, [r8], #4
 801164a:	f8d1 c000 	ldr.w	ip, [r1]
 801164e:	fa1f fe82 	uxth.w	lr, r2
 8011652:	fa1f f38c 	uxth.w	r3, ip
 8011656:	eba3 030e 	sub.w	r3, r3, lr
 801165a:	4403      	add	r3, r0
 801165c:	0c12      	lsrs	r2, r2, #16
 801165e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011662:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011666:	b29b      	uxth	r3, r3
 8011668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801166c:	45c1      	cmp	r9, r8
 801166e:	f841 3b04 	str.w	r3, [r1], #4
 8011672:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011676:	d2e6      	bcs.n	8011646 <quorem+0xa4>
 8011678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801167c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011680:	b922      	cbnz	r2, 801168c <quorem+0xea>
 8011682:	3b04      	subs	r3, #4
 8011684:	429d      	cmp	r5, r3
 8011686:	461a      	mov	r2, r3
 8011688:	d30b      	bcc.n	80116a2 <quorem+0x100>
 801168a:	613c      	str	r4, [r7, #16]
 801168c:	3601      	adds	r6, #1
 801168e:	4630      	mov	r0, r6
 8011690:	b003      	add	sp, #12
 8011692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011696:	6812      	ldr	r2, [r2, #0]
 8011698:	3b04      	subs	r3, #4
 801169a:	2a00      	cmp	r2, #0
 801169c:	d1cb      	bne.n	8011636 <quorem+0x94>
 801169e:	3c01      	subs	r4, #1
 80116a0:	e7c6      	b.n	8011630 <quorem+0x8e>
 80116a2:	6812      	ldr	r2, [r2, #0]
 80116a4:	3b04      	subs	r3, #4
 80116a6:	2a00      	cmp	r2, #0
 80116a8:	d1ef      	bne.n	801168a <quorem+0xe8>
 80116aa:	3c01      	subs	r4, #1
 80116ac:	e7ea      	b.n	8011684 <quorem+0xe2>
 80116ae:	2000      	movs	r0, #0
 80116b0:	e7ee      	b.n	8011690 <quorem+0xee>
 80116b2:	0000      	movs	r0, r0
 80116b4:	0000      	movs	r0, r0
	...

080116b8 <_dtoa_r>:
 80116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116bc:	69c7      	ldr	r7, [r0, #28]
 80116be:	b097      	sub	sp, #92	@ 0x5c
 80116c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80116c4:	ec55 4b10 	vmov	r4, r5, d0
 80116c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80116ca:	9107      	str	r1, [sp, #28]
 80116cc:	4681      	mov	r9, r0
 80116ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80116d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80116d2:	b97f      	cbnz	r7, 80116f4 <_dtoa_r+0x3c>
 80116d4:	2010      	movs	r0, #16
 80116d6:	f000 fe09 	bl	80122ec <malloc>
 80116da:	4602      	mov	r2, r0
 80116dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80116e0:	b920      	cbnz	r0, 80116ec <_dtoa_r+0x34>
 80116e2:	4ba9      	ldr	r3, [pc, #676]	@ (8011988 <_dtoa_r+0x2d0>)
 80116e4:	21ef      	movs	r1, #239	@ 0xef
 80116e6:	48a9      	ldr	r0, [pc, #676]	@ (801198c <_dtoa_r+0x2d4>)
 80116e8:	f001 fc5e 	bl	8012fa8 <__assert_func>
 80116ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80116f0:	6007      	str	r7, [r0, #0]
 80116f2:	60c7      	str	r7, [r0, #12]
 80116f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80116f8:	6819      	ldr	r1, [r3, #0]
 80116fa:	b159      	cbz	r1, 8011714 <_dtoa_r+0x5c>
 80116fc:	685a      	ldr	r2, [r3, #4]
 80116fe:	604a      	str	r2, [r1, #4]
 8011700:	2301      	movs	r3, #1
 8011702:	4093      	lsls	r3, r2
 8011704:	608b      	str	r3, [r1, #8]
 8011706:	4648      	mov	r0, r9
 8011708:	f000 fee6 	bl	80124d8 <_Bfree>
 801170c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011710:	2200      	movs	r2, #0
 8011712:	601a      	str	r2, [r3, #0]
 8011714:	1e2b      	subs	r3, r5, #0
 8011716:	bfb9      	ittee	lt
 8011718:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801171c:	9305      	strlt	r3, [sp, #20]
 801171e:	2300      	movge	r3, #0
 8011720:	6033      	strge	r3, [r6, #0]
 8011722:	9f05      	ldr	r7, [sp, #20]
 8011724:	4b9a      	ldr	r3, [pc, #616]	@ (8011990 <_dtoa_r+0x2d8>)
 8011726:	bfbc      	itt	lt
 8011728:	2201      	movlt	r2, #1
 801172a:	6032      	strlt	r2, [r6, #0]
 801172c:	43bb      	bics	r3, r7
 801172e:	d112      	bne.n	8011756 <_dtoa_r+0x9e>
 8011730:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011732:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011736:	6013      	str	r3, [r2, #0]
 8011738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801173c:	4323      	orrs	r3, r4
 801173e:	f000 855a 	beq.w	80121f6 <_dtoa_r+0xb3e>
 8011742:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011744:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80119a4 <_dtoa_r+0x2ec>
 8011748:	2b00      	cmp	r3, #0
 801174a:	f000 855c 	beq.w	8012206 <_dtoa_r+0xb4e>
 801174e:	f10a 0303 	add.w	r3, sl, #3
 8011752:	f000 bd56 	b.w	8012202 <_dtoa_r+0xb4a>
 8011756:	ed9d 7b04 	vldr	d7, [sp, #16]
 801175a:	2200      	movs	r2, #0
 801175c:	ec51 0b17 	vmov	r0, r1, d7
 8011760:	2300      	movs	r3, #0
 8011762:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8011766:	f7ef f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 801176a:	4680      	mov	r8, r0
 801176c:	b158      	cbz	r0, 8011786 <_dtoa_r+0xce>
 801176e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011770:	2301      	movs	r3, #1
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011776:	b113      	cbz	r3, 801177e <_dtoa_r+0xc6>
 8011778:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801177a:	4b86      	ldr	r3, [pc, #536]	@ (8011994 <_dtoa_r+0x2dc>)
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80119a8 <_dtoa_r+0x2f0>
 8011782:	f000 bd40 	b.w	8012206 <_dtoa_r+0xb4e>
 8011786:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801178a:	aa14      	add	r2, sp, #80	@ 0x50
 801178c:	a915      	add	r1, sp, #84	@ 0x54
 801178e:	4648      	mov	r0, r9
 8011790:	f001 f984 	bl	8012a9c <__d2b>
 8011794:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011798:	9002      	str	r0, [sp, #8]
 801179a:	2e00      	cmp	r6, #0
 801179c:	d078      	beq.n	8011890 <_dtoa_r+0x1d8>
 801179e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80117a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80117a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80117ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80117b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80117b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80117b8:	4619      	mov	r1, r3
 80117ba:	2200      	movs	r2, #0
 80117bc:	4b76      	ldr	r3, [pc, #472]	@ (8011998 <_dtoa_r+0x2e0>)
 80117be:	f7ee fd63 	bl	8000288 <__aeabi_dsub>
 80117c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8011970 <_dtoa_r+0x2b8>)
 80117c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c8:	f7ee ff16 	bl	80005f8 <__aeabi_dmul>
 80117cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8011978 <_dtoa_r+0x2c0>)
 80117ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d2:	f7ee fd5b 	bl	800028c <__adddf3>
 80117d6:	4604      	mov	r4, r0
 80117d8:	4630      	mov	r0, r6
 80117da:	460d      	mov	r5, r1
 80117dc:	f7ee fea2 	bl	8000524 <__aeabi_i2d>
 80117e0:	a367      	add	r3, pc, #412	@ (adr r3, 8011980 <_dtoa_r+0x2c8>)
 80117e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e6:	f7ee ff07 	bl	80005f8 <__aeabi_dmul>
 80117ea:	4602      	mov	r2, r0
 80117ec:	460b      	mov	r3, r1
 80117ee:	4620      	mov	r0, r4
 80117f0:	4629      	mov	r1, r5
 80117f2:	f7ee fd4b 	bl	800028c <__adddf3>
 80117f6:	4604      	mov	r4, r0
 80117f8:	460d      	mov	r5, r1
 80117fa:	f7ef f9ad 	bl	8000b58 <__aeabi_d2iz>
 80117fe:	2200      	movs	r2, #0
 8011800:	4607      	mov	r7, r0
 8011802:	2300      	movs	r3, #0
 8011804:	4620      	mov	r0, r4
 8011806:	4629      	mov	r1, r5
 8011808:	f7ef f968 	bl	8000adc <__aeabi_dcmplt>
 801180c:	b140      	cbz	r0, 8011820 <_dtoa_r+0x168>
 801180e:	4638      	mov	r0, r7
 8011810:	f7ee fe88 	bl	8000524 <__aeabi_i2d>
 8011814:	4622      	mov	r2, r4
 8011816:	462b      	mov	r3, r5
 8011818:	f7ef f956 	bl	8000ac8 <__aeabi_dcmpeq>
 801181c:	b900      	cbnz	r0, 8011820 <_dtoa_r+0x168>
 801181e:	3f01      	subs	r7, #1
 8011820:	2f16      	cmp	r7, #22
 8011822:	d852      	bhi.n	80118ca <_dtoa_r+0x212>
 8011824:	4b5d      	ldr	r3, [pc, #372]	@ (801199c <_dtoa_r+0x2e4>)
 8011826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011832:	f7ef f953 	bl	8000adc <__aeabi_dcmplt>
 8011836:	2800      	cmp	r0, #0
 8011838:	d049      	beq.n	80118ce <_dtoa_r+0x216>
 801183a:	3f01      	subs	r7, #1
 801183c:	2300      	movs	r3, #0
 801183e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011840:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011842:	1b9b      	subs	r3, r3, r6
 8011844:	1e5a      	subs	r2, r3, #1
 8011846:	bf45      	ittet	mi
 8011848:	f1c3 0301 	rsbmi	r3, r3, #1
 801184c:	9300      	strmi	r3, [sp, #0]
 801184e:	2300      	movpl	r3, #0
 8011850:	2300      	movmi	r3, #0
 8011852:	9206      	str	r2, [sp, #24]
 8011854:	bf54      	ite	pl
 8011856:	9300      	strpl	r3, [sp, #0]
 8011858:	9306      	strmi	r3, [sp, #24]
 801185a:	2f00      	cmp	r7, #0
 801185c:	db39      	blt.n	80118d2 <_dtoa_r+0x21a>
 801185e:	9b06      	ldr	r3, [sp, #24]
 8011860:	970d      	str	r7, [sp, #52]	@ 0x34
 8011862:	443b      	add	r3, r7
 8011864:	9306      	str	r3, [sp, #24]
 8011866:	2300      	movs	r3, #0
 8011868:	9308      	str	r3, [sp, #32]
 801186a:	9b07      	ldr	r3, [sp, #28]
 801186c:	2b09      	cmp	r3, #9
 801186e:	d863      	bhi.n	8011938 <_dtoa_r+0x280>
 8011870:	2b05      	cmp	r3, #5
 8011872:	bfc4      	itt	gt
 8011874:	3b04      	subgt	r3, #4
 8011876:	9307      	strgt	r3, [sp, #28]
 8011878:	9b07      	ldr	r3, [sp, #28]
 801187a:	f1a3 0302 	sub.w	r3, r3, #2
 801187e:	bfcc      	ite	gt
 8011880:	2400      	movgt	r4, #0
 8011882:	2401      	movle	r4, #1
 8011884:	2b03      	cmp	r3, #3
 8011886:	d863      	bhi.n	8011950 <_dtoa_r+0x298>
 8011888:	e8df f003 	tbb	[pc, r3]
 801188c:	2b375452 	.word	0x2b375452
 8011890:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8011894:	441e      	add	r6, r3
 8011896:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801189a:	2b20      	cmp	r3, #32
 801189c:	bfc1      	itttt	gt
 801189e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80118a2:	409f      	lslgt	r7, r3
 80118a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80118a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80118ac:	bfd6      	itet	le
 80118ae:	f1c3 0320 	rsble	r3, r3, #32
 80118b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80118b6:	fa04 f003 	lslle.w	r0, r4, r3
 80118ba:	f7ee fe23 	bl	8000504 <__aeabi_ui2d>
 80118be:	2201      	movs	r2, #1
 80118c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80118c4:	3e01      	subs	r6, #1
 80118c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80118c8:	e776      	b.n	80117b8 <_dtoa_r+0x100>
 80118ca:	2301      	movs	r3, #1
 80118cc:	e7b7      	b.n	801183e <_dtoa_r+0x186>
 80118ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80118d0:	e7b6      	b.n	8011840 <_dtoa_r+0x188>
 80118d2:	9b00      	ldr	r3, [sp, #0]
 80118d4:	1bdb      	subs	r3, r3, r7
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	427b      	negs	r3, r7
 80118da:	9308      	str	r3, [sp, #32]
 80118dc:	2300      	movs	r3, #0
 80118de:	930d      	str	r3, [sp, #52]	@ 0x34
 80118e0:	e7c3      	b.n	801186a <_dtoa_r+0x1b2>
 80118e2:	2301      	movs	r3, #1
 80118e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80118e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118e8:	eb07 0b03 	add.w	fp, r7, r3
 80118ec:	f10b 0301 	add.w	r3, fp, #1
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	9303      	str	r3, [sp, #12]
 80118f4:	bfb8      	it	lt
 80118f6:	2301      	movlt	r3, #1
 80118f8:	e006      	b.n	8011908 <_dtoa_r+0x250>
 80118fa:	2301      	movs	r3, #1
 80118fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80118fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011900:	2b00      	cmp	r3, #0
 8011902:	dd28      	ble.n	8011956 <_dtoa_r+0x29e>
 8011904:	469b      	mov	fp, r3
 8011906:	9303      	str	r3, [sp, #12]
 8011908:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801190c:	2100      	movs	r1, #0
 801190e:	2204      	movs	r2, #4
 8011910:	f102 0514 	add.w	r5, r2, #20
 8011914:	429d      	cmp	r5, r3
 8011916:	d926      	bls.n	8011966 <_dtoa_r+0x2ae>
 8011918:	6041      	str	r1, [r0, #4]
 801191a:	4648      	mov	r0, r9
 801191c:	f000 fd9c 	bl	8012458 <_Balloc>
 8011920:	4682      	mov	sl, r0
 8011922:	2800      	cmp	r0, #0
 8011924:	d142      	bne.n	80119ac <_dtoa_r+0x2f4>
 8011926:	4b1e      	ldr	r3, [pc, #120]	@ (80119a0 <_dtoa_r+0x2e8>)
 8011928:	4602      	mov	r2, r0
 801192a:	f240 11af 	movw	r1, #431	@ 0x1af
 801192e:	e6da      	b.n	80116e6 <_dtoa_r+0x2e>
 8011930:	2300      	movs	r3, #0
 8011932:	e7e3      	b.n	80118fc <_dtoa_r+0x244>
 8011934:	2300      	movs	r3, #0
 8011936:	e7d5      	b.n	80118e4 <_dtoa_r+0x22c>
 8011938:	2401      	movs	r4, #1
 801193a:	2300      	movs	r3, #0
 801193c:	9307      	str	r3, [sp, #28]
 801193e:	9409      	str	r4, [sp, #36]	@ 0x24
 8011940:	f04f 3bff 	mov.w	fp, #4294967295
 8011944:	2200      	movs	r2, #0
 8011946:	f8cd b00c 	str.w	fp, [sp, #12]
 801194a:	2312      	movs	r3, #18
 801194c:	920c      	str	r2, [sp, #48]	@ 0x30
 801194e:	e7db      	b.n	8011908 <_dtoa_r+0x250>
 8011950:	2301      	movs	r3, #1
 8011952:	9309      	str	r3, [sp, #36]	@ 0x24
 8011954:	e7f4      	b.n	8011940 <_dtoa_r+0x288>
 8011956:	f04f 0b01 	mov.w	fp, #1
 801195a:	f8cd b00c 	str.w	fp, [sp, #12]
 801195e:	465b      	mov	r3, fp
 8011960:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011964:	e7d0      	b.n	8011908 <_dtoa_r+0x250>
 8011966:	3101      	adds	r1, #1
 8011968:	0052      	lsls	r2, r2, #1
 801196a:	e7d1      	b.n	8011910 <_dtoa_r+0x258>
 801196c:	f3af 8000 	nop.w
 8011970:	636f4361 	.word	0x636f4361
 8011974:	3fd287a7 	.word	0x3fd287a7
 8011978:	8b60c8b3 	.word	0x8b60c8b3
 801197c:	3fc68a28 	.word	0x3fc68a28
 8011980:	509f79fb 	.word	0x509f79fb
 8011984:	3fd34413 	.word	0x3fd34413
 8011988:	08013dc5 	.word	0x08013dc5
 801198c:	08013ddc 	.word	0x08013ddc
 8011990:	7ff00000 	.word	0x7ff00000
 8011994:	08013d95 	.word	0x08013d95
 8011998:	3ff80000 	.word	0x3ff80000
 801199c:	08013f30 	.word	0x08013f30
 80119a0:	08013e34 	.word	0x08013e34
 80119a4:	08013dc1 	.word	0x08013dc1
 80119a8:	08013d94 	.word	0x08013d94
 80119ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80119b0:	6018      	str	r0, [r3, #0]
 80119b2:	9b03      	ldr	r3, [sp, #12]
 80119b4:	2b0e      	cmp	r3, #14
 80119b6:	f200 80a1 	bhi.w	8011afc <_dtoa_r+0x444>
 80119ba:	2c00      	cmp	r4, #0
 80119bc:	f000 809e 	beq.w	8011afc <_dtoa_r+0x444>
 80119c0:	2f00      	cmp	r7, #0
 80119c2:	dd33      	ble.n	8011a2c <_dtoa_r+0x374>
 80119c4:	4b9c      	ldr	r3, [pc, #624]	@ (8011c38 <_dtoa_r+0x580>)
 80119c6:	f007 020f 	and.w	r2, r7, #15
 80119ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119ce:	ed93 7b00 	vldr	d7, [r3]
 80119d2:	05f8      	lsls	r0, r7, #23
 80119d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80119d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80119dc:	d516      	bpl.n	8011a0c <_dtoa_r+0x354>
 80119de:	4b97      	ldr	r3, [pc, #604]	@ (8011c3c <_dtoa_r+0x584>)
 80119e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80119e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80119e8:	f7ee ff30 	bl	800084c <__aeabi_ddiv>
 80119ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119f0:	f004 040f 	and.w	r4, r4, #15
 80119f4:	2603      	movs	r6, #3
 80119f6:	4d91      	ldr	r5, [pc, #580]	@ (8011c3c <_dtoa_r+0x584>)
 80119f8:	b954      	cbnz	r4, 8011a10 <_dtoa_r+0x358>
 80119fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80119fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a02:	f7ee ff23 	bl	800084c <__aeabi_ddiv>
 8011a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a0a:	e028      	b.n	8011a5e <_dtoa_r+0x3a6>
 8011a0c:	2602      	movs	r6, #2
 8011a0e:	e7f2      	b.n	80119f6 <_dtoa_r+0x33e>
 8011a10:	07e1      	lsls	r1, r4, #31
 8011a12:	d508      	bpl.n	8011a26 <_dtoa_r+0x36e>
 8011a14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011a18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a1c:	f7ee fdec 	bl	80005f8 <__aeabi_dmul>
 8011a20:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011a24:	3601      	adds	r6, #1
 8011a26:	1064      	asrs	r4, r4, #1
 8011a28:	3508      	adds	r5, #8
 8011a2a:	e7e5      	b.n	80119f8 <_dtoa_r+0x340>
 8011a2c:	f000 80af 	beq.w	8011b8e <_dtoa_r+0x4d6>
 8011a30:	427c      	negs	r4, r7
 8011a32:	4b81      	ldr	r3, [pc, #516]	@ (8011c38 <_dtoa_r+0x580>)
 8011a34:	4d81      	ldr	r5, [pc, #516]	@ (8011c3c <_dtoa_r+0x584>)
 8011a36:	f004 020f 	and.w	r2, r4, #15
 8011a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011a46:	f7ee fdd7 	bl	80005f8 <__aeabi_dmul>
 8011a4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a4e:	1124      	asrs	r4, r4, #4
 8011a50:	2300      	movs	r3, #0
 8011a52:	2602      	movs	r6, #2
 8011a54:	2c00      	cmp	r4, #0
 8011a56:	f040 808f 	bne.w	8011b78 <_dtoa_r+0x4c0>
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d1d3      	bne.n	8011a06 <_dtoa_r+0x34e>
 8011a5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a60:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f000 8094 	beq.w	8011b92 <_dtoa_r+0x4da>
 8011a6a:	4b75      	ldr	r3, [pc, #468]	@ (8011c40 <_dtoa_r+0x588>)
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	4620      	mov	r0, r4
 8011a70:	4629      	mov	r1, r5
 8011a72:	f7ef f833 	bl	8000adc <__aeabi_dcmplt>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	f000 808b 	beq.w	8011b92 <_dtoa_r+0x4da>
 8011a7c:	9b03      	ldr	r3, [sp, #12]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f000 8087 	beq.w	8011b92 <_dtoa_r+0x4da>
 8011a84:	f1bb 0f00 	cmp.w	fp, #0
 8011a88:	dd34      	ble.n	8011af4 <_dtoa_r+0x43c>
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	4b6d      	ldr	r3, [pc, #436]	@ (8011c44 <_dtoa_r+0x58c>)
 8011a8e:	2200      	movs	r2, #0
 8011a90:	4629      	mov	r1, r5
 8011a92:	f7ee fdb1 	bl	80005f8 <__aeabi_dmul>
 8011a96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a9a:	f107 38ff 	add.w	r8, r7, #4294967295
 8011a9e:	3601      	adds	r6, #1
 8011aa0:	465c      	mov	r4, fp
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f7ee fd3e 	bl	8000524 <__aeabi_i2d>
 8011aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011aac:	f7ee fda4 	bl	80005f8 <__aeabi_dmul>
 8011ab0:	4b65      	ldr	r3, [pc, #404]	@ (8011c48 <_dtoa_r+0x590>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f7ee fbea 	bl	800028c <__adddf3>
 8011ab8:	4605      	mov	r5, r0
 8011aba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011abe:	2c00      	cmp	r4, #0
 8011ac0:	d16a      	bne.n	8011b98 <_dtoa_r+0x4e0>
 8011ac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ac6:	4b61      	ldr	r3, [pc, #388]	@ (8011c4c <_dtoa_r+0x594>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	f7ee fbdd 	bl	8000288 <__aeabi_dsub>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ad6:	462a      	mov	r2, r5
 8011ad8:	4633      	mov	r3, r6
 8011ada:	f7ef f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	f040 8298 	bne.w	8012014 <_dtoa_r+0x95c>
 8011ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ae8:	462a      	mov	r2, r5
 8011aea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011aee:	f7ee fff5 	bl	8000adc <__aeabi_dcmplt>
 8011af2:	bb38      	cbnz	r0, 8011b44 <_dtoa_r+0x48c>
 8011af4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011af8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011afc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	f2c0 8157 	blt.w	8011db2 <_dtoa_r+0x6fa>
 8011b04:	2f0e      	cmp	r7, #14
 8011b06:	f300 8154 	bgt.w	8011db2 <_dtoa_r+0x6fa>
 8011b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8011c38 <_dtoa_r+0x580>)
 8011b0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b10:	ed93 7b00 	vldr	d7, [r3]
 8011b14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	ed8d 7b00 	vstr	d7, [sp]
 8011b1c:	f280 80e5 	bge.w	8011cea <_dtoa_r+0x632>
 8011b20:	9b03      	ldr	r3, [sp, #12]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f300 80e1 	bgt.w	8011cea <_dtoa_r+0x632>
 8011b28:	d10c      	bne.n	8011b44 <_dtoa_r+0x48c>
 8011b2a:	4b48      	ldr	r3, [pc, #288]	@ (8011c4c <_dtoa_r+0x594>)
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	ec51 0b17 	vmov	r0, r1, d7
 8011b32:	f7ee fd61 	bl	80005f8 <__aeabi_dmul>
 8011b36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b3a:	f7ee ffe3 	bl	8000b04 <__aeabi_dcmpge>
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	f000 8266 	beq.w	8012010 <_dtoa_r+0x958>
 8011b44:	2400      	movs	r4, #0
 8011b46:	4625      	mov	r5, r4
 8011b48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b4a:	4656      	mov	r6, sl
 8011b4c:	ea6f 0803 	mvn.w	r8, r3
 8011b50:	2700      	movs	r7, #0
 8011b52:	4621      	mov	r1, r4
 8011b54:	4648      	mov	r0, r9
 8011b56:	f000 fcbf 	bl	80124d8 <_Bfree>
 8011b5a:	2d00      	cmp	r5, #0
 8011b5c:	f000 80bd 	beq.w	8011cda <_dtoa_r+0x622>
 8011b60:	b12f      	cbz	r7, 8011b6e <_dtoa_r+0x4b6>
 8011b62:	42af      	cmp	r7, r5
 8011b64:	d003      	beq.n	8011b6e <_dtoa_r+0x4b6>
 8011b66:	4639      	mov	r1, r7
 8011b68:	4648      	mov	r0, r9
 8011b6a:	f000 fcb5 	bl	80124d8 <_Bfree>
 8011b6e:	4629      	mov	r1, r5
 8011b70:	4648      	mov	r0, r9
 8011b72:	f000 fcb1 	bl	80124d8 <_Bfree>
 8011b76:	e0b0      	b.n	8011cda <_dtoa_r+0x622>
 8011b78:	07e2      	lsls	r2, r4, #31
 8011b7a:	d505      	bpl.n	8011b88 <_dtoa_r+0x4d0>
 8011b7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b80:	f7ee fd3a 	bl	80005f8 <__aeabi_dmul>
 8011b84:	3601      	adds	r6, #1
 8011b86:	2301      	movs	r3, #1
 8011b88:	1064      	asrs	r4, r4, #1
 8011b8a:	3508      	adds	r5, #8
 8011b8c:	e762      	b.n	8011a54 <_dtoa_r+0x39c>
 8011b8e:	2602      	movs	r6, #2
 8011b90:	e765      	b.n	8011a5e <_dtoa_r+0x3a6>
 8011b92:	9c03      	ldr	r4, [sp, #12]
 8011b94:	46b8      	mov	r8, r7
 8011b96:	e784      	b.n	8011aa2 <_dtoa_r+0x3ea>
 8011b98:	4b27      	ldr	r3, [pc, #156]	@ (8011c38 <_dtoa_r+0x580>)
 8011b9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ba4:	4454      	add	r4, sl
 8011ba6:	2900      	cmp	r1, #0
 8011ba8:	d054      	beq.n	8011c54 <_dtoa_r+0x59c>
 8011baa:	4929      	ldr	r1, [pc, #164]	@ (8011c50 <_dtoa_r+0x598>)
 8011bac:	2000      	movs	r0, #0
 8011bae:	f7ee fe4d 	bl	800084c <__aeabi_ddiv>
 8011bb2:	4633      	mov	r3, r6
 8011bb4:	462a      	mov	r2, r5
 8011bb6:	f7ee fb67 	bl	8000288 <__aeabi_dsub>
 8011bba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011bbe:	4656      	mov	r6, sl
 8011bc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bc4:	f7ee ffc8 	bl	8000b58 <__aeabi_d2iz>
 8011bc8:	4605      	mov	r5, r0
 8011bca:	f7ee fcab 	bl	8000524 <__aeabi_i2d>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bd6:	f7ee fb57 	bl	8000288 <__aeabi_dsub>
 8011bda:	3530      	adds	r5, #48	@ 0x30
 8011bdc:	4602      	mov	r2, r0
 8011bde:	460b      	mov	r3, r1
 8011be0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011be4:	f806 5b01 	strb.w	r5, [r6], #1
 8011be8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011bec:	f7ee ff76 	bl	8000adc <__aeabi_dcmplt>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d172      	bne.n	8011cda <_dtoa_r+0x622>
 8011bf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bf8:	4911      	ldr	r1, [pc, #68]	@ (8011c40 <_dtoa_r+0x588>)
 8011bfa:	2000      	movs	r0, #0
 8011bfc:	f7ee fb44 	bl	8000288 <__aeabi_dsub>
 8011c00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011c04:	f7ee ff6a 	bl	8000adc <__aeabi_dcmplt>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	f040 80b4 	bne.w	8011d76 <_dtoa_r+0x6be>
 8011c0e:	42a6      	cmp	r6, r4
 8011c10:	f43f af70 	beq.w	8011af4 <_dtoa_r+0x43c>
 8011c14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011c18:	4b0a      	ldr	r3, [pc, #40]	@ (8011c44 <_dtoa_r+0x58c>)
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	f7ee fcec 	bl	80005f8 <__aeabi_dmul>
 8011c20:	4b08      	ldr	r3, [pc, #32]	@ (8011c44 <_dtoa_r+0x58c>)
 8011c22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011c26:	2200      	movs	r2, #0
 8011c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c2c:	f7ee fce4 	bl	80005f8 <__aeabi_dmul>
 8011c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c34:	e7c4      	b.n	8011bc0 <_dtoa_r+0x508>
 8011c36:	bf00      	nop
 8011c38:	08013f30 	.word	0x08013f30
 8011c3c:	08013f08 	.word	0x08013f08
 8011c40:	3ff00000 	.word	0x3ff00000
 8011c44:	40240000 	.word	0x40240000
 8011c48:	401c0000 	.word	0x401c0000
 8011c4c:	40140000 	.word	0x40140000
 8011c50:	3fe00000 	.word	0x3fe00000
 8011c54:	4631      	mov	r1, r6
 8011c56:	4628      	mov	r0, r5
 8011c58:	f7ee fcce 	bl	80005f8 <__aeabi_dmul>
 8011c5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011c60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011c62:	4656      	mov	r6, sl
 8011c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c68:	f7ee ff76 	bl	8000b58 <__aeabi_d2iz>
 8011c6c:	4605      	mov	r5, r0
 8011c6e:	f7ee fc59 	bl	8000524 <__aeabi_i2d>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c7a:	f7ee fb05 	bl	8000288 <__aeabi_dsub>
 8011c7e:	3530      	adds	r5, #48	@ 0x30
 8011c80:	f806 5b01 	strb.w	r5, [r6], #1
 8011c84:	4602      	mov	r2, r0
 8011c86:	460b      	mov	r3, r1
 8011c88:	42a6      	cmp	r6, r4
 8011c8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011c8e:	f04f 0200 	mov.w	r2, #0
 8011c92:	d124      	bne.n	8011cde <_dtoa_r+0x626>
 8011c94:	4baf      	ldr	r3, [pc, #700]	@ (8011f54 <_dtoa_r+0x89c>)
 8011c96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011c9a:	f7ee faf7 	bl	800028c <__adddf3>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ca6:	f7ee ff37 	bl	8000b18 <__aeabi_dcmpgt>
 8011caa:	2800      	cmp	r0, #0
 8011cac:	d163      	bne.n	8011d76 <_dtoa_r+0x6be>
 8011cae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011cb2:	49a8      	ldr	r1, [pc, #672]	@ (8011f54 <_dtoa_r+0x89c>)
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	f7ee fae7 	bl	8000288 <__aeabi_dsub>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011cc2:	f7ee ff0b 	bl	8000adc <__aeabi_dcmplt>
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	f43f af14 	beq.w	8011af4 <_dtoa_r+0x43c>
 8011ccc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011cce:	1e73      	subs	r3, r6, #1
 8011cd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011cd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011cd6:	2b30      	cmp	r3, #48	@ 0x30
 8011cd8:	d0f8      	beq.n	8011ccc <_dtoa_r+0x614>
 8011cda:	4647      	mov	r7, r8
 8011cdc:	e03b      	b.n	8011d56 <_dtoa_r+0x69e>
 8011cde:	4b9e      	ldr	r3, [pc, #632]	@ (8011f58 <_dtoa_r+0x8a0>)
 8011ce0:	f7ee fc8a 	bl	80005f8 <__aeabi_dmul>
 8011ce4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ce8:	e7bc      	b.n	8011c64 <_dtoa_r+0x5ac>
 8011cea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011cee:	4656      	mov	r6, sl
 8011cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	f7ee fda8 	bl	800084c <__aeabi_ddiv>
 8011cfc:	f7ee ff2c 	bl	8000b58 <__aeabi_d2iz>
 8011d00:	4680      	mov	r8, r0
 8011d02:	f7ee fc0f 	bl	8000524 <__aeabi_i2d>
 8011d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d0a:	f7ee fc75 	bl	80005f8 <__aeabi_dmul>
 8011d0e:	4602      	mov	r2, r0
 8011d10:	460b      	mov	r3, r1
 8011d12:	4620      	mov	r0, r4
 8011d14:	4629      	mov	r1, r5
 8011d16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011d1a:	f7ee fab5 	bl	8000288 <__aeabi_dsub>
 8011d1e:	f806 4b01 	strb.w	r4, [r6], #1
 8011d22:	9d03      	ldr	r5, [sp, #12]
 8011d24:	eba6 040a 	sub.w	r4, r6, sl
 8011d28:	42a5      	cmp	r5, r4
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	d133      	bne.n	8011d98 <_dtoa_r+0x6e0>
 8011d30:	f7ee faac 	bl	800028c <__adddf3>
 8011d34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d38:	4604      	mov	r4, r0
 8011d3a:	460d      	mov	r5, r1
 8011d3c:	f7ee feec 	bl	8000b18 <__aeabi_dcmpgt>
 8011d40:	b9c0      	cbnz	r0, 8011d74 <_dtoa_r+0x6bc>
 8011d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d46:	4620      	mov	r0, r4
 8011d48:	4629      	mov	r1, r5
 8011d4a:	f7ee febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d4e:	b110      	cbz	r0, 8011d56 <_dtoa_r+0x69e>
 8011d50:	f018 0f01 	tst.w	r8, #1
 8011d54:	d10e      	bne.n	8011d74 <_dtoa_r+0x6bc>
 8011d56:	9902      	ldr	r1, [sp, #8]
 8011d58:	4648      	mov	r0, r9
 8011d5a:	f000 fbbd 	bl	80124d8 <_Bfree>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	7033      	strb	r3, [r6, #0]
 8011d62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d64:	3701      	adds	r7, #1
 8011d66:	601f      	str	r7, [r3, #0]
 8011d68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f000 824b 	beq.w	8012206 <_dtoa_r+0xb4e>
 8011d70:	601e      	str	r6, [r3, #0]
 8011d72:	e248      	b.n	8012206 <_dtoa_r+0xb4e>
 8011d74:	46b8      	mov	r8, r7
 8011d76:	4633      	mov	r3, r6
 8011d78:	461e      	mov	r6, r3
 8011d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d7e:	2a39      	cmp	r2, #57	@ 0x39
 8011d80:	d106      	bne.n	8011d90 <_dtoa_r+0x6d8>
 8011d82:	459a      	cmp	sl, r3
 8011d84:	d1f8      	bne.n	8011d78 <_dtoa_r+0x6c0>
 8011d86:	2230      	movs	r2, #48	@ 0x30
 8011d88:	f108 0801 	add.w	r8, r8, #1
 8011d8c:	f88a 2000 	strb.w	r2, [sl]
 8011d90:	781a      	ldrb	r2, [r3, #0]
 8011d92:	3201      	adds	r2, #1
 8011d94:	701a      	strb	r2, [r3, #0]
 8011d96:	e7a0      	b.n	8011cda <_dtoa_r+0x622>
 8011d98:	4b6f      	ldr	r3, [pc, #444]	@ (8011f58 <_dtoa_r+0x8a0>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f7ee fc2c 	bl	80005f8 <__aeabi_dmul>
 8011da0:	2200      	movs	r2, #0
 8011da2:	2300      	movs	r3, #0
 8011da4:	4604      	mov	r4, r0
 8011da6:	460d      	mov	r5, r1
 8011da8:	f7ee fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d09f      	beq.n	8011cf0 <_dtoa_r+0x638>
 8011db0:	e7d1      	b.n	8011d56 <_dtoa_r+0x69e>
 8011db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011db4:	2a00      	cmp	r2, #0
 8011db6:	f000 80ea 	beq.w	8011f8e <_dtoa_r+0x8d6>
 8011dba:	9a07      	ldr	r2, [sp, #28]
 8011dbc:	2a01      	cmp	r2, #1
 8011dbe:	f300 80cd 	bgt.w	8011f5c <_dtoa_r+0x8a4>
 8011dc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011dc4:	2a00      	cmp	r2, #0
 8011dc6:	f000 80c1 	beq.w	8011f4c <_dtoa_r+0x894>
 8011dca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011dce:	9c08      	ldr	r4, [sp, #32]
 8011dd0:	9e00      	ldr	r6, [sp, #0]
 8011dd2:	9a00      	ldr	r2, [sp, #0]
 8011dd4:	441a      	add	r2, r3
 8011dd6:	9200      	str	r2, [sp, #0]
 8011dd8:	9a06      	ldr	r2, [sp, #24]
 8011dda:	2101      	movs	r1, #1
 8011ddc:	441a      	add	r2, r3
 8011dde:	4648      	mov	r0, r9
 8011de0:	9206      	str	r2, [sp, #24]
 8011de2:	f000 fc2d 	bl	8012640 <__i2b>
 8011de6:	4605      	mov	r5, r0
 8011de8:	b166      	cbz	r6, 8011e04 <_dtoa_r+0x74c>
 8011dea:	9b06      	ldr	r3, [sp, #24]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	dd09      	ble.n	8011e04 <_dtoa_r+0x74c>
 8011df0:	42b3      	cmp	r3, r6
 8011df2:	9a00      	ldr	r2, [sp, #0]
 8011df4:	bfa8      	it	ge
 8011df6:	4633      	movge	r3, r6
 8011df8:	1ad2      	subs	r2, r2, r3
 8011dfa:	9200      	str	r2, [sp, #0]
 8011dfc:	9a06      	ldr	r2, [sp, #24]
 8011dfe:	1af6      	subs	r6, r6, r3
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	9306      	str	r3, [sp, #24]
 8011e04:	9b08      	ldr	r3, [sp, #32]
 8011e06:	b30b      	cbz	r3, 8011e4c <_dtoa_r+0x794>
 8011e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	f000 80c6 	beq.w	8011f9c <_dtoa_r+0x8e4>
 8011e10:	2c00      	cmp	r4, #0
 8011e12:	f000 80c0 	beq.w	8011f96 <_dtoa_r+0x8de>
 8011e16:	4629      	mov	r1, r5
 8011e18:	4622      	mov	r2, r4
 8011e1a:	4648      	mov	r0, r9
 8011e1c:	f000 fcc8 	bl	80127b0 <__pow5mult>
 8011e20:	9a02      	ldr	r2, [sp, #8]
 8011e22:	4601      	mov	r1, r0
 8011e24:	4605      	mov	r5, r0
 8011e26:	4648      	mov	r0, r9
 8011e28:	f000 fc20 	bl	801266c <__multiply>
 8011e2c:	9902      	ldr	r1, [sp, #8]
 8011e2e:	4680      	mov	r8, r0
 8011e30:	4648      	mov	r0, r9
 8011e32:	f000 fb51 	bl	80124d8 <_Bfree>
 8011e36:	9b08      	ldr	r3, [sp, #32]
 8011e38:	1b1b      	subs	r3, r3, r4
 8011e3a:	9308      	str	r3, [sp, #32]
 8011e3c:	f000 80b1 	beq.w	8011fa2 <_dtoa_r+0x8ea>
 8011e40:	9a08      	ldr	r2, [sp, #32]
 8011e42:	4641      	mov	r1, r8
 8011e44:	4648      	mov	r0, r9
 8011e46:	f000 fcb3 	bl	80127b0 <__pow5mult>
 8011e4a:	9002      	str	r0, [sp, #8]
 8011e4c:	2101      	movs	r1, #1
 8011e4e:	4648      	mov	r0, r9
 8011e50:	f000 fbf6 	bl	8012640 <__i2b>
 8011e54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e56:	4604      	mov	r4, r0
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	f000 81d8 	beq.w	801220e <_dtoa_r+0xb56>
 8011e5e:	461a      	mov	r2, r3
 8011e60:	4601      	mov	r1, r0
 8011e62:	4648      	mov	r0, r9
 8011e64:	f000 fca4 	bl	80127b0 <__pow5mult>
 8011e68:	9b07      	ldr	r3, [sp, #28]
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	f300 809f 	bgt.w	8011fb0 <_dtoa_r+0x8f8>
 8011e72:	9b04      	ldr	r3, [sp, #16]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f040 8097 	bne.w	8011fa8 <_dtoa_r+0x8f0>
 8011e7a:	9b05      	ldr	r3, [sp, #20]
 8011e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	f040 8093 	bne.w	8011fac <_dtoa_r+0x8f4>
 8011e86:	9b05      	ldr	r3, [sp, #20]
 8011e88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011e8c:	0d1b      	lsrs	r3, r3, #20
 8011e8e:	051b      	lsls	r3, r3, #20
 8011e90:	b133      	cbz	r3, 8011ea0 <_dtoa_r+0x7e8>
 8011e92:	9b00      	ldr	r3, [sp, #0]
 8011e94:	3301      	adds	r3, #1
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	9b06      	ldr	r3, [sp, #24]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	9306      	str	r3, [sp, #24]
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	9308      	str	r3, [sp, #32]
 8011ea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f000 81b8 	beq.w	801221a <_dtoa_r+0xb62>
 8011eaa:	6923      	ldr	r3, [r4, #16]
 8011eac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011eb0:	6918      	ldr	r0, [r3, #16]
 8011eb2:	f000 fb79 	bl	80125a8 <__hi0bits>
 8011eb6:	f1c0 0020 	rsb	r0, r0, #32
 8011eba:	9b06      	ldr	r3, [sp, #24]
 8011ebc:	4418      	add	r0, r3
 8011ebe:	f010 001f 	ands.w	r0, r0, #31
 8011ec2:	f000 8082 	beq.w	8011fca <_dtoa_r+0x912>
 8011ec6:	f1c0 0320 	rsb	r3, r0, #32
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	dd73      	ble.n	8011fb6 <_dtoa_r+0x8fe>
 8011ece:	9b00      	ldr	r3, [sp, #0]
 8011ed0:	f1c0 001c 	rsb	r0, r0, #28
 8011ed4:	4403      	add	r3, r0
 8011ed6:	9300      	str	r3, [sp, #0]
 8011ed8:	9b06      	ldr	r3, [sp, #24]
 8011eda:	4403      	add	r3, r0
 8011edc:	4406      	add	r6, r0
 8011ede:	9306      	str	r3, [sp, #24]
 8011ee0:	9b00      	ldr	r3, [sp, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	dd05      	ble.n	8011ef2 <_dtoa_r+0x83a>
 8011ee6:	9902      	ldr	r1, [sp, #8]
 8011ee8:	461a      	mov	r2, r3
 8011eea:	4648      	mov	r0, r9
 8011eec:	f000 fcba 	bl	8012864 <__lshift>
 8011ef0:	9002      	str	r0, [sp, #8]
 8011ef2:	9b06      	ldr	r3, [sp, #24]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	dd05      	ble.n	8011f04 <_dtoa_r+0x84c>
 8011ef8:	4621      	mov	r1, r4
 8011efa:	461a      	mov	r2, r3
 8011efc:	4648      	mov	r0, r9
 8011efe:	f000 fcb1 	bl	8012864 <__lshift>
 8011f02:	4604      	mov	r4, r0
 8011f04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d061      	beq.n	8011fce <_dtoa_r+0x916>
 8011f0a:	9802      	ldr	r0, [sp, #8]
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	f000 fd15 	bl	801293c <__mcmp>
 8011f12:	2800      	cmp	r0, #0
 8011f14:	da5b      	bge.n	8011fce <_dtoa_r+0x916>
 8011f16:	2300      	movs	r3, #0
 8011f18:	9902      	ldr	r1, [sp, #8]
 8011f1a:	220a      	movs	r2, #10
 8011f1c:	4648      	mov	r0, r9
 8011f1e:	f000 fafd 	bl	801251c <__multadd>
 8011f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f24:	9002      	str	r0, [sp, #8]
 8011f26:	f107 38ff 	add.w	r8, r7, #4294967295
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 8177 	beq.w	801221e <_dtoa_r+0xb66>
 8011f30:	4629      	mov	r1, r5
 8011f32:	2300      	movs	r3, #0
 8011f34:	220a      	movs	r2, #10
 8011f36:	4648      	mov	r0, r9
 8011f38:	f000 faf0 	bl	801251c <__multadd>
 8011f3c:	f1bb 0f00 	cmp.w	fp, #0
 8011f40:	4605      	mov	r5, r0
 8011f42:	dc6f      	bgt.n	8012024 <_dtoa_r+0x96c>
 8011f44:	9b07      	ldr	r3, [sp, #28]
 8011f46:	2b02      	cmp	r3, #2
 8011f48:	dc49      	bgt.n	8011fde <_dtoa_r+0x926>
 8011f4a:	e06b      	b.n	8012024 <_dtoa_r+0x96c>
 8011f4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011f4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011f52:	e73c      	b.n	8011dce <_dtoa_r+0x716>
 8011f54:	3fe00000 	.word	0x3fe00000
 8011f58:	40240000 	.word	0x40240000
 8011f5c:	9b03      	ldr	r3, [sp, #12]
 8011f5e:	1e5c      	subs	r4, r3, #1
 8011f60:	9b08      	ldr	r3, [sp, #32]
 8011f62:	42a3      	cmp	r3, r4
 8011f64:	db09      	blt.n	8011f7a <_dtoa_r+0x8c2>
 8011f66:	1b1c      	subs	r4, r3, r4
 8011f68:	9b03      	ldr	r3, [sp, #12]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	f6bf af30 	bge.w	8011dd0 <_dtoa_r+0x718>
 8011f70:	9b00      	ldr	r3, [sp, #0]
 8011f72:	9a03      	ldr	r2, [sp, #12]
 8011f74:	1a9e      	subs	r6, r3, r2
 8011f76:	2300      	movs	r3, #0
 8011f78:	e72b      	b.n	8011dd2 <_dtoa_r+0x71a>
 8011f7a:	9b08      	ldr	r3, [sp, #32]
 8011f7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f7e:	9408      	str	r4, [sp, #32]
 8011f80:	1ae3      	subs	r3, r4, r3
 8011f82:	441a      	add	r2, r3
 8011f84:	9e00      	ldr	r6, [sp, #0]
 8011f86:	9b03      	ldr	r3, [sp, #12]
 8011f88:	920d      	str	r2, [sp, #52]	@ 0x34
 8011f8a:	2400      	movs	r4, #0
 8011f8c:	e721      	b.n	8011dd2 <_dtoa_r+0x71a>
 8011f8e:	9c08      	ldr	r4, [sp, #32]
 8011f90:	9e00      	ldr	r6, [sp, #0]
 8011f92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011f94:	e728      	b.n	8011de8 <_dtoa_r+0x730>
 8011f96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011f9a:	e751      	b.n	8011e40 <_dtoa_r+0x788>
 8011f9c:	9a08      	ldr	r2, [sp, #32]
 8011f9e:	9902      	ldr	r1, [sp, #8]
 8011fa0:	e750      	b.n	8011e44 <_dtoa_r+0x78c>
 8011fa2:	f8cd 8008 	str.w	r8, [sp, #8]
 8011fa6:	e751      	b.n	8011e4c <_dtoa_r+0x794>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	e779      	b.n	8011ea0 <_dtoa_r+0x7e8>
 8011fac:	9b04      	ldr	r3, [sp, #16]
 8011fae:	e777      	b.n	8011ea0 <_dtoa_r+0x7e8>
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	9308      	str	r3, [sp, #32]
 8011fb4:	e779      	b.n	8011eaa <_dtoa_r+0x7f2>
 8011fb6:	d093      	beq.n	8011ee0 <_dtoa_r+0x828>
 8011fb8:	9a00      	ldr	r2, [sp, #0]
 8011fba:	331c      	adds	r3, #28
 8011fbc:	441a      	add	r2, r3
 8011fbe:	9200      	str	r2, [sp, #0]
 8011fc0:	9a06      	ldr	r2, [sp, #24]
 8011fc2:	441a      	add	r2, r3
 8011fc4:	441e      	add	r6, r3
 8011fc6:	9206      	str	r2, [sp, #24]
 8011fc8:	e78a      	b.n	8011ee0 <_dtoa_r+0x828>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	e7f4      	b.n	8011fb8 <_dtoa_r+0x900>
 8011fce:	9b03      	ldr	r3, [sp, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	46b8      	mov	r8, r7
 8011fd4:	dc20      	bgt.n	8012018 <_dtoa_r+0x960>
 8011fd6:	469b      	mov	fp, r3
 8011fd8:	9b07      	ldr	r3, [sp, #28]
 8011fda:	2b02      	cmp	r3, #2
 8011fdc:	dd1e      	ble.n	801201c <_dtoa_r+0x964>
 8011fde:	f1bb 0f00 	cmp.w	fp, #0
 8011fe2:	f47f adb1 	bne.w	8011b48 <_dtoa_r+0x490>
 8011fe6:	4621      	mov	r1, r4
 8011fe8:	465b      	mov	r3, fp
 8011fea:	2205      	movs	r2, #5
 8011fec:	4648      	mov	r0, r9
 8011fee:	f000 fa95 	bl	801251c <__multadd>
 8011ff2:	4601      	mov	r1, r0
 8011ff4:	4604      	mov	r4, r0
 8011ff6:	9802      	ldr	r0, [sp, #8]
 8011ff8:	f000 fca0 	bl	801293c <__mcmp>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	f77f ada3 	ble.w	8011b48 <_dtoa_r+0x490>
 8012002:	4656      	mov	r6, sl
 8012004:	2331      	movs	r3, #49	@ 0x31
 8012006:	f806 3b01 	strb.w	r3, [r6], #1
 801200a:	f108 0801 	add.w	r8, r8, #1
 801200e:	e59f      	b.n	8011b50 <_dtoa_r+0x498>
 8012010:	9c03      	ldr	r4, [sp, #12]
 8012012:	46b8      	mov	r8, r7
 8012014:	4625      	mov	r5, r4
 8012016:	e7f4      	b.n	8012002 <_dtoa_r+0x94a>
 8012018:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801201c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801201e:	2b00      	cmp	r3, #0
 8012020:	f000 8101 	beq.w	8012226 <_dtoa_r+0xb6e>
 8012024:	2e00      	cmp	r6, #0
 8012026:	dd05      	ble.n	8012034 <_dtoa_r+0x97c>
 8012028:	4629      	mov	r1, r5
 801202a:	4632      	mov	r2, r6
 801202c:	4648      	mov	r0, r9
 801202e:	f000 fc19 	bl	8012864 <__lshift>
 8012032:	4605      	mov	r5, r0
 8012034:	9b08      	ldr	r3, [sp, #32]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d05c      	beq.n	80120f4 <_dtoa_r+0xa3c>
 801203a:	6869      	ldr	r1, [r5, #4]
 801203c:	4648      	mov	r0, r9
 801203e:	f000 fa0b 	bl	8012458 <_Balloc>
 8012042:	4606      	mov	r6, r0
 8012044:	b928      	cbnz	r0, 8012052 <_dtoa_r+0x99a>
 8012046:	4b82      	ldr	r3, [pc, #520]	@ (8012250 <_dtoa_r+0xb98>)
 8012048:	4602      	mov	r2, r0
 801204a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801204e:	f7ff bb4a 	b.w	80116e6 <_dtoa_r+0x2e>
 8012052:	692a      	ldr	r2, [r5, #16]
 8012054:	3202      	adds	r2, #2
 8012056:	0092      	lsls	r2, r2, #2
 8012058:	f105 010c 	add.w	r1, r5, #12
 801205c:	300c      	adds	r0, #12
 801205e:	f7ff fa92 	bl	8011586 <memcpy>
 8012062:	2201      	movs	r2, #1
 8012064:	4631      	mov	r1, r6
 8012066:	4648      	mov	r0, r9
 8012068:	f000 fbfc 	bl	8012864 <__lshift>
 801206c:	f10a 0301 	add.w	r3, sl, #1
 8012070:	9300      	str	r3, [sp, #0]
 8012072:	eb0a 030b 	add.w	r3, sl, fp
 8012076:	9308      	str	r3, [sp, #32]
 8012078:	9b04      	ldr	r3, [sp, #16]
 801207a:	f003 0301 	and.w	r3, r3, #1
 801207e:	462f      	mov	r7, r5
 8012080:	9306      	str	r3, [sp, #24]
 8012082:	4605      	mov	r5, r0
 8012084:	9b00      	ldr	r3, [sp, #0]
 8012086:	9802      	ldr	r0, [sp, #8]
 8012088:	4621      	mov	r1, r4
 801208a:	f103 3bff 	add.w	fp, r3, #4294967295
 801208e:	f7ff fa88 	bl	80115a2 <quorem>
 8012092:	4603      	mov	r3, r0
 8012094:	3330      	adds	r3, #48	@ 0x30
 8012096:	9003      	str	r0, [sp, #12]
 8012098:	4639      	mov	r1, r7
 801209a:	9802      	ldr	r0, [sp, #8]
 801209c:	9309      	str	r3, [sp, #36]	@ 0x24
 801209e:	f000 fc4d 	bl	801293c <__mcmp>
 80120a2:	462a      	mov	r2, r5
 80120a4:	9004      	str	r0, [sp, #16]
 80120a6:	4621      	mov	r1, r4
 80120a8:	4648      	mov	r0, r9
 80120aa:	f000 fc63 	bl	8012974 <__mdiff>
 80120ae:	68c2      	ldr	r2, [r0, #12]
 80120b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120b2:	4606      	mov	r6, r0
 80120b4:	bb02      	cbnz	r2, 80120f8 <_dtoa_r+0xa40>
 80120b6:	4601      	mov	r1, r0
 80120b8:	9802      	ldr	r0, [sp, #8]
 80120ba:	f000 fc3f 	bl	801293c <__mcmp>
 80120be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120c0:	4602      	mov	r2, r0
 80120c2:	4631      	mov	r1, r6
 80120c4:	4648      	mov	r0, r9
 80120c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80120c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ca:	f000 fa05 	bl	80124d8 <_Bfree>
 80120ce:	9b07      	ldr	r3, [sp, #28]
 80120d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80120d2:	9e00      	ldr	r6, [sp, #0]
 80120d4:	ea42 0103 	orr.w	r1, r2, r3
 80120d8:	9b06      	ldr	r3, [sp, #24]
 80120da:	4319      	orrs	r1, r3
 80120dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120de:	d10d      	bne.n	80120fc <_dtoa_r+0xa44>
 80120e0:	2b39      	cmp	r3, #57	@ 0x39
 80120e2:	d027      	beq.n	8012134 <_dtoa_r+0xa7c>
 80120e4:	9a04      	ldr	r2, [sp, #16]
 80120e6:	2a00      	cmp	r2, #0
 80120e8:	dd01      	ble.n	80120ee <_dtoa_r+0xa36>
 80120ea:	9b03      	ldr	r3, [sp, #12]
 80120ec:	3331      	adds	r3, #49	@ 0x31
 80120ee:	f88b 3000 	strb.w	r3, [fp]
 80120f2:	e52e      	b.n	8011b52 <_dtoa_r+0x49a>
 80120f4:	4628      	mov	r0, r5
 80120f6:	e7b9      	b.n	801206c <_dtoa_r+0x9b4>
 80120f8:	2201      	movs	r2, #1
 80120fa:	e7e2      	b.n	80120c2 <_dtoa_r+0xa0a>
 80120fc:	9904      	ldr	r1, [sp, #16]
 80120fe:	2900      	cmp	r1, #0
 8012100:	db04      	blt.n	801210c <_dtoa_r+0xa54>
 8012102:	9807      	ldr	r0, [sp, #28]
 8012104:	4301      	orrs	r1, r0
 8012106:	9806      	ldr	r0, [sp, #24]
 8012108:	4301      	orrs	r1, r0
 801210a:	d120      	bne.n	801214e <_dtoa_r+0xa96>
 801210c:	2a00      	cmp	r2, #0
 801210e:	ddee      	ble.n	80120ee <_dtoa_r+0xa36>
 8012110:	9902      	ldr	r1, [sp, #8]
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	2201      	movs	r2, #1
 8012116:	4648      	mov	r0, r9
 8012118:	f000 fba4 	bl	8012864 <__lshift>
 801211c:	4621      	mov	r1, r4
 801211e:	9002      	str	r0, [sp, #8]
 8012120:	f000 fc0c 	bl	801293c <__mcmp>
 8012124:	2800      	cmp	r0, #0
 8012126:	9b00      	ldr	r3, [sp, #0]
 8012128:	dc02      	bgt.n	8012130 <_dtoa_r+0xa78>
 801212a:	d1e0      	bne.n	80120ee <_dtoa_r+0xa36>
 801212c:	07da      	lsls	r2, r3, #31
 801212e:	d5de      	bpl.n	80120ee <_dtoa_r+0xa36>
 8012130:	2b39      	cmp	r3, #57	@ 0x39
 8012132:	d1da      	bne.n	80120ea <_dtoa_r+0xa32>
 8012134:	2339      	movs	r3, #57	@ 0x39
 8012136:	f88b 3000 	strb.w	r3, [fp]
 801213a:	4633      	mov	r3, r6
 801213c:	461e      	mov	r6, r3
 801213e:	3b01      	subs	r3, #1
 8012140:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012144:	2a39      	cmp	r2, #57	@ 0x39
 8012146:	d04e      	beq.n	80121e6 <_dtoa_r+0xb2e>
 8012148:	3201      	adds	r2, #1
 801214a:	701a      	strb	r2, [r3, #0]
 801214c:	e501      	b.n	8011b52 <_dtoa_r+0x49a>
 801214e:	2a00      	cmp	r2, #0
 8012150:	dd03      	ble.n	801215a <_dtoa_r+0xaa2>
 8012152:	2b39      	cmp	r3, #57	@ 0x39
 8012154:	d0ee      	beq.n	8012134 <_dtoa_r+0xa7c>
 8012156:	3301      	adds	r3, #1
 8012158:	e7c9      	b.n	80120ee <_dtoa_r+0xa36>
 801215a:	9a00      	ldr	r2, [sp, #0]
 801215c:	9908      	ldr	r1, [sp, #32]
 801215e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012162:	428a      	cmp	r2, r1
 8012164:	d028      	beq.n	80121b8 <_dtoa_r+0xb00>
 8012166:	9902      	ldr	r1, [sp, #8]
 8012168:	2300      	movs	r3, #0
 801216a:	220a      	movs	r2, #10
 801216c:	4648      	mov	r0, r9
 801216e:	f000 f9d5 	bl	801251c <__multadd>
 8012172:	42af      	cmp	r7, r5
 8012174:	9002      	str	r0, [sp, #8]
 8012176:	f04f 0300 	mov.w	r3, #0
 801217a:	f04f 020a 	mov.w	r2, #10
 801217e:	4639      	mov	r1, r7
 8012180:	4648      	mov	r0, r9
 8012182:	d107      	bne.n	8012194 <_dtoa_r+0xadc>
 8012184:	f000 f9ca 	bl	801251c <__multadd>
 8012188:	4607      	mov	r7, r0
 801218a:	4605      	mov	r5, r0
 801218c:	9b00      	ldr	r3, [sp, #0]
 801218e:	3301      	adds	r3, #1
 8012190:	9300      	str	r3, [sp, #0]
 8012192:	e777      	b.n	8012084 <_dtoa_r+0x9cc>
 8012194:	f000 f9c2 	bl	801251c <__multadd>
 8012198:	4629      	mov	r1, r5
 801219a:	4607      	mov	r7, r0
 801219c:	2300      	movs	r3, #0
 801219e:	220a      	movs	r2, #10
 80121a0:	4648      	mov	r0, r9
 80121a2:	f000 f9bb 	bl	801251c <__multadd>
 80121a6:	4605      	mov	r5, r0
 80121a8:	e7f0      	b.n	801218c <_dtoa_r+0xad4>
 80121aa:	f1bb 0f00 	cmp.w	fp, #0
 80121ae:	bfcc      	ite	gt
 80121b0:	465e      	movgt	r6, fp
 80121b2:	2601      	movle	r6, #1
 80121b4:	4456      	add	r6, sl
 80121b6:	2700      	movs	r7, #0
 80121b8:	9902      	ldr	r1, [sp, #8]
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	2201      	movs	r2, #1
 80121be:	4648      	mov	r0, r9
 80121c0:	f000 fb50 	bl	8012864 <__lshift>
 80121c4:	4621      	mov	r1, r4
 80121c6:	9002      	str	r0, [sp, #8]
 80121c8:	f000 fbb8 	bl	801293c <__mcmp>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	dcb4      	bgt.n	801213a <_dtoa_r+0xa82>
 80121d0:	d102      	bne.n	80121d8 <_dtoa_r+0xb20>
 80121d2:	9b00      	ldr	r3, [sp, #0]
 80121d4:	07db      	lsls	r3, r3, #31
 80121d6:	d4b0      	bmi.n	801213a <_dtoa_r+0xa82>
 80121d8:	4633      	mov	r3, r6
 80121da:	461e      	mov	r6, r3
 80121dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121e0:	2a30      	cmp	r2, #48	@ 0x30
 80121e2:	d0fa      	beq.n	80121da <_dtoa_r+0xb22>
 80121e4:	e4b5      	b.n	8011b52 <_dtoa_r+0x49a>
 80121e6:	459a      	cmp	sl, r3
 80121e8:	d1a8      	bne.n	801213c <_dtoa_r+0xa84>
 80121ea:	2331      	movs	r3, #49	@ 0x31
 80121ec:	f108 0801 	add.w	r8, r8, #1
 80121f0:	f88a 3000 	strb.w	r3, [sl]
 80121f4:	e4ad      	b.n	8011b52 <_dtoa_r+0x49a>
 80121f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80121f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8012254 <_dtoa_r+0xb9c>
 80121fc:	b11b      	cbz	r3, 8012206 <_dtoa_r+0xb4e>
 80121fe:	f10a 0308 	add.w	r3, sl, #8
 8012202:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012204:	6013      	str	r3, [r2, #0]
 8012206:	4650      	mov	r0, sl
 8012208:	b017      	add	sp, #92	@ 0x5c
 801220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220e:	9b07      	ldr	r3, [sp, #28]
 8012210:	2b01      	cmp	r3, #1
 8012212:	f77f ae2e 	ble.w	8011e72 <_dtoa_r+0x7ba>
 8012216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012218:	9308      	str	r3, [sp, #32]
 801221a:	2001      	movs	r0, #1
 801221c:	e64d      	b.n	8011eba <_dtoa_r+0x802>
 801221e:	f1bb 0f00 	cmp.w	fp, #0
 8012222:	f77f aed9 	ble.w	8011fd8 <_dtoa_r+0x920>
 8012226:	4656      	mov	r6, sl
 8012228:	9802      	ldr	r0, [sp, #8]
 801222a:	4621      	mov	r1, r4
 801222c:	f7ff f9b9 	bl	80115a2 <quorem>
 8012230:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8012234:	f806 3b01 	strb.w	r3, [r6], #1
 8012238:	eba6 020a 	sub.w	r2, r6, sl
 801223c:	4593      	cmp	fp, r2
 801223e:	ddb4      	ble.n	80121aa <_dtoa_r+0xaf2>
 8012240:	9902      	ldr	r1, [sp, #8]
 8012242:	2300      	movs	r3, #0
 8012244:	220a      	movs	r2, #10
 8012246:	4648      	mov	r0, r9
 8012248:	f000 f968 	bl	801251c <__multadd>
 801224c:	9002      	str	r0, [sp, #8]
 801224e:	e7eb      	b.n	8012228 <_dtoa_r+0xb70>
 8012250:	08013e34 	.word	0x08013e34
 8012254:	08013db8 	.word	0x08013db8

08012258 <_free_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	4605      	mov	r5, r0
 801225c:	2900      	cmp	r1, #0
 801225e:	d041      	beq.n	80122e4 <_free_r+0x8c>
 8012260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012264:	1f0c      	subs	r4, r1, #4
 8012266:	2b00      	cmp	r3, #0
 8012268:	bfb8      	it	lt
 801226a:	18e4      	addlt	r4, r4, r3
 801226c:	f000 f8e8 	bl	8012440 <__malloc_lock>
 8012270:	4a1d      	ldr	r2, [pc, #116]	@ (80122e8 <_free_r+0x90>)
 8012272:	6813      	ldr	r3, [r2, #0]
 8012274:	b933      	cbnz	r3, 8012284 <_free_r+0x2c>
 8012276:	6063      	str	r3, [r4, #4]
 8012278:	6014      	str	r4, [r2, #0]
 801227a:	4628      	mov	r0, r5
 801227c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012280:	f000 b8e4 	b.w	801244c <__malloc_unlock>
 8012284:	42a3      	cmp	r3, r4
 8012286:	d908      	bls.n	801229a <_free_r+0x42>
 8012288:	6820      	ldr	r0, [r4, #0]
 801228a:	1821      	adds	r1, r4, r0
 801228c:	428b      	cmp	r3, r1
 801228e:	bf01      	itttt	eq
 8012290:	6819      	ldreq	r1, [r3, #0]
 8012292:	685b      	ldreq	r3, [r3, #4]
 8012294:	1809      	addeq	r1, r1, r0
 8012296:	6021      	streq	r1, [r4, #0]
 8012298:	e7ed      	b.n	8012276 <_free_r+0x1e>
 801229a:	461a      	mov	r2, r3
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	b10b      	cbz	r3, 80122a4 <_free_r+0x4c>
 80122a0:	42a3      	cmp	r3, r4
 80122a2:	d9fa      	bls.n	801229a <_free_r+0x42>
 80122a4:	6811      	ldr	r1, [r2, #0]
 80122a6:	1850      	adds	r0, r2, r1
 80122a8:	42a0      	cmp	r0, r4
 80122aa:	d10b      	bne.n	80122c4 <_free_r+0x6c>
 80122ac:	6820      	ldr	r0, [r4, #0]
 80122ae:	4401      	add	r1, r0
 80122b0:	1850      	adds	r0, r2, r1
 80122b2:	4283      	cmp	r3, r0
 80122b4:	6011      	str	r1, [r2, #0]
 80122b6:	d1e0      	bne.n	801227a <_free_r+0x22>
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	6053      	str	r3, [r2, #4]
 80122be:	4408      	add	r0, r1
 80122c0:	6010      	str	r0, [r2, #0]
 80122c2:	e7da      	b.n	801227a <_free_r+0x22>
 80122c4:	d902      	bls.n	80122cc <_free_r+0x74>
 80122c6:	230c      	movs	r3, #12
 80122c8:	602b      	str	r3, [r5, #0]
 80122ca:	e7d6      	b.n	801227a <_free_r+0x22>
 80122cc:	6820      	ldr	r0, [r4, #0]
 80122ce:	1821      	adds	r1, r4, r0
 80122d0:	428b      	cmp	r3, r1
 80122d2:	bf04      	itt	eq
 80122d4:	6819      	ldreq	r1, [r3, #0]
 80122d6:	685b      	ldreq	r3, [r3, #4]
 80122d8:	6063      	str	r3, [r4, #4]
 80122da:	bf04      	itt	eq
 80122dc:	1809      	addeq	r1, r1, r0
 80122de:	6021      	streq	r1, [r4, #0]
 80122e0:	6054      	str	r4, [r2, #4]
 80122e2:	e7ca      	b.n	801227a <_free_r+0x22>
 80122e4:	bd38      	pop	{r3, r4, r5, pc}
 80122e6:	bf00      	nop
 80122e8:	200067a4 	.word	0x200067a4

080122ec <malloc>:
 80122ec:	4b02      	ldr	r3, [pc, #8]	@ (80122f8 <malloc+0xc>)
 80122ee:	4601      	mov	r1, r0
 80122f0:	6818      	ldr	r0, [r3, #0]
 80122f2:	f000 b825 	b.w	8012340 <_malloc_r>
 80122f6:	bf00      	nop
 80122f8:	2000010c 	.word	0x2000010c

080122fc <sbrk_aligned>:
 80122fc:	b570      	push	{r4, r5, r6, lr}
 80122fe:	4e0f      	ldr	r6, [pc, #60]	@ (801233c <sbrk_aligned+0x40>)
 8012300:	460c      	mov	r4, r1
 8012302:	6831      	ldr	r1, [r6, #0]
 8012304:	4605      	mov	r5, r0
 8012306:	b911      	cbnz	r1, 801230e <sbrk_aligned+0x12>
 8012308:	f000 fe3e 	bl	8012f88 <_sbrk_r>
 801230c:	6030      	str	r0, [r6, #0]
 801230e:	4621      	mov	r1, r4
 8012310:	4628      	mov	r0, r5
 8012312:	f000 fe39 	bl	8012f88 <_sbrk_r>
 8012316:	1c43      	adds	r3, r0, #1
 8012318:	d103      	bne.n	8012322 <sbrk_aligned+0x26>
 801231a:	f04f 34ff 	mov.w	r4, #4294967295
 801231e:	4620      	mov	r0, r4
 8012320:	bd70      	pop	{r4, r5, r6, pc}
 8012322:	1cc4      	adds	r4, r0, #3
 8012324:	f024 0403 	bic.w	r4, r4, #3
 8012328:	42a0      	cmp	r0, r4
 801232a:	d0f8      	beq.n	801231e <sbrk_aligned+0x22>
 801232c:	1a21      	subs	r1, r4, r0
 801232e:	4628      	mov	r0, r5
 8012330:	f000 fe2a 	bl	8012f88 <_sbrk_r>
 8012334:	3001      	adds	r0, #1
 8012336:	d1f2      	bne.n	801231e <sbrk_aligned+0x22>
 8012338:	e7ef      	b.n	801231a <sbrk_aligned+0x1e>
 801233a:	bf00      	nop
 801233c:	200067a0 	.word	0x200067a0

08012340 <_malloc_r>:
 8012340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012344:	1ccd      	adds	r5, r1, #3
 8012346:	f025 0503 	bic.w	r5, r5, #3
 801234a:	3508      	adds	r5, #8
 801234c:	2d0c      	cmp	r5, #12
 801234e:	bf38      	it	cc
 8012350:	250c      	movcc	r5, #12
 8012352:	2d00      	cmp	r5, #0
 8012354:	4606      	mov	r6, r0
 8012356:	db01      	blt.n	801235c <_malloc_r+0x1c>
 8012358:	42a9      	cmp	r1, r5
 801235a:	d904      	bls.n	8012366 <_malloc_r+0x26>
 801235c:	230c      	movs	r3, #12
 801235e:	6033      	str	r3, [r6, #0]
 8012360:	2000      	movs	r0, #0
 8012362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801243c <_malloc_r+0xfc>
 801236a:	f000 f869 	bl	8012440 <__malloc_lock>
 801236e:	f8d8 3000 	ldr.w	r3, [r8]
 8012372:	461c      	mov	r4, r3
 8012374:	bb44      	cbnz	r4, 80123c8 <_malloc_r+0x88>
 8012376:	4629      	mov	r1, r5
 8012378:	4630      	mov	r0, r6
 801237a:	f7ff ffbf 	bl	80122fc <sbrk_aligned>
 801237e:	1c43      	adds	r3, r0, #1
 8012380:	4604      	mov	r4, r0
 8012382:	d158      	bne.n	8012436 <_malloc_r+0xf6>
 8012384:	f8d8 4000 	ldr.w	r4, [r8]
 8012388:	4627      	mov	r7, r4
 801238a:	2f00      	cmp	r7, #0
 801238c:	d143      	bne.n	8012416 <_malloc_r+0xd6>
 801238e:	2c00      	cmp	r4, #0
 8012390:	d04b      	beq.n	801242a <_malloc_r+0xea>
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	4639      	mov	r1, r7
 8012396:	4630      	mov	r0, r6
 8012398:	eb04 0903 	add.w	r9, r4, r3
 801239c:	f000 fdf4 	bl	8012f88 <_sbrk_r>
 80123a0:	4581      	cmp	r9, r0
 80123a2:	d142      	bne.n	801242a <_malloc_r+0xea>
 80123a4:	6821      	ldr	r1, [r4, #0]
 80123a6:	1a6d      	subs	r5, r5, r1
 80123a8:	4629      	mov	r1, r5
 80123aa:	4630      	mov	r0, r6
 80123ac:	f7ff ffa6 	bl	80122fc <sbrk_aligned>
 80123b0:	3001      	adds	r0, #1
 80123b2:	d03a      	beq.n	801242a <_malloc_r+0xea>
 80123b4:	6823      	ldr	r3, [r4, #0]
 80123b6:	442b      	add	r3, r5
 80123b8:	6023      	str	r3, [r4, #0]
 80123ba:	f8d8 3000 	ldr.w	r3, [r8]
 80123be:	685a      	ldr	r2, [r3, #4]
 80123c0:	bb62      	cbnz	r2, 801241c <_malloc_r+0xdc>
 80123c2:	f8c8 7000 	str.w	r7, [r8]
 80123c6:	e00f      	b.n	80123e8 <_malloc_r+0xa8>
 80123c8:	6822      	ldr	r2, [r4, #0]
 80123ca:	1b52      	subs	r2, r2, r5
 80123cc:	d420      	bmi.n	8012410 <_malloc_r+0xd0>
 80123ce:	2a0b      	cmp	r2, #11
 80123d0:	d917      	bls.n	8012402 <_malloc_r+0xc2>
 80123d2:	1961      	adds	r1, r4, r5
 80123d4:	42a3      	cmp	r3, r4
 80123d6:	6025      	str	r5, [r4, #0]
 80123d8:	bf18      	it	ne
 80123da:	6059      	strne	r1, [r3, #4]
 80123dc:	6863      	ldr	r3, [r4, #4]
 80123de:	bf08      	it	eq
 80123e0:	f8c8 1000 	streq.w	r1, [r8]
 80123e4:	5162      	str	r2, [r4, r5]
 80123e6:	604b      	str	r3, [r1, #4]
 80123e8:	4630      	mov	r0, r6
 80123ea:	f000 f82f 	bl	801244c <__malloc_unlock>
 80123ee:	f104 000b 	add.w	r0, r4, #11
 80123f2:	1d23      	adds	r3, r4, #4
 80123f4:	f020 0007 	bic.w	r0, r0, #7
 80123f8:	1ac2      	subs	r2, r0, r3
 80123fa:	bf1c      	itt	ne
 80123fc:	1a1b      	subne	r3, r3, r0
 80123fe:	50a3      	strne	r3, [r4, r2]
 8012400:	e7af      	b.n	8012362 <_malloc_r+0x22>
 8012402:	6862      	ldr	r2, [r4, #4]
 8012404:	42a3      	cmp	r3, r4
 8012406:	bf0c      	ite	eq
 8012408:	f8c8 2000 	streq.w	r2, [r8]
 801240c:	605a      	strne	r2, [r3, #4]
 801240e:	e7eb      	b.n	80123e8 <_malloc_r+0xa8>
 8012410:	4623      	mov	r3, r4
 8012412:	6864      	ldr	r4, [r4, #4]
 8012414:	e7ae      	b.n	8012374 <_malloc_r+0x34>
 8012416:	463c      	mov	r4, r7
 8012418:	687f      	ldr	r7, [r7, #4]
 801241a:	e7b6      	b.n	801238a <_malloc_r+0x4a>
 801241c:	461a      	mov	r2, r3
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	42a3      	cmp	r3, r4
 8012422:	d1fb      	bne.n	801241c <_malloc_r+0xdc>
 8012424:	2300      	movs	r3, #0
 8012426:	6053      	str	r3, [r2, #4]
 8012428:	e7de      	b.n	80123e8 <_malloc_r+0xa8>
 801242a:	230c      	movs	r3, #12
 801242c:	6033      	str	r3, [r6, #0]
 801242e:	4630      	mov	r0, r6
 8012430:	f000 f80c 	bl	801244c <__malloc_unlock>
 8012434:	e794      	b.n	8012360 <_malloc_r+0x20>
 8012436:	6005      	str	r5, [r0, #0]
 8012438:	e7d6      	b.n	80123e8 <_malloc_r+0xa8>
 801243a:	bf00      	nop
 801243c:	200067a4 	.word	0x200067a4

08012440 <__malloc_lock>:
 8012440:	4801      	ldr	r0, [pc, #4]	@ (8012448 <__malloc_lock+0x8>)
 8012442:	f7ff b896 	b.w	8011572 <__retarget_lock_acquire_recursive>
 8012446:	bf00      	nop
 8012448:	2000679c 	.word	0x2000679c

0801244c <__malloc_unlock>:
 801244c:	4801      	ldr	r0, [pc, #4]	@ (8012454 <__malloc_unlock+0x8>)
 801244e:	f7ff b891 	b.w	8011574 <__retarget_lock_release_recursive>
 8012452:	bf00      	nop
 8012454:	2000679c 	.word	0x2000679c

08012458 <_Balloc>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	69c6      	ldr	r6, [r0, #28]
 801245c:	4604      	mov	r4, r0
 801245e:	460d      	mov	r5, r1
 8012460:	b976      	cbnz	r6, 8012480 <_Balloc+0x28>
 8012462:	2010      	movs	r0, #16
 8012464:	f7ff ff42 	bl	80122ec <malloc>
 8012468:	4602      	mov	r2, r0
 801246a:	61e0      	str	r0, [r4, #28]
 801246c:	b920      	cbnz	r0, 8012478 <_Balloc+0x20>
 801246e:	4b18      	ldr	r3, [pc, #96]	@ (80124d0 <_Balloc+0x78>)
 8012470:	4818      	ldr	r0, [pc, #96]	@ (80124d4 <_Balloc+0x7c>)
 8012472:	216b      	movs	r1, #107	@ 0x6b
 8012474:	f000 fd98 	bl	8012fa8 <__assert_func>
 8012478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801247c:	6006      	str	r6, [r0, #0]
 801247e:	60c6      	str	r6, [r0, #12]
 8012480:	69e6      	ldr	r6, [r4, #28]
 8012482:	68f3      	ldr	r3, [r6, #12]
 8012484:	b183      	cbz	r3, 80124a8 <_Balloc+0x50>
 8012486:	69e3      	ldr	r3, [r4, #28]
 8012488:	68db      	ldr	r3, [r3, #12]
 801248a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801248e:	b9b8      	cbnz	r0, 80124c0 <_Balloc+0x68>
 8012490:	2101      	movs	r1, #1
 8012492:	fa01 f605 	lsl.w	r6, r1, r5
 8012496:	1d72      	adds	r2, r6, #5
 8012498:	0092      	lsls	r2, r2, #2
 801249a:	4620      	mov	r0, r4
 801249c:	f000 fda2 	bl	8012fe4 <_calloc_r>
 80124a0:	b160      	cbz	r0, 80124bc <_Balloc+0x64>
 80124a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80124a6:	e00e      	b.n	80124c6 <_Balloc+0x6e>
 80124a8:	2221      	movs	r2, #33	@ 0x21
 80124aa:	2104      	movs	r1, #4
 80124ac:	4620      	mov	r0, r4
 80124ae:	f000 fd99 	bl	8012fe4 <_calloc_r>
 80124b2:	69e3      	ldr	r3, [r4, #28]
 80124b4:	60f0      	str	r0, [r6, #12]
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d1e4      	bne.n	8012486 <_Balloc+0x2e>
 80124bc:	2000      	movs	r0, #0
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	6802      	ldr	r2, [r0, #0]
 80124c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80124c6:	2300      	movs	r3, #0
 80124c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80124cc:	e7f7      	b.n	80124be <_Balloc+0x66>
 80124ce:	bf00      	nop
 80124d0:	08013dc5 	.word	0x08013dc5
 80124d4:	08013e45 	.word	0x08013e45

080124d8 <_Bfree>:
 80124d8:	b570      	push	{r4, r5, r6, lr}
 80124da:	69c6      	ldr	r6, [r0, #28]
 80124dc:	4605      	mov	r5, r0
 80124de:	460c      	mov	r4, r1
 80124e0:	b976      	cbnz	r6, 8012500 <_Bfree+0x28>
 80124e2:	2010      	movs	r0, #16
 80124e4:	f7ff ff02 	bl	80122ec <malloc>
 80124e8:	4602      	mov	r2, r0
 80124ea:	61e8      	str	r0, [r5, #28]
 80124ec:	b920      	cbnz	r0, 80124f8 <_Bfree+0x20>
 80124ee:	4b09      	ldr	r3, [pc, #36]	@ (8012514 <_Bfree+0x3c>)
 80124f0:	4809      	ldr	r0, [pc, #36]	@ (8012518 <_Bfree+0x40>)
 80124f2:	218f      	movs	r1, #143	@ 0x8f
 80124f4:	f000 fd58 	bl	8012fa8 <__assert_func>
 80124f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124fc:	6006      	str	r6, [r0, #0]
 80124fe:	60c6      	str	r6, [r0, #12]
 8012500:	b13c      	cbz	r4, 8012512 <_Bfree+0x3a>
 8012502:	69eb      	ldr	r3, [r5, #28]
 8012504:	6862      	ldr	r2, [r4, #4]
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801250c:	6021      	str	r1, [r4, #0]
 801250e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012512:	bd70      	pop	{r4, r5, r6, pc}
 8012514:	08013dc5 	.word	0x08013dc5
 8012518:	08013e45 	.word	0x08013e45

0801251c <__multadd>:
 801251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012520:	690d      	ldr	r5, [r1, #16]
 8012522:	4607      	mov	r7, r0
 8012524:	460c      	mov	r4, r1
 8012526:	461e      	mov	r6, r3
 8012528:	f101 0c14 	add.w	ip, r1, #20
 801252c:	2000      	movs	r0, #0
 801252e:	f8dc 3000 	ldr.w	r3, [ip]
 8012532:	b299      	uxth	r1, r3
 8012534:	fb02 6101 	mla	r1, r2, r1, r6
 8012538:	0c1e      	lsrs	r6, r3, #16
 801253a:	0c0b      	lsrs	r3, r1, #16
 801253c:	fb02 3306 	mla	r3, r2, r6, r3
 8012540:	b289      	uxth	r1, r1
 8012542:	3001      	adds	r0, #1
 8012544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012548:	4285      	cmp	r5, r0
 801254a:	f84c 1b04 	str.w	r1, [ip], #4
 801254e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012552:	dcec      	bgt.n	801252e <__multadd+0x12>
 8012554:	b30e      	cbz	r6, 801259a <__multadd+0x7e>
 8012556:	68a3      	ldr	r3, [r4, #8]
 8012558:	42ab      	cmp	r3, r5
 801255a:	dc19      	bgt.n	8012590 <__multadd+0x74>
 801255c:	6861      	ldr	r1, [r4, #4]
 801255e:	4638      	mov	r0, r7
 8012560:	3101      	adds	r1, #1
 8012562:	f7ff ff79 	bl	8012458 <_Balloc>
 8012566:	4680      	mov	r8, r0
 8012568:	b928      	cbnz	r0, 8012576 <__multadd+0x5a>
 801256a:	4602      	mov	r2, r0
 801256c:	4b0c      	ldr	r3, [pc, #48]	@ (80125a0 <__multadd+0x84>)
 801256e:	480d      	ldr	r0, [pc, #52]	@ (80125a4 <__multadd+0x88>)
 8012570:	21ba      	movs	r1, #186	@ 0xba
 8012572:	f000 fd19 	bl	8012fa8 <__assert_func>
 8012576:	6922      	ldr	r2, [r4, #16]
 8012578:	3202      	adds	r2, #2
 801257a:	f104 010c 	add.w	r1, r4, #12
 801257e:	0092      	lsls	r2, r2, #2
 8012580:	300c      	adds	r0, #12
 8012582:	f7ff f800 	bl	8011586 <memcpy>
 8012586:	4621      	mov	r1, r4
 8012588:	4638      	mov	r0, r7
 801258a:	f7ff ffa5 	bl	80124d8 <_Bfree>
 801258e:	4644      	mov	r4, r8
 8012590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012594:	3501      	adds	r5, #1
 8012596:	615e      	str	r6, [r3, #20]
 8012598:	6125      	str	r5, [r4, #16]
 801259a:	4620      	mov	r0, r4
 801259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a0:	08013e34 	.word	0x08013e34
 80125a4:	08013e45 	.word	0x08013e45

080125a8 <__hi0bits>:
 80125a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80125ac:	4603      	mov	r3, r0
 80125ae:	bf36      	itet	cc
 80125b0:	0403      	lslcc	r3, r0, #16
 80125b2:	2000      	movcs	r0, #0
 80125b4:	2010      	movcc	r0, #16
 80125b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80125ba:	bf3c      	itt	cc
 80125bc:	021b      	lslcc	r3, r3, #8
 80125be:	3008      	addcc	r0, #8
 80125c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80125c4:	bf3c      	itt	cc
 80125c6:	011b      	lslcc	r3, r3, #4
 80125c8:	3004      	addcc	r0, #4
 80125ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125ce:	bf3c      	itt	cc
 80125d0:	009b      	lslcc	r3, r3, #2
 80125d2:	3002      	addcc	r0, #2
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	db05      	blt.n	80125e4 <__hi0bits+0x3c>
 80125d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80125dc:	f100 0001 	add.w	r0, r0, #1
 80125e0:	bf08      	it	eq
 80125e2:	2020      	moveq	r0, #32
 80125e4:	4770      	bx	lr

080125e6 <__lo0bits>:
 80125e6:	6803      	ldr	r3, [r0, #0]
 80125e8:	4602      	mov	r2, r0
 80125ea:	f013 0007 	ands.w	r0, r3, #7
 80125ee:	d00b      	beq.n	8012608 <__lo0bits+0x22>
 80125f0:	07d9      	lsls	r1, r3, #31
 80125f2:	d421      	bmi.n	8012638 <__lo0bits+0x52>
 80125f4:	0798      	lsls	r0, r3, #30
 80125f6:	bf49      	itett	mi
 80125f8:	085b      	lsrmi	r3, r3, #1
 80125fa:	089b      	lsrpl	r3, r3, #2
 80125fc:	2001      	movmi	r0, #1
 80125fe:	6013      	strmi	r3, [r2, #0]
 8012600:	bf5c      	itt	pl
 8012602:	6013      	strpl	r3, [r2, #0]
 8012604:	2002      	movpl	r0, #2
 8012606:	4770      	bx	lr
 8012608:	b299      	uxth	r1, r3
 801260a:	b909      	cbnz	r1, 8012610 <__lo0bits+0x2a>
 801260c:	0c1b      	lsrs	r3, r3, #16
 801260e:	2010      	movs	r0, #16
 8012610:	b2d9      	uxtb	r1, r3
 8012612:	b909      	cbnz	r1, 8012618 <__lo0bits+0x32>
 8012614:	3008      	adds	r0, #8
 8012616:	0a1b      	lsrs	r3, r3, #8
 8012618:	0719      	lsls	r1, r3, #28
 801261a:	bf04      	itt	eq
 801261c:	091b      	lsreq	r3, r3, #4
 801261e:	3004      	addeq	r0, #4
 8012620:	0799      	lsls	r1, r3, #30
 8012622:	bf04      	itt	eq
 8012624:	089b      	lsreq	r3, r3, #2
 8012626:	3002      	addeq	r0, #2
 8012628:	07d9      	lsls	r1, r3, #31
 801262a:	d403      	bmi.n	8012634 <__lo0bits+0x4e>
 801262c:	085b      	lsrs	r3, r3, #1
 801262e:	f100 0001 	add.w	r0, r0, #1
 8012632:	d003      	beq.n	801263c <__lo0bits+0x56>
 8012634:	6013      	str	r3, [r2, #0]
 8012636:	4770      	bx	lr
 8012638:	2000      	movs	r0, #0
 801263a:	4770      	bx	lr
 801263c:	2020      	movs	r0, #32
 801263e:	4770      	bx	lr

08012640 <__i2b>:
 8012640:	b510      	push	{r4, lr}
 8012642:	460c      	mov	r4, r1
 8012644:	2101      	movs	r1, #1
 8012646:	f7ff ff07 	bl	8012458 <_Balloc>
 801264a:	4602      	mov	r2, r0
 801264c:	b928      	cbnz	r0, 801265a <__i2b+0x1a>
 801264e:	4b05      	ldr	r3, [pc, #20]	@ (8012664 <__i2b+0x24>)
 8012650:	4805      	ldr	r0, [pc, #20]	@ (8012668 <__i2b+0x28>)
 8012652:	f240 1145 	movw	r1, #325	@ 0x145
 8012656:	f000 fca7 	bl	8012fa8 <__assert_func>
 801265a:	2301      	movs	r3, #1
 801265c:	6144      	str	r4, [r0, #20]
 801265e:	6103      	str	r3, [r0, #16]
 8012660:	bd10      	pop	{r4, pc}
 8012662:	bf00      	nop
 8012664:	08013e34 	.word	0x08013e34
 8012668:	08013e45 	.word	0x08013e45

0801266c <__multiply>:
 801266c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012670:	4617      	mov	r7, r2
 8012672:	690a      	ldr	r2, [r1, #16]
 8012674:	693b      	ldr	r3, [r7, #16]
 8012676:	429a      	cmp	r2, r3
 8012678:	bfa8      	it	ge
 801267a:	463b      	movge	r3, r7
 801267c:	4689      	mov	r9, r1
 801267e:	bfa4      	itt	ge
 8012680:	460f      	movge	r7, r1
 8012682:	4699      	movge	r9, r3
 8012684:	693d      	ldr	r5, [r7, #16]
 8012686:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	6879      	ldr	r1, [r7, #4]
 801268e:	eb05 060a 	add.w	r6, r5, sl
 8012692:	42b3      	cmp	r3, r6
 8012694:	b085      	sub	sp, #20
 8012696:	bfb8      	it	lt
 8012698:	3101      	addlt	r1, #1
 801269a:	f7ff fedd 	bl	8012458 <_Balloc>
 801269e:	b930      	cbnz	r0, 80126ae <__multiply+0x42>
 80126a0:	4602      	mov	r2, r0
 80126a2:	4b41      	ldr	r3, [pc, #260]	@ (80127a8 <__multiply+0x13c>)
 80126a4:	4841      	ldr	r0, [pc, #260]	@ (80127ac <__multiply+0x140>)
 80126a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80126aa:	f000 fc7d 	bl	8012fa8 <__assert_func>
 80126ae:	f100 0414 	add.w	r4, r0, #20
 80126b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80126b6:	4623      	mov	r3, r4
 80126b8:	2200      	movs	r2, #0
 80126ba:	4573      	cmp	r3, lr
 80126bc:	d320      	bcc.n	8012700 <__multiply+0x94>
 80126be:	f107 0814 	add.w	r8, r7, #20
 80126c2:	f109 0114 	add.w	r1, r9, #20
 80126c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80126ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80126ce:	9302      	str	r3, [sp, #8]
 80126d0:	1beb      	subs	r3, r5, r7
 80126d2:	3b15      	subs	r3, #21
 80126d4:	f023 0303 	bic.w	r3, r3, #3
 80126d8:	3304      	adds	r3, #4
 80126da:	3715      	adds	r7, #21
 80126dc:	42bd      	cmp	r5, r7
 80126de:	bf38      	it	cc
 80126e0:	2304      	movcc	r3, #4
 80126e2:	9301      	str	r3, [sp, #4]
 80126e4:	9b02      	ldr	r3, [sp, #8]
 80126e6:	9103      	str	r1, [sp, #12]
 80126e8:	428b      	cmp	r3, r1
 80126ea:	d80c      	bhi.n	8012706 <__multiply+0x9a>
 80126ec:	2e00      	cmp	r6, #0
 80126ee:	dd03      	ble.n	80126f8 <__multiply+0x8c>
 80126f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d055      	beq.n	80127a4 <__multiply+0x138>
 80126f8:	6106      	str	r6, [r0, #16]
 80126fa:	b005      	add	sp, #20
 80126fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012700:	f843 2b04 	str.w	r2, [r3], #4
 8012704:	e7d9      	b.n	80126ba <__multiply+0x4e>
 8012706:	f8b1 a000 	ldrh.w	sl, [r1]
 801270a:	f1ba 0f00 	cmp.w	sl, #0
 801270e:	d01f      	beq.n	8012750 <__multiply+0xe4>
 8012710:	46c4      	mov	ip, r8
 8012712:	46a1      	mov	r9, r4
 8012714:	2700      	movs	r7, #0
 8012716:	f85c 2b04 	ldr.w	r2, [ip], #4
 801271a:	f8d9 3000 	ldr.w	r3, [r9]
 801271e:	fa1f fb82 	uxth.w	fp, r2
 8012722:	b29b      	uxth	r3, r3
 8012724:	fb0a 330b 	mla	r3, sl, fp, r3
 8012728:	443b      	add	r3, r7
 801272a:	f8d9 7000 	ldr.w	r7, [r9]
 801272e:	0c12      	lsrs	r2, r2, #16
 8012730:	0c3f      	lsrs	r7, r7, #16
 8012732:	fb0a 7202 	mla	r2, sl, r2, r7
 8012736:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801273a:	b29b      	uxth	r3, r3
 801273c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012740:	4565      	cmp	r5, ip
 8012742:	f849 3b04 	str.w	r3, [r9], #4
 8012746:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801274a:	d8e4      	bhi.n	8012716 <__multiply+0xaa>
 801274c:	9b01      	ldr	r3, [sp, #4]
 801274e:	50e7      	str	r7, [r4, r3]
 8012750:	9b03      	ldr	r3, [sp, #12]
 8012752:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012756:	3104      	adds	r1, #4
 8012758:	f1b9 0f00 	cmp.w	r9, #0
 801275c:	d020      	beq.n	80127a0 <__multiply+0x134>
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	4647      	mov	r7, r8
 8012762:	46a4      	mov	ip, r4
 8012764:	f04f 0a00 	mov.w	sl, #0
 8012768:	f8b7 b000 	ldrh.w	fp, [r7]
 801276c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012770:	fb09 220b 	mla	r2, r9, fp, r2
 8012774:	4452      	add	r2, sl
 8012776:	b29b      	uxth	r3, r3
 8012778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801277c:	f84c 3b04 	str.w	r3, [ip], #4
 8012780:	f857 3b04 	ldr.w	r3, [r7], #4
 8012784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012788:	f8bc 3000 	ldrh.w	r3, [ip]
 801278c:	fb09 330a 	mla	r3, r9, sl, r3
 8012790:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012794:	42bd      	cmp	r5, r7
 8012796:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801279a:	d8e5      	bhi.n	8012768 <__multiply+0xfc>
 801279c:	9a01      	ldr	r2, [sp, #4]
 801279e:	50a3      	str	r3, [r4, r2]
 80127a0:	3404      	adds	r4, #4
 80127a2:	e79f      	b.n	80126e4 <__multiply+0x78>
 80127a4:	3e01      	subs	r6, #1
 80127a6:	e7a1      	b.n	80126ec <__multiply+0x80>
 80127a8:	08013e34 	.word	0x08013e34
 80127ac:	08013e45 	.word	0x08013e45

080127b0 <__pow5mult>:
 80127b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127b4:	4615      	mov	r5, r2
 80127b6:	f012 0203 	ands.w	r2, r2, #3
 80127ba:	4607      	mov	r7, r0
 80127bc:	460e      	mov	r6, r1
 80127be:	d007      	beq.n	80127d0 <__pow5mult+0x20>
 80127c0:	4c25      	ldr	r4, [pc, #148]	@ (8012858 <__pow5mult+0xa8>)
 80127c2:	3a01      	subs	r2, #1
 80127c4:	2300      	movs	r3, #0
 80127c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80127ca:	f7ff fea7 	bl	801251c <__multadd>
 80127ce:	4606      	mov	r6, r0
 80127d0:	10ad      	asrs	r5, r5, #2
 80127d2:	d03d      	beq.n	8012850 <__pow5mult+0xa0>
 80127d4:	69fc      	ldr	r4, [r7, #28]
 80127d6:	b97c      	cbnz	r4, 80127f8 <__pow5mult+0x48>
 80127d8:	2010      	movs	r0, #16
 80127da:	f7ff fd87 	bl	80122ec <malloc>
 80127de:	4602      	mov	r2, r0
 80127e0:	61f8      	str	r0, [r7, #28]
 80127e2:	b928      	cbnz	r0, 80127f0 <__pow5mult+0x40>
 80127e4:	4b1d      	ldr	r3, [pc, #116]	@ (801285c <__pow5mult+0xac>)
 80127e6:	481e      	ldr	r0, [pc, #120]	@ (8012860 <__pow5mult+0xb0>)
 80127e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80127ec:	f000 fbdc 	bl	8012fa8 <__assert_func>
 80127f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80127f4:	6004      	str	r4, [r0, #0]
 80127f6:	60c4      	str	r4, [r0, #12]
 80127f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80127fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012800:	b94c      	cbnz	r4, 8012816 <__pow5mult+0x66>
 8012802:	f240 2171 	movw	r1, #625	@ 0x271
 8012806:	4638      	mov	r0, r7
 8012808:	f7ff ff1a 	bl	8012640 <__i2b>
 801280c:	2300      	movs	r3, #0
 801280e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012812:	4604      	mov	r4, r0
 8012814:	6003      	str	r3, [r0, #0]
 8012816:	f04f 0900 	mov.w	r9, #0
 801281a:	07eb      	lsls	r3, r5, #31
 801281c:	d50a      	bpl.n	8012834 <__pow5mult+0x84>
 801281e:	4631      	mov	r1, r6
 8012820:	4622      	mov	r2, r4
 8012822:	4638      	mov	r0, r7
 8012824:	f7ff ff22 	bl	801266c <__multiply>
 8012828:	4631      	mov	r1, r6
 801282a:	4680      	mov	r8, r0
 801282c:	4638      	mov	r0, r7
 801282e:	f7ff fe53 	bl	80124d8 <_Bfree>
 8012832:	4646      	mov	r6, r8
 8012834:	106d      	asrs	r5, r5, #1
 8012836:	d00b      	beq.n	8012850 <__pow5mult+0xa0>
 8012838:	6820      	ldr	r0, [r4, #0]
 801283a:	b938      	cbnz	r0, 801284c <__pow5mult+0x9c>
 801283c:	4622      	mov	r2, r4
 801283e:	4621      	mov	r1, r4
 8012840:	4638      	mov	r0, r7
 8012842:	f7ff ff13 	bl	801266c <__multiply>
 8012846:	6020      	str	r0, [r4, #0]
 8012848:	f8c0 9000 	str.w	r9, [r0]
 801284c:	4604      	mov	r4, r0
 801284e:	e7e4      	b.n	801281a <__pow5mult+0x6a>
 8012850:	4630      	mov	r0, r6
 8012852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012856:	bf00      	nop
 8012858:	08013ef8 	.word	0x08013ef8
 801285c:	08013dc5 	.word	0x08013dc5
 8012860:	08013e45 	.word	0x08013e45

08012864 <__lshift>:
 8012864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012868:	460c      	mov	r4, r1
 801286a:	6849      	ldr	r1, [r1, #4]
 801286c:	6923      	ldr	r3, [r4, #16]
 801286e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012872:	68a3      	ldr	r3, [r4, #8]
 8012874:	4607      	mov	r7, r0
 8012876:	4691      	mov	r9, r2
 8012878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801287c:	f108 0601 	add.w	r6, r8, #1
 8012880:	42b3      	cmp	r3, r6
 8012882:	db0b      	blt.n	801289c <__lshift+0x38>
 8012884:	4638      	mov	r0, r7
 8012886:	f7ff fde7 	bl	8012458 <_Balloc>
 801288a:	4605      	mov	r5, r0
 801288c:	b948      	cbnz	r0, 80128a2 <__lshift+0x3e>
 801288e:	4602      	mov	r2, r0
 8012890:	4b28      	ldr	r3, [pc, #160]	@ (8012934 <__lshift+0xd0>)
 8012892:	4829      	ldr	r0, [pc, #164]	@ (8012938 <__lshift+0xd4>)
 8012894:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012898:	f000 fb86 	bl	8012fa8 <__assert_func>
 801289c:	3101      	adds	r1, #1
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	e7ee      	b.n	8012880 <__lshift+0x1c>
 80128a2:	2300      	movs	r3, #0
 80128a4:	f100 0114 	add.w	r1, r0, #20
 80128a8:	f100 0210 	add.w	r2, r0, #16
 80128ac:	4618      	mov	r0, r3
 80128ae:	4553      	cmp	r3, sl
 80128b0:	db33      	blt.n	801291a <__lshift+0xb6>
 80128b2:	6920      	ldr	r0, [r4, #16]
 80128b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80128b8:	f104 0314 	add.w	r3, r4, #20
 80128bc:	f019 091f 	ands.w	r9, r9, #31
 80128c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80128c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80128c8:	d02b      	beq.n	8012922 <__lshift+0xbe>
 80128ca:	f1c9 0e20 	rsb	lr, r9, #32
 80128ce:	468a      	mov	sl, r1
 80128d0:	2200      	movs	r2, #0
 80128d2:	6818      	ldr	r0, [r3, #0]
 80128d4:	fa00 f009 	lsl.w	r0, r0, r9
 80128d8:	4310      	orrs	r0, r2
 80128da:	f84a 0b04 	str.w	r0, [sl], #4
 80128de:	f853 2b04 	ldr.w	r2, [r3], #4
 80128e2:	459c      	cmp	ip, r3
 80128e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80128e8:	d8f3      	bhi.n	80128d2 <__lshift+0x6e>
 80128ea:	ebac 0304 	sub.w	r3, ip, r4
 80128ee:	3b15      	subs	r3, #21
 80128f0:	f023 0303 	bic.w	r3, r3, #3
 80128f4:	3304      	adds	r3, #4
 80128f6:	f104 0015 	add.w	r0, r4, #21
 80128fa:	4560      	cmp	r0, ip
 80128fc:	bf88      	it	hi
 80128fe:	2304      	movhi	r3, #4
 8012900:	50ca      	str	r2, [r1, r3]
 8012902:	b10a      	cbz	r2, 8012908 <__lshift+0xa4>
 8012904:	f108 0602 	add.w	r6, r8, #2
 8012908:	3e01      	subs	r6, #1
 801290a:	4638      	mov	r0, r7
 801290c:	612e      	str	r6, [r5, #16]
 801290e:	4621      	mov	r1, r4
 8012910:	f7ff fde2 	bl	80124d8 <_Bfree>
 8012914:	4628      	mov	r0, r5
 8012916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801291a:	f842 0f04 	str.w	r0, [r2, #4]!
 801291e:	3301      	adds	r3, #1
 8012920:	e7c5      	b.n	80128ae <__lshift+0x4a>
 8012922:	3904      	subs	r1, #4
 8012924:	f853 2b04 	ldr.w	r2, [r3], #4
 8012928:	f841 2f04 	str.w	r2, [r1, #4]!
 801292c:	459c      	cmp	ip, r3
 801292e:	d8f9      	bhi.n	8012924 <__lshift+0xc0>
 8012930:	e7ea      	b.n	8012908 <__lshift+0xa4>
 8012932:	bf00      	nop
 8012934:	08013e34 	.word	0x08013e34
 8012938:	08013e45 	.word	0x08013e45

0801293c <__mcmp>:
 801293c:	690a      	ldr	r2, [r1, #16]
 801293e:	4603      	mov	r3, r0
 8012940:	6900      	ldr	r0, [r0, #16]
 8012942:	1a80      	subs	r0, r0, r2
 8012944:	b530      	push	{r4, r5, lr}
 8012946:	d10e      	bne.n	8012966 <__mcmp+0x2a>
 8012948:	3314      	adds	r3, #20
 801294a:	3114      	adds	r1, #20
 801294c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012950:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801295c:	4295      	cmp	r5, r2
 801295e:	d003      	beq.n	8012968 <__mcmp+0x2c>
 8012960:	d205      	bcs.n	801296e <__mcmp+0x32>
 8012962:	f04f 30ff 	mov.w	r0, #4294967295
 8012966:	bd30      	pop	{r4, r5, pc}
 8012968:	42a3      	cmp	r3, r4
 801296a:	d3f3      	bcc.n	8012954 <__mcmp+0x18>
 801296c:	e7fb      	b.n	8012966 <__mcmp+0x2a>
 801296e:	2001      	movs	r0, #1
 8012970:	e7f9      	b.n	8012966 <__mcmp+0x2a>
	...

08012974 <__mdiff>:
 8012974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012978:	4689      	mov	r9, r1
 801297a:	4606      	mov	r6, r0
 801297c:	4611      	mov	r1, r2
 801297e:	4648      	mov	r0, r9
 8012980:	4614      	mov	r4, r2
 8012982:	f7ff ffdb 	bl	801293c <__mcmp>
 8012986:	1e05      	subs	r5, r0, #0
 8012988:	d112      	bne.n	80129b0 <__mdiff+0x3c>
 801298a:	4629      	mov	r1, r5
 801298c:	4630      	mov	r0, r6
 801298e:	f7ff fd63 	bl	8012458 <_Balloc>
 8012992:	4602      	mov	r2, r0
 8012994:	b928      	cbnz	r0, 80129a2 <__mdiff+0x2e>
 8012996:	4b3f      	ldr	r3, [pc, #252]	@ (8012a94 <__mdiff+0x120>)
 8012998:	f240 2137 	movw	r1, #567	@ 0x237
 801299c:	483e      	ldr	r0, [pc, #248]	@ (8012a98 <__mdiff+0x124>)
 801299e:	f000 fb03 	bl	8012fa8 <__assert_func>
 80129a2:	2301      	movs	r3, #1
 80129a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80129a8:	4610      	mov	r0, r2
 80129aa:	b003      	add	sp, #12
 80129ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b0:	bfbc      	itt	lt
 80129b2:	464b      	movlt	r3, r9
 80129b4:	46a1      	movlt	r9, r4
 80129b6:	4630      	mov	r0, r6
 80129b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80129bc:	bfba      	itte	lt
 80129be:	461c      	movlt	r4, r3
 80129c0:	2501      	movlt	r5, #1
 80129c2:	2500      	movge	r5, #0
 80129c4:	f7ff fd48 	bl	8012458 <_Balloc>
 80129c8:	4602      	mov	r2, r0
 80129ca:	b918      	cbnz	r0, 80129d4 <__mdiff+0x60>
 80129cc:	4b31      	ldr	r3, [pc, #196]	@ (8012a94 <__mdiff+0x120>)
 80129ce:	f240 2145 	movw	r1, #581	@ 0x245
 80129d2:	e7e3      	b.n	801299c <__mdiff+0x28>
 80129d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80129d8:	6926      	ldr	r6, [r4, #16]
 80129da:	60c5      	str	r5, [r0, #12]
 80129dc:	f109 0310 	add.w	r3, r9, #16
 80129e0:	f109 0514 	add.w	r5, r9, #20
 80129e4:	f104 0e14 	add.w	lr, r4, #20
 80129e8:	f100 0b14 	add.w	fp, r0, #20
 80129ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80129f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80129f4:	9301      	str	r3, [sp, #4]
 80129f6:	46d9      	mov	r9, fp
 80129f8:	f04f 0c00 	mov.w	ip, #0
 80129fc:	9b01      	ldr	r3, [sp, #4]
 80129fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012a02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012a06:	9301      	str	r3, [sp, #4]
 8012a08:	fa1f f38a 	uxth.w	r3, sl
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	b283      	uxth	r3, r0
 8012a10:	1acb      	subs	r3, r1, r3
 8012a12:	0c00      	lsrs	r0, r0, #16
 8012a14:	4463      	add	r3, ip
 8012a16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012a1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012a24:	4576      	cmp	r6, lr
 8012a26:	f849 3b04 	str.w	r3, [r9], #4
 8012a2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a2e:	d8e5      	bhi.n	80129fc <__mdiff+0x88>
 8012a30:	1b33      	subs	r3, r6, r4
 8012a32:	3b15      	subs	r3, #21
 8012a34:	f023 0303 	bic.w	r3, r3, #3
 8012a38:	3415      	adds	r4, #21
 8012a3a:	3304      	adds	r3, #4
 8012a3c:	42a6      	cmp	r6, r4
 8012a3e:	bf38      	it	cc
 8012a40:	2304      	movcc	r3, #4
 8012a42:	441d      	add	r5, r3
 8012a44:	445b      	add	r3, fp
 8012a46:	461e      	mov	r6, r3
 8012a48:	462c      	mov	r4, r5
 8012a4a:	4544      	cmp	r4, r8
 8012a4c:	d30e      	bcc.n	8012a6c <__mdiff+0xf8>
 8012a4e:	f108 0103 	add.w	r1, r8, #3
 8012a52:	1b49      	subs	r1, r1, r5
 8012a54:	f021 0103 	bic.w	r1, r1, #3
 8012a58:	3d03      	subs	r5, #3
 8012a5a:	45a8      	cmp	r8, r5
 8012a5c:	bf38      	it	cc
 8012a5e:	2100      	movcc	r1, #0
 8012a60:	440b      	add	r3, r1
 8012a62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a66:	b191      	cbz	r1, 8012a8e <__mdiff+0x11a>
 8012a68:	6117      	str	r7, [r2, #16]
 8012a6a:	e79d      	b.n	80129a8 <__mdiff+0x34>
 8012a6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012a70:	46e6      	mov	lr, ip
 8012a72:	0c08      	lsrs	r0, r1, #16
 8012a74:	fa1c fc81 	uxtah	ip, ip, r1
 8012a78:	4471      	add	r1, lr
 8012a7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012a7e:	b289      	uxth	r1, r1
 8012a80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012a84:	f846 1b04 	str.w	r1, [r6], #4
 8012a88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a8c:	e7dd      	b.n	8012a4a <__mdiff+0xd6>
 8012a8e:	3f01      	subs	r7, #1
 8012a90:	e7e7      	b.n	8012a62 <__mdiff+0xee>
 8012a92:	bf00      	nop
 8012a94:	08013e34 	.word	0x08013e34
 8012a98:	08013e45 	.word	0x08013e45

08012a9c <__d2b>:
 8012a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012aa0:	460f      	mov	r7, r1
 8012aa2:	2101      	movs	r1, #1
 8012aa4:	ec59 8b10 	vmov	r8, r9, d0
 8012aa8:	4616      	mov	r6, r2
 8012aaa:	f7ff fcd5 	bl	8012458 <_Balloc>
 8012aae:	4604      	mov	r4, r0
 8012ab0:	b930      	cbnz	r0, 8012ac0 <__d2b+0x24>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	4b23      	ldr	r3, [pc, #140]	@ (8012b44 <__d2b+0xa8>)
 8012ab6:	4824      	ldr	r0, [pc, #144]	@ (8012b48 <__d2b+0xac>)
 8012ab8:	f240 310f 	movw	r1, #783	@ 0x30f
 8012abc:	f000 fa74 	bl	8012fa8 <__assert_func>
 8012ac0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ac4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ac8:	b10d      	cbz	r5, 8012ace <__d2b+0x32>
 8012aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012ace:	9301      	str	r3, [sp, #4]
 8012ad0:	f1b8 0300 	subs.w	r3, r8, #0
 8012ad4:	d023      	beq.n	8012b1e <__d2b+0x82>
 8012ad6:	4668      	mov	r0, sp
 8012ad8:	9300      	str	r3, [sp, #0]
 8012ada:	f7ff fd84 	bl	80125e6 <__lo0bits>
 8012ade:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ae2:	b1d0      	cbz	r0, 8012b1a <__d2b+0x7e>
 8012ae4:	f1c0 0320 	rsb	r3, r0, #32
 8012ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8012aec:	430b      	orrs	r3, r1
 8012aee:	40c2      	lsrs	r2, r0
 8012af0:	6163      	str	r3, [r4, #20]
 8012af2:	9201      	str	r2, [sp, #4]
 8012af4:	9b01      	ldr	r3, [sp, #4]
 8012af6:	61a3      	str	r3, [r4, #24]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	bf0c      	ite	eq
 8012afc:	2201      	moveq	r2, #1
 8012afe:	2202      	movne	r2, #2
 8012b00:	6122      	str	r2, [r4, #16]
 8012b02:	b1a5      	cbz	r5, 8012b2e <__d2b+0x92>
 8012b04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012b08:	4405      	add	r5, r0
 8012b0a:	603d      	str	r5, [r7, #0]
 8012b0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012b10:	6030      	str	r0, [r6, #0]
 8012b12:	4620      	mov	r0, r4
 8012b14:	b003      	add	sp, #12
 8012b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b1a:	6161      	str	r1, [r4, #20]
 8012b1c:	e7ea      	b.n	8012af4 <__d2b+0x58>
 8012b1e:	a801      	add	r0, sp, #4
 8012b20:	f7ff fd61 	bl	80125e6 <__lo0bits>
 8012b24:	9b01      	ldr	r3, [sp, #4]
 8012b26:	6163      	str	r3, [r4, #20]
 8012b28:	3020      	adds	r0, #32
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	e7e8      	b.n	8012b00 <__d2b+0x64>
 8012b2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012b36:	6038      	str	r0, [r7, #0]
 8012b38:	6918      	ldr	r0, [r3, #16]
 8012b3a:	f7ff fd35 	bl	80125a8 <__hi0bits>
 8012b3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b42:	e7e5      	b.n	8012b10 <__d2b+0x74>
 8012b44:	08013e34 	.word	0x08013e34
 8012b48:	08013e45 	.word	0x08013e45

08012b4c <__ssputs_r>:
 8012b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b50:	688e      	ldr	r6, [r1, #8]
 8012b52:	461f      	mov	r7, r3
 8012b54:	42be      	cmp	r6, r7
 8012b56:	680b      	ldr	r3, [r1, #0]
 8012b58:	4682      	mov	sl, r0
 8012b5a:	460c      	mov	r4, r1
 8012b5c:	4690      	mov	r8, r2
 8012b5e:	d82d      	bhi.n	8012bbc <__ssputs_r+0x70>
 8012b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012b68:	d026      	beq.n	8012bb8 <__ssputs_r+0x6c>
 8012b6a:	6965      	ldr	r5, [r4, #20]
 8012b6c:	6909      	ldr	r1, [r1, #16]
 8012b6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b72:	eba3 0901 	sub.w	r9, r3, r1
 8012b76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b7a:	1c7b      	adds	r3, r7, #1
 8012b7c:	444b      	add	r3, r9
 8012b7e:	106d      	asrs	r5, r5, #1
 8012b80:	429d      	cmp	r5, r3
 8012b82:	bf38      	it	cc
 8012b84:	461d      	movcc	r5, r3
 8012b86:	0553      	lsls	r3, r2, #21
 8012b88:	d527      	bpl.n	8012bda <__ssputs_r+0x8e>
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	f7ff fbd8 	bl	8012340 <_malloc_r>
 8012b90:	4606      	mov	r6, r0
 8012b92:	b360      	cbz	r0, 8012bee <__ssputs_r+0xa2>
 8012b94:	6921      	ldr	r1, [r4, #16]
 8012b96:	464a      	mov	r2, r9
 8012b98:	f7fe fcf5 	bl	8011586 <memcpy>
 8012b9c:	89a3      	ldrh	r3, [r4, #12]
 8012b9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ba6:	81a3      	strh	r3, [r4, #12]
 8012ba8:	6126      	str	r6, [r4, #16]
 8012baa:	6165      	str	r5, [r4, #20]
 8012bac:	444e      	add	r6, r9
 8012bae:	eba5 0509 	sub.w	r5, r5, r9
 8012bb2:	6026      	str	r6, [r4, #0]
 8012bb4:	60a5      	str	r5, [r4, #8]
 8012bb6:	463e      	mov	r6, r7
 8012bb8:	42be      	cmp	r6, r7
 8012bba:	d900      	bls.n	8012bbe <__ssputs_r+0x72>
 8012bbc:	463e      	mov	r6, r7
 8012bbe:	6820      	ldr	r0, [r4, #0]
 8012bc0:	4632      	mov	r2, r6
 8012bc2:	4641      	mov	r1, r8
 8012bc4:	f000 f9c6 	bl	8012f54 <memmove>
 8012bc8:	68a3      	ldr	r3, [r4, #8]
 8012bca:	1b9b      	subs	r3, r3, r6
 8012bcc:	60a3      	str	r3, [r4, #8]
 8012bce:	6823      	ldr	r3, [r4, #0]
 8012bd0:	4433      	add	r3, r6
 8012bd2:	6023      	str	r3, [r4, #0]
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bda:	462a      	mov	r2, r5
 8012bdc:	f000 fa28 	bl	8013030 <_realloc_r>
 8012be0:	4606      	mov	r6, r0
 8012be2:	2800      	cmp	r0, #0
 8012be4:	d1e0      	bne.n	8012ba8 <__ssputs_r+0x5c>
 8012be6:	6921      	ldr	r1, [r4, #16]
 8012be8:	4650      	mov	r0, sl
 8012bea:	f7ff fb35 	bl	8012258 <_free_r>
 8012bee:	230c      	movs	r3, #12
 8012bf0:	f8ca 3000 	str.w	r3, [sl]
 8012bf4:	89a3      	ldrh	r3, [r4, #12]
 8012bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bfa:	81a3      	strh	r3, [r4, #12]
 8012bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012c00:	e7e9      	b.n	8012bd6 <__ssputs_r+0x8a>
	...

08012c04 <_svfiprintf_r>:
 8012c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c08:	4698      	mov	r8, r3
 8012c0a:	898b      	ldrh	r3, [r1, #12]
 8012c0c:	061b      	lsls	r3, r3, #24
 8012c0e:	b09d      	sub	sp, #116	@ 0x74
 8012c10:	4607      	mov	r7, r0
 8012c12:	460d      	mov	r5, r1
 8012c14:	4614      	mov	r4, r2
 8012c16:	d510      	bpl.n	8012c3a <_svfiprintf_r+0x36>
 8012c18:	690b      	ldr	r3, [r1, #16]
 8012c1a:	b973      	cbnz	r3, 8012c3a <_svfiprintf_r+0x36>
 8012c1c:	2140      	movs	r1, #64	@ 0x40
 8012c1e:	f7ff fb8f 	bl	8012340 <_malloc_r>
 8012c22:	6028      	str	r0, [r5, #0]
 8012c24:	6128      	str	r0, [r5, #16]
 8012c26:	b930      	cbnz	r0, 8012c36 <_svfiprintf_r+0x32>
 8012c28:	230c      	movs	r3, #12
 8012c2a:	603b      	str	r3, [r7, #0]
 8012c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c30:	b01d      	add	sp, #116	@ 0x74
 8012c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c36:	2340      	movs	r3, #64	@ 0x40
 8012c38:	616b      	str	r3, [r5, #20]
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c3e:	2320      	movs	r3, #32
 8012c40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c48:	2330      	movs	r3, #48	@ 0x30
 8012c4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012de8 <_svfiprintf_r+0x1e4>
 8012c4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c52:	f04f 0901 	mov.w	r9, #1
 8012c56:	4623      	mov	r3, r4
 8012c58:	469a      	mov	sl, r3
 8012c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c5e:	b10a      	cbz	r2, 8012c64 <_svfiprintf_r+0x60>
 8012c60:	2a25      	cmp	r2, #37	@ 0x25
 8012c62:	d1f9      	bne.n	8012c58 <_svfiprintf_r+0x54>
 8012c64:	ebba 0b04 	subs.w	fp, sl, r4
 8012c68:	d00b      	beq.n	8012c82 <_svfiprintf_r+0x7e>
 8012c6a:	465b      	mov	r3, fp
 8012c6c:	4622      	mov	r2, r4
 8012c6e:	4629      	mov	r1, r5
 8012c70:	4638      	mov	r0, r7
 8012c72:	f7ff ff6b 	bl	8012b4c <__ssputs_r>
 8012c76:	3001      	adds	r0, #1
 8012c78:	f000 80a7 	beq.w	8012dca <_svfiprintf_r+0x1c6>
 8012c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c7e:	445a      	add	r2, fp
 8012c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c82:	f89a 3000 	ldrb.w	r3, [sl]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f000 809f 	beq.w	8012dca <_svfiprintf_r+0x1c6>
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c96:	f10a 0a01 	add.w	sl, sl, #1
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	9307      	str	r3, [sp, #28]
 8012c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ca4:	4654      	mov	r4, sl
 8012ca6:	2205      	movs	r2, #5
 8012ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cac:	484e      	ldr	r0, [pc, #312]	@ (8012de8 <_svfiprintf_r+0x1e4>)
 8012cae:	f7ed fa8f 	bl	80001d0 <memchr>
 8012cb2:	9a04      	ldr	r2, [sp, #16]
 8012cb4:	b9d8      	cbnz	r0, 8012cee <_svfiprintf_r+0xea>
 8012cb6:	06d0      	lsls	r0, r2, #27
 8012cb8:	bf44      	itt	mi
 8012cba:	2320      	movmi	r3, #32
 8012cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cc0:	0711      	lsls	r1, r2, #28
 8012cc2:	bf44      	itt	mi
 8012cc4:	232b      	movmi	r3, #43	@ 0x2b
 8012cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cca:	f89a 3000 	ldrb.w	r3, [sl]
 8012cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cd0:	d015      	beq.n	8012cfe <_svfiprintf_r+0xfa>
 8012cd2:	9a07      	ldr	r2, [sp, #28]
 8012cd4:	4654      	mov	r4, sl
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	f04f 0c0a 	mov.w	ip, #10
 8012cdc:	4621      	mov	r1, r4
 8012cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ce2:	3b30      	subs	r3, #48	@ 0x30
 8012ce4:	2b09      	cmp	r3, #9
 8012ce6:	d94b      	bls.n	8012d80 <_svfiprintf_r+0x17c>
 8012ce8:	b1b0      	cbz	r0, 8012d18 <_svfiprintf_r+0x114>
 8012cea:	9207      	str	r2, [sp, #28]
 8012cec:	e014      	b.n	8012d18 <_svfiprintf_r+0x114>
 8012cee:	eba0 0308 	sub.w	r3, r0, r8
 8012cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	9304      	str	r3, [sp, #16]
 8012cfa:	46a2      	mov	sl, r4
 8012cfc:	e7d2      	b.n	8012ca4 <_svfiprintf_r+0xa0>
 8012cfe:	9b03      	ldr	r3, [sp, #12]
 8012d00:	1d19      	adds	r1, r3, #4
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	9103      	str	r1, [sp, #12]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	bfbb      	ittet	lt
 8012d0a:	425b      	neglt	r3, r3
 8012d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8012d10:	9307      	strge	r3, [sp, #28]
 8012d12:	9307      	strlt	r3, [sp, #28]
 8012d14:	bfb8      	it	lt
 8012d16:	9204      	strlt	r2, [sp, #16]
 8012d18:	7823      	ldrb	r3, [r4, #0]
 8012d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d1c:	d10a      	bne.n	8012d34 <_svfiprintf_r+0x130>
 8012d1e:	7863      	ldrb	r3, [r4, #1]
 8012d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d22:	d132      	bne.n	8012d8a <_svfiprintf_r+0x186>
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	1d1a      	adds	r2, r3, #4
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	9203      	str	r2, [sp, #12]
 8012d2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d30:	3402      	adds	r4, #2
 8012d32:	9305      	str	r3, [sp, #20]
 8012d34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012df8 <_svfiprintf_r+0x1f4>
 8012d38:	7821      	ldrb	r1, [r4, #0]
 8012d3a:	2203      	movs	r2, #3
 8012d3c:	4650      	mov	r0, sl
 8012d3e:	f7ed fa47 	bl	80001d0 <memchr>
 8012d42:	b138      	cbz	r0, 8012d54 <_svfiprintf_r+0x150>
 8012d44:	9b04      	ldr	r3, [sp, #16]
 8012d46:	eba0 000a 	sub.w	r0, r0, sl
 8012d4a:	2240      	movs	r2, #64	@ 0x40
 8012d4c:	4082      	lsls	r2, r0
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	3401      	adds	r4, #1
 8012d52:	9304      	str	r3, [sp, #16]
 8012d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d58:	4824      	ldr	r0, [pc, #144]	@ (8012dec <_svfiprintf_r+0x1e8>)
 8012d5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d5e:	2206      	movs	r2, #6
 8012d60:	f7ed fa36 	bl	80001d0 <memchr>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d036      	beq.n	8012dd6 <_svfiprintf_r+0x1d2>
 8012d68:	4b21      	ldr	r3, [pc, #132]	@ (8012df0 <_svfiprintf_r+0x1ec>)
 8012d6a:	bb1b      	cbnz	r3, 8012db4 <_svfiprintf_r+0x1b0>
 8012d6c:	9b03      	ldr	r3, [sp, #12]
 8012d6e:	3307      	adds	r3, #7
 8012d70:	f023 0307 	bic.w	r3, r3, #7
 8012d74:	3308      	adds	r3, #8
 8012d76:	9303      	str	r3, [sp, #12]
 8012d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d7a:	4433      	add	r3, r6
 8012d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d7e:	e76a      	b.n	8012c56 <_svfiprintf_r+0x52>
 8012d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d84:	460c      	mov	r4, r1
 8012d86:	2001      	movs	r0, #1
 8012d88:	e7a8      	b.n	8012cdc <_svfiprintf_r+0xd8>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	3401      	adds	r4, #1
 8012d8e:	9305      	str	r3, [sp, #20]
 8012d90:	4619      	mov	r1, r3
 8012d92:	f04f 0c0a 	mov.w	ip, #10
 8012d96:	4620      	mov	r0, r4
 8012d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d9c:	3a30      	subs	r2, #48	@ 0x30
 8012d9e:	2a09      	cmp	r2, #9
 8012da0:	d903      	bls.n	8012daa <_svfiprintf_r+0x1a6>
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d0c6      	beq.n	8012d34 <_svfiprintf_r+0x130>
 8012da6:	9105      	str	r1, [sp, #20]
 8012da8:	e7c4      	b.n	8012d34 <_svfiprintf_r+0x130>
 8012daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dae:	4604      	mov	r4, r0
 8012db0:	2301      	movs	r3, #1
 8012db2:	e7f0      	b.n	8012d96 <_svfiprintf_r+0x192>
 8012db4:	ab03      	add	r3, sp, #12
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	462a      	mov	r2, r5
 8012dba:	4b0e      	ldr	r3, [pc, #56]	@ (8012df4 <_svfiprintf_r+0x1f0>)
 8012dbc:	a904      	add	r1, sp, #16
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	f7fd fe46 	bl	8010a50 <_printf_float>
 8012dc4:	1c42      	adds	r2, r0, #1
 8012dc6:	4606      	mov	r6, r0
 8012dc8:	d1d6      	bne.n	8012d78 <_svfiprintf_r+0x174>
 8012dca:	89ab      	ldrh	r3, [r5, #12]
 8012dcc:	065b      	lsls	r3, r3, #25
 8012dce:	f53f af2d 	bmi.w	8012c2c <_svfiprintf_r+0x28>
 8012dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dd4:	e72c      	b.n	8012c30 <_svfiprintf_r+0x2c>
 8012dd6:	ab03      	add	r3, sp, #12
 8012dd8:	9300      	str	r3, [sp, #0]
 8012dda:	462a      	mov	r2, r5
 8012ddc:	4b05      	ldr	r3, [pc, #20]	@ (8012df4 <_svfiprintf_r+0x1f0>)
 8012dde:	a904      	add	r1, sp, #16
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7fe f8cd 	bl	8010f80 <_printf_i>
 8012de6:	e7ed      	b.n	8012dc4 <_svfiprintf_r+0x1c0>
 8012de8:	08013e9e 	.word	0x08013e9e
 8012dec:	08013ea8 	.word	0x08013ea8
 8012df0:	08010a51 	.word	0x08010a51
 8012df4:	08012b4d 	.word	0x08012b4d
 8012df8:	08013ea4 	.word	0x08013ea4

08012dfc <__sflush_r>:
 8012dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e04:	0716      	lsls	r6, r2, #28
 8012e06:	4605      	mov	r5, r0
 8012e08:	460c      	mov	r4, r1
 8012e0a:	d454      	bmi.n	8012eb6 <__sflush_r+0xba>
 8012e0c:	684b      	ldr	r3, [r1, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	dc02      	bgt.n	8012e18 <__sflush_r+0x1c>
 8012e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	dd48      	ble.n	8012eaa <__sflush_r+0xae>
 8012e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e1a:	2e00      	cmp	r6, #0
 8012e1c:	d045      	beq.n	8012eaa <__sflush_r+0xae>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e24:	682f      	ldr	r7, [r5, #0]
 8012e26:	6a21      	ldr	r1, [r4, #32]
 8012e28:	602b      	str	r3, [r5, #0]
 8012e2a:	d030      	beq.n	8012e8e <__sflush_r+0x92>
 8012e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e2e:	89a3      	ldrh	r3, [r4, #12]
 8012e30:	0759      	lsls	r1, r3, #29
 8012e32:	d505      	bpl.n	8012e40 <__sflush_r+0x44>
 8012e34:	6863      	ldr	r3, [r4, #4]
 8012e36:	1ad2      	subs	r2, r2, r3
 8012e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e3a:	b10b      	cbz	r3, 8012e40 <__sflush_r+0x44>
 8012e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e3e:	1ad2      	subs	r2, r2, r3
 8012e40:	2300      	movs	r3, #0
 8012e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e44:	6a21      	ldr	r1, [r4, #32]
 8012e46:	4628      	mov	r0, r5
 8012e48:	47b0      	blx	r6
 8012e4a:	1c43      	adds	r3, r0, #1
 8012e4c:	89a3      	ldrh	r3, [r4, #12]
 8012e4e:	d106      	bne.n	8012e5e <__sflush_r+0x62>
 8012e50:	6829      	ldr	r1, [r5, #0]
 8012e52:	291d      	cmp	r1, #29
 8012e54:	d82b      	bhi.n	8012eae <__sflush_r+0xb2>
 8012e56:	4a2a      	ldr	r2, [pc, #168]	@ (8012f00 <__sflush_r+0x104>)
 8012e58:	40ca      	lsrs	r2, r1
 8012e5a:	07d6      	lsls	r6, r2, #31
 8012e5c:	d527      	bpl.n	8012eae <__sflush_r+0xb2>
 8012e5e:	2200      	movs	r2, #0
 8012e60:	6062      	str	r2, [r4, #4]
 8012e62:	04d9      	lsls	r1, r3, #19
 8012e64:	6922      	ldr	r2, [r4, #16]
 8012e66:	6022      	str	r2, [r4, #0]
 8012e68:	d504      	bpl.n	8012e74 <__sflush_r+0x78>
 8012e6a:	1c42      	adds	r2, r0, #1
 8012e6c:	d101      	bne.n	8012e72 <__sflush_r+0x76>
 8012e6e:	682b      	ldr	r3, [r5, #0]
 8012e70:	b903      	cbnz	r3, 8012e74 <__sflush_r+0x78>
 8012e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e76:	602f      	str	r7, [r5, #0]
 8012e78:	b1b9      	cbz	r1, 8012eaa <__sflush_r+0xae>
 8012e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e7e:	4299      	cmp	r1, r3
 8012e80:	d002      	beq.n	8012e88 <__sflush_r+0x8c>
 8012e82:	4628      	mov	r0, r5
 8012e84:	f7ff f9e8 	bl	8012258 <_free_r>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e8c:	e00d      	b.n	8012eaa <__sflush_r+0xae>
 8012e8e:	2301      	movs	r3, #1
 8012e90:	4628      	mov	r0, r5
 8012e92:	47b0      	blx	r6
 8012e94:	4602      	mov	r2, r0
 8012e96:	1c50      	adds	r0, r2, #1
 8012e98:	d1c9      	bne.n	8012e2e <__sflush_r+0x32>
 8012e9a:	682b      	ldr	r3, [r5, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d0c6      	beq.n	8012e2e <__sflush_r+0x32>
 8012ea0:	2b1d      	cmp	r3, #29
 8012ea2:	d001      	beq.n	8012ea8 <__sflush_r+0xac>
 8012ea4:	2b16      	cmp	r3, #22
 8012ea6:	d11e      	bne.n	8012ee6 <__sflush_r+0xea>
 8012ea8:	602f      	str	r7, [r5, #0]
 8012eaa:	2000      	movs	r0, #0
 8012eac:	e022      	b.n	8012ef4 <__sflush_r+0xf8>
 8012eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eb2:	b21b      	sxth	r3, r3
 8012eb4:	e01b      	b.n	8012eee <__sflush_r+0xf2>
 8012eb6:	690f      	ldr	r7, [r1, #16]
 8012eb8:	2f00      	cmp	r7, #0
 8012eba:	d0f6      	beq.n	8012eaa <__sflush_r+0xae>
 8012ebc:	0793      	lsls	r3, r2, #30
 8012ebe:	680e      	ldr	r6, [r1, #0]
 8012ec0:	bf08      	it	eq
 8012ec2:	694b      	ldreq	r3, [r1, #20]
 8012ec4:	600f      	str	r7, [r1, #0]
 8012ec6:	bf18      	it	ne
 8012ec8:	2300      	movne	r3, #0
 8012eca:	eba6 0807 	sub.w	r8, r6, r7
 8012ece:	608b      	str	r3, [r1, #8]
 8012ed0:	f1b8 0f00 	cmp.w	r8, #0
 8012ed4:	dde9      	ble.n	8012eaa <__sflush_r+0xae>
 8012ed6:	6a21      	ldr	r1, [r4, #32]
 8012ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012eda:	4643      	mov	r3, r8
 8012edc:	463a      	mov	r2, r7
 8012ede:	4628      	mov	r0, r5
 8012ee0:	47b0      	blx	r6
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	dc08      	bgt.n	8012ef8 <__sflush_r+0xfc>
 8012ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eee:	81a3      	strh	r3, [r4, #12]
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ef8:	4407      	add	r7, r0
 8012efa:	eba8 0800 	sub.w	r8, r8, r0
 8012efe:	e7e7      	b.n	8012ed0 <__sflush_r+0xd4>
 8012f00:	20400001 	.word	0x20400001

08012f04 <_fflush_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	690b      	ldr	r3, [r1, #16]
 8012f08:	4605      	mov	r5, r0
 8012f0a:	460c      	mov	r4, r1
 8012f0c:	b913      	cbnz	r3, 8012f14 <_fflush_r+0x10>
 8012f0e:	2500      	movs	r5, #0
 8012f10:	4628      	mov	r0, r5
 8012f12:	bd38      	pop	{r3, r4, r5, pc}
 8012f14:	b118      	cbz	r0, 8012f1e <_fflush_r+0x1a>
 8012f16:	6a03      	ldr	r3, [r0, #32]
 8012f18:	b90b      	cbnz	r3, 8012f1e <_fflush_r+0x1a>
 8012f1a:	f7fe f9db 	bl	80112d4 <__sinit>
 8012f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d0f3      	beq.n	8012f0e <_fflush_r+0xa>
 8012f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f28:	07d0      	lsls	r0, r2, #31
 8012f2a:	d404      	bmi.n	8012f36 <_fflush_r+0x32>
 8012f2c:	0599      	lsls	r1, r3, #22
 8012f2e:	d402      	bmi.n	8012f36 <_fflush_r+0x32>
 8012f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f32:	f7fe fb1e 	bl	8011572 <__retarget_lock_acquire_recursive>
 8012f36:	4628      	mov	r0, r5
 8012f38:	4621      	mov	r1, r4
 8012f3a:	f7ff ff5f 	bl	8012dfc <__sflush_r>
 8012f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f40:	07da      	lsls	r2, r3, #31
 8012f42:	4605      	mov	r5, r0
 8012f44:	d4e4      	bmi.n	8012f10 <_fflush_r+0xc>
 8012f46:	89a3      	ldrh	r3, [r4, #12]
 8012f48:	059b      	lsls	r3, r3, #22
 8012f4a:	d4e1      	bmi.n	8012f10 <_fflush_r+0xc>
 8012f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f4e:	f7fe fb11 	bl	8011574 <__retarget_lock_release_recursive>
 8012f52:	e7dd      	b.n	8012f10 <_fflush_r+0xc>

08012f54 <memmove>:
 8012f54:	4288      	cmp	r0, r1
 8012f56:	b510      	push	{r4, lr}
 8012f58:	eb01 0402 	add.w	r4, r1, r2
 8012f5c:	d902      	bls.n	8012f64 <memmove+0x10>
 8012f5e:	4284      	cmp	r4, r0
 8012f60:	4623      	mov	r3, r4
 8012f62:	d807      	bhi.n	8012f74 <memmove+0x20>
 8012f64:	1e43      	subs	r3, r0, #1
 8012f66:	42a1      	cmp	r1, r4
 8012f68:	d008      	beq.n	8012f7c <memmove+0x28>
 8012f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f72:	e7f8      	b.n	8012f66 <memmove+0x12>
 8012f74:	4402      	add	r2, r0
 8012f76:	4601      	mov	r1, r0
 8012f78:	428a      	cmp	r2, r1
 8012f7a:	d100      	bne.n	8012f7e <memmove+0x2a>
 8012f7c:	bd10      	pop	{r4, pc}
 8012f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f86:	e7f7      	b.n	8012f78 <memmove+0x24>

08012f88 <_sbrk_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4d06      	ldr	r5, [pc, #24]	@ (8012fa4 <_sbrk_r+0x1c>)
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	4604      	mov	r4, r0
 8012f90:	4608      	mov	r0, r1
 8012f92:	602b      	str	r3, [r5, #0]
 8012f94:	f7ef ff60 	bl	8002e58 <_sbrk>
 8012f98:	1c43      	adds	r3, r0, #1
 8012f9a:	d102      	bne.n	8012fa2 <_sbrk_r+0x1a>
 8012f9c:	682b      	ldr	r3, [r5, #0]
 8012f9e:	b103      	cbz	r3, 8012fa2 <_sbrk_r+0x1a>
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	20006798 	.word	0x20006798

08012fa8 <__assert_func>:
 8012fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012faa:	4614      	mov	r4, r2
 8012fac:	461a      	mov	r2, r3
 8012fae:	4b09      	ldr	r3, [pc, #36]	@ (8012fd4 <__assert_func+0x2c>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	68d8      	ldr	r0, [r3, #12]
 8012fb6:	b14c      	cbz	r4, 8012fcc <__assert_func+0x24>
 8012fb8:	4b07      	ldr	r3, [pc, #28]	@ (8012fd8 <__assert_func+0x30>)
 8012fba:	9100      	str	r1, [sp, #0]
 8012fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fc0:	4906      	ldr	r1, [pc, #24]	@ (8012fdc <__assert_func+0x34>)
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	f000 f870 	bl	80130a8 <fiprintf>
 8012fc8:	f000 f880 	bl	80130cc <abort>
 8012fcc:	4b04      	ldr	r3, [pc, #16]	@ (8012fe0 <__assert_func+0x38>)
 8012fce:	461c      	mov	r4, r3
 8012fd0:	e7f3      	b.n	8012fba <__assert_func+0x12>
 8012fd2:	bf00      	nop
 8012fd4:	2000010c 	.word	0x2000010c
 8012fd8:	08013eb9 	.word	0x08013eb9
 8012fdc:	08013ec6 	.word	0x08013ec6
 8012fe0:	08013ef4 	.word	0x08013ef4

08012fe4 <_calloc_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	fba1 5402 	umull	r5, r4, r1, r2
 8012fea:	b934      	cbnz	r4, 8012ffa <_calloc_r+0x16>
 8012fec:	4629      	mov	r1, r5
 8012fee:	f7ff f9a7 	bl	8012340 <_malloc_r>
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	b928      	cbnz	r0, 8013002 <_calloc_r+0x1e>
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	bd70      	pop	{r4, r5, r6, pc}
 8012ffa:	220c      	movs	r2, #12
 8012ffc:	6002      	str	r2, [r0, #0]
 8012ffe:	2600      	movs	r6, #0
 8013000:	e7f9      	b.n	8012ff6 <_calloc_r+0x12>
 8013002:	462a      	mov	r2, r5
 8013004:	4621      	mov	r1, r4
 8013006:	f7fe fa36 	bl	8011476 <memset>
 801300a:	e7f4      	b.n	8012ff6 <_calloc_r+0x12>

0801300c <__ascii_mbtowc>:
 801300c:	b082      	sub	sp, #8
 801300e:	b901      	cbnz	r1, 8013012 <__ascii_mbtowc+0x6>
 8013010:	a901      	add	r1, sp, #4
 8013012:	b142      	cbz	r2, 8013026 <__ascii_mbtowc+0x1a>
 8013014:	b14b      	cbz	r3, 801302a <__ascii_mbtowc+0x1e>
 8013016:	7813      	ldrb	r3, [r2, #0]
 8013018:	600b      	str	r3, [r1, #0]
 801301a:	7812      	ldrb	r2, [r2, #0]
 801301c:	1e10      	subs	r0, r2, #0
 801301e:	bf18      	it	ne
 8013020:	2001      	movne	r0, #1
 8013022:	b002      	add	sp, #8
 8013024:	4770      	bx	lr
 8013026:	4610      	mov	r0, r2
 8013028:	e7fb      	b.n	8013022 <__ascii_mbtowc+0x16>
 801302a:	f06f 0001 	mvn.w	r0, #1
 801302e:	e7f8      	b.n	8013022 <__ascii_mbtowc+0x16>

08013030 <_realloc_r>:
 8013030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013034:	4607      	mov	r7, r0
 8013036:	4614      	mov	r4, r2
 8013038:	460d      	mov	r5, r1
 801303a:	b921      	cbnz	r1, 8013046 <_realloc_r+0x16>
 801303c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013040:	4611      	mov	r1, r2
 8013042:	f7ff b97d 	b.w	8012340 <_malloc_r>
 8013046:	b92a      	cbnz	r2, 8013054 <_realloc_r+0x24>
 8013048:	f7ff f906 	bl	8012258 <_free_r>
 801304c:	4625      	mov	r5, r4
 801304e:	4628      	mov	r0, r5
 8013050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013054:	f000 f841 	bl	80130da <_malloc_usable_size_r>
 8013058:	4284      	cmp	r4, r0
 801305a:	4606      	mov	r6, r0
 801305c:	d802      	bhi.n	8013064 <_realloc_r+0x34>
 801305e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013062:	d8f4      	bhi.n	801304e <_realloc_r+0x1e>
 8013064:	4621      	mov	r1, r4
 8013066:	4638      	mov	r0, r7
 8013068:	f7ff f96a 	bl	8012340 <_malloc_r>
 801306c:	4680      	mov	r8, r0
 801306e:	b908      	cbnz	r0, 8013074 <_realloc_r+0x44>
 8013070:	4645      	mov	r5, r8
 8013072:	e7ec      	b.n	801304e <_realloc_r+0x1e>
 8013074:	42b4      	cmp	r4, r6
 8013076:	4622      	mov	r2, r4
 8013078:	4629      	mov	r1, r5
 801307a:	bf28      	it	cs
 801307c:	4632      	movcs	r2, r6
 801307e:	f7fe fa82 	bl	8011586 <memcpy>
 8013082:	4629      	mov	r1, r5
 8013084:	4638      	mov	r0, r7
 8013086:	f7ff f8e7 	bl	8012258 <_free_r>
 801308a:	e7f1      	b.n	8013070 <_realloc_r+0x40>

0801308c <__ascii_wctomb>:
 801308c:	4603      	mov	r3, r0
 801308e:	4608      	mov	r0, r1
 8013090:	b141      	cbz	r1, 80130a4 <__ascii_wctomb+0x18>
 8013092:	2aff      	cmp	r2, #255	@ 0xff
 8013094:	d904      	bls.n	80130a0 <__ascii_wctomb+0x14>
 8013096:	228a      	movs	r2, #138	@ 0x8a
 8013098:	601a      	str	r2, [r3, #0]
 801309a:	f04f 30ff 	mov.w	r0, #4294967295
 801309e:	4770      	bx	lr
 80130a0:	700a      	strb	r2, [r1, #0]
 80130a2:	2001      	movs	r0, #1
 80130a4:	4770      	bx	lr
	...

080130a8 <fiprintf>:
 80130a8:	b40e      	push	{r1, r2, r3}
 80130aa:	b503      	push	{r0, r1, lr}
 80130ac:	4601      	mov	r1, r0
 80130ae:	ab03      	add	r3, sp, #12
 80130b0:	4805      	ldr	r0, [pc, #20]	@ (80130c8 <fiprintf+0x20>)
 80130b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80130b6:	6800      	ldr	r0, [r0, #0]
 80130b8:	9301      	str	r3, [sp, #4]
 80130ba:	f000 f83f 	bl	801313c <_vfiprintf_r>
 80130be:	b002      	add	sp, #8
 80130c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80130c4:	b003      	add	sp, #12
 80130c6:	4770      	bx	lr
 80130c8:	2000010c 	.word	0x2000010c

080130cc <abort>:
 80130cc:	b508      	push	{r3, lr}
 80130ce:	2006      	movs	r0, #6
 80130d0:	f000 fa08 	bl	80134e4 <raise>
 80130d4:	2001      	movs	r0, #1
 80130d6:	f7ef fe47 	bl	8002d68 <_exit>

080130da <_malloc_usable_size_r>:
 80130da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130de:	1f18      	subs	r0, r3, #4
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	bfbc      	itt	lt
 80130e4:	580b      	ldrlt	r3, [r1, r0]
 80130e6:	18c0      	addlt	r0, r0, r3
 80130e8:	4770      	bx	lr

080130ea <__sfputc_r>:
 80130ea:	6893      	ldr	r3, [r2, #8]
 80130ec:	3b01      	subs	r3, #1
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	b410      	push	{r4}
 80130f2:	6093      	str	r3, [r2, #8]
 80130f4:	da08      	bge.n	8013108 <__sfputc_r+0x1e>
 80130f6:	6994      	ldr	r4, [r2, #24]
 80130f8:	42a3      	cmp	r3, r4
 80130fa:	db01      	blt.n	8013100 <__sfputc_r+0x16>
 80130fc:	290a      	cmp	r1, #10
 80130fe:	d103      	bne.n	8013108 <__sfputc_r+0x1e>
 8013100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013104:	f000 b932 	b.w	801336c <__swbuf_r>
 8013108:	6813      	ldr	r3, [r2, #0]
 801310a:	1c58      	adds	r0, r3, #1
 801310c:	6010      	str	r0, [r2, #0]
 801310e:	7019      	strb	r1, [r3, #0]
 8013110:	4608      	mov	r0, r1
 8013112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013116:	4770      	bx	lr

08013118 <__sfputs_r>:
 8013118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311a:	4606      	mov	r6, r0
 801311c:	460f      	mov	r7, r1
 801311e:	4614      	mov	r4, r2
 8013120:	18d5      	adds	r5, r2, r3
 8013122:	42ac      	cmp	r4, r5
 8013124:	d101      	bne.n	801312a <__sfputs_r+0x12>
 8013126:	2000      	movs	r0, #0
 8013128:	e007      	b.n	801313a <__sfputs_r+0x22>
 801312a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801312e:	463a      	mov	r2, r7
 8013130:	4630      	mov	r0, r6
 8013132:	f7ff ffda 	bl	80130ea <__sfputc_r>
 8013136:	1c43      	adds	r3, r0, #1
 8013138:	d1f3      	bne.n	8013122 <__sfputs_r+0xa>
 801313a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801313c <_vfiprintf_r>:
 801313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013140:	460d      	mov	r5, r1
 8013142:	b09d      	sub	sp, #116	@ 0x74
 8013144:	4614      	mov	r4, r2
 8013146:	4698      	mov	r8, r3
 8013148:	4606      	mov	r6, r0
 801314a:	b118      	cbz	r0, 8013154 <_vfiprintf_r+0x18>
 801314c:	6a03      	ldr	r3, [r0, #32]
 801314e:	b90b      	cbnz	r3, 8013154 <_vfiprintf_r+0x18>
 8013150:	f7fe f8c0 	bl	80112d4 <__sinit>
 8013154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013156:	07d9      	lsls	r1, r3, #31
 8013158:	d405      	bmi.n	8013166 <_vfiprintf_r+0x2a>
 801315a:	89ab      	ldrh	r3, [r5, #12]
 801315c:	059a      	lsls	r2, r3, #22
 801315e:	d402      	bmi.n	8013166 <_vfiprintf_r+0x2a>
 8013160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013162:	f7fe fa06 	bl	8011572 <__retarget_lock_acquire_recursive>
 8013166:	89ab      	ldrh	r3, [r5, #12]
 8013168:	071b      	lsls	r3, r3, #28
 801316a:	d501      	bpl.n	8013170 <_vfiprintf_r+0x34>
 801316c:	692b      	ldr	r3, [r5, #16]
 801316e:	b99b      	cbnz	r3, 8013198 <_vfiprintf_r+0x5c>
 8013170:	4629      	mov	r1, r5
 8013172:	4630      	mov	r0, r6
 8013174:	f000 f938 	bl	80133e8 <__swsetup_r>
 8013178:	b170      	cbz	r0, 8013198 <_vfiprintf_r+0x5c>
 801317a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801317c:	07dc      	lsls	r4, r3, #31
 801317e:	d504      	bpl.n	801318a <_vfiprintf_r+0x4e>
 8013180:	f04f 30ff 	mov.w	r0, #4294967295
 8013184:	b01d      	add	sp, #116	@ 0x74
 8013186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801318a:	89ab      	ldrh	r3, [r5, #12]
 801318c:	0598      	lsls	r0, r3, #22
 801318e:	d4f7      	bmi.n	8013180 <_vfiprintf_r+0x44>
 8013190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013192:	f7fe f9ef 	bl	8011574 <__retarget_lock_release_recursive>
 8013196:	e7f3      	b.n	8013180 <_vfiprintf_r+0x44>
 8013198:	2300      	movs	r3, #0
 801319a:	9309      	str	r3, [sp, #36]	@ 0x24
 801319c:	2320      	movs	r3, #32
 801319e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80131a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80131a6:	2330      	movs	r3, #48	@ 0x30
 80131a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013358 <_vfiprintf_r+0x21c>
 80131ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80131b0:	f04f 0901 	mov.w	r9, #1
 80131b4:	4623      	mov	r3, r4
 80131b6:	469a      	mov	sl, r3
 80131b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131bc:	b10a      	cbz	r2, 80131c2 <_vfiprintf_r+0x86>
 80131be:	2a25      	cmp	r2, #37	@ 0x25
 80131c0:	d1f9      	bne.n	80131b6 <_vfiprintf_r+0x7a>
 80131c2:	ebba 0b04 	subs.w	fp, sl, r4
 80131c6:	d00b      	beq.n	80131e0 <_vfiprintf_r+0xa4>
 80131c8:	465b      	mov	r3, fp
 80131ca:	4622      	mov	r2, r4
 80131cc:	4629      	mov	r1, r5
 80131ce:	4630      	mov	r0, r6
 80131d0:	f7ff ffa2 	bl	8013118 <__sfputs_r>
 80131d4:	3001      	adds	r0, #1
 80131d6:	f000 80a7 	beq.w	8013328 <_vfiprintf_r+0x1ec>
 80131da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80131dc:	445a      	add	r2, fp
 80131de:	9209      	str	r2, [sp, #36]	@ 0x24
 80131e0:	f89a 3000 	ldrb.w	r3, [sl]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f000 809f 	beq.w	8013328 <_vfiprintf_r+0x1ec>
 80131ea:	2300      	movs	r3, #0
 80131ec:	f04f 32ff 	mov.w	r2, #4294967295
 80131f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131f4:	f10a 0a01 	add.w	sl, sl, #1
 80131f8:	9304      	str	r3, [sp, #16]
 80131fa:	9307      	str	r3, [sp, #28]
 80131fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013200:	931a      	str	r3, [sp, #104]	@ 0x68
 8013202:	4654      	mov	r4, sl
 8013204:	2205      	movs	r2, #5
 8013206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801320a:	4853      	ldr	r0, [pc, #332]	@ (8013358 <_vfiprintf_r+0x21c>)
 801320c:	f7ec ffe0 	bl	80001d0 <memchr>
 8013210:	9a04      	ldr	r2, [sp, #16]
 8013212:	b9d8      	cbnz	r0, 801324c <_vfiprintf_r+0x110>
 8013214:	06d1      	lsls	r1, r2, #27
 8013216:	bf44      	itt	mi
 8013218:	2320      	movmi	r3, #32
 801321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801321e:	0713      	lsls	r3, r2, #28
 8013220:	bf44      	itt	mi
 8013222:	232b      	movmi	r3, #43	@ 0x2b
 8013224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013228:	f89a 3000 	ldrb.w	r3, [sl]
 801322c:	2b2a      	cmp	r3, #42	@ 0x2a
 801322e:	d015      	beq.n	801325c <_vfiprintf_r+0x120>
 8013230:	9a07      	ldr	r2, [sp, #28]
 8013232:	4654      	mov	r4, sl
 8013234:	2000      	movs	r0, #0
 8013236:	f04f 0c0a 	mov.w	ip, #10
 801323a:	4621      	mov	r1, r4
 801323c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013240:	3b30      	subs	r3, #48	@ 0x30
 8013242:	2b09      	cmp	r3, #9
 8013244:	d94b      	bls.n	80132de <_vfiprintf_r+0x1a2>
 8013246:	b1b0      	cbz	r0, 8013276 <_vfiprintf_r+0x13a>
 8013248:	9207      	str	r2, [sp, #28]
 801324a:	e014      	b.n	8013276 <_vfiprintf_r+0x13a>
 801324c:	eba0 0308 	sub.w	r3, r0, r8
 8013250:	fa09 f303 	lsl.w	r3, r9, r3
 8013254:	4313      	orrs	r3, r2
 8013256:	9304      	str	r3, [sp, #16]
 8013258:	46a2      	mov	sl, r4
 801325a:	e7d2      	b.n	8013202 <_vfiprintf_r+0xc6>
 801325c:	9b03      	ldr	r3, [sp, #12]
 801325e:	1d19      	adds	r1, r3, #4
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	9103      	str	r1, [sp, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	bfbb      	ittet	lt
 8013268:	425b      	neglt	r3, r3
 801326a:	f042 0202 	orrlt.w	r2, r2, #2
 801326e:	9307      	strge	r3, [sp, #28]
 8013270:	9307      	strlt	r3, [sp, #28]
 8013272:	bfb8      	it	lt
 8013274:	9204      	strlt	r2, [sp, #16]
 8013276:	7823      	ldrb	r3, [r4, #0]
 8013278:	2b2e      	cmp	r3, #46	@ 0x2e
 801327a:	d10a      	bne.n	8013292 <_vfiprintf_r+0x156>
 801327c:	7863      	ldrb	r3, [r4, #1]
 801327e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013280:	d132      	bne.n	80132e8 <_vfiprintf_r+0x1ac>
 8013282:	9b03      	ldr	r3, [sp, #12]
 8013284:	1d1a      	adds	r2, r3, #4
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	9203      	str	r2, [sp, #12]
 801328a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801328e:	3402      	adds	r4, #2
 8013290:	9305      	str	r3, [sp, #20]
 8013292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013368 <_vfiprintf_r+0x22c>
 8013296:	7821      	ldrb	r1, [r4, #0]
 8013298:	2203      	movs	r2, #3
 801329a:	4650      	mov	r0, sl
 801329c:	f7ec ff98 	bl	80001d0 <memchr>
 80132a0:	b138      	cbz	r0, 80132b2 <_vfiprintf_r+0x176>
 80132a2:	9b04      	ldr	r3, [sp, #16]
 80132a4:	eba0 000a 	sub.w	r0, r0, sl
 80132a8:	2240      	movs	r2, #64	@ 0x40
 80132aa:	4082      	lsls	r2, r0
 80132ac:	4313      	orrs	r3, r2
 80132ae:	3401      	adds	r4, #1
 80132b0:	9304      	str	r3, [sp, #16]
 80132b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132b6:	4829      	ldr	r0, [pc, #164]	@ (801335c <_vfiprintf_r+0x220>)
 80132b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80132bc:	2206      	movs	r2, #6
 80132be:	f7ec ff87 	bl	80001d0 <memchr>
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d03f      	beq.n	8013346 <_vfiprintf_r+0x20a>
 80132c6:	4b26      	ldr	r3, [pc, #152]	@ (8013360 <_vfiprintf_r+0x224>)
 80132c8:	bb1b      	cbnz	r3, 8013312 <_vfiprintf_r+0x1d6>
 80132ca:	9b03      	ldr	r3, [sp, #12]
 80132cc:	3307      	adds	r3, #7
 80132ce:	f023 0307 	bic.w	r3, r3, #7
 80132d2:	3308      	adds	r3, #8
 80132d4:	9303      	str	r3, [sp, #12]
 80132d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132d8:	443b      	add	r3, r7
 80132da:	9309      	str	r3, [sp, #36]	@ 0x24
 80132dc:	e76a      	b.n	80131b4 <_vfiprintf_r+0x78>
 80132de:	fb0c 3202 	mla	r2, ip, r2, r3
 80132e2:	460c      	mov	r4, r1
 80132e4:	2001      	movs	r0, #1
 80132e6:	e7a8      	b.n	801323a <_vfiprintf_r+0xfe>
 80132e8:	2300      	movs	r3, #0
 80132ea:	3401      	adds	r4, #1
 80132ec:	9305      	str	r3, [sp, #20]
 80132ee:	4619      	mov	r1, r3
 80132f0:	f04f 0c0a 	mov.w	ip, #10
 80132f4:	4620      	mov	r0, r4
 80132f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132fa:	3a30      	subs	r2, #48	@ 0x30
 80132fc:	2a09      	cmp	r2, #9
 80132fe:	d903      	bls.n	8013308 <_vfiprintf_r+0x1cc>
 8013300:	2b00      	cmp	r3, #0
 8013302:	d0c6      	beq.n	8013292 <_vfiprintf_r+0x156>
 8013304:	9105      	str	r1, [sp, #20]
 8013306:	e7c4      	b.n	8013292 <_vfiprintf_r+0x156>
 8013308:	fb0c 2101 	mla	r1, ip, r1, r2
 801330c:	4604      	mov	r4, r0
 801330e:	2301      	movs	r3, #1
 8013310:	e7f0      	b.n	80132f4 <_vfiprintf_r+0x1b8>
 8013312:	ab03      	add	r3, sp, #12
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	462a      	mov	r2, r5
 8013318:	4b12      	ldr	r3, [pc, #72]	@ (8013364 <_vfiprintf_r+0x228>)
 801331a:	a904      	add	r1, sp, #16
 801331c:	4630      	mov	r0, r6
 801331e:	f7fd fb97 	bl	8010a50 <_printf_float>
 8013322:	4607      	mov	r7, r0
 8013324:	1c78      	adds	r0, r7, #1
 8013326:	d1d6      	bne.n	80132d6 <_vfiprintf_r+0x19a>
 8013328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801332a:	07d9      	lsls	r1, r3, #31
 801332c:	d405      	bmi.n	801333a <_vfiprintf_r+0x1fe>
 801332e:	89ab      	ldrh	r3, [r5, #12]
 8013330:	059a      	lsls	r2, r3, #22
 8013332:	d402      	bmi.n	801333a <_vfiprintf_r+0x1fe>
 8013334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013336:	f7fe f91d 	bl	8011574 <__retarget_lock_release_recursive>
 801333a:	89ab      	ldrh	r3, [r5, #12]
 801333c:	065b      	lsls	r3, r3, #25
 801333e:	f53f af1f 	bmi.w	8013180 <_vfiprintf_r+0x44>
 8013342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013344:	e71e      	b.n	8013184 <_vfiprintf_r+0x48>
 8013346:	ab03      	add	r3, sp, #12
 8013348:	9300      	str	r3, [sp, #0]
 801334a:	462a      	mov	r2, r5
 801334c:	4b05      	ldr	r3, [pc, #20]	@ (8013364 <_vfiprintf_r+0x228>)
 801334e:	a904      	add	r1, sp, #16
 8013350:	4630      	mov	r0, r6
 8013352:	f7fd fe15 	bl	8010f80 <_printf_i>
 8013356:	e7e4      	b.n	8013322 <_vfiprintf_r+0x1e6>
 8013358:	08013e9e 	.word	0x08013e9e
 801335c:	08013ea8 	.word	0x08013ea8
 8013360:	08010a51 	.word	0x08010a51
 8013364:	08013119 	.word	0x08013119
 8013368:	08013ea4 	.word	0x08013ea4

0801336c <__swbuf_r>:
 801336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336e:	460e      	mov	r6, r1
 8013370:	4614      	mov	r4, r2
 8013372:	4605      	mov	r5, r0
 8013374:	b118      	cbz	r0, 801337e <__swbuf_r+0x12>
 8013376:	6a03      	ldr	r3, [r0, #32]
 8013378:	b90b      	cbnz	r3, 801337e <__swbuf_r+0x12>
 801337a:	f7fd ffab 	bl	80112d4 <__sinit>
 801337e:	69a3      	ldr	r3, [r4, #24]
 8013380:	60a3      	str	r3, [r4, #8]
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	071a      	lsls	r2, r3, #28
 8013386:	d501      	bpl.n	801338c <__swbuf_r+0x20>
 8013388:	6923      	ldr	r3, [r4, #16]
 801338a:	b943      	cbnz	r3, 801339e <__swbuf_r+0x32>
 801338c:	4621      	mov	r1, r4
 801338e:	4628      	mov	r0, r5
 8013390:	f000 f82a 	bl	80133e8 <__swsetup_r>
 8013394:	b118      	cbz	r0, 801339e <__swbuf_r+0x32>
 8013396:	f04f 37ff 	mov.w	r7, #4294967295
 801339a:	4638      	mov	r0, r7
 801339c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801339e:	6823      	ldr	r3, [r4, #0]
 80133a0:	6922      	ldr	r2, [r4, #16]
 80133a2:	1a98      	subs	r0, r3, r2
 80133a4:	6963      	ldr	r3, [r4, #20]
 80133a6:	b2f6      	uxtb	r6, r6
 80133a8:	4283      	cmp	r3, r0
 80133aa:	4637      	mov	r7, r6
 80133ac:	dc05      	bgt.n	80133ba <__swbuf_r+0x4e>
 80133ae:	4621      	mov	r1, r4
 80133b0:	4628      	mov	r0, r5
 80133b2:	f7ff fda7 	bl	8012f04 <_fflush_r>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d1ed      	bne.n	8013396 <__swbuf_r+0x2a>
 80133ba:	68a3      	ldr	r3, [r4, #8]
 80133bc:	3b01      	subs	r3, #1
 80133be:	60a3      	str	r3, [r4, #8]
 80133c0:	6823      	ldr	r3, [r4, #0]
 80133c2:	1c5a      	adds	r2, r3, #1
 80133c4:	6022      	str	r2, [r4, #0]
 80133c6:	701e      	strb	r6, [r3, #0]
 80133c8:	6962      	ldr	r2, [r4, #20]
 80133ca:	1c43      	adds	r3, r0, #1
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d004      	beq.n	80133da <__swbuf_r+0x6e>
 80133d0:	89a3      	ldrh	r3, [r4, #12]
 80133d2:	07db      	lsls	r3, r3, #31
 80133d4:	d5e1      	bpl.n	801339a <__swbuf_r+0x2e>
 80133d6:	2e0a      	cmp	r6, #10
 80133d8:	d1df      	bne.n	801339a <__swbuf_r+0x2e>
 80133da:	4621      	mov	r1, r4
 80133dc:	4628      	mov	r0, r5
 80133de:	f7ff fd91 	bl	8012f04 <_fflush_r>
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d0d9      	beq.n	801339a <__swbuf_r+0x2e>
 80133e6:	e7d6      	b.n	8013396 <__swbuf_r+0x2a>

080133e8 <__swsetup_r>:
 80133e8:	b538      	push	{r3, r4, r5, lr}
 80133ea:	4b29      	ldr	r3, [pc, #164]	@ (8013490 <__swsetup_r+0xa8>)
 80133ec:	4605      	mov	r5, r0
 80133ee:	6818      	ldr	r0, [r3, #0]
 80133f0:	460c      	mov	r4, r1
 80133f2:	b118      	cbz	r0, 80133fc <__swsetup_r+0x14>
 80133f4:	6a03      	ldr	r3, [r0, #32]
 80133f6:	b90b      	cbnz	r3, 80133fc <__swsetup_r+0x14>
 80133f8:	f7fd ff6c 	bl	80112d4 <__sinit>
 80133fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013400:	0719      	lsls	r1, r3, #28
 8013402:	d422      	bmi.n	801344a <__swsetup_r+0x62>
 8013404:	06da      	lsls	r2, r3, #27
 8013406:	d407      	bmi.n	8013418 <__swsetup_r+0x30>
 8013408:	2209      	movs	r2, #9
 801340a:	602a      	str	r2, [r5, #0]
 801340c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013410:	81a3      	strh	r3, [r4, #12]
 8013412:	f04f 30ff 	mov.w	r0, #4294967295
 8013416:	e033      	b.n	8013480 <__swsetup_r+0x98>
 8013418:	0758      	lsls	r0, r3, #29
 801341a:	d512      	bpl.n	8013442 <__swsetup_r+0x5a>
 801341c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801341e:	b141      	cbz	r1, 8013432 <__swsetup_r+0x4a>
 8013420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013424:	4299      	cmp	r1, r3
 8013426:	d002      	beq.n	801342e <__swsetup_r+0x46>
 8013428:	4628      	mov	r0, r5
 801342a:	f7fe ff15 	bl	8012258 <_free_r>
 801342e:	2300      	movs	r3, #0
 8013430:	6363      	str	r3, [r4, #52]	@ 0x34
 8013432:	89a3      	ldrh	r3, [r4, #12]
 8013434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013438:	81a3      	strh	r3, [r4, #12]
 801343a:	2300      	movs	r3, #0
 801343c:	6063      	str	r3, [r4, #4]
 801343e:	6923      	ldr	r3, [r4, #16]
 8013440:	6023      	str	r3, [r4, #0]
 8013442:	89a3      	ldrh	r3, [r4, #12]
 8013444:	f043 0308 	orr.w	r3, r3, #8
 8013448:	81a3      	strh	r3, [r4, #12]
 801344a:	6923      	ldr	r3, [r4, #16]
 801344c:	b94b      	cbnz	r3, 8013462 <__swsetup_r+0x7a>
 801344e:	89a3      	ldrh	r3, [r4, #12]
 8013450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013458:	d003      	beq.n	8013462 <__swsetup_r+0x7a>
 801345a:	4621      	mov	r1, r4
 801345c:	4628      	mov	r0, r5
 801345e:	f000 f883 	bl	8013568 <__smakebuf_r>
 8013462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013466:	f013 0201 	ands.w	r2, r3, #1
 801346a:	d00a      	beq.n	8013482 <__swsetup_r+0x9a>
 801346c:	2200      	movs	r2, #0
 801346e:	60a2      	str	r2, [r4, #8]
 8013470:	6962      	ldr	r2, [r4, #20]
 8013472:	4252      	negs	r2, r2
 8013474:	61a2      	str	r2, [r4, #24]
 8013476:	6922      	ldr	r2, [r4, #16]
 8013478:	b942      	cbnz	r2, 801348c <__swsetup_r+0xa4>
 801347a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801347e:	d1c5      	bne.n	801340c <__swsetup_r+0x24>
 8013480:	bd38      	pop	{r3, r4, r5, pc}
 8013482:	0799      	lsls	r1, r3, #30
 8013484:	bf58      	it	pl
 8013486:	6962      	ldrpl	r2, [r4, #20]
 8013488:	60a2      	str	r2, [r4, #8]
 801348a:	e7f4      	b.n	8013476 <__swsetup_r+0x8e>
 801348c:	2000      	movs	r0, #0
 801348e:	e7f7      	b.n	8013480 <__swsetup_r+0x98>
 8013490:	2000010c 	.word	0x2000010c

08013494 <_raise_r>:
 8013494:	291f      	cmp	r1, #31
 8013496:	b538      	push	{r3, r4, r5, lr}
 8013498:	4605      	mov	r5, r0
 801349a:	460c      	mov	r4, r1
 801349c:	d904      	bls.n	80134a8 <_raise_r+0x14>
 801349e:	2316      	movs	r3, #22
 80134a0:	6003      	str	r3, [r0, #0]
 80134a2:	f04f 30ff 	mov.w	r0, #4294967295
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80134aa:	b112      	cbz	r2, 80134b2 <_raise_r+0x1e>
 80134ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134b0:	b94b      	cbnz	r3, 80134c6 <_raise_r+0x32>
 80134b2:	4628      	mov	r0, r5
 80134b4:	f000 f830 	bl	8013518 <_getpid_r>
 80134b8:	4622      	mov	r2, r4
 80134ba:	4601      	mov	r1, r0
 80134bc:	4628      	mov	r0, r5
 80134be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134c2:	f000 b817 	b.w	80134f4 <_kill_r>
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d00a      	beq.n	80134e0 <_raise_r+0x4c>
 80134ca:	1c59      	adds	r1, r3, #1
 80134cc:	d103      	bne.n	80134d6 <_raise_r+0x42>
 80134ce:	2316      	movs	r3, #22
 80134d0:	6003      	str	r3, [r0, #0]
 80134d2:	2001      	movs	r0, #1
 80134d4:	e7e7      	b.n	80134a6 <_raise_r+0x12>
 80134d6:	2100      	movs	r1, #0
 80134d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80134dc:	4620      	mov	r0, r4
 80134de:	4798      	blx	r3
 80134e0:	2000      	movs	r0, #0
 80134e2:	e7e0      	b.n	80134a6 <_raise_r+0x12>

080134e4 <raise>:
 80134e4:	4b02      	ldr	r3, [pc, #8]	@ (80134f0 <raise+0xc>)
 80134e6:	4601      	mov	r1, r0
 80134e8:	6818      	ldr	r0, [r3, #0]
 80134ea:	f7ff bfd3 	b.w	8013494 <_raise_r>
 80134ee:	bf00      	nop
 80134f0:	2000010c 	.word	0x2000010c

080134f4 <_kill_r>:
 80134f4:	b538      	push	{r3, r4, r5, lr}
 80134f6:	4d07      	ldr	r5, [pc, #28]	@ (8013514 <_kill_r+0x20>)
 80134f8:	2300      	movs	r3, #0
 80134fa:	4604      	mov	r4, r0
 80134fc:	4608      	mov	r0, r1
 80134fe:	4611      	mov	r1, r2
 8013500:	602b      	str	r3, [r5, #0]
 8013502:	f7ef fc21 	bl	8002d48 <_kill>
 8013506:	1c43      	adds	r3, r0, #1
 8013508:	d102      	bne.n	8013510 <_kill_r+0x1c>
 801350a:	682b      	ldr	r3, [r5, #0]
 801350c:	b103      	cbz	r3, 8013510 <_kill_r+0x1c>
 801350e:	6023      	str	r3, [r4, #0]
 8013510:	bd38      	pop	{r3, r4, r5, pc}
 8013512:	bf00      	nop
 8013514:	20006798 	.word	0x20006798

08013518 <_getpid_r>:
 8013518:	f7ef bc0e 	b.w	8002d38 <_getpid>

0801351c <__swhatbuf_r>:
 801351c:	b570      	push	{r4, r5, r6, lr}
 801351e:	460c      	mov	r4, r1
 8013520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013524:	2900      	cmp	r1, #0
 8013526:	b096      	sub	sp, #88	@ 0x58
 8013528:	4615      	mov	r5, r2
 801352a:	461e      	mov	r6, r3
 801352c:	da0d      	bge.n	801354a <__swhatbuf_r+0x2e>
 801352e:	89a3      	ldrh	r3, [r4, #12]
 8013530:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013534:	f04f 0100 	mov.w	r1, #0
 8013538:	bf14      	ite	ne
 801353a:	2340      	movne	r3, #64	@ 0x40
 801353c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013540:	2000      	movs	r0, #0
 8013542:	6031      	str	r1, [r6, #0]
 8013544:	602b      	str	r3, [r5, #0]
 8013546:	b016      	add	sp, #88	@ 0x58
 8013548:	bd70      	pop	{r4, r5, r6, pc}
 801354a:	466a      	mov	r2, sp
 801354c:	f000 f848 	bl	80135e0 <_fstat_r>
 8013550:	2800      	cmp	r0, #0
 8013552:	dbec      	blt.n	801352e <__swhatbuf_r+0x12>
 8013554:	9901      	ldr	r1, [sp, #4]
 8013556:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801355a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801355e:	4259      	negs	r1, r3
 8013560:	4159      	adcs	r1, r3
 8013562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013566:	e7eb      	b.n	8013540 <__swhatbuf_r+0x24>

08013568 <__smakebuf_r>:
 8013568:	898b      	ldrh	r3, [r1, #12]
 801356a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801356c:	079d      	lsls	r5, r3, #30
 801356e:	4606      	mov	r6, r0
 8013570:	460c      	mov	r4, r1
 8013572:	d507      	bpl.n	8013584 <__smakebuf_r+0x1c>
 8013574:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013578:	6023      	str	r3, [r4, #0]
 801357a:	6123      	str	r3, [r4, #16]
 801357c:	2301      	movs	r3, #1
 801357e:	6163      	str	r3, [r4, #20]
 8013580:	b003      	add	sp, #12
 8013582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013584:	ab01      	add	r3, sp, #4
 8013586:	466a      	mov	r2, sp
 8013588:	f7ff ffc8 	bl	801351c <__swhatbuf_r>
 801358c:	9f00      	ldr	r7, [sp, #0]
 801358e:	4605      	mov	r5, r0
 8013590:	4639      	mov	r1, r7
 8013592:	4630      	mov	r0, r6
 8013594:	f7fe fed4 	bl	8012340 <_malloc_r>
 8013598:	b948      	cbnz	r0, 80135ae <__smakebuf_r+0x46>
 801359a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801359e:	059a      	lsls	r2, r3, #22
 80135a0:	d4ee      	bmi.n	8013580 <__smakebuf_r+0x18>
 80135a2:	f023 0303 	bic.w	r3, r3, #3
 80135a6:	f043 0302 	orr.w	r3, r3, #2
 80135aa:	81a3      	strh	r3, [r4, #12]
 80135ac:	e7e2      	b.n	8013574 <__smakebuf_r+0xc>
 80135ae:	89a3      	ldrh	r3, [r4, #12]
 80135b0:	6020      	str	r0, [r4, #0]
 80135b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135b6:	81a3      	strh	r3, [r4, #12]
 80135b8:	9b01      	ldr	r3, [sp, #4]
 80135ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80135be:	b15b      	cbz	r3, 80135d8 <__smakebuf_r+0x70>
 80135c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135c4:	4630      	mov	r0, r6
 80135c6:	f000 f81d 	bl	8013604 <_isatty_r>
 80135ca:	b128      	cbz	r0, 80135d8 <__smakebuf_r+0x70>
 80135cc:	89a3      	ldrh	r3, [r4, #12]
 80135ce:	f023 0303 	bic.w	r3, r3, #3
 80135d2:	f043 0301 	orr.w	r3, r3, #1
 80135d6:	81a3      	strh	r3, [r4, #12]
 80135d8:	89a3      	ldrh	r3, [r4, #12]
 80135da:	431d      	orrs	r5, r3
 80135dc:	81a5      	strh	r5, [r4, #12]
 80135de:	e7cf      	b.n	8013580 <__smakebuf_r+0x18>

080135e0 <_fstat_r>:
 80135e0:	b538      	push	{r3, r4, r5, lr}
 80135e2:	4d07      	ldr	r5, [pc, #28]	@ (8013600 <_fstat_r+0x20>)
 80135e4:	2300      	movs	r3, #0
 80135e6:	4604      	mov	r4, r0
 80135e8:	4608      	mov	r0, r1
 80135ea:	4611      	mov	r1, r2
 80135ec:	602b      	str	r3, [r5, #0]
 80135ee:	f7ef fc0b 	bl	8002e08 <_fstat>
 80135f2:	1c43      	adds	r3, r0, #1
 80135f4:	d102      	bne.n	80135fc <_fstat_r+0x1c>
 80135f6:	682b      	ldr	r3, [r5, #0]
 80135f8:	b103      	cbz	r3, 80135fc <_fstat_r+0x1c>
 80135fa:	6023      	str	r3, [r4, #0]
 80135fc:	bd38      	pop	{r3, r4, r5, pc}
 80135fe:	bf00      	nop
 8013600:	20006798 	.word	0x20006798

08013604 <_isatty_r>:
 8013604:	b538      	push	{r3, r4, r5, lr}
 8013606:	4d06      	ldr	r5, [pc, #24]	@ (8013620 <_isatty_r+0x1c>)
 8013608:	2300      	movs	r3, #0
 801360a:	4604      	mov	r4, r0
 801360c:	4608      	mov	r0, r1
 801360e:	602b      	str	r3, [r5, #0]
 8013610:	f7ef fc0a 	bl	8002e28 <_isatty>
 8013614:	1c43      	adds	r3, r0, #1
 8013616:	d102      	bne.n	801361e <_isatty_r+0x1a>
 8013618:	682b      	ldr	r3, [r5, #0]
 801361a:	b103      	cbz	r3, 801361e <_isatty_r+0x1a>
 801361c:	6023      	str	r3, [r4, #0]
 801361e:	bd38      	pop	{r3, r4, r5, pc}
 8013620:	20006798 	.word	0x20006798

08013624 <_init>:
 8013624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013626:	bf00      	nop
 8013628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801362a:	bc08      	pop	{r3}
 801362c:	469e      	mov	lr, r3
 801362e:	4770      	bx	lr

08013630 <_fini>:
 8013630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013632:	bf00      	nop
 8013634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013636:	bc08      	pop	{r3}
 8013638:	469e      	mov	lr, r3
 801363a:	4770      	bx	lr
